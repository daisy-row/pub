{"id":"38253274967","type":"IssueCommentEvent","actor":{"id":3984960,"login":"mkannwischer","display_login":"mkannwischer","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","avatar_url":"https://avatars.githubusercontent.com/u/3984960?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/33","id":2283654694,"node_id":"I_kwDOLh-nxs6IHc4m","number":33,"title":"Optimal number of Keccak-f1600 lanes","user":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},"assignees":[{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false}],"milestone":null,"comments":5,"created_at":"2024-05-07T15:27:11Z","updated_at":"2024-05-10T03:29:55Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"## Optimal number of `Keccak-f1600` lanes \r\n\r\nSHAKE128 function is used in `gen_matrix` function with `KYBER_K = 2,3,4`. \r\n\r\nHere is the C reference implementation:\r\n```c\r\n    for (i = 0; i < KYBER_K; i++) {\r\n        for (j = 0; j < KYBER_K; j++) {\r\n            if (transposed) {\r\n                xof_absorb(&state, seed, i, j);\r\n            } else {\r\n                xof_absorb(&state, seed, j, i);\r\n            }\r\n\r\n            xof_squeezeblocks(buf, GEN_MATRIX_NBLOCKS, &state);\r\n            buflen = GEN_MATRIX_NBLOCKS * XOF_BLOCKBYTES;\r\n            ctr = rej_uniform(a[i].vec[j].coeffs, KYBER_N, buf, buflen);\r\n```\r\n\r\nThe number of `xof_absorb` (`SHAKE128_Absorb`) are `KYBER_K x KYBER_K`. Thus, the two for loops will need: \r\n- 4 when `KYBER_K = 2`.\r\n- 9 when `KYBER_K = 3`.\r\n- 16 when `KYBER_K = 4`. \r\n\r\nThe output state of `xof_absorb` will be used in `xof_sqeezeblock` and send to sampling function `reject_uniform()`.\r\nWhen the counter of `reject_uniform()` does not meet the size of vector KYBER_N (256), an additional squeeze is needed until the sampling fulfill the vector KYBER_N. \r\n\r\n```c\r\n        while (ctr < KYBER_N) {\r\n                off = buflen % 3;\r\n                for (k = 0; k < off; k++) {\r\n                    buf[k] = buf[buflen - off + k];\r\n                }\r\n                xof_squeezeblocks(buf + off, 1, &state);\r\n                buflen = off + XOF_BLOCKBYTES;\r\n                ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);\r\n            }\r\n```\r\n\r\nAccording to Table 1 in [Hanno Becker and Matthias Kannwischer paper](https://kannwischer.eu/papers/2022_armv8keccak.pdf)\r\n\r\nIt shows: \r\n\r\n- x2 (2 times Keccak in a single call) is not optimal. \r\n- x3 (3 times Keccak in a single call) is better than x2, suitable for `KYBER_K = 3`.\r\n- x4 (4 times Keccak in a single call) is better than x2, suitable for `KYBER_K = 2, 4`. \r\n\r\nOf course, the number are varies depend on the ARM processor, the relative ranking between x2-x3, x2-x4 stay the same. \r\nI had my benchmark in the past in Apple M1 shows that `x2` is better than `x4`, but the different is somewhat small, and the differences contribute very little to the overall speed-up of Kyber on Apple M1. So I still think using `x4` is optimal for many ARM CPUs. \r\n\r\nMy conclusion: \r\n- `KYBER_K = 2,4`, we use x4. \r\n- `KYBER_K = 3`, we use x3.\r\n\r\nWhat do you think? @mkannwischer @hanno \r\n\r\n## Optimal memory `Keccak-f1600` layout:\r\n\r\nClosely related to the implementation of Keccak-f1600, the memory layout will help make the load/store easier/faster. \r\nTwo choices of memory layout: \r\n\r\n1. Vector style: Vector 1 | Vector 2 .... as in the default C implementation. To load prepare the memory for Keccak, one must cover it to lane style, to store as vector style, one must convert from lane style back to vector style.\r\n2. Lane style. There is no need to prepare the memory, but for the case we need vector style, we will need additional function to convert from lane style to vector style (which can be embedded in other function calls).\r\n  a. x3: `Line 1 | Line 2 | Line 3 | Line 1 | Line 2 | Line 3 | .. and repeat`\r\n  b. x4: `Line 1 | Line 2 | Line 3 | Line 4 | Line 1 | Line 2 | Line 3 | Line 4 | ... and repeat`.\r\n\r\nThe 2. approach seem optimal to me. What do you think? @mkannwischer @hanno-becker \r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2103792968","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/33#issuecomment-2103792968","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33","id":2103792968,"node_id":"IC_kwDOLh-nxs59ZVVI","user":{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},"created_at":"2024-05-10T03:29:54Z","updated_at":"2024-05-10T03:29:54Z","author_association":"CONTRIBUTOR","body":"Sounds good to me. That would also be compatible with the AVX2 implementation. Maybe the high level code can be taken from there already. \r\n\r\nWe could start with one of the implementations from https://gitlab.com/arm-research/security/pqax/-/tree/master/asm/manual/keccak_f1600?ref_type=heads. In the medium term we probably want to do the interleaving using SLOTHY - should not be too hard to achieve for the uArchs already supported by SLOTHY. ","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2103792968/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-05-10T03:29:55Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"38254283158","type":"IssueCommentEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/28","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/28/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/28/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/28/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/28","id":2211123145,"node_id":"I_kwDOLh-nxs6Dyw_J","number":28,"title":"Add benchmarking code","user":{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2024-03-27T15:33:24Z","updated_at":"2024-05-10T04:38:38Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I'd like to have benchmarking code here for at least the following 3 cases\r\n- `PMU` cycles for platforms \r\n- `PERF` performance for systems where access to the `PMU` cycles counters is not possible, but perf is compiled into the Kernel.\r\n-  `APPLE`  for Apple Mx cores based on https://gist.github.com/dougallj/5bafb113492047c865c0c8cfbc930155#file-m1_robsize-c-L390\r\n\r\nhttps://github.com/slothy-optimizer/pqax has all that and is licensed under MIT which means we can take some of that code.\r\n\r\nAm I missing something?\r\n\r\nAt some point it would be nice to have automatic benchmarking on a number of platforms at some point. ","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/28/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/28/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2103848861","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/28#issuecomment-2103848861","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/28","id":2103848861,"node_id":"IC_kwDOLh-nxs59Zi-d","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"created_at":"2024-05-10T04:38:37Z","updated_at":"2024-05-10T04:38:37Z","author_association":"CONTRIBUTOR","body":"Let's separate the issue of provisioning the benchmarking code from provisioning benchmarking automation / CI.","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2103848861/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-05-10T04:38:39Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"38254643564","type":"IssueCommentEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/33","id":2283654694,"node_id":"I_kwDOLh-nxs6IHc4m","number":33,"title":"Optimal number of Keccak-f1600 lanes","user":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},"assignees":[{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false}],"milestone":null,"comments":6,"created_at":"2024-05-07T15:27:11Z","updated_at":"2024-05-10T05:01:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"## Optimal number of `Keccak-f1600` lanes \r\n\r\nSHAKE128 function is used in `gen_matrix` function with `KYBER_K = 2,3,4`. \r\n\r\nHere is the C reference implementation:\r\n```c\r\n    for (i = 0; i < KYBER_K; i++) {\r\n        for (j = 0; j < KYBER_K; j++) {\r\n            if (transposed) {\r\n                xof_absorb(&state, seed, i, j);\r\n            } else {\r\n                xof_absorb(&state, seed, j, i);\r\n            }\r\n\r\n            xof_squeezeblocks(buf, GEN_MATRIX_NBLOCKS, &state);\r\n            buflen = GEN_MATRIX_NBLOCKS * XOF_BLOCKBYTES;\r\n            ctr = rej_uniform(a[i].vec[j].coeffs, KYBER_N, buf, buflen);\r\n```\r\n\r\nThe number of `xof_absorb` (`SHAKE128_Absorb`) are `KYBER_K x KYBER_K`. Thus, the two for loops will need: \r\n- 4 when `KYBER_K = 2`.\r\n- 9 when `KYBER_K = 3`.\r\n- 16 when `KYBER_K = 4`. \r\n\r\nThe output state of `xof_absorb` will be used in `xof_sqeezeblock` and send to sampling function `reject_uniform()`.\r\nWhen the counter of `reject_uniform()` does not meet the size of vector KYBER_N (256), an additional squeeze is needed until the sampling fulfill the vector KYBER_N. \r\n\r\n```c\r\n        while (ctr < KYBER_N) {\r\n                off = buflen % 3;\r\n                for (k = 0; k < off; k++) {\r\n                    buf[k] = buf[buflen - off + k];\r\n                }\r\n                xof_squeezeblocks(buf + off, 1, &state);\r\n                buflen = off + XOF_BLOCKBYTES;\r\n                ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);\r\n            }\r\n```\r\n\r\nAccording to Table 1 in [Hanno Becker and Matthias Kannwischer paper](https://kannwischer.eu/papers/2022_armv8keccak.pdf)\r\n\r\nIt shows: \r\n\r\n- x2 (2 times Keccak in a single call) is not optimal. \r\n- x3 (3 times Keccak in a single call) is better than x2, suitable for `KYBER_K = 3`.\r\n- x4 (4 times Keccak in a single call) is better than x2, suitable for `KYBER_K = 2, 4`. \r\n\r\nOf course, the number are varies depend on the ARM processor, the relative ranking between x2-x3, x2-x4 stay the same. \r\nI had my benchmark in the past in Apple M1 shows that `x2` is better than `x4`, but the different is somewhat small, and the differences contribute very little to the overall speed-up of Kyber on Apple M1. So I still think using `x4` is optimal for many ARM CPUs. \r\n\r\nMy conclusion: \r\n- `KYBER_K = 2,4`, we use x4. \r\n- `KYBER_K = 3`, we use x3.\r\n\r\nWhat do you think? @mkannwischer @hanno \r\n\r\n## Optimal memory `Keccak-f1600` layout:\r\n\r\nClosely related to the implementation of Keccak-f1600, the memory layout will help make the load/store easier/faster. \r\nTwo choices of memory layout: \r\n\r\n1. Vector style: Vector 1 | Vector 2 .... as in the default C implementation. To load prepare the memory for Keccak, one must cover it to lane style, to store as vector style, one must convert from lane style back to vector style.\r\n2. Lane style. There is no need to prepare the memory, but for the case we need vector style, we will need additional function to convert from lane style to vector style (which can be embedded in other function calls).\r\n  a. x3: `Line 1 | Line 2 | Line 3 | Line 1 | Line 2 | Line 3 | .. and repeat`\r\n  b. x4: `Line 1 | Line 2 | Line 3 | Line 4 | Line 1 | Line 2 | Line 3 | Line 4 | ... and repeat`.\r\n\r\nThe 2. approach seem optimal to me. What do you think? @mkannwischer @hanno-becker \r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2103867977","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/33#issuecomment-2103867977","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33","id":2103867977,"node_id":"IC_kwDOLh-nxs59ZnpJ","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"created_at":"2024-05-10T05:01:04Z","updated_at":"2024-05-10T05:01:04Z","author_association":"CONTRIBUTOR","body":"I created #35 and #36 for this.","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2103867977/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-05-10T05:01:06Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
