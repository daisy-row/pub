{"id":"39347221181","type":"IssueCommentEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/63","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/63/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/63/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/63/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/63","id":2356092838,"node_id":"I_kwDOLh-nxs6Mbx-m","number":63,"title":"Regarding the definition of \"Assurance\"","user":{"login":"vincentvbh","id":22185577,"node_id":"MDQ6VXNlcjIyMTg1NTc3","avatar_url":"https://avatars.githubusercontent.com/u/22185577?v=4","gravatar_id":"","url":"https://api.github.com/users/vincentvbh","html_url":"https://github.com/vincentvbh","followers_url":"https://api.github.com/users/vincentvbh/followers","following_url":"https://api.github.com/users/vincentvbh/following{/other_user}","gists_url":"https://api.github.com/users/vincentvbh/gists{/gist_id}","starred_url":"https://api.github.com/users/vincentvbh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vincentvbh/subscriptions","organizations_url":"https://api.github.com/users/vincentvbh/orgs","repos_url":"https://api.github.com/users/vincentvbh/repos","events_url":"https://api.github.com/users/vincentvbh/events{/privacy}","received_events_url":"https://api.github.com/users/vincentvbh/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2024-06-17T00:45:35Z","updated_at":"2024-06-17T03:58:33Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Dear MLKEM-C-AARCH64 maintainers,\r\n\r\nI think the definition of \"Assurance\" doesn't reflect the state-of-the-art development in the literature.\r\n\"Clean\" is not a necessity for a program to be amenable to verification. There are continuous efforts to formally verify high-performance, highly complicated (extensively shuffled), manually written, and highly scalable (in the case of power-of-two-size NTT/iNTT) assembly code.\r\n\r\nIn the second item of \"tensions\",\r\nit says \"Optimal code is complex (e.g. relying on handwritten assembly), impeding maintainenance and amenability for audit or verification.\" (maintainenance -> maintenance). This was already resolved for some of the frequently used operations, such as Keccak permutation by https://eprint.iacr.org/2023/1861, and NTT by https://tches.iacr.org/index.php/TCHES/article/view/9838.\r\n\r\nRecently, the latest manually shuffled NTT/iNTT for Kyber (https://github.com/neon-ntt/neon-ntt/blob/master/kyber768/ntt/__asm_NTT.S) has been formally verified with the tool CryptoLine. See https://github.com/fmlab-iis/cryptoline/commit/1e0173c2a3e662961f71f707c6623c3abc19515c. \r\nReadability for the general audience is not a requirement for formal verification (I'm sure that the resulting programs are readable for the authors if they put effort into structuring the extensively optimized assembly programs). This is one of the goals of CryptoLine: formally verifying assembly programs optimized \"in the wild.\" \r\nAs for maintenance, you don't have to worry about that. I'm the author of the latest NTT/iNTT for Kyber and I only spent two afternoons on shuffling (the resulting programs perform comparably to the programs by SLOTHY on Cortex-A72 and Apple M1 Pro). \r\n\r\nI believe users of this repository should be informed about the above, so they don't have to worry about something that is already addressed.\r\n\r\nVincent\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/63/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/63/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172147819","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/63#issuecomment-2172147819","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/63","id":2172147819,"node_id":"IC_kwDOLh-nxs6BeFhr","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"created_at":"2024-06-17T03:58:32Z","updated_at":"2024-06-17T03:58:32Z","author_association":"CONTRIBUTOR","body":"Hi Vincent,\r\n\r\nThanks for chiming in, and congratulations for verifying your NTT!\r\n\r\nYou make fair points, there are tools such as CryptoLine that can verify highly optimized and interleaved implementations. We will be considering those for MLKEM-C-AArch64 as well, but it's too early to say anything definite.\r\n\r\nAs for maintenance and amenability to audit, I'd maintain that there's added value in clean code: If you want to understand what the code is doing, for example to experiment with changes, it's much easier on the basis of clean code. Moreover, re-optimizing the code after making such changes, or when targeting a new microarchitecture, is considerably less effort with automated optimization.\r\n\r\nThis does not mean that manually optimized + verified code has no place or is somehow a flawed approach -- not at all. Achieving highly optimized + formally verified code, like you have done for the NTT or e.g. [s2n-bignum](https://github.com/awslabs/s2n-bignum) provides for many classical cryptographic routines, is a remarkable feat. Yet, if we have a chance to _additionally_ achieve transparency and scalability through clean code and automated optimization, I'd like us to have a shot at it. It certainly is possible, e.g. s2n-bigum now has a verified and automatically optimized implementation of x25519 (see [this RWC'24 talk](https://iacr.org/submit/files/slides/2024/rwc/rwc2024/38/slides.pdf)).\r\n\r\nHow things turn out for MLKEM-C-AArch64 is TBD, it's still early days.\r\n\r\nThanks again for your input and the references,\r\nHanno","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172147819/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-17T03:58:33Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39347404406","type":"IssueCommentEvent","actor":{"id":3984960,"login":"mkannwischer","display_login":"mkannwischer","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","avatar_url":"https://avatars.githubusercontent.com/u/3984960?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/63","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/63/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/63/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/63/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/63","id":2356092838,"node_id":"I_kwDOLh-nxs6Mbx-m","number":63,"title":"Regarding the definition of \"Assurance\"","user":{"login":"vincentvbh","id":22185577,"node_id":"MDQ6VXNlcjIyMTg1NTc3","avatar_url":"https://avatars.githubusercontent.com/u/22185577?v=4","gravatar_id":"","url":"https://api.github.com/users/vincentvbh","html_url":"https://github.com/vincentvbh","followers_url":"https://api.github.com/users/vincentvbh/followers","following_url":"https://api.github.com/users/vincentvbh/following{/other_user}","gists_url":"https://api.github.com/users/vincentvbh/gists{/gist_id}","starred_url":"https://api.github.com/users/vincentvbh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vincentvbh/subscriptions","organizations_url":"https://api.github.com/users/vincentvbh/orgs","repos_url":"https://api.github.com/users/vincentvbh/repos","events_url":"https://api.github.com/users/vincentvbh/events{/privacy}","received_events_url":"https://api.github.com/users/vincentvbh/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2024-06-17T00:45:35Z","updated_at":"2024-06-17T04:10:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Dear MLKEM-C-AARCH64 maintainers,\r\n\r\nI think the definition of \"Assurance\" doesn't reflect the state-of-the-art development in the literature.\r\n\"Clean\" is not a necessity for a program to be amenable to verification. There are continuous efforts to formally verify high-performance, highly complicated (extensively shuffled), manually written, and highly scalable (in the case of power-of-two-size NTT/iNTT) assembly code.\r\n\r\nIn the second item of \"tensions\",\r\nit says \"Optimal code is complex (e.g. relying on handwritten assembly), impeding maintainenance and amenability for audit or verification.\" (maintainenance -> maintenance). This was already resolved for some of the frequently used operations, such as Keccak permutation by https://eprint.iacr.org/2023/1861, and NTT by https://tches.iacr.org/index.php/TCHES/article/view/9838.\r\n\r\nRecently, the latest manually shuffled NTT/iNTT for Kyber (https://github.com/neon-ntt/neon-ntt/blob/master/kyber768/ntt/__asm_NTT.S) has been formally verified with the tool CryptoLine. See https://github.com/fmlab-iis/cryptoline/commit/1e0173c2a3e662961f71f707c6623c3abc19515c. \r\nReadability for the general audience is not a requirement for formal verification (I'm sure that the resulting programs are readable for the authors if they put effort into structuring the extensively optimized assembly programs). This is one of the goals of CryptoLine: formally verifying assembly programs optimized \"in the wild.\" \r\nAs for maintenance, you don't have to worry about that. I'm the author of the latest NTT/iNTT for Kyber and I only spent two afternoons on shuffling (the resulting programs perform comparably to the programs by SLOTHY on Cortex-A72 and Apple M1 Pro). \r\n\r\nI believe users of this repository should be informed about the above, so they don't have to worry about something that is already addressed.\r\n\r\nVincent\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/63/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/63/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172176996","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/63#issuecomment-2172176996","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/63","id":2172176996,"node_id":"IC_kwDOLh-nxs6BeMpk","user":{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},"created_at":"2024-06-17T04:10:19Z","updated_at":"2024-06-17T04:10:19Z","author_association":"CONTRIBUTOR","body":"Thanks @vincentvbh for the pointer! \r\n\r\nI agree with @hanno-becker on this that there is value in clean code and if there is formally-verified clean code (of comparable speed) it is preferrable.\r\nI think we are all in agreement that using formally-verified code is preferrable over using non-verified code. That's also reflected in recent discussions on what level of assurance mlkem-c-aarch64 should aim for - we concluded that all assembly has to be verified. We have not settled on a formal verification toolchain yet though. \r\n\r\nAnother aspect is that for this project we are targeting a range of different uArchs and it's much easier to leave microarchitectural optimization to an automated tool. ","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172176996/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-17T04:10:20Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39347507677","type":"IssueCommentEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/59","id":2350964817,"node_id":"I_kwDOLh-nxs6MIOBR","number":59,"title":"Can we use bsd brace style please for compatibility with CBMC contracts?","user":{"login":"rod-chapman","id":22537733,"node_id":"MDQ6VXNlcjIyNTM3NzMz","avatar_url":"https://avatars.githubusercontent.com/u/22537733?v=4","gravatar_id":"","url":"https://api.github.com/users/rod-chapman","html_url":"https://github.com/rod-chapman","followers_url":"https://api.github.com/users/rod-chapman/followers","following_url":"https://api.github.com/users/rod-chapman/following{/other_user}","gists_url":"https://api.github.com/users/rod-chapman/gists{/gist_id}","starred_url":"https://api.github.com/users/rod-chapman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rod-chapman/subscriptions","organizations_url":"https://api.github.com/users/rod-chapman/orgs","repos_url":"https://api.github.com/users/rod-chapman/repos","events_url":"https://api.github.com/users/rod-chapman/events{/privacy}","received_events_url":"https://api.github.com/users/rod-chapman/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2024-06-13T12:01:49Z","updated_at":"2024-06-17T04:17:29Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I would like to propose that we switch astyle's indenting mode from \"google\" to \"bsd\".\r\n\r\nThe \"google\" style places the opening brace on the same line as the preceeding construct, so it appears on the same line as the final term of a loop invariant contract for CBMC. For example, formatting poly.c yields:\r\n\r\n```\r\n    for (size_t i = 0; i < KYBER_N / 8; i++)\r\n        __CPROVER_assigns(i, u, __CPROVER_object_whole(t), __CPROVER_object_whole(r))\r\n        __CPROVER_loop_invariant(i <= KYBER_N) {\r\n```\r\nwhich makes it hard to edit the invariant without accidentially losing or mis-placing the opening brace.\r\n\r\nWith \"bsd\" style, this comes out as:\r\n\r\n```\r\n    for (size_t i = 0; i < KYBER_N / 8; i++)\r\n        __CPROVER_assigns(i, u, __CPROVER_object_whole(t), __CPROVER_object_whole(r))\r\n        __CPROVER_loop_invariant(i <= KYBER_N)\r\n    {\r\n```\r\nso that lines of the invariant can be added, removed or edited without fear of damaging the location of the brace.\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172182356","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/59#issuecomment-2172182356","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59","id":2172182356,"node_id":"IC_kwDOLh-nxs6BeN9U","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"created_at":"2024-06-17T04:17:28Z","updated_at":"2024-06-17T04:17:28Z","author_association":"CONTRIBUTOR","body":"Ok, @rod-chapman fire up a PR when you've got the time.","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172182356/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-17T04:17:30Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39347518261","type":"IssueCommentEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/39","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/39/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/39/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/39/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/39","id":2309604745,"node_id":"I_kwDOLh-nxs6JqcWJ","number":39,"title":"Explore the use of CBMC","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2024-05-22T05:29:11Z","updated_at":"2024-06-17T04:18:16Z","closed_at":"2024-06-17T04:18:15Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Relates to: #37 \r\n\r\n[CBMC](https://github.com/diffblue/cbmc) can be used to verify the absence of certain classes of undefined behaviour in C programs. This issue asks for an exploration of the potential use of CBMC for hardening of mlkem-c-aarch64.\r\n\r\nAcceptance criteria:\r\n* PR opened illustrating the use of CBMC for one or more selected C functions in mlkem-c-aarch64.\r\n* Decision made on whether to use CBMC for wider parts of mlkem-c-aarch64.","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/39/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/39/timeline","performed_via_github_app":null,"state_reason":"completed"},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172182985","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/39#issuecomment-2172182985","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/39","id":2172182985,"node_id":"IC_kwDOLh-nxs6BeOHJ","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"created_at":"2024-06-17T04:18:15Z","updated_at":"2024-06-17T04:18:15Z","author_association":"CONTRIBUTOR","body":"Initial investigation promising, we'll try to roll out CBMC more broadly.","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172182985/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-17T04:18:17Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39347523241","type":"IssueCommentEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/37","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/37/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/37/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/37/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/37","id":2296691746,"node_id":"I_kwDOLh-nxs6I5Lwi","number":37,"title":"Assurance Level","user":{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},"labels":[{"id":6707250796,"node_id":"LA_kwDOLh-nxs8AAAABj8iGbA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/documentation","name":"documentation","color":"0075ca","default":true,"description":"Improvements or additions to documentation"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":19,"created_at":"2024-05-15T01:54:51Z","updated_at":"2024-06-17T04:18:39Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"According to the [PQCP charter,](https://github.com/pq-code-package/tsc/blob/main/charter/charter-2024-01-29.pdf) the goal for projects within PQCP is to \r\n_build high-assurance production-ready software implementations of forthcoming post-quantum cryptography standards, starting with the ML-KEM algorithm_\r\n\r\nDuring the first [PQCP TSC meeting](https://github.com/pq-code-package/tsc/pull/53) it was discussed that we should be more explicit on what we mean by **high-assurance production-ready**. This differs between different sub-projects of PQCP and it would be good to come up with some assurance levels to unify between different project. \r\nFor the next TSC meeting (May 23), each sub-project should document the corresponding interpretation of high-assurance production-ready and document the intended level of assurance.\r\n\r\nLet's discuss here. ","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/37/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/37/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172183241","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/37#issuecomment-2172183241","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/37","id":2172183241,"node_id":"IC_kwDOLh-nxs6BeOLJ","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"created_at":"2024-06-17T04:18:38Z","updated_at":"2024-06-17T04:18:38Z","author_association":"CONTRIBUTOR","body":"Related: #63 ","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172183241/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-17T04:18:39Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39347657684","type":"IssueCommentEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/62","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/62/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/62/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/62/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/62","id":2352175069,"node_id":"PR_kwDOLh-nxs5ya0SM","number":62,"title":"Add Keccak X4 interface","user":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2024-06-13T22:44:58Z","updated_at":"2024-06-17T04:26:53Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/pulls/62","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/62","diff_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/62.diff","patch_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/62.patch","merged_at":null},"body":"# Add Keccak X4 interface. \r\n\r\nPotential optimization: \r\n\r\n- **Multiple Pass Squeezing**: Currently, if `rej_uniform` fails to sample the full vector size, it continues by squeezing a single Keccak lane. By rewriting this logic to append single Keccak calls into a single Keccak X-way call, CPU cycles can be saved. For simplicity, it is currently implemented as a single pass.\r\n\r\n### Next Steps:\r\n\r\n- Add Keccak_X4 assembly to replace the `keccak_absorb_x4keccak_squeezeblocks_x4` in `fips202x.c`.\r\n\r\nFixes #35","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/62/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/62/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172203146","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/62#issuecomment-2172203146","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/62","id":2172203146,"node_id":"IC_kwDOLh-nxs6BeTCK","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"created_at":"2024-06-17T04:26:52Z","updated_at":"2024-06-17T04:26:52Z","author_association":"CONTRIBUTOR","body":"@cothan Can you fix the CI and mark the PR as ready-for-review when you think it's in a good shape?","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172203146/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-17T04:26:53Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39347746423","type":"IssueCommentEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/53","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/53/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/53/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/53/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/53","id":2344603315,"node_id":"PR_kwDOLh-nxs5yA8bx","number":53,"title":"Introduce common coeff_signed_to_unsigned function in poly.c","user":{"login":"rod-chapman","id":22537733,"node_id":"MDQ6VXNlcjIyNTM3NzMz","avatar_url":"https://avatars.githubusercontent.com/u/22537733?v=4","gravatar_id":"","url":"https://api.github.com/users/rod-chapman","html_url":"https://github.com/rod-chapman","followers_url":"https://api.github.com/users/rod-chapman/followers","following_url":"https://api.github.com/users/rod-chapman/following{/other_user}","gists_url":"https://api.github.com/users/rod-chapman/gists{/gist_id}","starred_url":"https://api.github.com/users/rod-chapman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rod-chapman/subscriptions","organizations_url":"https://api.github.com/users/rod-chapman/orgs","repos_url":"https://api.github.com/users/rod-chapman/repos","events_url":"https://api.github.com/users/rod-chapman/events{/privacy}","received_events_url":"https://api.github.com/users/rod-chapman/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2024-06-10T18:45:14Z","updated_at":"2024-06-17T04:32:16Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/pulls/53","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/53","diff_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/53.diff","patch_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/53.patch","merged_at":null},"body":"This PR introduces a common \"coeff_signed_to_unsigned()\" function in poly.c, its contracts and verification thereof using CBMC. This function reduces repetition of the same idiom in poly.c and simplifies the calling code in poly_compress() and other functions.\r\n\r\nAdditionally, this PR adds contract-based proof of scalar_compress_q_16 and scalar_compress_q_32\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/53/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/53/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172217817","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/53#issuecomment-2172217817","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/53","id":2172217817,"node_id":"IC_kwDOLh-nxs6BeWnZ","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"created_at":"2024-06-17T04:32:14Z","updated_at":"2024-06-17T04:32:14Z","author_association":"CONTRIBUTOR","body":"@rod-chapman CBMC seems to be failing, can you have a look? Also, can you rebase on `main` and cleanup the history?","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172217817/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-17T04:32:16Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39350128361","type":"IssueCommentEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60","id":2351157841,"node_id":"PR_kwDOLh-nxs5yXVRR","number":60,"title":"Emulate arm64 binary on x86_64 machine","user":{"login":"potsrevennil","id":15379156,"node_id":"MDQ6VXNlcjE1Mzc5MTU2","avatar_url":"https://avatars.githubusercontent.com/u/15379156?v=4","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","html_url":"https://github.com/potsrevennil","followers_url":"https://api.github.com/users/potsrevennil/followers","following_url":"https://api.github.com/users/potsrevennil/following{/other_user}","gists_url":"https://api.github.com/users/potsrevennil/gists{/gist_id}","starred_url":"https://api.github.com/users/potsrevennil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/potsrevennil/subscriptions","organizations_url":"https://api.github.com/users/potsrevennil/orgs","repos_url":"https://api.github.com/users/potsrevennil/repos","events_url":"https://api.github.com/users/potsrevennil/events{/privacy}","received_events_url":"https://api.github.com/users/potsrevennil/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2024-06-13T13:26:38Z","updated_at":"2024-06-17T06:38:30Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/pulls/60","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60","diff_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60.diff","patch_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60.patch","merged_at":null},"body":"[//]: # (SPDX-License-Identifier: CC-BY-4.0)\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\nI added `scripts/tests` (should be able to be executed by simply typing `tests` in nix shell) for functional, kat and nistkat tests.\r\n\r\nThe script currently automatically detects the host system and decides to run natively on ARM64 machines or emulate on QEMU for x86_64 machines. We might want to add the capability to manually specify whether to run tests natively or on QEMU in the future. However, I don't think we need this functionality for now.\r\n\r\nUsage of the script is as follow:\r\n\r\n```\r\n> tests --help\r\nUsage: tests [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n\r\nCommands:\r\n  func     Run the functional tests for all parameter sets\r\n  kat      Run the kat tests for all parameter sets\r\n  nistkat  Run the nistkat tests for all parameter sets\r\n  run      Run the specified binary file\r\n\r\n> tests nistkat --help\r\nUsage: tests nistkat [OPTIONS]\r\n\r\nOptions:\r\n  -v, --verbose  Show verbose output or not\r\n  --help         Show this message and exit.\r\n```\r\n\r\nI have also added `black` as the Python formatter and updated the `format` and `lint` scripts to utilize it for checking the format of Python scripts. I don't have a strong opinion on the choice of Python formatter, so if there are any better suggestions, I am open to using them.\r\n\r\nI made CI continues even when some part of the tests failed as @hanno-becker suggested in https://github.com/pq-code-package/mlkem-c-aarch64/issues/48 (sorry about that I somehow missed the message last week).\r\n\r\n- **emulate arm64 binary on x86_64 machine**\r\n- **Output binaries to bin/ directory**\r\n- **add nistkat checksum back**\r\n- **use black for python formatting**\r\n- **add tests script for running a specify binary**\r\n- **factor out the common part of compiling and running a binary**\r\n- **add test command for func, nistkat and kat tests**\r\n- **compare tests result to the META file**\r\n- **add github step summary to tests script if the env var exists**\r\n- **update ci to use the tests script**\r\n- **cleanup**\r\n- **only add -static if is linux x86_64**\r\n- **still run kat/nistkat tests even if previous tests failed**\r\n\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review. -->\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172413876","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60#issuecomment-2172413876","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60","id":2172413876,"node_id":"IC_kwDOLh-nxs6BfGe0","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"created_at":"2024-06-17T06:38:29Z","updated_at":"2024-06-17T06:38:29Z","author_association":"CONTRIBUTOR","body":"@potsrevennil \r\n\r\nCurrently, I see the following in the CI log:\r\n```\r\nDEBUG > Emulating test/bin/gen_KAT512 with QEMU\r\n  CC      \r\nmlkem/poly.c: In function ‘pqcrystals_kyber512_ref_scalar_compress_q_16’:\r\nmlkem/poly.c:27: warning: ignoring ‘#pragma CPROVER check’ [-Wunknown-pragmas]\r\n   27 | #pragma CPROVER check push\r\n```\r\n\r\nIs there a way to show the full command line?","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172413876/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-17T06:38:30Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39350267443","type":"IssueCommentEvent","actor":{"id":15379156,"login":"potsrevennil","display_login":"potsrevennil","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","avatar_url":"https://avatars.githubusercontent.com/u/15379156?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60","id":2351157841,"node_id":"PR_kwDOLh-nxs5yXVRR","number":60,"title":"Emulate arm64 binary on x86_64 machine","user":{"login":"potsrevennil","id":15379156,"node_id":"MDQ6VXNlcjE1Mzc5MTU2","avatar_url":"https://avatars.githubusercontent.com/u/15379156?v=4","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","html_url":"https://github.com/potsrevennil","followers_url":"https://api.github.com/users/potsrevennil/followers","following_url":"https://api.github.com/users/potsrevennil/following{/other_user}","gists_url":"https://api.github.com/users/potsrevennil/gists{/gist_id}","starred_url":"https://api.github.com/users/potsrevennil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/potsrevennil/subscriptions","organizations_url":"https://api.github.com/users/potsrevennil/orgs","repos_url":"https://api.github.com/users/potsrevennil/repos","events_url":"https://api.github.com/users/potsrevennil/events{/privacy}","received_events_url":"https://api.github.com/users/potsrevennil/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2024-06-13T13:26:38Z","updated_at":"2024-06-17T06:44:28Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/pulls/60","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60","diff_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60.diff","patch_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60.patch","merged_at":null},"body":"[//]: # (SPDX-License-Identifier: CC-BY-4.0)\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\nI added `scripts/tests` (should be able to be executed by simply typing `tests` in nix shell) for functional, kat and nistkat tests.\r\n\r\nThe script currently automatically detects the host system and decides to run natively on ARM64 machines or emulate on QEMU for x86_64 machines. We might want to add the capability to manually specify whether to run tests natively or on QEMU in the future. However, I don't think we need this functionality for now.\r\n\r\nUsage of the script is as follow:\r\n\r\n```\r\n> tests --help\r\nUsage: tests [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n\r\nCommands:\r\n  func     Run the functional tests for all parameter sets\r\n  kat      Run the kat tests for all parameter sets\r\n  nistkat  Run the nistkat tests for all parameter sets\r\n  run      Run the specified binary file\r\n\r\n> tests nistkat --help\r\nUsage: tests nistkat [OPTIONS]\r\n\r\nOptions:\r\n  -v, --verbose  Show verbose output or not\r\n  --help         Show this message and exit.\r\n```\r\n\r\nI have also added `black` as the Python formatter and updated the `format` and `lint` scripts to utilize it for checking the format of Python scripts. I don't have a strong opinion on the choice of Python formatter, so if there are any better suggestions, I am open to using them.\r\n\r\nI made CI continues even when some part of the tests failed as @hanno-becker suggested in https://github.com/pq-code-package/mlkem-c-aarch64/issues/48 (sorry about that I somehow missed the message last week).\r\n\r\n- **emulate arm64 binary on x86_64 machine**\r\n- **Output binaries to bin/ directory**\r\n- **add nistkat checksum back**\r\n- **use black for python formatting**\r\n- **add tests script for running a specify binary**\r\n- **factor out the common part of compiling and running a binary**\r\n- **add test command for func, nistkat and kat tests**\r\n- **compare tests result to the META file**\r\n- **add github step summary to tests script if the env var exists**\r\n- **update ci to use the tests script**\r\n- **cleanup**\r\n- **only add -static if is linux x86_64**\r\n- **still run kat/nistkat tests even if previous tests failed**\r\n\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review. -->\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172422084","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60#issuecomment-2172422084","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60","id":2172422084,"node_id":"IC_kwDOLh-nxs6BfIfE","user":{"login":"potsrevennil","id":15379156,"node_id":"MDQ6VXNlcjE1Mzc5MTU2","avatar_url":"https://avatars.githubusercontent.com/u/15379156?v=4","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","html_url":"https://github.com/potsrevennil","followers_url":"https://api.github.com/users/potsrevennil/followers","following_url":"https://api.github.com/users/potsrevennil/following{/other_user}","gists_url":"https://api.github.com/users/potsrevennil/gists{/gist_id}","starred_url":"https://api.github.com/users/potsrevennil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/potsrevennil/subscriptions","organizations_url":"https://api.github.com/users/potsrevennil/orgs","repos_url":"https://api.github.com/users/potsrevennil/repos","events_url":"https://api.github.com/users/potsrevennil/events{/privacy}","received_events_url":"https://api.github.com/users/potsrevennil/received_events","type":"User","site_admin":false},"created_at":"2024-06-17T06:44:26Z","updated_at":"2024-06-17T06:44:26Z","author_association":"CONTRIBUTOR","body":"Ah, yes! Let me see how to do it","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172422084/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-17T06:44:28Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39352550860","type":"IssueCommentEvent","actor":{"id":22537733,"login":"rod-chapman","display_login":"rod-chapman","gravatar_id":"","url":"https://api.github.com/users/rod-chapman","avatar_url":"https://avatars.githubusercontent.com/u/22537733?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/59","id":2350964817,"node_id":"I_kwDOLh-nxs6MIOBR","number":59,"title":"Can we use bsd brace style please for compatibility with CBMC contracts?","user":{"login":"rod-chapman","id":22537733,"node_id":"MDQ6VXNlcjIyNTM3NzMz","avatar_url":"https://avatars.githubusercontent.com/u/22537733?v=4","gravatar_id":"","url":"https://api.github.com/users/rod-chapman","html_url":"https://github.com/rod-chapman","followers_url":"https://api.github.com/users/rod-chapman/followers","following_url":"https://api.github.com/users/rod-chapman/following{/other_user}","gists_url":"https://api.github.com/users/rod-chapman/gists{/gist_id}","starred_url":"https://api.github.com/users/rod-chapman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rod-chapman/subscriptions","organizations_url":"https://api.github.com/users/rod-chapman/orgs","repos_url":"https://api.github.com/users/rod-chapman/repos","events_url":"https://api.github.com/users/rod-chapman/events{/privacy}","received_events_url":"https://api.github.com/users/rod-chapman/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2024-06-13T12:01:49Z","updated_at":"2024-06-17T08:06:23Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I would like to propose that we switch astyle's indenting mode from \"google\" to \"bsd\".\r\n\r\nThe \"google\" style places the opening brace on the same line as the preceeding construct, so it appears on the same line as the final term of a loop invariant contract for CBMC. For example, formatting poly.c yields:\r\n\r\n```\r\n    for (size_t i = 0; i < KYBER_N / 8; i++)\r\n        __CPROVER_assigns(i, u, __CPROVER_object_whole(t), __CPROVER_object_whole(r))\r\n        __CPROVER_loop_invariant(i <= KYBER_N) {\r\n```\r\nwhich makes it hard to edit the invariant without accidentially losing or mis-placing the opening brace.\r\n\r\nWith \"bsd\" style, this comes out as:\r\n\r\n```\r\n    for (size_t i = 0; i < KYBER_N / 8; i++)\r\n        __CPROVER_assigns(i, u, __CPROVER_object_whole(t), __CPROVER_object_whole(r))\r\n        __CPROVER_loop_invariant(i <= KYBER_N)\r\n    {\r\n```\r\nso that lines of the invariant can be added, removed or edited without fear of damaging the location of the brace.\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172578572","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/59#issuecomment-2172578572","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59","id":2172578572,"node_id":"IC_kwDOLh-nxs6BfusM","user":{"login":"rod-chapman","id":22537733,"node_id":"MDQ6VXNlcjIyNTM3NzMz","avatar_url":"https://avatars.githubusercontent.com/u/22537733?v=4","gravatar_id":"","url":"https://api.github.com/users/rod-chapman","html_url":"https://github.com/rod-chapman","followers_url":"https://api.github.com/users/rod-chapman/followers","following_url":"https://api.github.com/users/rod-chapman/following{/other_user}","gists_url":"https://api.github.com/users/rod-chapman/gists{/gist_id}","starred_url":"https://api.github.com/users/rod-chapman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rod-chapman/subscriptions","organizations_url":"https://api.github.com/users/rod-chapman/orgs","repos_url":"https://api.github.com/users/rod-chapman/repos","events_url":"https://api.github.com/users/rod-chapman/events{/privacy}","received_events_url":"https://api.github.com/users/rod-chapman/received_events","type":"User","site_admin":false},"created_at":"2024-06-17T08:06:22Z","updated_at":"2024-06-17T08:06:22Z","author_association":"CONTRIBUTOR","body":"Will do. Just catching up.","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172578572/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-17T08:06:23Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39353731268","type":"IssueCommentEvent","actor":{"id":22537733,"login":"rod-chapman","display_login":"rod-chapman","gravatar_id":"","url":"https://api.github.com/users/rod-chapman","avatar_url":"https://avatars.githubusercontent.com/u/22537733?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/59","id":2350964817,"node_id":"I_kwDOLh-nxs6MIOBR","number":59,"title":"Can we use bsd brace style please for compatibility with CBMC contracts?","user":{"login":"rod-chapman","id":22537733,"node_id":"MDQ6VXNlcjIyNTM3NzMz","avatar_url":"https://avatars.githubusercontent.com/u/22537733?v=4","gravatar_id":"","url":"https://api.github.com/users/rod-chapman","html_url":"https://github.com/rod-chapman","followers_url":"https://api.github.com/users/rod-chapman/followers","following_url":"https://api.github.com/users/rod-chapman/following{/other_user}","gists_url":"https://api.github.com/users/rod-chapman/gists{/gist_id}","starred_url":"https://api.github.com/users/rod-chapman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rod-chapman/subscriptions","organizations_url":"https://api.github.com/users/rod-chapman/orgs","repos_url":"https://api.github.com/users/rod-chapman/repos","events_url":"https://api.github.com/users/rod-chapman/events{/privacy}","received_events_url":"https://api.github.com/users/rod-chapman/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2024-06-13T12:01:49Z","updated_at":"2024-06-17T08:42:41Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I would like to propose that we switch astyle's indenting mode from \"google\" to \"bsd\".\r\n\r\nThe \"google\" style places the opening brace on the same line as the preceeding construct, so it appears on the same line as the final term of a loop invariant contract for CBMC. For example, formatting poly.c yields:\r\n\r\n```\r\n    for (size_t i = 0; i < KYBER_N / 8; i++)\r\n        __CPROVER_assigns(i, u, __CPROVER_object_whole(t), __CPROVER_object_whole(r))\r\n        __CPROVER_loop_invariant(i <= KYBER_N) {\r\n```\r\nwhich makes it hard to edit the invariant without accidentially losing or mis-placing the opening brace.\r\n\r\nWith \"bsd\" style, this comes out as:\r\n\r\n```\r\n    for (size_t i = 0; i < KYBER_N / 8; i++)\r\n        __CPROVER_assigns(i, u, __CPROVER_object_whole(t), __CPROVER_object_whole(r))\r\n        __CPROVER_loop_invariant(i <= KYBER_N)\r\n    {\r\n```\r\nso that lines of the invariant can be added, removed or edited without fear of damaging the location of the brace.\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172705513","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/59#issuecomment-2172705513","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59","id":2172705513,"node_id":"IC_kwDOLh-nxs6BgNrp","user":{"login":"rod-chapman","id":22537733,"node_id":"MDQ6VXNlcjIyNTM3NzMz","avatar_url":"https://avatars.githubusercontent.com/u/22537733?v=4","gravatar_id":"","url":"https://api.github.com/users/rod-chapman","html_url":"https://github.com/rod-chapman","followers_url":"https://api.github.com/users/rod-chapman/followers","following_url":"https://api.github.com/users/rod-chapman/following{/other_user}","gists_url":"https://api.github.com/users/rod-chapman/gists{/gist_id}","starred_url":"https://api.github.com/users/rod-chapman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rod-chapman/subscriptions","organizations_url":"https://api.github.com/users/rod-chapman/orgs","repos_url":"https://api.github.com/users/rod-chapman/repos","events_url":"https://api.github.com/users/rod-chapman/events{/privacy}","received_events_url":"https://api.github.com/users/rod-chapman/received_events","type":"User","site_admin":false},"created_at":"2024-06-17T08:42:40Z","updated_at":"2024-06-17T08:42:40Z","author_association":"CONTRIBUTOR","body":"Doing this now. PR coming soon.","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2172705513/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-17T08:42:41Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39368872300","type":"IssueCommentEvent","actor":{"id":9219016,"login":"cothan","display_login":"cothan","gravatar_id":"","url":"https://api.github.com/users/cothan","avatar_url":"https://avatars.githubusercontent.com/u/9219016?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/62","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/62/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/62/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/62/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/62","id":2352175069,"node_id":"PR_kwDOLh-nxs5ya0SM","number":62,"title":"Add Keccak X4 interface","user":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2024-06-13T22:44:58Z","updated_at":"2024-06-17T16:18:49Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/pulls/62","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/62","diff_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/62.diff","patch_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/62.patch","merged_at":null},"body":"# Add Keccak X4 interface. \r\n\r\nPotential optimization: \r\n\r\n- **Multiple Pass Squeezing**: Currently, if `rej_uniform` fails to sample the full vector size, it continues by squeezing a single Keccak lane. By rewriting this logic to append single Keccak calls into a single Keccak X-way call, CPU cycles can be saved. For simplicity, it is currently implemented as a single pass.\r\n\r\n### Next Steps:\r\n\r\n- Add Keccak_X4 assembly to replace the `keccak_absorb_x4keccak_squeezeblocks_x4` in `fips202x.c`.\r\n\r\nFixes #35","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/62/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/62/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2173827640","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/62#issuecomment-2173827640","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/62","id":2173827640,"node_id":"IC_kwDOLh-nxs6Bkfo4","user":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"created_at":"2024-06-17T16:18:48Z","updated_at":"2024-06-17T16:18:48Z","author_association":"CONTRIBUTOR","body":"Sure, @hanno-becker , I was waiting for a few PR to land on main first. \r\nPR is marked as ready. ","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2173827640/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-17T16:18:49Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39369018840","type":"IssueCommentEvent","actor":{"id":9219016,"login":"cothan","display_login":"cothan","gravatar_id":"","url":"https://api.github.com/users/cothan","avatar_url":"https://avatars.githubusercontent.com/u/9219016?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/59","id":2350964817,"node_id":"I_kwDOLh-nxs6MIOBR","number":59,"title":"Can we use bsd brace style please for compatibility with CBMC contracts?","user":{"login":"rod-chapman","id":22537733,"node_id":"MDQ6VXNlcjIyNTM3NzMz","avatar_url":"https://avatars.githubusercontent.com/u/22537733?v=4","gravatar_id":"","url":"https://api.github.com/users/rod-chapman","html_url":"https://github.com/rod-chapman","followers_url":"https://api.github.com/users/rod-chapman/followers","following_url":"https://api.github.com/users/rod-chapman/following{/other_user}","gists_url":"https://api.github.com/users/rod-chapman/gists{/gist_id}","starred_url":"https://api.github.com/users/rod-chapman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rod-chapman/subscriptions","organizations_url":"https://api.github.com/users/rod-chapman/orgs","repos_url":"https://api.github.com/users/rod-chapman/repos","events_url":"https://api.github.com/users/rod-chapman/events{/privacy}","received_events_url":"https://api.github.com/users/rod-chapman/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2024-06-13T12:01:49Z","updated_at":"2024-06-17T16:23:41Z","closed_at":"2024-06-17T16:23:40Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I would like to propose that we switch astyle's indenting mode from \"google\" to \"bsd\".\r\n\r\nThe \"google\" style places the opening brace on the same line as the preceeding construct, so it appears on the same line as the final term of a loop invariant contract for CBMC. For example, formatting poly.c yields:\r\n\r\n```\r\n    for (size_t i = 0; i < KYBER_N / 8; i++)\r\n        __CPROVER_assigns(i, u, __CPROVER_object_whole(t), __CPROVER_object_whole(r))\r\n        __CPROVER_loop_invariant(i <= KYBER_N) {\r\n```\r\nwhich makes it hard to edit the invariant without accidentially losing or mis-placing the opening brace.\r\n\r\nWith \"bsd\" style, this comes out as:\r\n\r\n```\r\n    for (size_t i = 0; i < KYBER_N / 8; i++)\r\n        __CPROVER_assigns(i, u, __CPROVER_object_whole(t), __CPROVER_object_whole(r))\r\n        __CPROVER_loop_invariant(i <= KYBER_N)\r\n    {\r\n```\r\nso that lines of the invariant can be added, removed or edited without fear of damaging the location of the brace.\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/timeline","performed_via_github_app":null,"state_reason":"completed"},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2173836689","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/59#issuecomment-2173836689","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59","id":2173836689,"node_id":"IC_kwDOLh-nxs6Bkh2R","user":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"created_at":"2024-06-17T16:23:40Z","updated_at":"2024-06-17T16:23:40Z","author_association":"CONTRIBUTOR","body":"Thanks @rod-chapman  for the PR #64 . ","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2173836689/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-17T16:23:42Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39369068773","type":"IssueCommentEvent","actor":{"id":9219016,"login":"cothan","display_login":"cothan","gravatar_id":"","url":"https://api.github.com/users/cothan","avatar_url":"https://avatars.githubusercontent.com/u/9219016?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/33","id":2283654694,"node_id":"I_kwDOLh-nxs6IHc4m","number":33,"title":"Optimal number of Keccak-f1600 lanes","user":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},"assignees":[{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false}],"milestone":null,"comments":7,"created_at":"2024-05-07T15:27:11Z","updated_at":"2024-06-17T16:25:24Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"## Optimal number of `Keccak-f1600` lanes \r\n\r\nSHAKE128 function is used in `gen_matrix` function with `KYBER_K = 2,3,4`. \r\n\r\nHere is the C reference implementation:\r\n```c\r\n    for (i = 0; i < KYBER_K; i++) {\r\n        for (j = 0; j < KYBER_K; j++) {\r\n            if (transposed) {\r\n                xof_absorb(&state, seed, i, j);\r\n            } else {\r\n                xof_absorb(&state, seed, j, i);\r\n            }\r\n\r\n            xof_squeezeblocks(buf, GEN_MATRIX_NBLOCKS, &state);\r\n            buflen = GEN_MATRIX_NBLOCKS * XOF_BLOCKBYTES;\r\n            ctr = rej_uniform(a[i].vec[j].coeffs, KYBER_N, buf, buflen);\r\n```\r\n\r\nThe number of `xof_absorb` (`SHAKE128_Absorb`) are `KYBER_K x KYBER_K`. Thus, the two for loops will need: \r\n- 4 when `KYBER_K = 2`.\r\n- 9 when `KYBER_K = 3`.\r\n- 16 when `KYBER_K = 4`. \r\n\r\nThe output state of `xof_absorb` will be used in `xof_sqeezeblock` and send to sampling function `reject_uniform()`.\r\nWhen the counter of `reject_uniform()` does not meet the size of vector KYBER_N (256), an additional squeeze is needed until the sampling fulfill the vector KYBER_N. \r\n\r\n```c\r\n        while (ctr < KYBER_N) {\r\n                off = buflen % 3;\r\n                for (k = 0; k < off; k++) {\r\n                    buf[k] = buf[buflen - off + k];\r\n                }\r\n                xof_squeezeblocks(buf + off, 1, &state);\r\n                buflen = off + XOF_BLOCKBYTES;\r\n                ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);\r\n            }\r\n```\r\n\r\nAccording to Table 1 in [Hanno Becker and Matthias Kannwischer paper](https://kannwischer.eu/papers/2022_armv8keccak.pdf)\r\n\r\nIt shows: \r\n\r\n- x2 (2 times Keccak in a single call) is not optimal. \r\n- x3 (3 times Keccak in a single call) is better than x2, suitable for `KYBER_K = 3`.\r\n- x4 (4 times Keccak in a single call) is better than x2, suitable for `KYBER_K = 2, 4`. \r\n\r\nOf course, the number are varies depend on the ARM processor, the relative ranking between x2-x3, x2-x4 stay the same. \r\nI had my benchmark in the past in Apple M1 shows that `x2` is better than `x4`, but the different is somewhat small, and the differences contribute very little to the overall speed-up of Kyber on Apple M1. So I still think using `x4` is optimal for many ARM CPUs. \r\n\r\nMy conclusion: \r\n- `KYBER_K = 2,4`, we use x4. \r\n- `KYBER_K = 3`, we use x3.\r\n\r\nWhat do you think? @mkannwischer @hanno \r\n\r\n## Optimal memory `Keccak-f1600` layout:\r\n\r\nClosely related to the implementation of Keccak-f1600, the memory layout will help make the load/store easier/faster. \r\nTwo choices of memory layout: \r\n\r\n1. Vector style: Vector 1 | Vector 2 .... as in the default C implementation. To load prepare the memory for Keccak, one must cover it to lane style, to store as vector style, one must convert from lane style back to vector style.\r\n2. Lane style. There is no need to prepare the memory, but for the case we need vector style, we will need additional function to convert from lane style to vector style (which can be embedded in other function calls).\r\n  a. x3: `Line 1 | Line 2 | Line 3 | Line 1 | Line 2 | Line 3 | .. and repeat`\r\n  b. x4: `Line 1 | Line 2 | Line 3 | Line 4 | Line 1 | Line 2 | Line 3 | Line 4 | ... and repeat`.\r\n\r\nThe 2. approach seem optimal to me. What do you think? @mkannwischer @hanno-becker \r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2173839743","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/33#issuecomment-2173839743","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/33","id":2173839743,"node_id":"IC_kwDOLh-nxs6Bkil_","user":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"created_at":"2024-06-17T16:25:23Z","updated_at":"2024-06-17T16:25:23Z","author_association":"CONTRIBUTOR","body":"As in the PR #62 , we fix the Keccak to 4-way for now. ","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2173839743/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-17T16:25:25Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
