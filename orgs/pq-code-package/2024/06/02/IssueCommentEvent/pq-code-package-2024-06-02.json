{"id":"38915093265","type":"IssueCommentEvent","actor":{"id":9219016,"login":"cothan","display_login":"cothan","gravatar_id":"","url":"https://api.github.com/users/cothan","avatar_url":"https://avatars.githubusercontent.com/u/9219016?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/45","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/45/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/45/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/45/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/45","id":2327285016,"node_id":"PR_kwDOLh-nxs5xGOxZ","number":45,"title":"Use pre-built cross-compiled aarch64 gcc for x86-64 linux machine","user":{"login":"potsrevennil","id":15379156,"node_id":"MDQ6VXNlcjE1Mzc5MTU2","avatar_url":"https://avatars.githubusercontent.com/u/15379156?v=4","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","html_url":"https://github.com/potsrevennil","followers_url":"https://api.github.com/users/potsrevennil/followers","following_url":"https://api.github.com/users/potsrevennil/following{/other_user}","gists_url":"https://api.github.com/users/potsrevennil/gists{/gist_id}","starred_url":"https://api.github.com/users/potsrevennil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/potsrevennil/subscriptions","organizations_url":"https://api.github.com/users/potsrevennil/orgs","repos_url":"https://api.github.com/users/potsrevennil/repos","events_url":"https://api.github.com/users/potsrevennil/events{/privacy}","received_events_url":"https://api.github.com/users/potsrevennil/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2024-05-31T08:45:49Z","updated_at":"2024-06-02T02:57:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/pulls/45","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/45","diff_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/45.diff","patch_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/45.patch","merged_at":null},"body":"[//]: # (SPDX-License-Identifier: CC-BY-4.0)\n<!-- Please give a brief explanation of the purpose of this pull request. -->\nMade x86-64 linux machine to use the pre-built corss-compile aarch64 gcc\nAdded x86-64 linux GitHub runner, it will only cross compile the project, emulation on qemu will be done in other PR\n\n- **add arm gnu gcc nix spec for x86_64**\n- **use the pre-built cross-compiled gcc for x86_64 machines in ci**\n\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\n\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\n\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review. -->\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/45/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/45/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2143676794","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/45#issuecomment-2143676794","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/45","id":2143676794,"node_id":"IC_kwDOLh-nxs5_xel6","user":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"created_at":"2024-06-02T02:57:05Z","updated_at":"2024-06-02T02:57:05Z","author_association":"CONTRIBUTOR","body":"I would say it's easier to install zig and perform cross-compile. ` -target x86_64-native` or ` -target aarch64-linux` and zig can be installed easily. ","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2143676794/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-02T02:57:06Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"38915450539","type":"IssueCommentEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/46","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/46/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/46/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/46/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/46","id":2328384016,"node_id":"PR_kwDOLh-nxs5xJ_63","number":46,"title":"Demonstrate use of CBMC in example of (de)compression routines","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2024-05-31T18:31:03Z","updated_at":"2024-06-02T03:53:44Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/pulls/46","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/46","diff_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/46.diff","patch_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/46.patch","merged_at":null},"body":"Depends on: #44 by @potsrevennil \r\n\r\nC code in MLKEM-C-AArch64 should be free of undefined behaviour. The C Bounded Model Checker (CBMC) is a tool which can prove absence of various classes of undefined behaviour.\r\n\r\nThis commit is a first step towards using CBMC to harden MLKEM-C-AArch64.\r\n\r\n- Setup CBMC boilerplate using cbmc-starter-kit: All proof harnesses, scripts and Makefiles needed to run CBMC are in the `cbmc/` directory. Harnesses are organized by the (main) function to which they apply, and stored in separate directories with the name of the function.\r\n- Demonstrate the use of CBMC in the example of the (de)compression functions `poly_decompress` and `poly_compress`: Specify (in natural language, in a function contract, and in the test harness) that the coefficients in the output polynomial of this function are unsigned canonical. Hoist out scalar (de)compression routines as separate functions `scalar_[de]compress_q_[16|32]` for independent verification.\r\n- Guided by CBMC, make smaller changes to `poly_decompress` to avoid integer truncation warnings. The previous code did _not_ trigger undefined behaviour to my understanding (signed -> unsigned conversions are always defined), but it is arguably still better style to make truncations explicit.\r\n- Run CBMC in CI\r\n\r\nNote that CBMC blasts through the Barrett reduction to show that it's a genuine rounded division, which is pretty cool.\r\n\r\nTo run the `poly_decompress` proofs alone:\r\n\r\n```\r\ncd cbmc/proofs/poly_decompress\r\nmake\r\n```\r\n\r\nTo run all CBMC tests (only `poly_decompress` so far, but more will hopefully be added) and print a summary,\r\n\r\n```\r\ncd cbmc/proofs\r\nKYBER_K={2,3,4} run-cbmc-proofs.py --summarize\r\n```\r\n\r\n[//]: # (SPDX-License-Identifier: CC-BY-4.0)\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review. -->\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/46/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/46/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2143686178","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/46#issuecomment-2143686178","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/46","id":2143686178,"node_id":"IC_kwDOLh-nxs5_xg4i","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"created_at":"2024-06-02T03:53:43Z","updated_at":"2024-06-02T03:53:43Z","author_association":"CONTRIBUTOR","body":"@mkannwischer @potsrevennil @cothan \r\n\r\nI'll stop here for the initial CBMC PR and leave further harnesses and proofs for separate PRs. I am overall quite happy how easy things are once the tool is setup, and think we will be able to roll it out more broadly for the verification of the C code in MLKEM-C-{Generic, AArch64, Embedded}.","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2143686178/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-02T03:53:44Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
