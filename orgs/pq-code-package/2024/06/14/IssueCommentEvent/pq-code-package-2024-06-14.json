{"id":"39288737516","type":"IssueCommentEvent","actor":{"id":3984960,"login":"mkannwischer","display_login":"mkannwischer","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","avatar_url":"https://avatars.githubusercontent.com/u/3984960?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/59","id":2350964817,"node_id":"I_kwDOLh-nxs6MIOBR","number":59,"title":"Can we use bsd brace style please for compatibility with CBMC contracts?","user":{"login":"rod-chapman","id":22537733,"node_id":"MDQ6VXNlcjIyNTM3NzMz","avatar_url":"https://avatars.githubusercontent.com/u/22537733?v=4","gravatar_id":"","url":"https://api.github.com/users/rod-chapman","html_url":"https://github.com/rod-chapman","followers_url":"https://api.github.com/users/rod-chapman/followers","following_url":"https://api.github.com/users/rod-chapman/following{/other_user}","gists_url":"https://api.github.com/users/rod-chapman/gists{/gist_id}","starred_url":"https://api.github.com/users/rod-chapman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rod-chapman/subscriptions","organizations_url":"https://api.github.com/users/rod-chapman/orgs","repos_url":"https://api.github.com/users/rod-chapman/repos","events_url":"https://api.github.com/users/rod-chapman/events{/privacy}","received_events_url":"https://api.github.com/users/rod-chapman/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2024-06-13T12:01:49Z","updated_at":"2024-06-14T03:04:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I would like to propose that we switch astyle's indenting mode from \"google\" to \"bsd\".\r\n\r\nThe \"google\" style places the opening brace on the same line as the preceeding construct, so it appears on the same line as the final term of a loop invariant contract for CBMC. For example, formatting poly.c yields:\r\n\r\n```\r\n    for (size_t i = 0; i < KYBER_N / 8; i++)\r\n        __CPROVER_assigns(i, u, __CPROVER_object_whole(t), __CPROVER_object_whole(r))\r\n        __CPROVER_loop_invariant(i <= KYBER_N) {\r\n```\r\nwhich makes it hard to edit the invariant without accidentially losing or mis-placing the opening brace.\r\n\r\nWith \"bsd\" style, this comes out as:\r\n\r\n```\r\n    for (size_t i = 0; i < KYBER_N / 8; i++)\r\n        __CPROVER_assigns(i, u, __CPROVER_object_whole(t), __CPROVER_object_whole(r))\r\n        __CPROVER_loop_invariant(i <= KYBER_N)\r\n    {\r\n```\r\nso that lines of the invariant can be added, removed or edited without fear of damaging the location of the brace.\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167126931","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/59#issuecomment-2167126931","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59","id":2167126931,"node_id":"IC_kwDOLh-nxs6BK7uT","user":{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},"created_at":"2024-06-14T03:04:03Z","updated_at":"2024-06-14T03:04:03Z","author_association":"CONTRIBUTOR","body":"I don't mind which style we use as long as it's consistent and we enforce it in CI. \r\nWe can change the astyle configuration to use bsd. ","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167126931/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-14T03:04:04Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39291222094","type":"IssueCommentEvent","actor":{"id":15379156,"login":"potsrevennil","display_login":"potsrevennil","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","avatar_url":"https://avatars.githubusercontent.com/u/15379156?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60","id":2351157841,"node_id":"PR_kwDOLh-nxs5yXVRR","number":60,"title":"Emulate arm64 binary on x86_64 machine","user":{"login":"potsrevennil","id":15379156,"node_id":"MDQ6VXNlcjE1Mzc5MTU2","avatar_url":"https://avatars.githubusercontent.com/u/15379156?v=4","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","html_url":"https://github.com/potsrevennil","followers_url":"https://api.github.com/users/potsrevennil/followers","following_url":"https://api.github.com/users/potsrevennil/following{/other_user}","gists_url":"https://api.github.com/users/potsrevennil/gists{/gist_id}","starred_url":"https://api.github.com/users/potsrevennil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/potsrevennil/subscriptions","organizations_url":"https://api.github.com/users/potsrevennil/orgs","repos_url":"https://api.github.com/users/potsrevennil/repos","events_url":"https://api.github.com/users/potsrevennil/events{/privacy}","received_events_url":"https://api.github.com/users/potsrevennil/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2024-06-13T13:26:38Z","updated_at":"2024-06-14T05:42:31Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/pulls/60","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60","diff_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60.diff","patch_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60.patch","merged_at":null},"body":"[//]: # (SPDX-License-Identifier: CC-BY-4.0)\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\nI added `scripts/tests` (should be able to be executed by simply typing `tests` in nix shell) for functional, kat and nistkat tests.\r\n\r\nThe script currently automatically detects the host system and decides to run natively on ARM64 machines or emulate on QEMU for x86_64 machines. We might want to add the capability to manually specify whether to run tests natively or on QEMU in the future. However, I don't think we need this functionality for now.\r\n\r\nUsage of the script is as follow:\r\n\r\n```\r\n> tests --help\r\nUsage: tests [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n\r\nCommands:\r\n  func     Run the functional tests for all parameter sets\r\n  kat      Run the kat tests for all parameter sets\r\n  nistkat  Run the nistkat tests for all parameter sets\r\n  run      Run the specified binary file\r\n\r\n> tests nistkat --help\r\nUsage: tests nistkat [OPTIONS]\r\n\r\nOptions:\r\n  -v, --verbose  Show verbose output or not\r\n  --help         Show this message and exit.\r\n```\r\n\r\nI have also added `black` as the Python formatter and updated the `format` and `lint` scripts to utilize it for checking the format of Python scripts. I don't have a strong opinion on the choice of Python formatter, so if there are any better suggestions, I am open to using them.\r\n\r\nI made CI continues even when some part of the tests failed as @hanno-becker suggested in https://github.com/pq-code-package/mlkem-c-aarch64/issues/48 (sorry about that I somehow missed the message last week).\r\n\r\n- **emulate arm64 binary on x86_64 machine**\r\n- **Output binaries to bin/ directory**\r\n- **add nistkat checksum back**\r\n- **use black for python formatting**\r\n- **add tests script for running a specify binary**\r\n- **factor out the common part of compiling and running a binary**\r\n- **add test command for func, nistkat and kat tests**\r\n- **compare tests result to the META file**\r\n- **add github step summary to tests script if the env var exists**\r\n- **update ci to use the tests script**\r\n- **cleanup**\r\n- **only add -static if is linux x86_64**\r\n- **still run kat/nistkat tests even if previous tests failed**\r\n\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review. -->\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167251876","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60#issuecomment-2167251876","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60","id":2167251876,"node_id":"IC_kwDOLh-nxs6BLaOk","user":{"login":"potsrevennil","id":15379156,"node_id":"MDQ6VXNlcjE1Mzc5MTU2","avatar_url":"https://avatars.githubusercontent.com/u/15379156?v=4","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","html_url":"https://github.com/potsrevennil","followers_url":"https://api.github.com/users/potsrevennil/followers","following_url":"https://api.github.com/users/potsrevennil/following{/other_user}","gists_url":"https://api.github.com/users/potsrevennil/gists{/gist_id}","starred_url":"https://api.github.com/users/potsrevennil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/potsrevennil/subscriptions","organizations_url":"https://api.github.com/users/potsrevennil/orgs","repos_url":"https://api.github.com/users/potsrevennil/repos","events_url":"https://api.github.com/users/potsrevennil/events{/privacy}","received_events_url":"https://api.github.com/users/potsrevennil/received_events","type":"User","site_admin":false},"created_at":"2024-06-14T05:42:30Z","updated_at":"2024-06-14T05:42:30Z","author_association":"CONTRIBUTOR","body":"@hanno-becker I'm not sure if I understand you correctly\r\n\r\n`nix` is only used for specifying dependencies here, so `make` can definitely work outside of the `nix` shell. However, users will need to install all the dependencies themselves, and how they do this is out of scope for this PR, I think. For different users and different machines, there might be many ways to install all the dependencies, and nix is provided especially for those who want to give a quick try. If someone wants to do this without `nix`, there's not much we can do, but as long as they have `qemu` and `gcc` pre-installed, building with make should work.\r\n\r\nTo be more clear, there are two external dependencies for `make`: `qemu` and `gcc`. I assumed these dependencies should be available in the user's shell environment, though the shell does not need to be a `nix` shell. Users can make these dependencies available in any way they like if they are not using `nix`, or overwrite the Makefile variables via command line arguments.","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167251876/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-14T05:42:31Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39291489642","type":"IssueCommentEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60","id":2351157841,"node_id":"PR_kwDOLh-nxs5yXVRR","number":60,"title":"Emulate arm64 binary on x86_64 machine","user":{"login":"potsrevennil","id":15379156,"node_id":"MDQ6VXNlcjE1Mzc5MTU2","avatar_url":"https://avatars.githubusercontent.com/u/15379156?v=4","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","html_url":"https://github.com/potsrevennil","followers_url":"https://api.github.com/users/potsrevennil/followers","following_url":"https://api.github.com/users/potsrevennil/following{/other_user}","gists_url":"https://api.github.com/users/potsrevennil/gists{/gist_id}","starred_url":"https://api.github.com/users/potsrevennil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/potsrevennil/subscriptions","organizations_url":"https://api.github.com/users/potsrevennil/orgs","repos_url":"https://api.github.com/users/potsrevennil/repos","events_url":"https://api.github.com/users/potsrevennil/events{/privacy}","received_events_url":"https://api.github.com/users/potsrevennil/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2024-06-13T13:26:38Z","updated_at":"2024-06-14T05:57:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/pulls/60","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60","diff_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60.diff","patch_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60.patch","merged_at":null},"body":"[//]: # (SPDX-License-Identifier: CC-BY-4.0)\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\nI added `scripts/tests` (should be able to be executed by simply typing `tests` in nix shell) for functional, kat and nistkat tests.\r\n\r\nThe script currently automatically detects the host system and decides to run natively on ARM64 machines or emulate on QEMU for x86_64 machines. We might want to add the capability to manually specify whether to run tests natively or on QEMU in the future. However, I don't think we need this functionality for now.\r\n\r\nUsage of the script is as follow:\r\n\r\n```\r\n> tests --help\r\nUsage: tests [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n\r\nCommands:\r\n  func     Run the functional tests for all parameter sets\r\n  kat      Run the kat tests for all parameter sets\r\n  nistkat  Run the nistkat tests for all parameter sets\r\n  run      Run the specified binary file\r\n\r\n> tests nistkat --help\r\nUsage: tests nistkat [OPTIONS]\r\n\r\nOptions:\r\n  -v, --verbose  Show verbose output or not\r\n  --help         Show this message and exit.\r\n```\r\n\r\nI have also added `black` as the Python formatter and updated the `format` and `lint` scripts to utilize it for checking the format of Python scripts. I don't have a strong opinion on the choice of Python formatter, so if there are any better suggestions, I am open to using them.\r\n\r\nI made CI continues even when some part of the tests failed as @hanno-becker suggested in https://github.com/pq-code-package/mlkem-c-aarch64/issues/48 (sorry about that I somehow missed the message last week).\r\n\r\n- **emulate arm64 binary on x86_64 machine**\r\n- **Output binaries to bin/ directory**\r\n- **add nistkat checksum back**\r\n- **use black for python formatting**\r\n- **add tests script for running a specify binary**\r\n- **factor out the common part of compiling and running a binary**\r\n- **add test command for func, nistkat and kat tests**\r\n- **compare tests result to the META file**\r\n- **add github step summary to tests script if the env var exists**\r\n- **update ci to use the tests script**\r\n- **cleanup**\r\n- **only add -static if is linux x86_64**\r\n- **still run kat/nistkat tests even if previous tests failed**\r\n\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review. -->\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167265329","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60#issuecomment-2167265329","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60","id":2167265329,"node_id":"IC_kwDOLh-nxs6BLdgx","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"created_at":"2024-06-14T05:57:08Z","updated_at":"2024-06-14T05:57:08Z","author_association":"CONTRIBUTOR","body":"@potsrevennil Ok, I'll have another look. When I try `make` outside of the `nix` shell, I get \r\n```\r\n% make\r\nmake: *** No rule to make target `bin/test_kyber768', needed by `mlkem'.  Stop.\r\n```","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167265329/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-14T05:57:08Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39293306929","type":"IssueCommentEvent","actor":{"id":15379156,"login":"potsrevennil","display_login":"potsrevennil","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","avatar_url":"https://avatars.githubusercontent.com/u/15379156?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60","id":2351157841,"node_id":"PR_kwDOLh-nxs5yXVRR","number":60,"title":"Emulate arm64 binary on x86_64 machine","user":{"login":"potsrevennil","id":15379156,"node_id":"MDQ6VXNlcjE1Mzc5MTU2","avatar_url":"https://avatars.githubusercontent.com/u/15379156?v=4","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","html_url":"https://github.com/potsrevennil","followers_url":"https://api.github.com/users/potsrevennil/followers","following_url":"https://api.github.com/users/potsrevennil/following{/other_user}","gists_url":"https://api.github.com/users/potsrevennil/gists{/gist_id}","starred_url":"https://api.github.com/users/potsrevennil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/potsrevennil/subscriptions","organizations_url":"https://api.github.com/users/potsrevennil/orgs","repos_url":"https://api.github.com/users/potsrevennil/repos","events_url":"https://api.github.com/users/potsrevennil/events{/privacy}","received_events_url":"https://api.github.com/users/potsrevennil/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2024-06-13T13:26:38Z","updated_at":"2024-06-14T07:13:51Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/pulls/60","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60","diff_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60.diff","patch_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60.patch","merged_at":null},"body":"[//]: # (SPDX-License-Identifier: CC-BY-4.0)\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\nI added `scripts/tests` (should be able to be executed by simply typing `tests` in nix shell) for functional, kat and nistkat tests.\r\n\r\nThe script currently automatically detects the host system and decides to run natively on ARM64 machines or emulate on QEMU for x86_64 machines. We might want to add the capability to manually specify whether to run tests natively or on QEMU in the future. However, I don't think we need this functionality for now.\r\n\r\nUsage of the script is as follow:\r\n\r\n```\r\n> tests --help\r\nUsage: tests [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n\r\nCommands:\r\n  func     Run the functional tests for all parameter sets\r\n  kat      Run the kat tests for all parameter sets\r\n  nistkat  Run the nistkat tests for all parameter sets\r\n  run      Run the specified binary file\r\n\r\n> tests nistkat --help\r\nUsage: tests nistkat [OPTIONS]\r\n\r\nOptions:\r\n  -v, --verbose  Show verbose output or not\r\n  --help         Show this message and exit.\r\n```\r\n\r\nI have also added `black` as the Python formatter and updated the `format` and `lint` scripts to utilize it for checking the format of Python scripts. I don't have a strong opinion on the choice of Python formatter, so if there are any better suggestions, I am open to using them.\r\n\r\nI made CI continues even when some part of the tests failed as @hanno-becker suggested in https://github.com/pq-code-package/mlkem-c-aarch64/issues/48 (sorry about that I somehow missed the message last week).\r\n\r\n- **emulate arm64 binary on x86_64 machine**\r\n- **Output binaries to bin/ directory**\r\n- **add nistkat checksum back**\r\n- **use black for python formatting**\r\n- **add tests script for running a specify binary**\r\n- **factor out the common part of compiling and running a binary**\r\n- **add test command for func, nistkat and kat tests**\r\n- **compare tests result to the META file**\r\n- **add github step summary to tests script if the env var exists**\r\n- **update ci to use the tests script**\r\n- **cleanup**\r\n- **only add -static if is linux x86_64**\r\n- **still run kat/nistkat tests even if previous tests failed**\r\n\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review. -->\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167384651","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60#issuecomment-2167384651","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60","id":2167384651,"node_id":"IC_kwDOLh-nxs6BL6pL","user":{"login":"potsrevennil","id":15379156,"node_id":"MDQ6VXNlcjE1Mzc5MTU2","avatar_url":"https://avatars.githubusercontent.com/u/15379156?v=4","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","html_url":"https://github.com/potsrevennil","followers_url":"https://api.github.com/users/potsrevennil/followers","following_url":"https://api.github.com/users/potsrevennil/following{/other_user}","gists_url":"https://api.github.com/users/potsrevennil/gists{/gist_id}","starred_url":"https://api.github.com/users/potsrevennil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/potsrevennil/subscriptions","organizations_url":"https://api.github.com/users/potsrevennil/orgs","repos_url":"https://api.github.com/users/potsrevennil/repos","events_url":"https://api.github.com/users/potsrevennil/events{/privacy}","received_events_url":"https://api.github.com/users/potsrevennil/received_events","type":"User","site_admin":false},"created_at":"2024-06-14T07:13:50Z","updated_at":"2024-06-14T07:13:50Z","author_association":"CONTRIBUTOR","body":"Oh, this is not what I intended...\r\n\r\nIt seems like a incompatibility issue of different version of `make`, which version of `make` are you using ?\r\n\r\nI tested on my macOS, under x86_64 environment I got `GNU Make 3.81 ... built for i386-apple-darwin11.3.0`, and it result in the same issue as your,\r\n\r\nWhile under `aarch64` environment of my macOS and `nix` shell, I have `GNU Make 4.4.1 Built for aarch64-apple-darwin23.0.0` and `GNU Make 4.4.1 Built for aarch64-apple-darwin23.4.0` respectively, which worked just fine.\r\n\r\nI pushed a new version should resolve this issue, but maybe we would also want to fix the version of `make` that we are using ?\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167384651/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-14T07:13:51Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39294528396","type":"IssueCommentEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60","id":2351157841,"node_id":"PR_kwDOLh-nxs5yXVRR","number":60,"title":"Emulate arm64 binary on x86_64 machine","user":{"login":"potsrevennil","id":15379156,"node_id":"MDQ6VXNlcjE1Mzc5MTU2","avatar_url":"https://avatars.githubusercontent.com/u/15379156?v=4","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","html_url":"https://github.com/potsrevennil","followers_url":"https://api.github.com/users/potsrevennil/followers","following_url":"https://api.github.com/users/potsrevennil/following{/other_user}","gists_url":"https://api.github.com/users/potsrevennil/gists{/gist_id}","starred_url":"https://api.github.com/users/potsrevennil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/potsrevennil/subscriptions","organizations_url":"https://api.github.com/users/potsrevennil/orgs","repos_url":"https://api.github.com/users/potsrevennil/repos","events_url":"https://api.github.com/users/potsrevennil/events{/privacy}","received_events_url":"https://api.github.com/users/potsrevennil/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2024-06-13T13:26:38Z","updated_at":"2024-06-14T07:57:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/pulls/60","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60","diff_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60.diff","patch_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60.patch","merged_at":null},"body":"[//]: # (SPDX-License-Identifier: CC-BY-4.0)\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\nI added `scripts/tests` (should be able to be executed by simply typing `tests` in nix shell) for functional, kat and nistkat tests.\r\n\r\nThe script currently automatically detects the host system and decides to run natively on ARM64 machines or emulate on QEMU for x86_64 machines. We might want to add the capability to manually specify whether to run tests natively or on QEMU in the future. However, I don't think we need this functionality for now.\r\n\r\nUsage of the script is as follow:\r\n\r\n```\r\n> tests --help\r\nUsage: tests [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n\r\nCommands:\r\n  func     Run the functional tests for all parameter sets\r\n  kat      Run the kat tests for all parameter sets\r\n  nistkat  Run the nistkat tests for all parameter sets\r\n  run      Run the specified binary file\r\n\r\n> tests nistkat --help\r\nUsage: tests nistkat [OPTIONS]\r\n\r\nOptions:\r\n  -v, --verbose  Show verbose output or not\r\n  --help         Show this message and exit.\r\n```\r\n\r\nI have also added `black` as the Python formatter and updated the `format` and `lint` scripts to utilize it for checking the format of Python scripts. I don't have a strong opinion on the choice of Python formatter, so if there are any better suggestions, I am open to using them.\r\n\r\nI made CI continues even when some part of the tests failed as @hanno-becker suggested in https://github.com/pq-code-package/mlkem-c-aarch64/issues/48 (sorry about that I somehow missed the message last week).\r\n\r\n- **emulate arm64 binary on x86_64 machine**\r\n- **Output binaries to bin/ directory**\r\n- **add nistkat checksum back**\r\n- **use black for python formatting**\r\n- **add tests script for running a specify binary**\r\n- **factor out the common part of compiling and running a binary**\r\n- **add test command for func, nistkat and kat tests**\r\n- **compare tests result to the META file**\r\n- **add github step summary to tests script if the env var exists**\r\n- **update ci to use the tests script**\r\n- **cleanup**\r\n- **only add -static if is linux x86_64**\r\n- **still run kat/nistkat tests even if previous tests failed**\r\n\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review. -->\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167461702","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60#issuecomment-2167461702","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60","id":2167461702,"node_id":"IC_kwDOLh-nxs6BMNdG","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"created_at":"2024-06-14T07:57:07Z","updated_at":"2024-06-14T07:57:07Z","author_association":"CONTRIBUTOR","body":"@potsrevennil Can we remove the macros, even if it means a bit of repetition between the makefile targets? ","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167461702/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-14T07:57:08Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39294795809","type":"IssueCommentEvent","actor":{"id":15379156,"login":"potsrevennil","display_login":"potsrevennil","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","avatar_url":"https://avatars.githubusercontent.com/u/15379156?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60","id":2351157841,"node_id":"PR_kwDOLh-nxs5yXVRR","number":60,"title":"Emulate arm64 binary on x86_64 machine","user":{"login":"potsrevennil","id":15379156,"node_id":"MDQ6VXNlcjE1Mzc5MTU2","avatar_url":"https://avatars.githubusercontent.com/u/15379156?v=4","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","html_url":"https://github.com/potsrevennil","followers_url":"https://api.github.com/users/potsrevennil/followers","following_url":"https://api.github.com/users/potsrevennil/following{/other_user}","gists_url":"https://api.github.com/users/potsrevennil/gists{/gist_id}","starred_url":"https://api.github.com/users/potsrevennil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/potsrevennil/subscriptions","organizations_url":"https://api.github.com/users/potsrevennil/orgs","repos_url":"https://api.github.com/users/potsrevennil/repos","events_url":"https://api.github.com/users/potsrevennil/events{/privacy}","received_events_url":"https://api.github.com/users/potsrevennil/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2024-06-13T13:26:38Z","updated_at":"2024-06-14T08:06:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/pulls/60","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60","diff_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60.diff","patch_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60.patch","merged_at":null},"body":"[//]: # (SPDX-License-Identifier: CC-BY-4.0)\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\nI added `scripts/tests` (should be able to be executed by simply typing `tests` in nix shell) for functional, kat and nistkat tests.\r\n\r\nThe script currently automatically detects the host system and decides to run natively on ARM64 machines or emulate on QEMU for x86_64 machines. We might want to add the capability to manually specify whether to run tests natively or on QEMU in the future. However, I don't think we need this functionality for now.\r\n\r\nUsage of the script is as follow:\r\n\r\n```\r\n> tests --help\r\nUsage: tests [OPTIONS] COMMAND [ARGS]...\r\n\r\nOptions:\r\n  --help  Show this message and exit.\r\n\r\nCommands:\r\n  func     Run the functional tests for all parameter sets\r\n  kat      Run the kat tests for all parameter sets\r\n  nistkat  Run the nistkat tests for all parameter sets\r\n  run      Run the specified binary file\r\n\r\n> tests nistkat --help\r\nUsage: tests nistkat [OPTIONS]\r\n\r\nOptions:\r\n  -v, --verbose  Show verbose output or not\r\n  --help         Show this message and exit.\r\n```\r\n\r\nI have also added `black` as the Python formatter and updated the `format` and `lint` scripts to utilize it for checking the format of Python scripts. I don't have a strong opinion on the choice of Python formatter, so if there are any better suggestions, I am open to using them.\r\n\r\nI made CI continues even when some part of the tests failed as @hanno-becker suggested in https://github.com/pq-code-package/mlkem-c-aarch64/issues/48 (sorry about that I somehow missed the message last week).\r\n\r\n- **emulate arm64 binary on x86_64 machine**\r\n- **Output binaries to bin/ directory**\r\n- **add nistkat checksum back**\r\n- **use black for python formatting**\r\n- **add tests script for running a specify binary**\r\n- **factor out the common part of compiling and running a binary**\r\n- **add test command for func, nistkat and kat tests**\r\n- **compare tests result to the META file**\r\n- **add github step summary to tests script if the env var exists**\r\n- **update ci to use the tests script**\r\n- **cleanup**\r\n- **only add -static if is linux x86_64**\r\n- **still run kat/nistkat tests even if previous tests failed**\r\n\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review. -->\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167482467","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/pull/60#issuecomment-2167482467","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/60","id":2167482467,"node_id":"IC_kwDOLh-nxs6BMShj","user":{"login":"potsrevennil","id":15379156,"node_id":"MDQ6VXNlcjE1Mzc5MTU2","avatar_url":"https://avatars.githubusercontent.com/u/15379156?v=4","gravatar_id":"","url":"https://api.github.com/users/potsrevennil","html_url":"https://github.com/potsrevennil","followers_url":"https://api.github.com/users/potsrevennil/followers","following_url":"https://api.github.com/users/potsrevennil/following{/other_user}","gists_url":"https://api.github.com/users/potsrevennil/gists{/gist_id}","starred_url":"https://api.github.com/users/potsrevennil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/potsrevennil/subscriptions","organizations_url":"https://api.github.com/users/potsrevennil/orgs","repos_url":"https://api.github.com/users/potsrevennil/repos","events_url":"https://api.github.com/users/potsrevennil/events{/privacy}","received_events_url":"https://api.github.com/users/potsrevennil/received_events","type":"User","site_admin":false},"created_at":"2024-06-14T08:06:07Z","updated_at":"2024-06-14T08:06:07Z","author_association":"CONTRIBUTOR","body":"@hanno-becker Done, please have a look again, thanks ","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167482467/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-14T08:06:09Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39295218333","type":"IssueCommentEvent","actor":{"id":22537733,"login":"rod-chapman","display_login":"rod-chapman","gravatar_id":"","url":"https://api.github.com/users/rod-chapman","avatar_url":"https://avatars.githubusercontent.com/u/22537733?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/59","id":2350964817,"node_id":"I_kwDOLh-nxs6MIOBR","number":59,"title":"Can we use bsd brace style please for compatibility with CBMC contracts?","user":{"login":"rod-chapman","id":22537733,"node_id":"MDQ6VXNlcjIyNTM3NzMz","avatar_url":"https://avatars.githubusercontent.com/u/22537733?v=4","gravatar_id":"","url":"https://api.github.com/users/rod-chapman","html_url":"https://github.com/rod-chapman","followers_url":"https://api.github.com/users/rod-chapman/followers","following_url":"https://api.github.com/users/rod-chapman/following{/other_user}","gists_url":"https://api.github.com/users/rod-chapman/gists{/gist_id}","starred_url":"https://api.github.com/users/rod-chapman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rod-chapman/subscriptions","organizations_url":"https://api.github.com/users/rod-chapman/orgs","repos_url":"https://api.github.com/users/rod-chapman/repos","events_url":"https://api.github.com/users/rod-chapman/events{/privacy}","received_events_url":"https://api.github.com/users/rod-chapman/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2024-06-13T12:01:49Z","updated_at":"2024-06-14T08:20:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I would like to propose that we switch astyle's indenting mode from \"google\" to \"bsd\".\r\n\r\nThe \"google\" style places the opening brace on the same line as the preceeding construct, so it appears on the same line as the final term of a loop invariant contract for CBMC. For example, formatting poly.c yields:\r\n\r\n```\r\n    for (size_t i = 0; i < KYBER_N / 8; i++)\r\n        __CPROVER_assigns(i, u, __CPROVER_object_whole(t), __CPROVER_object_whole(r))\r\n        __CPROVER_loop_invariant(i <= KYBER_N) {\r\n```\r\nwhich makes it hard to edit the invariant without accidentially losing or mis-placing the opening brace.\r\n\r\nWith \"bsd\" style, this comes out as:\r\n\r\n```\r\n    for (size_t i = 0; i < KYBER_N / 8; i++)\r\n        __CPROVER_assigns(i, u, __CPROVER_object_whole(t), __CPROVER_object_whole(r))\r\n        __CPROVER_loop_invariant(i <= KYBER_N)\r\n    {\r\n```\r\nso that lines of the invariant can be added, removed or edited without fear of damaging the location of the brace.\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167508413","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/59#issuecomment-2167508413","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59","id":2167508413,"node_id":"IC_kwDOLh-nxs6BMY29","user":{"login":"rod-chapman","id":22537733,"node_id":"MDQ6VXNlcjIyNTM3NzMz","avatar_url":"https://avatars.githubusercontent.com/u/22537733?v=4","gravatar_id":"","url":"https://api.github.com/users/rod-chapman","html_url":"https://github.com/rod-chapman","followers_url":"https://api.github.com/users/rod-chapman/followers","following_url":"https://api.github.com/users/rod-chapman/following{/other_user}","gists_url":"https://api.github.com/users/rod-chapman/gists{/gist_id}","starred_url":"https://api.github.com/users/rod-chapman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rod-chapman/subscriptions","organizations_url":"https://api.github.com/users/rod-chapman/orgs","repos_url":"https://api.github.com/users/rod-chapman/repos","events_url":"https://api.github.com/users/rod-chapman/events{/privacy}","received_events_url":"https://api.github.com/users/rod-chapman/received_events","type":"User","site_admin":false},"created_at":"2024-06-14T08:20:26Z","updated_at":"2024-06-14T08:20:26Z","author_association":"NONE","body":"I will make this happen atomically when main is reasonably stable. The commit will touch almost all source files, so you'll need to rebase your branches.","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167508413/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-14T08:20:27Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"39295287096","type":"IssueCommentEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/59","id":2350964817,"node_id":"I_kwDOLh-nxs6MIOBR","number":59,"title":"Can we use bsd brace style please for compatibility with CBMC contracts?","user":{"login":"rod-chapman","id":22537733,"node_id":"MDQ6VXNlcjIyNTM3NzMz","avatar_url":"https://avatars.githubusercontent.com/u/22537733?v=4","gravatar_id":"","url":"https://api.github.com/users/rod-chapman","html_url":"https://github.com/rod-chapman","followers_url":"https://api.github.com/users/rod-chapman/followers","following_url":"https://api.github.com/users/rod-chapman/following{/other_user}","gists_url":"https://api.github.com/users/rod-chapman/gists{/gist_id}","starred_url":"https://api.github.com/users/rod-chapman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rod-chapman/subscriptions","organizations_url":"https://api.github.com/users/rod-chapman/orgs","repos_url":"https://api.github.com/users/rod-chapman/repos","events_url":"https://api.github.com/users/rod-chapman/events{/privacy}","received_events_url":"https://api.github.com/users/rod-chapman/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2024-06-13T12:01:49Z","updated_at":"2024-06-14T08:22:43Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I would like to propose that we switch astyle's indenting mode from \"google\" to \"bsd\".\r\n\r\nThe \"google\" style places the opening brace on the same line as the preceeding construct, so it appears on the same line as the final term of a loop invariant contract for CBMC. For example, formatting poly.c yields:\r\n\r\n```\r\n    for (size_t i = 0; i < KYBER_N / 8; i++)\r\n        __CPROVER_assigns(i, u, __CPROVER_object_whole(t), __CPROVER_object_whole(r))\r\n        __CPROVER_loop_invariant(i <= KYBER_N) {\r\n```\r\nwhich makes it hard to edit the invariant without accidentially losing or mis-placing the opening brace.\r\n\r\nWith \"bsd\" style, this comes out as:\r\n\r\n```\r\n    for (size_t i = 0; i < KYBER_N / 8; i++)\r\n        __CPROVER_assigns(i, u, __CPROVER_object_whole(t), __CPROVER_object_whole(r))\r\n        __CPROVER_loop_invariant(i <= KYBER_N)\r\n    {\r\n```\r\nso that lines of the invariant can be added, removed or edited without fear of damaging the location of the brace.\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167512639","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/59#issuecomment-2167512639","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/59","id":2167512639,"node_id":"IC_kwDOLh-nxs6BMZ4_","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"created_at":"2024-06-14T08:22:43Z","updated_at":"2024-06-14T08:22:43Z","author_association":"CONTRIBUTOR","body":"That's no problem. But yes, agree it should be a standalone PR doing nothing else but the style update.","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2167512639/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-14T08:22:44Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
