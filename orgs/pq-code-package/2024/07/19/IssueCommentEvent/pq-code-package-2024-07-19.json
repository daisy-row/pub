{"id":"40282321180","type":"IssueCommentEvent","actor":{"id":3984960,"login":"mkannwischer","display_login":"mkannwischer","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","avatar_url":"https://avatars.githubusercontent.com/u/3984960?"},"repo":{"id":752386120,"name":"pq-code-package/tsc","url":"https://api.github.com/repos/pq-code-package/tsc"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/tsc/issues/86","repository_url":"https://api.github.com/repos/pq-code-package/tsc","labels_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/comments","events_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/events","html_url":"https://github.com/pq-code-package/tsc/issues/86","id":2417755147,"node_id":"I_kwDOLNiASM6QHAQL","number":86,"title":"Should PQCP implementations ship `randombytes()`","user":{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2024-07-19T03:05:05Z","updated_at":"2024-07-19T03:32:42Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"During the 2024-07-18 TSC meeting, we were discussing https://github.com/pq-code-package/tsc/issues/4. \r\n\r\nLet me try to summarize (please correct me if I got something wrong):\r\nThere appears to be consensus that the derandomized APIs should be supported by all implementations in the PQ Code Package.\r\nThe discussion then drifted towards if the randomized APIs should also be required or not. Some opinions were raised that the derandomized versions are much easier to integrate into other libraries/software as secure randomness can be provided from the outside. This lead to discussions whether or not we should take on the responsibility of providing a good source of randomness at all or if this should be expected to be provided by the user. \r\n\r\nWhile these discussions were mostly about APIs, I think it makes sense to discuss this separately: Do we want to include a decent default randombytes implementation or not? \r\nIf we don't, then not supporting the randomized APIs sounds like a reasonable choice as it will ease the integration. \r\nIf we do, then supporting the randomized APIs are easier to use and harder to mis-use.\r\nSome strong opinions on this have been voiced, and the conclusion was that we need to discuss this in a broader group. We may want a TSC vote on this in case we want this to be consistent across projects.\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/tsc/issues/comments/2238048507","html_url":"https://github.com/pq-code-package/tsc/issues/86#issuecomment-2238048507","issue_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86","id":2238048507,"node_id":"IC_kwDOLNiASM6FZej7","user":{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},"created_at":"2024-07-19T03:32:41Z","updated_at":"2024-07-19T03:32:41Z","author_association":"CONTRIBUTOR","body":"My view is that the developers and maintainers of pqcp are (hopefully) more qualified to pick a randombytes implementation that is less likely going to result in disasters. This at least applies to common platforms and operating systems.\r\nThis may not matter for integrations into other big crypto libraries like liboqs or mbedtls, but it does matter for smaller projects developed by people with less cryptography experience.\r\n\r\nI'd very much prefer to provide a good default choice even if we want to document that user should replace the randomness generation with their own suitably secure randomness generator. I think we should make it easy to replace it, but very hard to misuse. \r\n\r\nI'm worried that we will see pqcp code being used in the wild with hard-coded randomness - because who really knows what `coins` is supposed to be? I am not sure how we can avoid this if we really decide to _only_ support the derandomized APIs. \r\n\r\nTo confirm my point, I asked ChatGPT to use the API we proposed in #4 (mostly for fun - I don't think this is what we should worry about most). It produced the following code:\r\n```c\r\n...\r\nuint8_t coins[32];     // Random coins\r\n\r\n// In a real-world scenario, you would obtain these from a proper source\r\nfor (int i = 0; i < 32; i++) {\r\n    coins[i] = (uint8_t)(255 - i);\r\n}\r\n\r\n// Call the pqcp_mlkem512_ref_enc_derand function\r\nint result = pqcp_mlkem512_ref_enc_derand(ct, ss, pk, coins);\r\n```\r\nThis results in convieniently useless crypto. At least ChatGPT seems to know that you should not do it like this, but who will really read that comment here?\r\nI am also curious where it learned that _this_ is a good example of initializing randomness. \r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/tsc/issues/comments/2238048507/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-07-19T03:32:42Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"40283064372","type":"IssueCommentEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":752386120,"name":"pq-code-package/tsc","url":"https://api.github.com/repos/pq-code-package/tsc"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/tsc/issues/86","repository_url":"https://api.github.com/repos/pq-code-package/tsc","labels_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/comments","events_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/events","html_url":"https://github.com/pq-code-package/tsc/issues/86","id":2417755147,"node_id":"I_kwDOLNiASM6QHAQL","number":86,"title":"Should PQCP implementations ship `randombytes()`","user":{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2024-07-19T03:05:05Z","updated_at":"2024-07-19T04:25:22Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"During the 2024-07-18 TSC meeting, we were discussing https://github.com/pq-code-package/tsc/issues/4. \r\n\r\nLet me try to summarize (please correct me if I got something wrong):\r\nThere appears to be consensus that the derandomized APIs should be supported by all implementations in the PQ Code Package.\r\nThe discussion then drifted towards if the randomized APIs should also be required or not. Some opinions were raised that the derandomized versions are much easier to integrate into other libraries/software as secure randomness can be provided from the outside. This lead to discussions whether or not we should take on the responsibility of providing a good source of randomness at all or if this should be expected to be provided by the user. \r\n\r\nWhile these discussions were mostly about APIs, I think it makes sense to discuss this separately: Do we want to include a decent default randombytes implementation or not? \r\nIf we don't, then not supporting the randomized APIs sounds like a reasonable choice as it will ease the integration. \r\nIf we do, then the randomized APIs are easier to use and harder to misuse.\r\nSome strong opinions on this have been voiced, and the conclusion was that we need to discuss this in a broader group. We may want a TSC vote on this in case we want this to be consistent across projects.\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/tsc/issues/comments/2238090087","html_url":"https://github.com/pq-code-package/tsc/issues/86#issuecomment-2238090087","issue_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86","id":2238090087,"node_id":"IC_kwDOLNiASM6FZotn","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"created_at":"2024-07-19T04:25:21Z","updated_at":"2024-07-19T04:25:21Z","author_association":"CONTRIBUTOR","body":"I lean towards thinking that providing a good source of randomness is a difficult problem on its own that is outside of the scope of PQCP and should be handled by whatever higher-level stack PQCP will be used with.\r\n\r\nSome thoughts on the risk @mkannwischer flags regarding people directly using the PQCP API and doing it badly by providing poor random coins:\r\n- As @mkannwischer says, we should distinguish the question of scope from the question of API. The issue of a `coins` parameter that's tempting to use with 0's first and then forget about it, is one of API, not one of scope. If we decide randomness is out of scope, one could instead consider an API with an unimplemented `randombytes` hook that users need to link against, and instead of a `coins` parameter the user has to pass a randomness context. Something like `int mlkem512_ref_enc_derand(uint8_t *ct, uint8_t *ss, const uint8_t *pk, void *rnd_ctxt);` where `rnd_ctxt` is an opaque pointer passed to a user-provided stateful `randombytes`. I'm not saying that this is necessarily the best API, but it would be easier to flag in the documentation of `randombytes()` that this MUST be a proper source of randomness, and it takes more effort for a user to ignore -- so certainly there's options to consider other than necessarily having a plain `coins` parameter.\r\n- How likely are customers of PQCP that do _just_ use PQCP and not also another cryptographic stack? Using just PQCP would already be a bad idea because you should be using some hybrid PK scheme, not solely rely on PQCP. So I'm not sure if we even serve the customer well by making it easy to use PQCP standalone.","reactions":{"url":"https://api.github.com/repos/pq-code-package/tsc/issues/comments/2238090087/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-07-19T04:25:23Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"40283766891","type":"IssueCommentEvent","actor":{"id":3984960,"login":"mkannwischer","display_login":"mkannwischer","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","avatar_url":"https://avatars.githubusercontent.com/u/3984960?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/36","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/36/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/36/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/36/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/36","id":2288933813,"node_id":"I_kwDOLh-nxs6Iblu1","number":36,"title":"Add AArch64 implementation for 4-way parallel Keccak ","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2024-05-10T05:00:33Z","updated_at":"2024-07-19T05:09:14Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Partly implements: #33 \r\nDepends on: #35 \r\n\r\nAcceptance criteria:\r\n- [ ] A mechanism is provided to replace the default C-implementation of the C-interface to 4-way parallel Keccak established in #35 by alternative implementations.\r\n- [ ] At least one alternative 4-way parallel Keccak implementation in AArch64 assembly is provided from [Matthias' and Hanno's paper](https://kannwischer.eu/papers/2022_armv8keccak.pdf).","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/36/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/36/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2238169460","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/36#issuecomment-2238169460","issue_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/36","id":2238169460,"node_id":"IC_kwDOLh-nxs6FZ8F0","user":{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},"created_at":"2024-07-19T05:09:14Z","updated_at":"2024-07-19T05:09:14Z","author_association":"CONTRIBUTOR","body":"I've started working on a cleaned up version of https://eprint.iacr.org/2022/1243 here: https://github.com/slothy-optimizer/slothy/pull/65.\r\nI'll likely start by adding a Keccakx1 implementation on the scalar unit first. \r\nThen add hybrid implementations w/ and w/o SHA-3 instructions. \r\n\r\nI think these 3 variants (potentially with different microarchitectural optimizations), should give us good performance on all target platforms. This will take a while though. \r\n\r\nFormal verification could be done by equivalence checking using cryptoline: https://github.com/fmlab-iis/cryptoline/blob/master/examples/XKCP/KeccakP-1600/ARMv8A/KeccakP1600_Permute_24rounds.cl (which in turn uses equivalence checking to the Keccak's teams C reference implementation). A brief chat about this with the cryptoline developers suggests this is going to be easy. ","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/comments/2238169460/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-07-19T05:09:15Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"40302467542","type":"IssueCommentEvent","actor":{"id":9219016,"login":"cothan","display_login":"cothan","gravatar_id":"","url":"https://api.github.com/users/cothan","avatar_url":"https://avatars.githubusercontent.com/u/9219016?"},"repo":{"id":752386120,"name":"pq-code-package/tsc","url":"https://api.github.com/repos/pq-code-package/tsc"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/pq-code-package/tsc/issues/86","repository_url":"https://api.github.com/repos/pq-code-package/tsc","labels_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/comments","events_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/events","html_url":"https://github.com/pq-code-package/tsc/issues/86","id":2417755147,"node_id":"I_kwDOLNiASM6QHAQL","number":86,"title":"Should PQCP implementations ship `randombytes()`","user":{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2024-07-19T03:05:05Z","updated_at":"2024-07-19T16:42:09Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"During the 2024-07-18 TSC meeting, we were discussing https://github.com/pq-code-package/tsc/issues/4. \r\n\r\nLet me try to summarize (please correct me if I got something wrong):\r\nThere appears to be consensus that the derandomized APIs should be supported by all implementations in the PQ Code Package.\r\nThe discussion then drifted towards if the randomized APIs should also be required or not. Some opinions were raised that the derandomized versions are much easier to integrate into other libraries/software as secure randomness can be provided from the outside. This lead to discussions whether or not we should take on the responsibility of providing a good source of randomness at all or if this should be expected to be provided by the user. \r\n\r\nWhile these discussions were mostly about APIs, I think it makes sense to discuss this separately: Do we want to include a decent default randombytes implementation or not? \r\nIf we don't, then not supporting the randomized APIs sounds like a reasonable choice as it will ease the integration. \r\nIf we do, then the randomized APIs are easier to use and harder to misuse.\r\nSome strong opinions on this have been voiced, and the conclusion was that we need to discuss this in a broader group. We may want a TSC vote on this in case we want this to be consistent across projects.\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/pq-code-package/tsc/issues/comments/2239616904","html_url":"https://github.com/pq-code-package/tsc/issues/86#issuecomment-2239616904","issue_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86","id":2239616904,"node_id":"IC_kwDOLNiASM6FfdeI","user":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"created_at":"2024-07-19T16:42:08Z","updated_at":"2024-07-19T16:42:08Z","author_association":"CONTRIBUTOR","body":"I lean towards providing `randombytes()` in PQCP code.\r\nI like the idea of \"it works.\" When \"it doesn't work\", the as-is PQCP `randombytes()` \"shouldn't compile\", then the developer must sit down and read the manual.\r\n\r\n- PQCP should ship the `randombytes()` function for the \"it works!\" idea. This will make the majority happy. \r\n- When it doesn't work, any potential error should appear at compile time, IMO. In that case, I'm sure the developers know what they are dealing with on their platforms/OS, perhaps they already have a solution somewhere in their stack.\r\n\r\nI'm concerned that if `randombytes()` isn't included in PQCP or if it complicates the API, things can easily go wrong.","reactions":{"url":"https://api.github.com/repos/pq-code-package/tsc/issues/comments/2239616904/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-07-19T16:42:09Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
