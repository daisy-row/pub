{"id":"40281894548","type":"IssuesEvent","actor":{"id":3984960,"login":"mkannwischer","display_login":"mkannwischer","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","avatar_url":"https://avatars.githubusercontent.com/u/3984960?"},"repo":{"id":752386120,"name":"pq-code-package/tsc","url":"https://api.github.com/repos/pq-code-package/tsc"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/pq-code-package/tsc/issues/86","repository_url":"https://api.github.com/repos/pq-code-package/tsc","labels_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/comments","events_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/events","html_url":"https://github.com/pq-code-package/tsc/issues/86","id":2417755147,"node_id":"I_kwDOLNiASM6QHAQL","number":86,"title":"Should PQCP implementations ship `randombytes()`","user":{"login":"mkannwischer","id":3984960,"node_id":"MDQ6VXNlcjM5ODQ5NjA=","avatar_url":"https://avatars.githubusercontent.com/u/3984960?v=4","gravatar_id":"","url":"https://api.github.com/users/mkannwischer","html_url":"https://github.com/mkannwischer","followers_url":"https://api.github.com/users/mkannwischer/followers","following_url":"https://api.github.com/users/mkannwischer/following{/other_user}","gists_url":"https://api.github.com/users/mkannwischer/gists{/gist_id}","starred_url":"https://api.github.com/users/mkannwischer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkannwischer/subscriptions","organizations_url":"https://api.github.com/users/mkannwischer/orgs","repos_url":"https://api.github.com/users/mkannwischer/repos","events_url":"https://api.github.com/users/mkannwischer/events{/privacy}","received_events_url":"https://api.github.com/users/mkannwischer/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-07-19T03:05:05Z","updated_at":"2024-07-19T03:05:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"During the 2024-07-18 TSC meeting, we were discussing https://github.com/pq-code-package/tsc/issues/4. \r\n\r\nLet me try to summarize (please correct me if I got something wrong):\r\nThere appears to be consensus that the derandomized APIs should be supported by all implementations in the PQ Code Package.\r\nThe discussion then drifted towards if the randomized APIs should also be required or not. Some opinions were raised that the derandomized versions are much easier to integrate into other libraries/software as secure randomness can be provided from the outside. This lead to discussions whether or not we should take on the responsibility of providing a good source of randomness at all or if this should be expected to be provided by the user. \r\n\r\nWhile these discussions were mostly about APIs, I think it makes sense to discuss this separately: Do we want to include a decent default randombytes implementation or not? \r\nIf we don't, then not supporting the randomized APIs sounds like a reasonable choice as it will ease the integration. \r\nIf we do, then supporting the randomized APIs are easier to use and harder to mis-use.\r\nSome strong opinions on this have been voiced, and the conclusion was that we need to discuss this in a broader group. We may want a TSC vote on this in case we want this to be consistent across projects.\r\n","reactions":{"url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/tsc/issues/86/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2024-07-19T03:05:07Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
{"id":"40281917616","type":"IssuesEvent","actor":{"id":26892988,"login":"hanno-becker","display_login":"hanno-becker","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","avatar_url":"https://avatars.githubusercontent.com/u/26892988?"},"repo":{"id":773826502,"name":"pq-code-package/mlkem-c-aarch64","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/35","repository_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64","labels_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/35/labels{/name}","comments_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/35/comments","events_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/35/events","html_url":"https://github.com/pq-code-package/mlkem-c-aarch64/issues/35","id":2288929781,"node_id":"I_kwDOLh-nxs6Ibkv1","number":35,"title":"Add internal interface to 4-way Keccak and implement C-fallback","user":{"login":"hanno-becker","id":26892988,"node_id":"MDQ6VXNlcjI2ODkyOTg4","avatar_url":"https://avatars.githubusercontent.com/u/26892988?v=4","gravatar_id":"","url":"https://api.github.com/users/hanno-becker","html_url":"https://github.com/hanno-becker","followers_url":"https://api.github.com/users/hanno-becker/followers","following_url":"https://api.github.com/users/hanno-becker/following{/other_user}","gists_url":"https://api.github.com/users/hanno-becker/gists{/gist_id}","starred_url":"https://api.github.com/users/hanno-becker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanno-becker/subscriptions","organizations_url":"https://api.github.com/users/hanno-becker/orgs","repos_url":"https://api.github.com/users/hanno-becker/repos","events_url":"https://api.github.com/users/hanno-becker/events{/privacy}","received_events_url":"https://api.github.com/users/hanno-becker/received_events","type":"User","site_admin":false},"labels":[{"id":6707250812,"node_id":"LA_kwDOLh-nxs8AAAABj8iGfA","url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2024-05-10T04:56:27Z","updated_at":"2024-07-19T03:06:41Z","closed_at":"2024-07-19T03:06:41Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Partly implements: #33 \r\n\r\nAcceptance criteria:\r\n- [ ] The reference implementation is modified to leverage an internal C interface to a 4-way parallel Keccak permutation.\r\n- [ ] The interface is implemented by fallback to the standard 1-way Keccak permutation in C.\r\n\r\nAdding AArch64 assembly for 4-way parallel Keccak is _not_ part of this issue.","reactions":{"url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/35/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pq-code-package/mlkem-c-aarch64/issues/35/timeline","performed_via_github_app":null,"state_reason":"completed"}},"public":true,"created_at":"2024-07-19T03:06:42Z","org":{"id":158063050,"login":"pq-code-package","gravatar_id":"","url":"https://api.github.com/orgs/pq-code-package","avatar_url":"https://avatars.githubusercontent.com/u/158063050?"}}
