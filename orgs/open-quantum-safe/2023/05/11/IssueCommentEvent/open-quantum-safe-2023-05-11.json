{"id":"28988958554","type":"IssueCommentEvent","actor":{"id":5923577,"login":"mouse07410","display_login":"mouse07410","gravatar_id":"","url":"https://api.github.com/users/mouse07410","avatar_url":"https://avatars.githubusercontent.com/u/5923577?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1452","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1452/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1452/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1452/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1452","id":1702470757,"node_id":"I_kwDOA-eq3c5leaRl","number":1452,"title":"Problem running tests","user":{"login":"mouse07410","id":5923577,"node_id":"MDQ6VXNlcjU5MjM1Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/5923577?v=4","gravatar_id":"","url":"https://api.github.com/users/mouse07410","html_url":"https://github.com/mouse07410","followers_url":"https://api.github.com/users/mouse07410/followers","following_url":"https://api.github.com/users/mouse07410/following{/other_user}","gists_url":"https://api.github.com/users/mouse07410/gists{/gist_id}","starred_url":"https://api.github.com/users/mouse07410/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mouse07410/subscriptions","organizations_url":"https://api.github.com/users/mouse07410/orgs","repos_url":"https://api.github.com/users/mouse07410/repos","events_url":"https://api.github.com/users/mouse07410/events{/privacy}","received_events_url":"https://api.github.com/users/mouse07410/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2023-05-09T17:48:04Z","updated_at":"2023-05-11T02:39:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nOn a newly-prepared platform , I'm getting a ton of errors trying to run test-suite:\r\n```text\r\n.  .  .\r\ntests/test_speed.py:21: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/Users/ur20980/src/liboqs/build/tests/speed_sig', 'SPHINCS+-SHAKE256-256s-robust', '-f']\r\nworking_dir = '.'\r\nenv = {'ANT_OPTS': '-Dhttp.proxyHost=llproxy.llan.ll.mit.edu -Dhttp.proxyPort=8080', 'AS': 'yasm -m amd64 -f macho64 -p gas -X gnu ', 'AS_INTEGRATED_ASSEMBLER': '1', 'BASH_SILENCE_DEPRECATION_WARNING': '1', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -4\r\n\r\ntests/helpers.py:42: AssertionError\r\n-------------------------------------------- Captured stdout call --------------------------------------------\r\n. > /Users/ur20980/src/liboqs/build/tests/speed_sig SPHINCS+-SHAKE256-256s-robust -f\r\n\r\n__________________________________ test_sig[SPHINCS+-SHAKE256-256f-simple] ___________________________________\r\n[gw11] darwin -- Python 3.11.3 /opt/local/bin/python3\r\n\r\nsig_name = 'SPHINCS+-SHAKE256-256f-simple'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_sig(sig_name):\r\n        kats = helpers.get_kats(\"sig\")\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess( [helpers.path_to_executable('speed_sig'), sig_name, \"-f\"])\r\n\r\ntests/test_speed.py:21: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/Users/ur20980/src/liboqs/build/tests/speed_sig', 'SPHINCS+-SHAKE256-256f-simple', '-f']\r\nworking_dir = '.'\r\nenv = {'ANT_OPTS': '-Dhttp.proxyHost=llproxy.llan.ll.mit.edu -Dhttp.proxyPort=8080', 'AS': 'yasm -m amd64 -f macho64 -p gas -X gnu ', 'AS_INTEGRATED_ASSEMBLER': '1', 'BASH_SILENCE_DEPRECATION_WARNING': '1', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -4\r\n\r\ntests/helpers.py:42: AssertionError\r\n-------------------------------------------- Captured stdout call --------------------------------------------\r\n. > /Users/ur20980/src/liboqs/build/tests/speed_sig SPHINCS+-SHAKE256-256f-simple -f\r\n\r\n__________________________________ test_sig[SPHINCS+-SHAKE256-192f-robust] ___________________________________\r\n[gw4] darwin -- Python 3.11.3 /opt/local/bin/python3\r\n\r\nsig_name = 'SPHINCS+-SHAKE256-192f-robust'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_sig(sig_name):\r\n        kats = helpers.get_kats(\"sig\")\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess( [helpers.path_to_executable('speed_sig'), sig_name, \"-f\"])\r\n\r\ntests/test_speed.py:21: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/Users/ur20980/src/liboqs/build/tests/speed_sig', 'SPHINCS+-SHAKE256-192f-robust', '-f']\r\nworking_dir = '.'\r\nenv = {'ANT_OPTS': '-Dhttp.proxyHost=llproxy.llan.ll.mit.edu -Dhttp.proxyPort=8080', 'AS': 'yasm -m amd64 -f macho64 -p gas -X gnu ', 'AS_INTEGRATED_ASSEMBLER': '1', 'BASH_SILENCE_DEPRECATION_WARNING': '1', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -4\r\n\r\ntests/helpers.py:42: AssertionError\r\n-------------------------------------------- Captured stdout call --------------------------------------------\r\n. > /Users/ur20980/src/liboqs/build/tests/speed_sig SPHINCS+-SHAKE256-192f-robust -f\r\n\r\n__________________________________ test_sig[SPHINCS+-SHAKE256-256s-simple] ___________________________________\r\n[gw2] darwin -- Python 3.11.3 /opt/local/bin/python3\r\n\r\nsig_name = 'SPHINCS+-SHAKE256-256s-simple'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_sig(sig_name):\r\n        kats = helpers.get_kats(\"sig\")\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess( [helpers.path_to_executable('speed_sig'), sig_name, \"-f\"])\r\n\r\ntests/test_speed.py:21: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/Users/ur20980/src/liboqs/build/tests/speed_sig', 'SPHINCS+-SHAKE256-256s-simple', '-f']\r\nworking_dir = '.'\r\nenv = {'ANT_OPTS': '-Dhttp.proxyHost=llproxy.llan.ll.mit.edu -Dhttp.proxyPort=8080', 'AS': 'yasm -m amd64 -f macho64 -p gas -X gnu ', 'AS_INTEGRATED_ASSEMBLER': '1', 'BASH_SILENCE_DEPRECATION_WARNING': '1', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -4\r\n\r\ntests/helpers.py:42: AssertionError\r\n-------------------------------------------- Captured stdout call --------------------------------------------\r\n. > /Users/ur20980/src/liboqs/build/tests/speed_sig SPHINCS+-SHAKE256-256s-simple -f\r\n\r\n___________________________________ test_sig[SPHINCS+-SHA256-128f-robust] ____________________________________\r\n[gw9] darwin -- Python 3.11.3 /opt/local/bin/python3\r\n\r\nsig_name = 'SPHINCS+-SHA256-128f-robust'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_sig(sig_name):\r\n        kats = helpers.get_kats(\"sig\")\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)): pytest.skip('Not enabled')\r\n>       output = helpers.run_subprocess(\r\n            [helpers.path_to_executable('kat_sig'), sig_name],\r\n        )\r\n\r\ntests/test_kat.py:29: \r\n.  .  .\r\n```\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Clone, build optimized version, as per README.\r\n2. Go to `build` subdirectory.\r\n3. `ninja run_tests`\r\n4. See error\r\n\r\n**Expected behavior**\r\nTests passing or being skipped, test-scripts not crashing.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: MacOS Ventura 13.3.1 (a)\r\n - OpenSSL version: 3.2.0-dev\r\n - Compiler version used: Apple Clang \r\n - Build variables used:\r\n ```\r\nOPT=\"-DOQS_DIST_BUILD=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release\"\r\nenv RUN_TESTS_PARALLEL_UPPER=FALSE cmake -GNinja .. -DOQS_USE_OPENSSL=ON ${OPT} -DCMAKE_INSTALL_PREFIX=\"${HOME}/openssl-3\"\r\n```\r\n - liboqs version: current main\r\n\r\n**Additional context**\r\nI hope you can point me at where/what in Python environment seems missing - maybe an older version of some module, or such...?\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1452/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1452/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1543247221","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1452#issuecomment-1543247221","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1452","id":1543247221,"node_id":"IC_kwDOA-eq3c5b_BV1","user":{"login":"mouse07410","id":5923577,"node_id":"MDQ6VXNlcjU5MjM1Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/5923577?v=4","gravatar_id":"","url":"https://api.github.com/users/mouse07410","html_url":"https://github.com/mouse07410","followers_url":"https://api.github.com/users/mouse07410/followers","following_url":"https://api.github.com/users/mouse07410/following{/other_user}","gists_url":"https://api.github.com/users/mouse07410/gists{/gist_id}","starred_url":"https://api.github.com/users/mouse07410/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mouse07410/subscriptions","organizations_url":"https://api.github.com/users/mouse07410/orgs","repos_url":"https://api.github.com/users/mouse07410/repos","events_url":"https://api.github.com/users/mouse07410/events{/privacy}","received_events_url":"https://api.github.com/users/mouse07410/received_events","type":"User","site_admin":false},"created_at":"2023-05-11T02:39:34Z","updated_at":"2023-05-11T02:39:34Z","author_association":"NONE","body":"Correct workaround is `-DOQS_USE_OPENSSL=OFF`:\r\n```text\r\n== 458 passed, 220 skipped in 68.31s (0:01:08) ==\r\n```\r\n\r\nLooking forward to seeing the bug fix merged. TNX","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1543247221/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-05-11T02:39:34Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"28990056045","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1452","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1452/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1452/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1452/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1452","id":1702470757,"node_id":"I_kwDOA-eq3c5leaRl","number":1452,"title":"Bug in OSX integration of OpenSSL","user":{"login":"mouse07410","id":5923577,"node_id":"MDQ6VXNlcjU5MjM1Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/5923577?v=4","gravatar_id":"","url":"https://api.github.com/users/mouse07410","html_url":"https://github.com/mouse07410","followers_url":"https://api.github.com/users/mouse07410/followers","following_url":"https://api.github.com/users/mouse07410/following{/other_user}","gists_url":"https://api.github.com/users/mouse07410/gists{/gist_id}","starred_url":"https://api.github.com/users/mouse07410/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mouse07410/subscriptions","organizations_url":"https://api.github.com/users/mouse07410/orgs","repos_url":"https://api.github.com/users/mouse07410/repos","events_url":"https://api.github.com/users/mouse07410/events{/privacy}","received_events_url":"https://api.github.com/users/mouse07410/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2023-05-09T17:48:04Z","updated_at":"2023-05-11T04:17:42Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nOn a newly-prepared platform , I'm getting a ton of errors trying to run test-suite:\r\n```text\r\n.  .  .\r\ntests/test_speed.py:21: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/Users/ur20980/src/liboqs/build/tests/speed_sig', 'SPHINCS+-SHAKE256-256s-robust', '-f']\r\nworking_dir = '.'\r\nenv = {'ANT_OPTS': '-Dhttp.proxyHost=llproxy.llan.ll.mit.edu -Dhttp.proxyPort=8080', 'AS': 'yasm -m amd64 -f macho64 -p gas -X gnu ', 'AS_INTEGRATED_ASSEMBLER': '1', 'BASH_SILENCE_DEPRECATION_WARNING': '1', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -4\r\n\r\ntests/helpers.py:42: AssertionError\r\n-------------------------------------------- Captured stdout call --------------------------------------------\r\n. > /Users/ur20980/src/liboqs/build/tests/speed_sig SPHINCS+-SHAKE256-256s-robust -f\r\n\r\n__________________________________ test_sig[SPHINCS+-SHAKE256-256f-simple] ___________________________________\r\n[gw11] darwin -- Python 3.11.3 /opt/local/bin/python3\r\n\r\nsig_name = 'SPHINCS+-SHAKE256-256f-simple'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_sig(sig_name):\r\n        kats = helpers.get_kats(\"sig\")\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess( [helpers.path_to_executable('speed_sig'), sig_name, \"-f\"])\r\n\r\ntests/test_speed.py:21: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/Users/ur20980/src/liboqs/build/tests/speed_sig', 'SPHINCS+-SHAKE256-256f-simple', '-f']\r\nworking_dir = '.'\r\nenv = {'ANT_OPTS': '-Dhttp.proxyHost=llproxy.llan.ll.mit.edu -Dhttp.proxyPort=8080', 'AS': 'yasm -m amd64 -f macho64 -p gas -X gnu ', 'AS_INTEGRATED_ASSEMBLER': '1', 'BASH_SILENCE_DEPRECATION_WARNING': '1', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -4\r\n\r\ntests/helpers.py:42: AssertionError\r\n-------------------------------------------- Captured stdout call --------------------------------------------\r\n. > /Users/ur20980/src/liboqs/build/tests/speed_sig SPHINCS+-SHAKE256-256f-simple -f\r\n\r\n__________________________________ test_sig[SPHINCS+-SHAKE256-192f-robust] ___________________________________\r\n[gw4] darwin -- Python 3.11.3 /opt/local/bin/python3\r\n\r\nsig_name = 'SPHINCS+-SHAKE256-192f-robust'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_sig(sig_name):\r\n        kats = helpers.get_kats(\"sig\")\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess( [helpers.path_to_executable('speed_sig'), sig_name, \"-f\"])\r\n\r\ntests/test_speed.py:21: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/Users/ur20980/src/liboqs/build/tests/speed_sig', 'SPHINCS+-SHAKE256-192f-robust', '-f']\r\nworking_dir = '.'\r\nenv = {'ANT_OPTS': '-Dhttp.proxyHost=llproxy.llan.ll.mit.edu -Dhttp.proxyPort=8080', 'AS': 'yasm -m amd64 -f macho64 -p gas -X gnu ', 'AS_INTEGRATED_ASSEMBLER': '1', 'BASH_SILENCE_DEPRECATION_WARNING': '1', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -4\r\n\r\ntests/helpers.py:42: AssertionError\r\n-------------------------------------------- Captured stdout call --------------------------------------------\r\n. > /Users/ur20980/src/liboqs/build/tests/speed_sig SPHINCS+-SHAKE256-192f-robust -f\r\n\r\n__________________________________ test_sig[SPHINCS+-SHAKE256-256s-simple] ___________________________________\r\n[gw2] darwin -- Python 3.11.3 /opt/local/bin/python3\r\n\r\nsig_name = 'SPHINCS+-SHAKE256-256s-simple'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_sig(sig_name):\r\n        kats = helpers.get_kats(\"sig\")\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess( [helpers.path_to_executable('speed_sig'), sig_name, \"-f\"])\r\n\r\ntests/test_speed.py:21: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/Users/ur20980/src/liboqs/build/tests/speed_sig', 'SPHINCS+-SHAKE256-256s-simple', '-f']\r\nworking_dir = '.'\r\nenv = {'ANT_OPTS': '-Dhttp.proxyHost=llproxy.llan.ll.mit.edu -Dhttp.proxyPort=8080', 'AS': 'yasm -m amd64 -f macho64 -p gas -X gnu ', 'AS_INTEGRATED_ASSEMBLER': '1', 'BASH_SILENCE_DEPRECATION_WARNING': '1', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -4\r\n\r\ntests/helpers.py:42: AssertionError\r\n-------------------------------------------- Captured stdout call --------------------------------------------\r\n. > /Users/ur20980/src/liboqs/build/tests/speed_sig SPHINCS+-SHAKE256-256s-simple -f\r\n\r\n___________________________________ test_sig[SPHINCS+-SHA256-128f-robust] ____________________________________\r\n[gw9] darwin -- Python 3.11.3 /opt/local/bin/python3\r\n\r\nsig_name = 'SPHINCS+-SHA256-128f-robust'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_sig(sig_name):\r\n        kats = helpers.get_kats(\"sig\")\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)): pytest.skip('Not enabled')\r\n>       output = helpers.run_subprocess(\r\n            [helpers.path_to_executable('kat_sig'), sig_name],\r\n        )\r\n\r\ntests/test_kat.py:29: \r\n.  .  .\r\n```\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Clone, build optimized version, as per README.\r\n2. Go to `build` subdirectory.\r\n3. `ninja run_tests`\r\n4. See error\r\n\r\n**Expected behavior**\r\nTests passing or being skipped, test-scripts not crashing.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: MacOS Ventura 13.3.1 (a)\r\n - OpenSSL version: 3.2.0-dev\r\n - Compiler version used: Apple Clang \r\n - Build variables used:\r\n ```\r\nOPT=\"-DOQS_DIST_BUILD=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release\"\r\nenv RUN_TESTS_PARALLEL_UPPER=FALSE cmake -GNinja .. -DOQS_USE_OPENSSL=ON ${OPT} -DCMAKE_INSTALL_PREFIX=\"${HOME}/openssl-3\"\r\n```\r\n - liboqs version: current main\r\n\r\n**Additional context**\r\nI hope you can point me at where/what in Python environment seems missing - maybe an older version of some module, or such...?\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1452/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1452/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1543308163","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1452#issuecomment-1543308163","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1452","id":1543308163,"node_id":"IC_kwDOA-eq3c5b_QOD","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-05-11T04:17:42Z","updated_at":"2023-05-11T04:17:42Z","author_association":"MEMBER","body":"> Correct workaround is -DOQS_USE_OPENSSL=OFF\r\n\r\nThanks for the test/reconfirmation. We'll look into this.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1543308163/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-05-11T04:17:42Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"28994616029","type":"IssueCommentEvent","actor":{"id":13785747,"login":"beldmit","display_login":"beldmit","gravatar_id":"","url":"https://api.github.com/users/beldmit","avatar_url":"https://avatars.githubusercontent.com/u/13785747?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1454","id":1705319013,"node_id":"PR_kwDOA-eq3c5QRDw_","number":1454,"title":"Fixing OpenSSL SHA2 incremental API integration","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-05-11T08:25:10Z","updated_at":"2023-05-11T08:27:22Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1454","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1454","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1454.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1454.patch","merged_at":null},"body":"Possibly fixes #1452. Fixes issues in #1420.\r\n\r\n- Corrects SHA2 API documentation\r\n- Checks all SHA2 OpenSSL API return values\r\n- Fixes SHA384 and SHA512 incremental API implementations\r\n- Corrects testing for these APIs\r\n- Enhances test vectors to avoid re-occurrence of problem\r\n\r\n* [yes] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [no] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider), [OQS-OpenSSL](https://github.com/open-quantum-safe/openssl), [OQS-BoringSSL](https://github.com/open-quantum-safe/boringssl), and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1543562483","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1454#issuecomment-1543562483","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454","id":1543562483,"node_id":"IC_kwDOA-eq3c5cAOTz","user":{"login":"beldmit","id":13785747,"node_id":"MDQ6VXNlcjEzNzg1NzQ3","avatar_url":"https://avatars.githubusercontent.com/u/13785747?v=4","gravatar_id":"","url":"https://api.github.com/users/beldmit","html_url":"https://github.com/beldmit","followers_url":"https://api.github.com/users/beldmit/followers","following_url":"https://api.github.com/users/beldmit/following{/other_user}","gists_url":"https://api.github.com/users/beldmit/gists{/gist_id}","starred_url":"https://api.github.com/users/beldmit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/beldmit/subscriptions","organizations_url":"https://api.github.com/users/beldmit/orgs","repos_url":"https://api.github.com/users/beldmit/repos","events_url":"https://api.github.com/users/beldmit/events{/privacy}","received_events_url":"https://api.github.com/users/beldmit/received_events","type":"User","site_admin":false},"created_at":"2023-05-11T08:27:21Z","updated_at":"2023-05-11T08:27:21Z","author_association":"CONTRIBUTOR","body":"As we prefetch objects, it's probably worth exiting in case on initialization failure? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1543562483/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-05-11T08:27:22Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"28995927632","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1454","id":1705319013,"node_id":"PR_kwDOA-eq3c5QRDw_","number":1454,"title":"Fixing OpenSSL SHA2 incremental API integration","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2023-05-11T08:25:10Z","updated_at":"2023-05-11T09:15:45Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1454","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1454","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1454.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1454.patch","merged_at":null},"body":"Possibly fixes #1452. Fixes issues in #1420.\r\n\r\n- Corrects SHA2 API documentation\r\n- Checks all SHA2 OpenSSL API return values\r\n- Fixes SHA384 and SHA512 incremental API implementations\r\n- Corrects testing for these APIs\r\n- Enhances test vectors to avoid re-occurrence of problem\r\n\r\n* [yes] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [no] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider), [OQS-OpenSSL](https://github.com/open-quantum-safe/openssl), [OQS-BoringSSL](https://github.com/open-quantum-safe/boringssl), and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1543636719","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1454#issuecomment-1543636719","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454","id":1543636719,"node_id":"IC_kwDOA-eq3c5cAgbv","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-05-11T09:15:45Z","updated_at":"2023-05-11T09:15:45Z","author_association":"MEMBER","body":"> In theory, the problem is we need only some openssl-provided implementations for a particular application. So lack of SHA3 hashes shouldn't stop using SHA2.\r\n\r\nAgreed. Is anything in this PR precluding this?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1543636719/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-05-11T09:15:45Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"28998350042","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1454","id":1705319013,"node_id":"PR_kwDOA-eq3c5QRDw_","number":1454,"title":"Fixing OpenSSL SHA2 incremental API integration","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2023-05-11T08:25:10Z","updated_at":"2023-05-11T10:48:51Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1454","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1454","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1454.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1454.patch","merged_at":null},"body":"Possibly fixes #1452. Fixes issues in #1420.\r\n\r\n- Corrects SHA2 API documentation\r\n- Checks all SHA2 OpenSSL API return values\r\n- Fixes SHA384 and SHA512 incremental API implementations\r\n- Corrects testing for these APIs\r\n- Enhances test vectors to avoid re-occurrence of problem\r\n\r\n* [yes] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [no] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider), [OQS-OpenSSL](https://github.com/open-quantum-safe/openssl), [OQS-BoringSSL](https://github.com/open-quantum-safe/boringssl), and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1543768018","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1454#issuecomment-1543768018","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1454","id":1543768018,"node_id":"IC_kwDOA-eq3c5cBAfS","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-05-11T10:48:51Z","updated_at":"2023-05-11T10:48:51Z","author_association":"MEMBER","body":"> then it becomes a mess from a certification point of view\r\n\r\n Let's cross that bridge as and if we reach it.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1543768018/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-05-11T10:48:52Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"29002688352","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":218087071,"name":"open-quantum-safe/oqs-demos","url":"https://api.github.com/repos/open-quantum-safe/oqs-demos"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/200","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/200/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/200/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/200/events","html_url":"https://github.com/open-quantum-safe/oqs-demos/issues/200","id":1705780880,"node_id":"I_kwDODP--n85lrCaQ","number":200,"title":"Path to a NodeJS demo","user":{"login":"Utopiah","id":1076655,"node_id":"MDQ6VXNlcjEwNzY2NTU=","avatar_url":"https://avatars.githubusercontent.com/u/1076655?v=4","gravatar_id":"","url":"https://api.github.com/users/Utopiah","html_url":"https://github.com/Utopiah","followers_url":"https://api.github.com/users/Utopiah/followers","following_url":"https://api.github.com/users/Utopiah/following{/other_user}","gists_url":"https://api.github.com/users/Utopiah/gists{/gist_id}","starred_url":"https://api.github.com/users/Utopiah/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Utopiah/subscriptions","organizations_url":"https://api.github.com/users/Utopiah/orgs","repos_url":"https://api.github.com/users/Utopiah/repos","events_url":"https://api.github.com/users/Utopiah/events{/privacy}","received_events_url":"https://api.github.com/users/Utopiah/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-05-11T12:58:46Z","updated_at":"2023-05-11T13:35:02Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"The servers provided, in particular reverse proxies like nginx, cover most Web services.\r\n\r\nStill numerous ones rely on NodeJS directly via popular framework like Express [itself allowing some customization](https://node-security.com/posts/express-https-server/#hardened-tls-configuration).\r\n\r\nMy understanding is that NodeJS ships with OpenSSL and defaults to it with [its cipher suite that can be customized](https://nodejs.org/api/tls.html#modifying-the-default-tls-cipher-suite).\r\n\r\nConsequently I believe a demo could be made by\r\n\r\n1. compiling open-quantum-safe/openssl\r\n2. using a binary compatible NodeJS version and force to use oqs openssl via [LD_LIBRARY_PATH](http://man7.org/linux/man-pages/man8/ld.so.8.html) knowing the [related maintaining position](https://github.com/nodejs/node/blob/main/doc/contributing/maintaining/maintaining-openssl.md) and that numerous issues have been opened on the topic so to verify via `node -pe process.versions`\r\n3. alternatively build NodeJS dynamically linking oqs openssl (via e.g the [FIPS support example](https://github.com/nodejs/node/blob/main/BUILDING.md#fips-support-when-dynamically-linking-openssl) )\r\n4. run the Express demo limited to a specific cipher with e.g `node --tls-cipher-list='falcon512' server.js` then open it with oqs chromium\r\n\r\nDoes this seem like a realistic path?\r\n\r\nEdit: relying on nodejs `--shared-openssl` with the [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) plugin, cf [details on providers](https://wiki.openssl.org/index.php/OpenSSL_3.0#Providers), seems like a more maintainable path.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/200/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/200/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/comments/1544020970","html_url":"https://github.com/open-quantum-safe/oqs-demos/issues/200#issuecomment-1544020970","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/200","id":1544020970,"node_id":"IC_kwDODP--n85cB-Pq","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-05-11T13:35:02Z","updated_at":"2023-05-11T13:35:02Z","author_association":"MEMBER","body":"> relying on nodejs --shared-openssl with the [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) plugin, cf [details on providers](https://wiki.openssl.org/index.php/OpenSSL_3.0#Providers), seems like a more maintainable path.\r\n\r\nIf you hadn't added that, that'd been my recommendation, too. We really want to move off `oqs-openssl111`...\r\n\r\nNow, the bigger issue I see is that our code does not provide a cipher (in either `oqsprovider` or `oqs-openssl`), but only KEM and signature algorithms. As I don't know enough about `Express` there's probably some more investigation required... If this can make use of signature or KEM algorithms, then, yes, the path you propose sounds doable. Feel free to keep us posted on what you find going forward (or want to bounce off further ideas).","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/comments/1544020970/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-05-11T13:35:02Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"29013034944","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/442","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/442/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/442/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/442/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/442","id":1705058538,"node_id":"I_kwDOA_fpb85loSDq","number":442,"title":"Build failure on platforms running OpenSSL3 by default","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-05-11T04:49:52Z","updated_at":"2023-05-11T21:02:38Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"After https://github.com/open-quantum-safe/liboqs/pull/1431 landed, `liboqs`gets built with OpenSSL3 symbols when OpenSSL3 is installed by default on the build platform. In consequence, these symbols cannot be found when building `oqs-openssl111` using that `liboqs` (as these symbols are not present in any OpenSSL111 fork).\r\n\r\n--> I'd now _strongly_ urge to declare this fork deprecated as the build becomes somewhat convoluted (or surprising):\r\n\r\n- (non-oqs) OpenSSL111 must be installed\r\n- liboqs must be built against that OpenSSL111and installed to oqs-openssl111\r\n- only then can a build of oqs-openssl111 succeed\r\n\r\nAlternatively, `liboqs` _must_ be built with `-DOQS_USE_OPENSSL=OFF` -- which I'd call at least \"surprising\" for a build of `oqs-openssl`.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/442/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/442/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1544675975","html_url":"https://github.com/open-quantum-safe/openssl/issues/442#issuecomment-1544675975","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/442","id":1544675975,"node_id":"IC_kwDOA_fpb85cEeKH","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2023-05-11T21:02:37Z","updated_at":"2023-05-11T21:02:37Z","author_association":"MEMBER","body":"Okay, that is getting worse and worse.\r\n\r\nWould you be okay with trying to squeeze out one last release of this fork to match the upcoming liboqs 0.8.0 release, and then deprecate it?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1544675975/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-05-11T21:02:38Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
