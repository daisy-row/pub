{"id":"34038546103","type":"IssuesEvent","actor":{"id":14152150,"login":"ShubhamTatvamasi","display_login":"ShubhamTatvamasi","gravatar_id":"","url":"https://api.github.com/users/ShubhamTatvamasi","avatar_url":"https://avatars.githubusercontent.com/u/14152150?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/312","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/312/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/312/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/312/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/312","id":2033928299,"node_id":"I_kwDOE_A9l855O0hr","number":312,"title":"How to use x509 Certificate Signer on golang","user":{"login":"ShubhamTatvamasi","id":14152150,"node_id":"MDQ6VXNlcjE0MTUyMTUw","avatar_url":"https://avatars.githubusercontent.com/u/14152150?v=4","gravatar_id":"","url":"https://api.github.com/users/ShubhamTatvamasi","html_url":"https://github.com/ShubhamTatvamasi","followers_url":"https://api.github.com/users/ShubhamTatvamasi/followers","following_url":"https://api.github.com/users/ShubhamTatvamasi/following{/other_user}","gists_url":"https://api.github.com/users/ShubhamTatvamasi/gists{/gist_id}","starred_url":"https://api.github.com/users/ShubhamTatvamasi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ShubhamTatvamasi/subscriptions","organizations_url":"https://api.github.com/users/ShubhamTatvamasi/orgs","repos_url":"https://api.github.com/users/ShubhamTatvamasi/repos","events_url":"https://api.github.com/users/ShubhamTatvamasi/events{/privacy}","received_events_url":"https://api.github.com/users/ShubhamTatvamasi/received_events","type":"User","site_admin":false},"labels":[{"id":2701983058,"node_id":"MDU6TGFiZWwyNzAxOTgzMDU4","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/labels/question","name":"question","color":"d876e3","default":true,"description":"No code change required"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-12-09T16:36:31Z","updated_at":"2023-12-09T16:36:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, is there any way to use my code with custom signer from OQS library?\r\n\r\nI am getting the following error:\r\n```\r\nError creating certificate: x509: certificate private key does not implement crypto.Signer\r\n```\r\n\r\nHere is my code:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"crypto/rand\"\r\n\t\"crypto/x509\"\r\n\t\"crypto/x509/pkix\"\r\n\t\"encoding/pem\"\r\n\t\"fmt\"\r\n\t\"math/big\"\r\n\t\"os\"\r\n\t\"time\"\r\n\r\n\t\"github.com/open-quantum-safe/liboqs-go/oqs\"\r\n)\r\n\r\nfunc generateDilithium2KeyPair() ([]byte, []byte, error) {\r\n\t// Initialize liboqs\r\n\tquantumKeys := oqs.Signature{}\r\n\tdefer quantumKeys.Clean()\r\n\r\n\t// Initialize liboqs-go\r\n\terr := quantumKeys.Init(\"Dilithium2\", nil)\r\n\tif err != nil {\r\n\t\treturn nil, nil, fmt.Errorf(\"Error initializing liboqs-go: %v\", err)\r\n\t}\r\n\r\n\t// Generate key pair\r\n\tpublicKey, err := quantumKeys.GenerateKeyPair()\r\n\tif err != nil {\r\n\t\treturn nil, nil, fmt.Errorf(\"Error generating key pair: %v\")\r\n\t}\r\n\r\n\t// Export private key\r\n\tprivateKey := quantumKeys.ExportSecretKey()\r\n\r\n\treturn publicKey, privateKey, nil\r\n}\r\n\r\nfunc generateCertificate(publicKey []byte, privateKey []byte) ([]byte, error) {\r\n\r\n\t// Create a self-signed certificate\r\n\ttemplate := x509.Certificate{\r\n\t\tSerialNumber:          big.NewInt(1),\r\n\t\tSubject:               pkix.Name{CommonName: \"Dilithium Cert\"},\r\n\t\tNotBefore:             time.Now(),                           // Valid from the start\r\n\t\tNotAfter:              time.Now().Add(365 * 24 * time.Hour), // Valid for 1 year\r\n\t\tKeyUsage:              x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,\r\n\t\tExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},\r\n\t\tBasicConstraintsValid: true,\r\n\t}\r\n\r\n\tcertDER, err := x509.CreateCertificate(rand.Reader, &template, &template, publicKey, privateKey)\r\n\tif err != nil {\r\n\t\treturn nil, fmt.Errorf(\"Error creating certificate: %v\", err)\r\n\t}\r\n\r\n\treturn certDER, nil\r\n}\r\n\r\nfunc main() {\r\n\t// Step 1: Generate Dilithium2 Key Pair\r\n\tpublicKey, privateKey, err := generateDilithium2KeyPair()\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t\treturn\r\n\t}\r\n\r\n\t// Step 2: Generate X.509 Certificate\r\n\tcertDER, err := generateCertificate(publicKey, privateKey)\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t\treturn\r\n\t}\r\n\r\n\t// Step 3: Save Certificate to a file\r\n\tcertFile, err := os.Create(\"example.crt\")\r\n\tif err != nil {\r\n\t\tfmt.Println(\"Error creating certificate file:\", err)\r\n\t\treturn\r\n\t}\r\n\tdefer certFile.Close()\r\n\r\n\tpem.Encode(certFile, &pem.Block{Type: \"CERTIFICATE\", Bytes: certDER})\r\n\r\n\tfmt.Println(\"Certificate generated successfully.\")\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/312/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/312/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2023-12-09T16:36:33Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"34038829642","type":"IssuesEvent","actor":{"id":14152150,"login":"ShubhamTatvamasi","display_login":"ShubhamTatvamasi","gravatar_id":"","url":"https://api.github.com/users/ShubhamTatvamasi","avatar_url":"https://avatars.githubusercontent.com/u/14152150?"},"repo":{"id":215630242,"name":"open-quantum-safe/liboqs-go","url":"https://api.github.com/repos/open-quantum-safe/liboqs-go"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/34","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/34/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/34/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/34/events","html_url":"https://github.com/open-quantum-safe/liboqs-go/issues/34","id":2033947059,"node_id":"I_kwDODNpBos55O5Gz","number":34,"title":"How to use x509 Certificate Signer on golang","user":{"login":"ShubhamTatvamasi","id":14152150,"node_id":"MDQ6VXNlcjE0MTUyMTUw","avatar_url":"https://avatars.githubusercontent.com/u/14152150?v=4","gravatar_id":"","url":"https://api.github.com/users/ShubhamTatvamasi","html_url":"https://github.com/ShubhamTatvamasi","followers_url":"https://api.github.com/users/ShubhamTatvamasi/followers","following_url":"https://api.github.com/users/ShubhamTatvamasi/following{/other_user}","gists_url":"https://api.github.com/users/ShubhamTatvamasi/gists{/gist_id}","starred_url":"https://api.github.com/users/ShubhamTatvamasi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ShubhamTatvamasi/subscriptions","organizations_url":"https://api.github.com/users/ShubhamTatvamasi/orgs","repos_url":"https://api.github.com/users/ShubhamTatvamasi/repos","events_url":"https://api.github.com/users/ShubhamTatvamasi/events{/privacy}","received_events_url":"https://api.github.com/users/ShubhamTatvamasi/received_events","type":"User","site_admin":false},"labels":[{"id":1620813322,"node_id":"MDU6TGFiZWwxNjIwODEzMzIy","url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/labels/question","name":"question","color":"d876e3","default":true,"description":"Further information is requested"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-12-09T16:36:31Z","updated_at":"2023-12-09T17:05:52Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, is there any way to use my code with custom signer from OQS library?\r\n\r\nI am getting the following error:\r\n```\r\nError creating certificate: x509: certificate private key does not implement crypto.Signer\r\n```\r\n\r\nHere is my code:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"crypto/rand\"\r\n\t\"crypto/x509\"\r\n\t\"crypto/x509/pkix\"\r\n\t\"encoding/pem\"\r\n\t\"fmt\"\r\n\t\"math/big\"\r\n\t\"os\"\r\n\t\"time\"\r\n\r\n\t\"github.com/open-quantum-safe/liboqs-go/oqs\"\r\n)\r\n\r\nfunc generateDilithium2KeyPair() ([]byte, []byte, error) {\r\n\t// Initialize liboqs\r\n\tquantumKeys := oqs.Signature{}\r\n\tdefer quantumKeys.Clean()\r\n\r\n\t// Initialize liboqs-go\r\n\terr := quantumKeys.Init(\"Dilithium2\", nil)\r\n\tif err != nil {\r\n\t\treturn nil, nil, fmt.Errorf(\"Error initializing liboqs-go: %v\", err)\r\n\t}\r\n\r\n\t// Generate key pair\r\n\tpublicKey, err := quantumKeys.GenerateKeyPair()\r\n\tif err != nil {\r\n\t\treturn nil, nil, fmt.Errorf(\"Error generating key pair: %v\")\r\n\t}\r\n\r\n\t// Export private key\r\n\tprivateKey := quantumKeys.ExportSecretKey()\r\n\r\n\treturn publicKey, privateKey, nil\r\n}\r\n\r\nfunc generateCertificate(publicKey []byte, privateKey []byte) ([]byte, error) {\r\n\r\n\t// Create a self-signed certificate\r\n\ttemplate := x509.Certificate{\r\n\t\tSerialNumber:          big.NewInt(1),\r\n\t\tSubject:               pkix.Name{CommonName: \"Dilithium Cert\"},\r\n\t\tNotBefore:             time.Now(),                           // Valid from the start\r\n\t\tNotAfter:              time.Now().Add(365 * 24 * time.Hour), // Valid for 1 year\r\n\t\tKeyUsage:              x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,\r\n\t\tExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},\r\n\t\tBasicConstraintsValid: true,\r\n\t}\r\n\r\n\tcertDER, err := x509.CreateCertificate(rand.Reader, &template, &template, publicKey, privateKey)\r\n\tif err != nil {\r\n\t\treturn nil, fmt.Errorf(\"Error creating certificate: %v\", err)\r\n\t}\r\n\r\n\treturn certDER, nil\r\n}\r\n\r\nfunc main() {\r\n\t// Step 1: Generate Dilithium2 Key Pair\r\n\tpublicKey, privateKey, err := generateDilithium2KeyPair()\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t\treturn\r\n\t}\r\n\r\n\t// Step 2: Generate X.509 Certificate\r\n\tcertDER, err := generateCertificate(publicKey, privateKey)\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t\treturn\r\n\t}\r\n\r\n\t// Step 3: Save Certificate to a file\r\n\tcertFile, err := os.Create(\"example.crt\")\r\n\tif err != nil {\r\n\t\tfmt.Println(\"Error creating certificate file:\", err)\r\n\t\treturn\r\n\t}\r\n\tdefer certFile.Close()\r\n\r\n\tpem.Encode(certFile, &pem.Block{Type: \"CERTIFICATE\", Bytes: certDER})\r\n\r\n\tfmt.Println(\"Certificate generated successfully.\")\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/34/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/34/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2023-12-09T17:05:54Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
