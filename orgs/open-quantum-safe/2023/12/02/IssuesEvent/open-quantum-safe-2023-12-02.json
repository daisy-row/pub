{"id":"33812622678","type":"IssuesEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1619","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1619/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1619/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1619/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1619","id":2021893157,"node_id":"I_kwDOA-eq3c54g6Ql","number":1619,"title":"Introduce constant time build variable","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-12-02T07:01:39Z","updated_at":"2023-12-02T07:01:39Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"With https://github.com/open-quantum-safe/liboqs/pull/1618 CT testing toggles to testing the reference code. At the same time we enable building optimized code (activated in most use cases). If the optimized code for some algorithms doesn't have the CT property what about introducing a build option to request a \"CT binary\"? Optimized (and reference) code for those algorithms that have this property for both code types and reference code only where the optimized code is not CT.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1619/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1619/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2023-12-02T07:01:41Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
