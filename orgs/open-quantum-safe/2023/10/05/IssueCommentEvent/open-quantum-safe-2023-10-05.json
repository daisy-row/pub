{"id":"32329573658","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/239","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/239/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/239/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/239/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/239","id":1874531092,"node_id":"I_kwDOE_A9l85vuxMU","number":239,"title":"Missing support for hash-n-sign","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[{"id":2701983054,"node_id":"MDU6TGFiZWwyNzAxOTgzMDU0","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2701983059,"node_id":"MDU6TGFiZWwyNzAxOTgzMDU5","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/labels/futurework","name":"futurework","color":"ffffff","default":false,"description":"This may or may not be worked on"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2023-08-30T23:51:35Z","updated_at":"2023-10-05T05:37:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The current implementation for the oqsprovider does not allow the use of the hash-n-sign paradigm with the signature algorithms. It would be useful to add support for signing pre-hashed data. This would enable, for example, the possibility to sign with <algorithmX>With<hashAlgY> type of algorithms:\r\n```bash\r\n$ openssl req -new -key \"dilithium2.key\" -subj \"/O=OpenCA\" -sha256 -out dilithium2.req\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/239/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/239/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1748073699","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/239#issuecomment-1748073699","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/239","id":1748073699,"node_id":"IC_kwDOE_A9l85oMXzj","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-10-05T05:37:54Z","updated_at":"2023-10-05T05:37:54Z","author_association":"MEMBER","body":"Thanks very much for explaining the background, @praveksharma ! \r\n\r\nSo in sum this is obviously particularly interesting for (vendors of) crypto hardware with limited bandwidth (and/or otherwise very slow PQ algs :).\r\n\r\nYes, we could re-vive #240 but as there's not been any feedback by the author at the time I'm uncertain whether this would lead to conclusion of the PR: tagging @opencrypto asking for his willingness to support this work going forward (add OID-integration automation, add tests, getting existing and additional CI to pass, add documentation).\r\n\r\nWithout such support we could alternatively add this feature as a \"one-off\" (e.g. as originally proposed in #240 just for 1 or 2 algs) hidden behind a config option (much like IBM's inactive [USE_ENCODING_LIB](https://github.com/open-quantum-safe/oqs-provider/blob/main/CONFIGURE.md#use_encoding_lib)). That way, \r\n- normal OQS users are not hit by the size penalty this incurs\r\n- the OQS team is not hit by the maintenance obligation and \r\n- testing and documentation is left to \"people in the know\". \r\n\r\nThe option may be enabled by such people for specific interop tests (much like [NOPUBKEY_IN_PRIVKEY](https://github.com/open-quantum-safe/oqs-provider/blob/main/CONFIGURE.md#nopubkey_in_privkey) already added for IETF events). This would be in line with the stated use case \r\n\r\n> further development and interop testing.\r\n\r\nAnd if the feature gains wider usage & acceptance it can be completed and opened up as a generally supported feature.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1748073699/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-05T05:37:55Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32329962384","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/270","id":1924868837,"node_id":"I_kwDOE_A9l85yuyrl","number":270,"title":"Falcon and SPHINCS+ interop with BC","user":{"login":"praveksharma","id":132921394,"node_id":"U_kgDOB-w4Mg","avatar_url":"https://avatars.githubusercontent.com/u/132921394?v=4","gravatar_id":"","url":"https://api.github.com/users/praveksharma","html_url":"https://github.com/praveksharma","followers_url":"https://api.github.com/users/praveksharma/followers","following_url":"https://api.github.com/users/praveksharma/following{/other_user}","gists_url":"https://api.github.com/users/praveksharma/gists{/gist_id}","starred_url":"https://api.github.com/users/praveksharma/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/praveksharma/subscriptions","organizations_url":"https://api.github.com/users/praveksharma/orgs","repos_url":"https://api.github.com/users/praveksharma/repos","events_url":"https://api.github.com/users/praveksharma/events{/privacy}","received_events_url":"https://api.github.com/users/praveksharma/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2023-10-03T20:11:41Z","updated_at":"2023-10-05T06:02:30Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"**Describe the bug**\r\nThe current SPHINCS+ implementation doesn't interop with Bouncy Castle under the [R3 format](https://github.com/IETF-Hackathon/pqc-certificates/tree/master#zip-format-r3) used the PQC Certificates project of IETF hackathons. oqs-provider is unable to verify self-signed certificates produced by Bouncy Castle. This occurs despite the OIDs in [Bouncy Castle](https://github.com/bcgit/bc-java/blob/e007cbe82622e2f3d2ba0c46cceab7d504d4cf9b/core/src/main/java/org/bouncycastle/asn1/bc/BCObjectIdentifiers.java#L157C3-L157C3) matching those in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider/blob/fab30c7f4bb40898aab2a967cdd6b0f990091778/oqs-template/generate.yml#L735).\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\ngit clone https://github.com/IETF-Hackathon/pqc-certificates.git\r\n# Extract provider/bc/artifacts_certs_r3.zip to providers/bc/artifacts/\r\ncd providers/bc/\r\n../oqs/check_r3.sh .\r\n```\r\n\r\n**Expected behavior**\r\nThe script should output `Y` for each certificate signed using SPHINCS+:\r\n\r\n```\r\n1.3.9999.6.4.13,Y\r\n1.3.9999.6.4.16,Y\r\n1.3.9999.6.5.10,Y\r\n1.3.9999.6.5.12,Y\r\n1.3.9999.6.6.10,Y\r\n1.3.9999.6.6.12,Y\r\n1.3.9999.6.7.13,Y\r\n1.3.9999.6.7.16,Y\r\n1.3.9999.6.8.10,Y\r\n1.3.9999.6.8.12,Y\r\n1.3.9999.6.9.10,Y\r\n1.3.9999.6.9.12,Y\r\n```\r\n\r\n**Environment:**\r\nDocker container based on image built with [`/opensll3/Dockerfile-interop`](https://github.com/open-quantum-safe/oqs-demos/blob/main/openssl3/Dockerfile-interop) from oqs-demos. The Dockerfile was modified to build oqs-provider from the interop-test branch instead of main.\r\n\r\n- OpenSSL: 3.2.0-alpha3-dev\r\n- oqsprovider: 0.5.2-interop\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1748131173","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/270#issuecomment-1748131173","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270","id":1748131173,"node_id":"IC_kwDOE_A9l85oMl1l","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-10-05T06:02:29Z","updated_at":"2023-10-05T06:02:29Z","author_association":"MEMBER","body":"> I suggest you refer to /providers/oqs/compatMatrices/artifacts_certs_r3/*.csv instead.\r\n\r\nThanks for that suggestion: Will do so (but would recommend the hackathon team to update the .md files too, just in case someone else reads/relies on them).\r\n\r\n> since it's the OIDs in BC which are out of date \r\n\r\nIf we know BC uses wrong OIDs then it's indeed not an issue for us to look at.\r\n\r\n> show that Entrust (with incorrect OIDs) interops fine with oqs-provider while BC (with correct OIDs) does not interop with oqs-provider.\r\n\r\nNice summary. Are we 100% sure that BC uses the same Sphincs+ spec version as entrust and OQS do, then?\r\n\r\nAll in all, I don't see any concrete bug to fix in oqsprovider. Apologies for having suggested to create an issue -- it did help me to understand where we're at wrt interop -- so Thanks for bearing with me. Feel free to close the issue if you'd agree with the above.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1748131173/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-05T06:02:30Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32333764575","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/272","id":1926349523,"node_id":"I_kwDOE_A9l85y0cLT","number":272,"title":"Race condition with `c_obj_create`.","user":{"login":"thb-sb","id":108470890,"node_id":"U_kgDOBnciag","avatar_url":"https://avatars.githubusercontent.com/u/108470890?v=4","gravatar_id":"","url":"https://api.github.com/users/thb-sb","html_url":"https://github.com/thb-sb","followers_url":"https://api.github.com/users/thb-sb/followers","following_url":"https://api.github.com/users/thb-sb/following{/other_user}","gists_url":"https://api.github.com/users/thb-sb/gists{/gist_id}","starred_url":"https://api.github.com/users/thb-sb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thb-sb/subscriptions","organizations_url":"https://api.github.com/users/thb-sb/orgs","repos_url":"https://api.github.com/users/thb-sb/repos","events_url":"https://api.github.com/users/thb-sb/events{/privacy}","received_events_url":"https://api.github.com/users/thb-sb/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2023-10-04T14:29:31Z","updated_at":"2023-10-05T08:42:35Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"Hi,\r\n\r\nI'm currently testing oqs-provider ([from commit `fab30c7`](https://github.com/open-quantum-safe/oqs-provider/commit/fab30c7f4bb40898aab2a967cdd6b0f990091778)) with OpenSSL 3.1 ([from commit `9c20f5d`](https://github.com/openssl/openssl/commit/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1)) in a multi-threaded application.\r\n\r\nIn this multi-threaded application, I instantiate a [`OSSL_LIB_CTX`](https://www.openssl.org/docs/man3.1/man3/OSSL_LIB_CTX_new.html) per thread, and for each library context I load the default provider and the _oqsprovider_ sequentially:\r\n\r\n```c\r\nextern OSSL_provider_init_fn oqs_provider_init;\r\n\r\nstatic int initialize_lib_ctx(OSSL_LIB_CTX *lib_ctx) {\r\n  if (OSSL_PROVIDER_load(lib_ctx, \"default\") == NULL) {\r\n    goto err;\r\n  }\r\n  if (OSS_PROVIDER_add_builtin(lib_ctx, \"oqsprovider\", oqs_provider_init) != 1) {\r\n    goto err;\r\n  }\r\n  if (OSS_PROVIDER_load(lib_ctx, \"oqsprovider\") == NULL) {\r\n    goto err;\r\n  }\r\n  …\r\n  return OK;\r\n\r\nerr:\r\n  …\r\n}\r\n```\r\n\r\n(_Note that I'm compiling oqs-provider as a static library, but it doesn't seem to be involved in this issue_)\r\n\r\nHowever, it sometimes fails with the [following error](https://github.com/open-quantum-safe/oqs-provider/blob/fab30c7f4bb40898aab2a967cdd6b0f990091778/oqsprov/oqsprov.c#L751):\r\n\r\n```\r\nerror registering NID for dilithium2\r\n```\r\n\r\nI've tracked down the problem, and here is what I found: the [oqs-provider init function](https://github.com/open-quantum-safe/oqs-provider/blob/fab30c7f4bb40898aab2a967cdd6b0f990091778/oqsprov/oqsprov.c#L683) calls the function pointer `c_obj_create` which happens to be [`crypto/provider_core.c:core_obj_create`](https://github.com/openssl/openssl/blob/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1/crypto/provider_core.c#L2127):\r\n\r\nhttps://github.com/open-quantum-safe/oqs-provider/blob/fab30c7f4bb40898aab2a967cdd6b0f990091778/oqsprov/oqsprov.c#L748-L754\r\n\r\nBy looking at the [`c_obj_create`](https://github.com/openssl/openssl/blob/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1/crypto/provider_core.c#L2127) from OpenSSL, it makes a call to [`OBJ_create`](https://github.com/openssl/openssl/blob/831602922f19a8f39d0c0fae425b81e9ab402c69/crypto/objects/obj_dat.c#L746):\r\n\r\nhttps://github.com/openssl/openssl/blob/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1/crypto/provider_core.c#L2127-L2133\r\n\r\n[`OBJ_create`] verifies certain things, and eventually inserts the new NID/OID to a global list:\r\n\r\nhttps://github.com/openssl/openssl/blob/831602922f19a8f39d0c0fae425b81e9ab402c69/crypto/objects/obj_dat.c#L774-L794\r\n\r\nIt seems that two threads may compete between the check in [`c_obj_create`] and the actual call to [`OBJ_create`]:\r\n\r\n```c\r\nstatic int core_obj_create(const OSSL_CORE_HANDLE *prov, const char *oid,\r\n                           const char *sn, const char *ln)\r\n{\r\n    /* Check if it already exists and create it if not */\r\n    return OBJ_txt2nid(oid) != NID_undef             // Race condition here?\r\n           || OBJ_create(oid, sn, ln) != NID_undef;\r\n}\r\n```\r\n\r\nleading to the obvious error displayed above, because `OBJ_create` is going to complain that the OID already exists.\r\n\r\nIn this specific case, `ERR_LIB_OBJ … OBJ_R_OID_EXISTS` is thrown. I'm wondering if we could check for this error and ignore it if returned by [`c_obj_create`]. I've attached a patch [fix_race_condition_obj_oid_exists.patch](https://github.com/open-quantum-safe/oqs-provider/files/12804539/fix_race_condition_obj_oid_exists.patch) that may temporary solve the issue in _oqsprov.c_, and the following is a small PoC to reproduce the error:\r\n\r\n<details>\r\n  <summary>PoC</summary>\r\n\r\n```c\r\n#include <pthread.h>\r\n\r\n#include <openssl/crypto.h>\r\n#include <openssl/provider.h>\r\n\r\nstatic const size_t N_THREADS = 32;\r\n\r\nextern OSSL_provider_init_fn oqs_provider_init;\r\n\r\nstatic void load_oqs_provider(OSSL_LIB_CTX* lib_ctx) {\r\n  if (OSSL_PROVIDER_load(lib_ctx, \"default\") != NULL) {\r\n    if (OSSL_PROVIDER_add_builtin(lib_ctx, \"oqsprovider\", oqs_provider_init) == 1) {\r\n      if (OSSL_PROVIDER_load(lib_ctx, \"oqsprovider\") != NULL) {\r\n      } else {\r\n        putchar('-');\r\n      }\r\n    } else {\r\n      putchar('+');\r\n    }\r\n  } else {\r\n    putchar('@');\r\n  }\r\n}\r\n\r\nstatic void *thread_create_ossl_lib_ctx(void *) {\r\n  OSSL_LIB_CTX *lib_ctx = OSSL_LIB_CTX_new();\r\n  load_oqs_provider(lib_ctx);\r\n  OSSL_LIB_CTX_free(lib_ctx);\r\n  return NULL;\r\n}\r\n\r\nint main() {\r\n  pthread_t threads[N_THREADS];\r\n\r\nstart:\r\n  for (size_t i = 0; i < N_THREADS; ++i) {\r\n    pthread_create(threads + i, NULL, thread_create_ossl_lib_ctx, NULL);\r\n  }\r\n\r\n  for (size_t i = 0; i < N_THREADS; ++i) {\r\n    pthread_join(threads[i], NULL);\r\n  }\r\n\r\n  goto start;\r\n}\r\n```\r\n</details>\r\n\r\nHere is the environment I used to build the PoC:\r\n\r\n - oqs-provider [from commit `fab30c7`](https://github.com/open-quantum-safe/oqs-provider/commit/fab30c7f4bb40898aab2a967cdd6b0f990091778)\r\n - OpenSSL 3.1 [from commit `9c20f5d`](https://github.com/openssl/openssl/commit/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1)\r\n - oqs-provider is built using `-DCMAKE_BUILD_TYPE=Release` and `-DOQS_PROVIDER_BUILD_STATIC=ON`\r\n - OpenSSL is built using `--debug` (it also works with `--release`).\r\n\r\nNote that I also encountered this bug with OpenSSL 3.2.\r\n\r\nThe question is: is it a bug from oqs-provider (is something wrongly done?) or from OpenSSL?\r\nFrom my point of view, OpenSSL maintains a global (i.e. accessible from within all threads) list of `OBJ`, and this list should be self-contained in a `OSSL_LIB_CTX` object.\r\n\r\nWhat do you think about this?\r\n\r\n[`OBJ_create`]: https://github.com/openssl/openssl/blob/831602922f19a8f39d0c0fae425b81e9ab402c69/crypto/objects/obj_dat.c#L746\r\n[`c_obj_create`]: https://github.com/openssl/openssl/blob/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1/crypto/provider_core.c#L2127","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/timeline","performed_via_github_app":null,"state_reason":"reopened"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1748391453","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/272#issuecomment-1748391453","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272","id":1748391453,"node_id":"IC_kwDOE_A9l85oNlYd","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-10-05T08:42:35Z","updated_at":"2023-10-05T08:42:35Z","author_association":"MEMBER","body":"> Since I'm using OpenSSL 3.1 (and/or 3.2 alpha), I shouldn't encounter this bug, right?\r\n\r\nGood catch -- sorry I didn't check different doc versions :-( Conceptually, I'd agree, you shouldn't encounter the issue based on this doc improvement.\r\n\r\nBut I fail to see how this code https://github.com/openssl/openssl/blob/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1/crypto/provider_core.c#L2127-L2133 can be thread-safe:\r\n\r\n```\r\nreturn OBJ_txt2nid(oid) != NID_undef\r\n           || OBJ_create(oid, sn, ln) != NID_undef;\r\n```\r\n\r\nThread 1 calls `OBJ_txt2nid`, gets suspended, thread 2 executes both statements (successfully) and thread 1 will be left with a (by now) incorrect result and fail (when calling `OBJ_create` based on the wrong retval of its prior invocation of `OBJ_txt2nid`).\r\n\r\nIn sum, I'd think this _is_ a question to be asked to the OpenSSL community to help make the core better.\r\n\r\nBut whatever results from those discussions, this will not help with existing code (incl. OpenSSL3.0 installations), so we ought to _also_ add your proposal (discarding the error message as per your patch -- possibly augmented by another call to `OBJ_txt2nid` to ascertain that the object in fact _has_ been created) to `oqsprovider`. PR welcome :-)","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1748391453/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-05T08:42:35Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32346993782","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549","id":1891002354,"node_id":"PR_kwDOA-eq3c5aDJ8h","number":1549,"title":"Call Keccak_(X4_)Dispatch with pthread_once","user":{"login":"zxjtan","id":32562011,"node_id":"MDQ6VXNlcjMyNTYyMDEx","avatar_url":"https://avatars.githubusercontent.com/u/32562011?v=4","gravatar_id":"","url":"https://api.github.com/users/zxjtan","html_url":"https://github.com/zxjtan","followers_url":"https://api.github.com/users/zxjtan/followers","following_url":"https://api.github.com/users/zxjtan/following{/other_user}","gists_url":"https://api.github.com/users/zxjtan/gists{/gist_id}","starred_url":"https://api.github.com/users/zxjtan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zxjtan/subscriptions","organizations_url":"https://api.github.com/users/zxjtan/orgs","repos_url":"https://api.github.com/users/zxjtan/repos","events_url":"https://api.github.com/users/zxjtan/events{/privacy}","received_events_url":"https://api.github.com/users/zxjtan/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2023-09-11T18:03:27Z","updated_at":"2023-10-05T16:12:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1549","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1549.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1549.patch","merged_at":null},"body":"Fixes #1548.\r\n\r\nCall Keccak_(X4_)Dispatch using pthread_once to ensure setting of global function pointers is atomic and done only once.\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  NO\r\n* [x] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? NO\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1749235852","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549#issuecomment-1749235852","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549","id":1749235852,"node_id":"IC_kwDOA-eq3c5oQziM","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-10-05T16:12:06Z","updated_at":"2023-10-05T16:12:06Z","author_association":"MEMBER","body":"> CI still runs into `undefined reference to symbol 'call_once@@GLIBC_2.28'`, any tips on how to proceed?\r\n\r\nWell, that depends on which lib is supposed to hold this symbol: It seems, glibc2.28 doesn't/isn't C11 compliant. What about using pthreads (i.e., [pthread_once](https://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_once.html) instead? Then linking in `pthreads` lib should get this to work.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1749235852/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-05T16:12:07Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32350359731","type":"IssueCommentEvent","actor":{"id":32562011,"login":"zxjtan","display_login":"zxjtan","gravatar_id":"","url":"https://api.github.com/users/zxjtan","avatar_url":"https://avatars.githubusercontent.com/u/32562011?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549","id":1891002354,"node_id":"PR_kwDOA-eq3c5aDJ8h","number":1549,"title":"Call Keccak_(X4_)Dispatch with pthread_once","user":{"login":"zxjtan","id":32562011,"node_id":"MDQ6VXNlcjMyNTYyMDEx","avatar_url":"https://avatars.githubusercontent.com/u/32562011?v=4","gravatar_id":"","url":"https://api.github.com/users/zxjtan","html_url":"https://github.com/zxjtan","followers_url":"https://api.github.com/users/zxjtan/followers","following_url":"https://api.github.com/users/zxjtan/following{/other_user}","gists_url":"https://api.github.com/users/zxjtan/gists{/gist_id}","starred_url":"https://api.github.com/users/zxjtan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zxjtan/subscriptions","organizations_url":"https://api.github.com/users/zxjtan/orgs","repos_url":"https://api.github.com/users/zxjtan/repos","events_url":"https://api.github.com/users/zxjtan/events{/privacy}","received_events_url":"https://api.github.com/users/zxjtan/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2023-09-11T18:03:27Z","updated_at":"2023-10-05T18:31:17Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1549","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1549.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1549.patch","merged_at":null},"body":"Fixes #1548.\r\n\r\nCall Keccak_(X4_)Dispatch using pthread_once to ensure setting of global function pointers is atomic and done only once.\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  NO\r\n* [x] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? NO\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1749438436","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549#issuecomment-1749438436","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549","id":1749438436,"node_id":"IC_kwDOA-eq3c5oRk_k","user":{"login":"zxjtan","id":32562011,"node_id":"MDQ6VXNlcjMyNTYyMDEx","avatar_url":"https://avatars.githubusercontent.com/u/32562011?v=4","gravatar_id":"","url":"https://api.github.com/users/zxjtan","html_url":"https://github.com/zxjtan","followers_url":"https://api.github.com/users/zxjtan/followers","following_url":"https://api.github.com/users/zxjtan/following{/other_user}","gists_url":"https://api.github.com/users/zxjtan/gists{/gist_id}","starred_url":"https://api.github.com/users/zxjtan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zxjtan/subscriptions","organizations_url":"https://api.github.com/users/zxjtan/orgs","repos_url":"https://api.github.com/users/zxjtan/repos","events_url":"https://api.github.com/users/zxjtan/events{/privacy}","received_events_url":"https://api.github.com/users/zxjtan/received_events","type":"User","site_admin":false},"created_at":"2023-10-05T18:31:16Z","updated_at":"2023-10-05T18:31:16Z","author_association":"NONE","body":"> > CI still runs into `undefined reference to symbol 'call_once@@GLIBC_2.28'`, any tips on how to proceed?\r\n> \r\n> Well, that depends on which lib is supposed to hold this symbol: It seems, glibc2.28 doesn't/isn't C11 compliant. What about using pthreads (i.e., [pthread_once](https://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_once.html) instead? Then linking in `pthreads` lib should get this to work.\r\n\r\nNo dice, build still fails with `undefined reference to symbol 'pthread_once@@GLIBC_2.2.5'`. However, in both the pthread_once and call_once cases, this is caused by `error adding symbols: DSO missing from command line`. Do I have to change something in the CMake files to make it link?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1749438436/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-05T18:31:17Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
