{"id":"32297713632","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/270","id":1924868837,"node_id":"I_kwDOE_A9l85yuyrl","number":270,"title":"SPHINCS+ interop with BC","user":{"login":"praveksharma","id":132921394,"node_id":"U_kgDOB-w4Mg","avatar_url":"https://avatars.githubusercontent.com/u/132921394?v=4","gravatar_id":"","url":"https://api.github.com/users/praveksharma","html_url":"https://github.com/praveksharma","followers_url":"https://api.github.com/users/praveksharma/followers","following_url":"https://api.github.com/users/praveksharma/following{/other_user}","gists_url":"https://api.github.com/users/praveksharma/gists{/gist_id}","starred_url":"https://api.github.com/users/praveksharma/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/praveksharma/subscriptions","organizations_url":"https://api.github.com/users/praveksharma/orgs","repos_url":"https://api.github.com/users/praveksharma/repos","events_url":"https://api.github.com/users/praveksharma/events{/privacy}","received_events_url":"https://api.github.com/users/praveksharma/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2023-10-03T20:11:41Z","updated_at":"2023-10-04T05:01:51Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"**Describe the bug**\r\nThe current SPHINCS+ implementation doesn't interop with Bouncy Castle under the [R3 format](https://github.com/IETF-Hackathon/pqc-certificates/tree/master#zip-format-r3) used the PQC Certificates project of IETF hackathons. oqs-provider is unable to verify self-signed certificates produced by Bouncy Castle. This occurs despite the OIDs in [Bouncy Castle](https://github.com/bcgit/bc-java/blob/e007cbe82622e2f3d2ba0c46cceab7d504d4cf9b/core/src/main/java/org/bouncycastle/asn1/bc/BCObjectIdentifiers.java#L157C3-L157C3) matching those in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider/blob/fab30c7f4bb40898aab2a967cdd6b0f990091778/oqs-template/generate.yml#L735).\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\ngit clone https://github.com/IETF-Hackathon/pqc-certificates.git\r\n# Extract provider/bc/artifacts_certs_r3.zip to providers/bc/artifacts/\r\ncd providers/bc/\r\n../oqs/check_r3.sh .\r\n```\r\n\r\n**Expected behavior**\r\nThe script should output `Y` for each certificate signed using SPHINCS+:\r\n\r\n```\r\n1.3.9999.6.4.13,Y\r\n1.3.9999.6.4.16,Y\r\n1.3.9999.6.5.10,Y\r\n1.3.9999.6.5.12,Y\r\n1.3.9999.6.6.10,Y\r\n1.3.9999.6.6.12,Y\r\n1.3.9999.6.7.13,Y\r\n1.3.9999.6.7.16,Y\r\n1.3.9999.6.8.10,Y\r\n1.3.9999.6.8.12,Y\r\n1.3.9999.6.9.10,Y\r\n1.3.9999.6.9.12,Y\r\n```\r\n\r\n**Environment:**\r\nDocker container based on image built with [`/opensll3/Dockerfile-interop`](https://github.com/open-quantum-safe/oqs-demos/blob/main/openssl3/Dockerfile-interop) from oqs-demos. The Dockerfile was modified to build oqs-provider from the interop-test branch instead of main.\r\n\r\n- OpenSSL: 3.2.0-alpha3-dev\r\n- oqsprovider: 0.5.2-interop\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1746140198","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/270#issuecomment-1746140198","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270","id":1746140198,"node_id":"IC_kwDOE_A9l85oE_wm","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T05:01:50Z","updated_at":"2023-10-04T05:01:50Z","author_association":"MEMBER","body":"> The information in this issue differs from my report in the status meeting on 03 October 2023. \r\n\r\nDoes this mean that \"interop-test branch confirms OK interop between BC and OQS for Dilithium and Falcon but not for Sphincs+?\r\n\r\nTo make this more precise, can you please further provide the output of the command `openssl list -verbose -providers -provider oqsprovider` to document the complete software stack, most notably the `liboqs` version used in testing? I'm most concerned about the age of the Dockerfile used when building the test platform: \r\n\r\n> Docker container based on image built with [/opensll3/Dockerfile-interop](https://github.com/open-quantum-safe/oqs-demos/blob/main/openssl3/Dockerfile-interop) from oqs-demos. The Dockerfile was modified to build oqs-provider from the interop-test branch instead of main.\r\n\r\nIf https://github.com/open-quantum-safe/oqs-demos/blob/365196ae7417408b7bdf64eebbf3143e30266e39/openssl3/Dockerfile-interop#L57 did not also get modified to run \"standard\" branch, we'd not be testing what we expect...\r\n\r\n> BC: falcon (incorrect OIDs in BC)\r\n\r\nDoes this mean you have confirmed the Falcon OIDs used in the hackathon and those used by OQS are the same but those that BC uses are _not_ the same? Or stated differently, Falcon and Sphincs+ interop between Botan and OQS is confirmed?\r\n\r\nIf you can confirm this, that'd be good news for OQS (less work :) and the PQCrystals teams: BC interop then would confirm that their \"FIPS spec understanding\" and the PQCrystals teams' _understanding_ of the spec are the same -- assuming BC has a separate code (for the \"standard\" Dilithium implementation) base and OQS(provider) has been running the (`liboqs`)\"standard\" branch. All other implementations having different OIDs would be expected if they do not yet implement the FIPS variant of Dilithium. If you feel like confirming this, please run a \"main\" branch build of `oqsprovider` and `liboqs` (built with \"-DNOPUBKEY_IN_PRIVKEY=ON\") against those implementations (i.e., an unchanged Dockerfile image from the previous IETF interop event): OK interop between OQS and Entrust etc (not implementing FIPS Dilithium) would be expected then.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1746140198/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T05:01:51Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32302602581","type":"IssueCommentEvent","actor":{"id":132921394,"login":"praveksharma","display_login":"praveksharma","gravatar_id":"","url":"https://api.github.com/users/praveksharma","avatar_url":"https://avatars.githubusercontent.com/u/132921394?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/270","id":1924868837,"node_id":"I_kwDOE_A9l85yuyrl","number":270,"title":"SPHINCS+ interop with BC","user":{"login":"praveksharma","id":132921394,"node_id":"U_kgDOB-w4Mg","avatar_url":"https://avatars.githubusercontent.com/u/132921394?v=4","gravatar_id":"","url":"https://api.github.com/users/praveksharma","html_url":"https://github.com/praveksharma","followers_url":"https://api.github.com/users/praveksharma/followers","following_url":"https://api.github.com/users/praveksharma/following{/other_user}","gists_url":"https://api.github.com/users/praveksharma/gists{/gist_id}","starred_url":"https://api.github.com/users/praveksharma/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/praveksharma/subscriptions","organizations_url":"https://api.github.com/users/praveksharma/orgs","repos_url":"https://api.github.com/users/praveksharma/repos","events_url":"https://api.github.com/users/praveksharma/events{/privacy}","received_events_url":"https://api.github.com/users/praveksharma/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2023-10-03T20:11:41Z","updated_at":"2023-10-04T08:46:48Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"**Describe the bug**\r\nThe current SPHINCS+ implementation doesn't interop with Bouncy Castle under the [R3 format](https://github.com/IETF-Hackathon/pqc-certificates/tree/master#zip-format-r3) used the PQC Certificates project of IETF hackathons. oqs-provider is unable to verify self-signed certificates produced by Bouncy Castle. This occurs despite the OIDs in [Bouncy Castle](https://github.com/bcgit/bc-java/blob/e007cbe82622e2f3d2ba0c46cceab7d504d4cf9b/core/src/main/java/org/bouncycastle/asn1/bc/BCObjectIdentifiers.java#L157C3-L157C3) matching those in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider/blob/fab30c7f4bb40898aab2a967cdd6b0f990091778/oqs-template/generate.yml#L735).\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\ngit clone https://github.com/IETF-Hackathon/pqc-certificates.git\r\n# Extract provider/bc/artifacts_certs_r3.zip to providers/bc/artifacts/\r\ncd providers/bc/\r\n../oqs/check_r3.sh .\r\n```\r\n\r\n**Expected behavior**\r\nThe script should output `Y` for each certificate signed using SPHINCS+:\r\n\r\n```\r\n1.3.9999.6.4.13,Y\r\n1.3.9999.6.4.16,Y\r\n1.3.9999.6.5.10,Y\r\n1.3.9999.6.5.12,Y\r\n1.3.9999.6.6.10,Y\r\n1.3.9999.6.6.12,Y\r\n1.3.9999.6.7.13,Y\r\n1.3.9999.6.7.16,Y\r\n1.3.9999.6.8.10,Y\r\n1.3.9999.6.8.12,Y\r\n1.3.9999.6.9.10,Y\r\n1.3.9999.6.9.12,Y\r\n```\r\n\r\n**Environment:**\r\nDocker container based on image built with [`/opensll3/Dockerfile-interop`](https://github.com/open-quantum-safe/oqs-demos/blob/main/openssl3/Dockerfile-interop) from oqs-demos. The Dockerfile was modified to build oqs-provider from the interop-test branch instead of main.\r\n\r\n- OpenSSL: 3.2.0-alpha3-dev\r\n- oqsprovider: 0.5.2-interop\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1746417795","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/270#issuecomment-1746417795","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270","id":1746417795,"node_id":"IC_kwDOE_A9l85oGDiD","user":{"login":"praveksharma","id":132921394,"node_id":"U_kgDOB-w4Mg","avatar_url":"https://avatars.githubusercontent.com/u/132921394?v=4","gravatar_id":"","url":"https://api.github.com/users/praveksharma","html_url":"https://github.com/praveksharma","followers_url":"https://api.github.com/users/praveksharma/followers","following_url":"https://api.github.com/users/praveksharma/following{/other_user}","gists_url":"https://api.github.com/users/praveksharma/gists{/gist_id}","starred_url":"https://api.github.com/users/praveksharma/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/praveksharma/subscriptions","organizations_url":"https://api.github.com/users/praveksharma/orgs","repos_url":"https://api.github.com/users/praveksharma/repos","events_url":"https://api.github.com/users/praveksharma/events{/privacy}","received_events_url":"https://api.github.com/users/praveksharma/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T08:46:48Z","updated_at":"2023-10-04T08:46:48Z","author_association":"MEMBER","body":"> Does this mean that \"interop-test branch confirms OK interop between BC and OQS for Dilithium and Falcon but not for Sphincs+?\r\n\r\nNo, the interop-test branch confirm OK interop between BC and OQS for Dilithium but not for Falcon (see below) and SPHINCS+.\r\n\r\n> To make this more precise, can you please further provide the output of the command `openssl list -verbose -providers -provider oqsprovider` to document the complete software stack, most notably the `liboqs` version used in testing? I'm most concerned about the age of the Dockerfile used when building the test platform:\r\n> If https://github.com/open-quantum-safe/oqs-demos/blob/365196ae7417408b7bdf64eebbf3143e30266e39/openssl3/Dockerfile-interop#L57 did not also get modified to run \"standard\" branch, we'd not be testing what we expect...\r\n\r\nThat line was indeed updated, here's the output `openssl list -verbose -providers -provider oqsprovider`:\r\n```\r\nProviders:\r\n  default\r\n    name: OpenSSL Default Provider\r\n    version: 3.2.0\r\n    status: active\r\n    build info: 3.2.0-alpha3-dev\r\n    gettable provider parameters:\r\n      name: pointer to a UTF8 encoded string (arbitrary size)\r\n      version: pointer to a UTF8 encoded string (arbitrary size)\r\n      buildinfo: pointer to a UTF8 encoded string (arbitrary size)\r\n      status: integer (arbitrary size)\r\n  oqsprovider\r\n    name: OpenSSL OQS Provider\r\n    version: 0.5.2-interop\r\n    status: active\r\n    build info: OQS Provider v.0.5.2-interop (ed6462a) based on liboqs v.0.9.0-standard\r\n    gettable provider parameters:\r\n      name: pointer to a UTF8 encoded string (arbitrary size)\r\n      version: pointer to a UTF8 encoded string (arbitrary size)\r\n      buildinfo: pointer to a UTF8 encoded string (arbitrary size)\r\n      status: integer (arbitrary size)\r\n```\r\n> Does this mean you have confirmed the Falcon OIDs used in the hackathon and those used by OQS are the same but those that BC uses are _not_ the same? \r\n\r\nYes, I did confirm this, as seen in the [BC repos](https://github.com/bcgit/bc-java/blob/e007cbe82622e2f3d2ba0c46cceab7d504d4cf9b/core/src/main/java/org/bouncycastle/asn1/bc/BCObjectIdentifiers.java#L246) and by running [`/providers/bc/gen.sh`](https://github.com/IETF-Hackathon/pqc-certificates/blob/master/providers/bc/gen.sh) in the pqc-certificates repo.\r\n\r\n> Or stated differently, Falcon and Sphincs+ interop between Botan and OQS is confirmed?\r\n\r\nNo, it is not confirmed. The pqc-certificates repo doesn't provide artifacts these algorithms as seen in [`providers/botan/`](https://github.com/IETF-Hackathon/pqc-certificates/tree/master/providers/botan). Further, while I'm not sure which version of Botan was used to produce the interop artifacts but the [master branch](https://github.com/randombit/botan/blob/5ccf554190949add414721e3652a8da66f67e520/src/lib/asn1/oid_maps.cpp) does not provide OIDs for Falcon and those for Sphincs+ are incorrect.\r\n\r\n> If you feel like confirming this, please run a \"main\" branch build of `oqsprovider` and `liboqs` (built with \"-DNOPUBKEY_IN_PRIVKEY=ON\") against those implementations (i.e., an unchanged Dockerfile image from the previous IETF interop event): OK interop between OQS and Entrust etc (not implementing FIPS Dilithium) would be expected then.\r\n\r\nI ran the tests with the unchanged Dockerfile image and the results match what you say.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1746417795/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T08:46:49Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32306173847","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/270","id":1924868837,"node_id":"I_kwDOE_A9l85yuyrl","number":270,"title":"SPHINCS+ interop with BC","user":{"login":"praveksharma","id":132921394,"node_id":"U_kgDOB-w4Mg","avatar_url":"https://avatars.githubusercontent.com/u/132921394?v=4","gravatar_id":"","url":"https://api.github.com/users/praveksharma","html_url":"https://github.com/praveksharma","followers_url":"https://api.github.com/users/praveksharma/followers","following_url":"https://api.github.com/users/praveksharma/following{/other_user}","gists_url":"https://api.github.com/users/praveksharma/gists{/gist_id}","starred_url":"https://api.github.com/users/praveksharma/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/praveksharma/subscriptions","organizations_url":"https://api.github.com/users/praveksharma/orgs","repos_url":"https://api.github.com/users/praveksharma/repos","events_url":"https://api.github.com/users/praveksharma/events{/privacy}","received_events_url":"https://api.github.com/users/praveksharma/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2023-10-03T20:11:41Z","updated_at":"2023-10-04T10:54:32Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"**Describe the bug**\r\nThe current SPHINCS+ implementation doesn't interop with Bouncy Castle under the [R3 format](https://github.com/IETF-Hackathon/pqc-certificates/tree/master#zip-format-r3) used the PQC Certificates project of IETF hackathons. oqs-provider is unable to verify self-signed certificates produced by Bouncy Castle. This occurs despite the OIDs in [Bouncy Castle](https://github.com/bcgit/bc-java/blob/e007cbe82622e2f3d2ba0c46cceab7d504d4cf9b/core/src/main/java/org/bouncycastle/asn1/bc/BCObjectIdentifiers.java#L157C3-L157C3) matching those in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider/blob/fab30c7f4bb40898aab2a967cdd6b0f990091778/oqs-template/generate.yml#L735).\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\ngit clone https://github.com/IETF-Hackathon/pqc-certificates.git\r\n# Extract provider/bc/artifacts_certs_r3.zip to providers/bc/artifacts/\r\ncd providers/bc/\r\n../oqs/check_r3.sh .\r\n```\r\n\r\n**Expected behavior**\r\nThe script should output `Y` for each certificate signed using SPHINCS+:\r\n\r\n```\r\n1.3.9999.6.4.13,Y\r\n1.3.9999.6.4.16,Y\r\n1.3.9999.6.5.10,Y\r\n1.3.9999.6.5.12,Y\r\n1.3.9999.6.6.10,Y\r\n1.3.9999.6.6.12,Y\r\n1.3.9999.6.7.13,Y\r\n1.3.9999.6.7.16,Y\r\n1.3.9999.6.8.10,Y\r\n1.3.9999.6.8.12,Y\r\n1.3.9999.6.9.10,Y\r\n1.3.9999.6.9.12,Y\r\n```\r\n\r\n**Environment:**\r\nDocker container based on image built with [`/opensll3/Dockerfile-interop`](https://github.com/open-quantum-safe/oqs-demos/blob/main/openssl3/Dockerfile-interop) from oqs-demos. The Dockerfile was modified to build oqs-provider from the interop-test branch instead of main.\r\n\r\n- OpenSSL: 3.2.0-alpha3-dev\r\n- oqsprovider: 0.5.2-interop\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1746631344","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/270#issuecomment-1746631344","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270","id":1746631344,"node_id":"IC_kwDOE_A9l85oG3qw","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T10:54:32Z","updated_at":"2023-10-04T10:54:32Z","author_association":"MEMBER","body":"Thanks for these explanations and additional tests! So this issue should read \"Falcon and Sphincs+ interop with BC\" then? \r\n\r\n> No, the interop-test branch confirm OK interop between BC and OQS for Dilithium but not for Falcon (see below) and SPHINCS+.\r\n\r\n> I ran the tests with the unchanged Dockerfile image and the results match what you say.\r\n\r\nSo is this summary correct then: (FIPS) Dilithium interop is confirmed (with BC as the only other implementation doing FIPS Dilithium using \"interop-test\" branch) and (Round3) Dilithium interop is confirmed with all other implementations (using \"main branch\")? Please note such confirmation would be running counter to the results stated in the [interop results table](https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/pqc_hackathon_results_certs_r3.md#ml-dsa-44-ipd-13614122671244) for the \"FIPS Dilithium\" OID.\r\n\r\nIn general, your statement seems to indicate that all logic in oqs-provider (incl. (O)IDs) is correct (as there is no Dilithium-unique code in `oqsprovider` apart from labelling an algorithm via OID). Would you concur?\r\n\r\nAddressing the core issue at stake here then, allow me to state some amount of skepticism towards the interop results presentation: Just looking at [Dilithium results](https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/pqc_hackathon_results_certs_r3.md#dilithium2-1361412267744)\r\n- there is no result mark between BC and oqsprovider (but between oqsprovider and BC): Why? Is the summary above _really_ correct then?\r\n- OK interop is documented between Entrust and oqsprovider but not between oqsprovider and Entrust (the other direction): That might be understandable if oqsprovider had an error in either encoding or decoding logic -- but then it would fail with all other implementations in that direction too -- and that is not the case.\r\n\r\nDigging to the next level: OQS seems to interoperate with Digicert and Entrust on [Falcon1024](https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/pqc_hackathon_results_certs_r3.md#falcon-1024-13999939) -- but only in one direction: Why?\r\n\r\nI have more and more confidence in the logic in `oqsprovider` looking at this -- I have not as much trust in hackathon results presentation and algorithm version identification in the different implementations (incl. OQS):\r\n\r\nWorked example regarding Sphincs: Looking at [this interop results entry](https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/pqc_hackathon_results_certs_r3.md#slh-dsa-sha2-128f-ipd-1399996413) the OID for this algorithm labelled \"SLH-DSA-SHA2-128f-ipd\" is identical to our OID for [SPHINCS+-SHA2-128f-simple](https://github.com/open-quantum-safe/oqs-provider/blob/ed6462a597c412ddd49297a00193d069a382c93d/oqs-template/generate.yml#L805-L808) --> With such OID clash interop is impossible (or is the above moniker indeed representing the same algorithm?). If not, you may want to re-do Sphincs tests with any OID adopted by the hackathon team: Any value can simply be set via [environment variable](https://github.com/open-quantum-safe/oqs-provider/blob/interop-test/ALGORITHMS.md#oids).\r\n\r\nOne more issue with the Sphincs interop results: [Here is a Sphincs interop results table](https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/pqc_hackathon_results_certs_r3.md#sphincs-sha256-192f-simple-139999653): Looking at it, one may believe oqsprovider and entrust interoperate. However, this is impossible, as the stated OID is not active in oqsprovider any more (in \"interop-test\" branch). It used to be active in \"main\" branch. --> Is this results presentation an \"amalgamation\" of various previous runs? It would be sensible to add the output of `openssl list -verbose -providers -provider oqsprovider` (and the equivalent code identification methods in the other implementations) to all results to avoid such issues.\r\n\r\nFinal suggestion: Would it be sensible to drop `oqs-openssl111` from the results tables in the hackathon? This code is surely not run any more and accordingly, no results will ever be added again. The results presentation would become more legible, too.\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1746631344/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T10:54:33Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32311325785","type":"IssueCommentEvent","actor":{"id":39264796,"login":"SWilson4","display_login":"SWilson4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","avatar_url":"https://avatars.githubusercontent.com/u/39264796?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1573","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1573/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1573/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1573/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1573","id":1926239442,"node_id":"I_kwDOA-eq3c5y0BTS","number":1573,"title":"ARM build fails with `-DOQS_DIST_BUILD=OFF`","user":{"login":"SWilson4","id":39264796,"node_id":"MDQ6VXNlcjM5MjY0Nzk2","avatar_url":"https://avatars.githubusercontent.com/u/39264796?v=4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","html_url":"https://github.com/SWilson4","followers_url":"https://api.github.com/users/SWilson4/followers","following_url":"https://api.github.com/users/SWilson4/following{/other_user}","gists_url":"https://api.github.com/users/SWilson4/gists{/gist_id}","starred_url":"https://api.github.com/users/SWilson4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SWilson4/subscriptions","organizations_url":"https://api.github.com/users/SWilson4/orgs","repos_url":"https://api.github.com/users/SWilson4/repos","events_url":"https://api.github.com/users/SWilson4/events{/privacy}","received_events_url":"https://api.github.com/users/SWilson4/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-10-04T13:36:54Z","updated_at":"2023-10-04T13:50:18Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Describe the bug**\r\nliboqs is failing to build on ARM with the configuration `-DOQS_DIST_BUILD=OFF`. The error occurs when `ninja` is called.\r\n\r\nOn the other hand, a build in the same environment with `-DOQS_DIST_BUILD=OFF -DOQS_OPT_TARGET=generic` succeeds.\r\n\r\n**To Reproduce**\r\nSee https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/2869/workflows/fef62d49-fe36-4118-8ea8-e520bac6d7c0/jobs/23049 for the failing build.\r\n\r\n**Expected behavior**\r\nThe build should succeed, as it did [here](https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/2869/workflows/fef62d49-fe36-4118-8ea8-e520bac6d7c0/jobs/23048) and [here](https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/2867/workflows/1ae502c5-f484-436a-a1ea-7de67cb96813/jobs/23043).\r\n\r\n(The first of the pipelines linked above failed because no tests were run, not because of a build error. That said, I'm not sure why no tests were run.)\r\n\r\n**Additional context**\r\nI used the [`arm_machine`](https://github.com/open-quantum-safe/liboqs/blob/f0326a42209491a2333d351b60474ef8fc2dc065/.circleci/config.yml#L147) template for both jobs.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1573/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1573/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1746921308","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1573#issuecomment-1746921308","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1573","id":1746921308,"node_id":"IC_kwDOA-eq3c5oH-dc","user":{"login":"SWilson4","id":39264796,"node_id":"MDQ6VXNlcjM5MjY0Nzk2","avatar_url":"https://avatars.githubusercontent.com/u/39264796?v=4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","html_url":"https://github.com/SWilson4","followers_url":"https://api.github.com/users/SWilson4/followers","following_url":"https://api.github.com/users/SWilson4/following{/other_user}","gists_url":"https://api.github.com/users/SWilson4/gists{/gist_id}","starred_url":"https://api.github.com/users/SWilson4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SWilson4/subscriptions","organizations_url":"https://api.github.com/users/SWilson4/orgs","repos_url":"https://api.github.com/users/SWilson4/repos","events_url":"https://api.github.com/users/SWilson4/events{/privacy}","received_events_url":"https://api.github.com/users/SWilson4/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T13:50:18Z","updated_at":"2023-10-04T13:50:18Z","author_association":"CONTRIBUTOR","body":"Piggy-backing onto this: both the \"generic\" ARM configuration and the \"native\" ARM configuration seem to enable the `aarch64` implementations, based on [this](https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/2869/workflows/fef62d49fe36-4118-8ea8-e520bac6d7c0/jobs/23049?invite=true#step-102-6454_409) and [this](https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/2869/workflows/fef62d49-fe36-4118-8ea8-e520bac6d7c0/jobs/23048?invite=true#step-102-6454_40). This runs contrary to our x86_64 builds, where the `avx2` versions are not enabled with `OQS_DIST_BUILD=OFF` and `OQS_OPT_TARGET=generic`.\r\n\r\nIs this expected behaviour? @baentsch @praveksharma ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1746921308/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T13:50:19Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32313916434","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/272","id":1926349523,"node_id":"I_kwDOE_A9l85y0cLT","number":272,"title":"Race condition with `c_obj_create`.","user":{"login":"thb-sb","id":108470890,"node_id":"U_kgDOBnciag","avatar_url":"https://avatars.githubusercontent.com/u/108470890?v=4","gravatar_id":"","url":"https://api.github.com/users/thb-sb","html_url":"https://github.com/thb-sb","followers_url":"https://api.github.com/users/thb-sb/followers","following_url":"https://api.github.com/users/thb-sb/following{/other_user}","gists_url":"https://api.github.com/users/thb-sb/gists{/gist_id}","starred_url":"https://api.github.com/users/thb-sb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thb-sb/subscriptions","organizations_url":"https://api.github.com/users/thb-sb/orgs","repos_url":"https://api.github.com/users/thb-sb/repos","events_url":"https://api.github.com/users/thb-sb/events{/privacy}","received_events_url":"https://api.github.com/users/thb-sb/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-10-04T14:29:31Z","updated_at":"2023-10-04T15:08:07Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"Hi,\r\n\r\nI'm currently testing oqs-provider ([from commit `fab30c7`](https://github.com/open-quantum-safe/oqs-provider/commit/fab30c7f4bb40898aab2a967cdd6b0f990091778)) with OpenSSL 3.1 ([from commit `9c20f5d`](https://github.com/openssl/openssl/commit/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1)) in a multi-threaded application.\r\n\r\nIn this multi-threaded application, I instantiate a [`OSSL_LIB_CTX`](https://www.openssl.org/docs/man3.1/man3/OSSL_LIB_CTX_new.html) per thread, and for each library context I load the default provider and the _oqsprovider_ sequentially:\r\n\r\n```c\r\nextern OSSL_provider_init_fn oqs_provider_init;\r\n\r\nstatic int initialize_lib_ctx(OSSL_LIB_CTX *lib_ctx) {\r\n  if (OSSL_PROVIDER_load(lib_ctx, \"default\") == NULL) {\r\n    goto err;\r\n  }\r\n  if (OSS_PROVIDER_add_builtin(lib_ctx, \"oqsprovider\", oqs_provider_init) != 1) {\r\n    goto err;\r\n  }\r\n  if (OSS_PROVIDER_load(lib_ctx, \"oqsprovider\") == NULL) {\r\n    goto err;\r\n  }\r\n  …\r\n  return OK;\r\n\r\nerr:\r\n  …\r\n}\r\n```\r\n\r\n(_Note that I'm compiling oqs-provider as a static library, but it doesn't seem to be involved in this issue_)\r\n\r\nHowever, it sometimes fails with the [following error](https://github.com/open-quantum-safe/oqs-provider/blob/fab30c7f4bb40898aab2a967cdd6b0f990091778/oqsprov/oqsprov.c#L751):\r\n\r\n```\r\nerror registering NID for dilithium2\r\n```\r\n\r\nI've tracked down the problem, and here is what I found: the [oqs-provider init function](https://github.com/open-quantum-safe/oqs-provider/blob/fab30c7f4bb40898aab2a967cdd6b0f990091778/oqsprov/oqsprov.c#L683) calls the function pointer `c_obj_create` which happens to be [`crypto/provider_core.c:core_obj_create`](https://github.com/openssl/openssl/blob/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1/crypto/provider_core.c#L2127):\r\n\r\nhttps://github.com/open-quantum-safe/oqs-provider/blob/fab30c7f4bb40898aab2a967cdd6b0f990091778/oqsprov/oqsprov.c#L748-L754\r\n\r\nBy looking at the [`c_obj_create`](https://github.com/openssl/openssl/blob/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1/crypto/provider_core.c#L2127) from OpenSSL, it makes a call to [`OBJ_create`](https://github.com/openssl/openssl/blob/831602922f19a8f39d0c0fae425b81e9ab402c69/crypto/objects/obj_dat.c#L746):\r\n\r\nhttps://github.com/openssl/openssl/blob/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1/crypto/provider_core.c#L2127-L2133\r\n\r\n[`OBJ_create`] verifies certain things, and eventually inserts the new NID/OID to a global list:\r\n\r\nhttps://github.com/openssl/openssl/blob/831602922f19a8f39d0c0fae425b81e9ab402c69/crypto/objects/obj_dat.c#L774-L794\r\n\r\nIt seems that two threads may compete between the check in [`c_obj_create`] and the actual call to [`OBJ_create`]:\r\n\r\n```c\r\nstatic int core_obj_create(const OSSL_CORE_HANDLE *prov, const char *oid,\r\n                           const char *sn, const char *ln)\r\n{\r\n    /* Check if it already exists and create it if not */\r\n    return OBJ_txt2nid(oid) != NID_undef             // Race condition here?\r\n           || OBJ_create(oid, sn, ln) != NID_undef;\r\n}\r\n```\r\n\r\nleading to the obvious error displayed above, because `OBJ_create` is going to complain that the OID already exists.\r\n\r\nIn this specific case, `ERR_LIB_OBJ … OBJ_R_OID_EXISTS` is thrown. I'm wondering if we could check for this error and ignore it if returned by [`c_obj_create`]. I've attached a patch [fix_race_condition_obj_oid_exists.patch](https://github.com/open-quantum-safe/oqs-provider/files/12804539/fix_race_condition_obj_oid_exists.patch) that may temporary solve the issue in _oqsprov.c_, and the following is a small PoC to reproduce the error:\r\n\r\n<details>\r\n  <summary>PoC</summary>\r\n\r\n```c\r\n#include <pthread.h>\r\n\r\n#include <openssl/crypto.h>\r\n#include <openssl/provider.h>\r\n\r\nstatic const size_t N_THREADS = 32;\r\n\r\nextern OSSL_provider_init_fn oqs_provider_init;\r\n\r\nstatic void load_oqs_provider(OSSL_LIB_CTX* lib_ctx) {\r\n  if (OSSL_PROVIDER_load(lib_ctx, \"default\") != NULL) {\r\n    if (OSSL_PROVIDER_add_builtin(lib_ctx, \"oqsprovider\", oqs_provider_init) == 1) {\r\n      if (OSSL_PROVIDER_load(lib_ctx, \"oqsprovider\") != NULL) {\r\n      } else {\r\n        putchar('-');\r\n      }\r\n    } else {\r\n      putchar('+');\r\n    }\r\n  } else {\r\n    putchar('@');\r\n  }\r\n}\r\n\r\nstatic void *thread_create_ossl_lib_ctx(void *) {\r\n  OSSL_LIB_CTX *lib_ctx = OSSL_LIB_CTX_new();\r\n  load_oqs_provider(lib_ctx);\r\n  OSSL_LIB_CTX_free(lib_ctx);\r\n  return NULL;\r\n}\r\n\r\nint main() {\r\n  pthread_t threads[N_THREADS];\r\n\r\nstart:\r\n  for (size_t i = 0; i < N_THREADS; ++i) {\r\n    pthread_create(threads + i, NULL, thread_create_ossl_lib_ctx, NULL);\r\n  }\r\n\r\n  for (size_t i = 0; i < N_THREADS; ++i) {\r\n    pthread_join(threads[i], NULL);\r\n  }\r\n\r\n  goto start;\r\n}\r\n```\r\n</details>\r\n\r\nHere is the environment I used to build the PoC:\r\n\r\n - oqs-provider [from commit `fab30c7`](https://github.com/open-quantum-safe/oqs-provider/commit/fab30c7f4bb40898aab2a967cdd6b0f990091778)\r\n - OpenSSL 3.1 [from commit `9c20f5d`](https://github.com/openssl/openssl/commit/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1)\r\n - oqs-provider is built using `-DCMAKE_BUILD_TYPE=Release` and `-DOQS_PROVIDER_BUILD_STATIC=ON`\r\n - OpenSSL is built using `--debug` (it also works with `--release`).\r\n\r\nNote that I also encountered this bug with OpenSSL 3.2.\r\n\r\nThe question is: is it a bug from oqs-provider (is something wrongly done?) or from OpenSSL?\r\nFrom my point of view, OpenSSL maintains a global (i.e. accessible from within all threads) list of `OBJ`, and this list should be self-contained in a `OSSL_LIB_CTX` object.\r\n\r\nWhat do you think about this?\r\n\r\n[`OBJ_create`]: https://github.com/openssl/openssl/blob/831602922f19a8f39d0c0fae425b81e9ab402c69/crypto/objects/obj_dat.c#L746\r\n[`c_obj_create`]: https://github.com/openssl/openssl/blob/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1/crypto/provider_core.c#L2127","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1747085735","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/272#issuecomment-1747085735","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272","id":1747085735,"node_id":"IC_kwDOE_A9l85oImmn","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T15:08:06Z","updated_at":"2023-10-04T15:08:06Z","author_association":"MEMBER","body":"Well reading [the documentation](https://www.openssl.org/docs/man3.0/man3/OBJ_create.html)\r\n\r\n> Neither OBJ_create() nor OBJ_add_sigid() do any locking and are thus not thread safe. Moreover, none of the other functions should be called while concurrent calls to these two functions are possible.\r\n\r\nseems to indicate this to be a well-known bug. And if it's documented it doesn't look like an easy one to fix for OpenSSL.\r\n\r\nThus, what about creating [a mutex](https://www.openssl.org/docs/manmaster/man3/CRYPTO_THREAD_run_once.html) around the registration loop? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1747085735/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T15:08:07Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32314129907","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1573","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1573/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1573/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1573/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1573","id":1926239442,"node_id":"I_kwDOA-eq3c5y0BTS","number":1573,"title":"ARM build fails with `-DOQS_DIST_BUILD=OFF`","user":{"login":"SWilson4","id":39264796,"node_id":"MDQ6VXNlcjM5MjY0Nzk2","avatar_url":"https://avatars.githubusercontent.com/u/39264796?v=4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","html_url":"https://github.com/SWilson4","followers_url":"https://api.github.com/users/SWilson4/followers","following_url":"https://api.github.com/users/SWilson4/following{/other_user}","gists_url":"https://api.github.com/users/SWilson4/gists{/gist_id}","starred_url":"https://api.github.com/users/SWilson4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SWilson4/subscriptions","organizations_url":"https://api.github.com/users/SWilson4/orgs","repos_url":"https://api.github.com/users/SWilson4/repos","events_url":"https://api.github.com/users/SWilson4/events{/privacy}","received_events_url":"https://api.github.com/users/SWilson4/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2023-10-04T13:36:54Z","updated_at":"2023-10-04T15:14:46Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Describe the bug**\r\nliboqs is failing to build on ARM with the configuration `-DOQS_DIST_BUILD=OFF`. The error occurs when `ninja` is called.\r\n\r\nOn the other hand, a build in the same environment with `-DOQS_DIST_BUILD=OFF -DOQS_OPT_TARGET=generic` succeeds.\r\n\r\n**To Reproduce**\r\nSee https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/2869/workflows/fef62d49-fe36-4118-8ea8-e520bac6d7c0/jobs/23049 for the failing build.\r\n\r\n**Expected behavior**\r\nThe build should succeed, as it did [here](https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/2869/workflows/fef62d49-fe36-4118-8ea8-e520bac6d7c0/jobs/23048) and [here](https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/2867/workflows/1ae502c5-f484-436a-a1ea-7de67cb96813/jobs/23043).\r\n\r\n(The first of the pipelines linked above failed because no tests were run, not because of a build error. That said, I'm not sure why no tests were run.)\r\n\r\n**Additional context**\r\nI used the [`arm_machine`](https://github.com/open-quantum-safe/liboqs/blob/f0326a42209491a2333d351b60474ef8fc2dc065/.circleci/config.yml#L147) template for both jobs.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1573/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1573/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747100743","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1573#issuecomment-1747100743","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1573","id":1747100743,"node_id":"IC_kwDOA-eq3c5oIqRH","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T15:14:46Z","updated_at":"2023-10-04T15:14:46Z","author_association":"MEMBER","body":"> liboqs is failing to build on ARM with the configuration -DOQS_DIST_BUILD=OFF. The error occurs when ninja is called.\r\n\r\nHmm -- I cannot quite reproduce this: When using Douglas'  M1 box (`arm64`) a build with \"-DOQS_DIST_BUILD=OFF\" succeeds.\r\n\r\nSo this might well be a CCI-specific issue (with the \"arm-machine\"). When seeing CCI doing surprising things, my first recommendation would be to try github CI (emulating `aarch64`). Further alternative (to debugging remotely CCI): Use an `aarch64` VM: We have at least one (for profiling) at AWS: How does the `liboqs` build in this config behave there?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747100743/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T15:14:47Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32315154891","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/272","id":1926349523,"node_id":"I_kwDOE_A9l85y0cLT","number":272,"title":"Race condition with `c_obj_create`.","user":{"login":"thb-sb","id":108470890,"node_id":"U_kgDOBnciag","avatar_url":"https://avatars.githubusercontent.com/u/108470890?v=4","gravatar_id":"","url":"https://api.github.com/users/thb-sb","html_url":"https://github.com/thb-sb","followers_url":"https://api.github.com/users/thb-sb/followers","following_url":"https://api.github.com/users/thb-sb/following{/other_user}","gists_url":"https://api.github.com/users/thb-sb/gists{/gist_id}","starred_url":"https://api.github.com/users/thb-sb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thb-sb/subscriptions","organizations_url":"https://api.github.com/users/thb-sb/orgs","repos_url":"https://api.github.com/users/thb-sb/repos","events_url":"https://api.github.com/users/thb-sb/events{/privacy}","received_events_url":"https://api.github.com/users/thb-sb/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2023-10-04T14:29:31Z","updated_at":"2023-10-04T15:48:43Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"Hi,\r\n\r\nI'm currently testing oqs-provider ([from commit `fab30c7`](https://github.com/open-quantum-safe/oqs-provider/commit/fab30c7f4bb40898aab2a967cdd6b0f990091778)) with OpenSSL 3.1 ([from commit `9c20f5d`](https://github.com/openssl/openssl/commit/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1)) in a multi-threaded application.\r\n\r\nIn this multi-threaded application, I instantiate a [`OSSL_LIB_CTX`](https://www.openssl.org/docs/man3.1/man3/OSSL_LIB_CTX_new.html) per thread, and for each library context I load the default provider and the _oqsprovider_ sequentially:\r\n\r\n```c\r\nextern OSSL_provider_init_fn oqs_provider_init;\r\n\r\nstatic int initialize_lib_ctx(OSSL_LIB_CTX *lib_ctx) {\r\n  if (OSSL_PROVIDER_load(lib_ctx, \"default\") == NULL) {\r\n    goto err;\r\n  }\r\n  if (OSS_PROVIDER_add_builtin(lib_ctx, \"oqsprovider\", oqs_provider_init) != 1) {\r\n    goto err;\r\n  }\r\n  if (OSS_PROVIDER_load(lib_ctx, \"oqsprovider\") == NULL) {\r\n    goto err;\r\n  }\r\n  …\r\n  return OK;\r\n\r\nerr:\r\n  …\r\n}\r\n```\r\n\r\n(_Note that I'm compiling oqs-provider as a static library, but it doesn't seem to be involved in this issue_)\r\n\r\nHowever, it sometimes fails with the [following error](https://github.com/open-quantum-safe/oqs-provider/blob/fab30c7f4bb40898aab2a967cdd6b0f990091778/oqsprov/oqsprov.c#L751):\r\n\r\n```\r\nerror registering NID for dilithium2\r\n```\r\n\r\nI've tracked down the problem, and here is what I found: the [oqs-provider init function](https://github.com/open-quantum-safe/oqs-provider/blob/fab30c7f4bb40898aab2a967cdd6b0f990091778/oqsprov/oqsprov.c#L683) calls the function pointer `c_obj_create` which happens to be [`crypto/provider_core.c:core_obj_create`](https://github.com/openssl/openssl/blob/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1/crypto/provider_core.c#L2127):\r\n\r\nhttps://github.com/open-quantum-safe/oqs-provider/blob/fab30c7f4bb40898aab2a967cdd6b0f990091778/oqsprov/oqsprov.c#L748-L754\r\n\r\nBy looking at the [`c_obj_create`](https://github.com/openssl/openssl/blob/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1/crypto/provider_core.c#L2127) from OpenSSL, it makes a call to [`OBJ_create`](https://github.com/openssl/openssl/blob/831602922f19a8f39d0c0fae425b81e9ab402c69/crypto/objects/obj_dat.c#L746):\r\n\r\nhttps://github.com/openssl/openssl/blob/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1/crypto/provider_core.c#L2127-L2133\r\n\r\n[`OBJ_create`] verifies certain things, and eventually inserts the new NID/OID to a global list:\r\n\r\nhttps://github.com/openssl/openssl/blob/831602922f19a8f39d0c0fae425b81e9ab402c69/crypto/objects/obj_dat.c#L774-L794\r\n\r\nIt seems that two threads may compete between the check in [`c_obj_create`] and the actual call to [`OBJ_create`]:\r\n\r\n```c\r\nstatic int core_obj_create(const OSSL_CORE_HANDLE *prov, const char *oid,\r\n                           const char *sn, const char *ln)\r\n{\r\n    /* Check if it already exists and create it if not */\r\n    return OBJ_txt2nid(oid) != NID_undef             // Race condition here?\r\n           || OBJ_create(oid, sn, ln) != NID_undef;\r\n}\r\n```\r\n\r\nleading to the obvious error displayed above, because `OBJ_create` is going to complain that the OID already exists.\r\n\r\nIn this specific case, `ERR_LIB_OBJ … OBJ_R_OID_EXISTS` is thrown. I'm wondering if we could check for this error and ignore it if returned by [`c_obj_create`]. I've attached a patch [fix_race_condition_obj_oid_exists.patch](https://github.com/open-quantum-safe/oqs-provider/files/12804539/fix_race_condition_obj_oid_exists.patch) that may temporary solve the issue in _oqsprov.c_, and the following is a small PoC to reproduce the error:\r\n\r\n<details>\r\n  <summary>PoC</summary>\r\n\r\n```c\r\n#include <pthread.h>\r\n\r\n#include <openssl/crypto.h>\r\n#include <openssl/provider.h>\r\n\r\nstatic const size_t N_THREADS = 32;\r\n\r\nextern OSSL_provider_init_fn oqs_provider_init;\r\n\r\nstatic void load_oqs_provider(OSSL_LIB_CTX* lib_ctx) {\r\n  if (OSSL_PROVIDER_load(lib_ctx, \"default\") != NULL) {\r\n    if (OSSL_PROVIDER_add_builtin(lib_ctx, \"oqsprovider\", oqs_provider_init) == 1) {\r\n      if (OSSL_PROVIDER_load(lib_ctx, \"oqsprovider\") != NULL) {\r\n      } else {\r\n        putchar('-');\r\n      }\r\n    } else {\r\n      putchar('+');\r\n    }\r\n  } else {\r\n    putchar('@');\r\n  }\r\n}\r\n\r\nstatic void *thread_create_ossl_lib_ctx(void *) {\r\n  OSSL_LIB_CTX *lib_ctx = OSSL_LIB_CTX_new();\r\n  load_oqs_provider(lib_ctx);\r\n  OSSL_LIB_CTX_free(lib_ctx);\r\n  return NULL;\r\n}\r\n\r\nint main() {\r\n  pthread_t threads[N_THREADS];\r\n\r\nstart:\r\n  for (size_t i = 0; i < N_THREADS; ++i) {\r\n    pthread_create(threads + i, NULL, thread_create_ossl_lib_ctx, NULL);\r\n  }\r\n\r\n  for (size_t i = 0; i < N_THREADS; ++i) {\r\n    pthread_join(threads[i], NULL);\r\n  }\r\n\r\n  goto start;\r\n}\r\n```\r\n</details>\r\n\r\nHere is the environment I used to build the PoC:\r\n\r\n - oqs-provider [from commit `fab30c7`](https://github.com/open-quantum-safe/oqs-provider/commit/fab30c7f4bb40898aab2a967cdd6b0f990091778)\r\n - OpenSSL 3.1 [from commit `9c20f5d`](https://github.com/openssl/openssl/commit/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1)\r\n - oqs-provider is built using `-DCMAKE_BUILD_TYPE=Release` and `-DOQS_PROVIDER_BUILD_STATIC=ON`\r\n - OpenSSL is built using `--debug` (it also works with `--release`).\r\n\r\nNote that I also encountered this bug with OpenSSL 3.2.\r\n\r\nThe question is: is it a bug from oqs-provider (is something wrongly done?) or from OpenSSL?\r\nFrom my point of view, OpenSSL maintains a global (i.e. accessible from within all threads) list of `OBJ`, and this list should be self-contained in a `OSSL_LIB_CTX` object.\r\n\r\nWhat do you think about this?\r\n\r\n[`OBJ_create`]: https://github.com/openssl/openssl/blob/831602922f19a8f39d0c0fae425b81e9ab402c69/crypto/objects/obj_dat.c#L746\r\n[`c_obj_create`]: https://github.com/openssl/openssl/blob/9c20f5db0feaddc4c9ea4c4b2b07e6d87d6701f1/crypto/provider_core.c#L2127","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272/timeline","performed_via_github_app":null,"state_reason":"reopened"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1747186070","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/272#issuecomment-1747186070","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/272","id":1747186070,"node_id":"IC_kwDOE_A9l85oI_GW","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T15:48:43Z","updated_at":"2023-10-04T15:48:43Z","author_association":"MEMBER","body":"> Definitely not a bug in oqs-provider.\r\n\r\nNo -- but one that hits it and IMO is worth while considering (read: providing a work-around). My suggestion is to keep it open and resolve it. If the Mutex idea isn't too good, what about asking the OpenSSL team for other suggestions?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1747186070/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T15:48:44Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32315557653","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549","id":1891002354,"node_id":"PR_kwDOA-eq3c5aDJ8h","number":1549,"title":"Call Keccak_(X4_)Dispatch with pthread_once","user":{"login":"zxjtan","id":32562011,"node_id":"MDQ6VXNlcjMyNTYyMDEx","avatar_url":"https://avatars.githubusercontent.com/u/32562011?v=4","gravatar_id":"","url":"https://api.github.com/users/zxjtan","html_url":"https://github.com/zxjtan","followers_url":"https://api.github.com/users/zxjtan/followers","following_url":"https://api.github.com/users/zxjtan/following{/other_user}","gists_url":"https://api.github.com/users/zxjtan/gists{/gist_id}","starred_url":"https://api.github.com/users/zxjtan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zxjtan/subscriptions","organizations_url":"https://api.github.com/users/zxjtan/orgs","repos_url":"https://api.github.com/users/zxjtan/repos","events_url":"https://api.github.com/users/zxjtan/events{/privacy}","received_events_url":"https://api.github.com/users/zxjtan/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2023-09-11T18:03:27Z","updated_at":"2023-10-04T16:02:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1549","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1549.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1549.patch","merged_at":null},"body":"Fixes #1548.\r\n\r\nCall Keccak_(X4_)Dispatch using pthread_once to ensure setting of global function pointers is atomic and done only once.\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  NO\r\n* [x] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? NO\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747210002","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549#issuecomment-1747210002","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549","id":1747210002,"node_id":"IC_kwDOA-eq3c5oJE8S","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T16:02:22Z","updated_at":"2023-10-04T16:02:22Z","author_association":"MEMBER","body":"@zxjtan OQS already has code parts that are not optimized for Win32. In other words, it'd be beneficial to see `liboqs` improve \"just\" for pthread environments (as is the goal with this PR) rather than wait for a good Win32 solution to the problem. If a Windows user runs into #1548 we can revisit. What should happen first/now, though, is that this PR passes CI. Do you have time to get this resolved?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747210002/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T16:02:23Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32315644387","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1547","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1547/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1547/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1547/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1547","id":1890936772,"node_id":"PR_kwDOA-eq3c5aC7wA","number":1547,"title":"Pull Neon implementation of Falcon from PQClean","user":{"login":"SWilson4","id":39264796,"node_id":"MDQ6VXNlcjM5MjY0Nzk2","avatar_url":"https://avatars.githubusercontent.com/u/39264796?v=4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","html_url":"https://github.com/SWilson4","followers_url":"https://api.github.com/users/SWilson4/followers","following_url":"https://api.github.com/users/SWilson4/following{/other_user}","gists_url":"https://api.github.com/users/SWilson4/gists{/gist_id}","starred_url":"https://api.github.com/users/SWilson4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SWilson4/subscriptions","organizations_url":"https://api.github.com/users/SWilson4/orgs","repos_url":"https://api.github.com/users/SWilson4/repos","events_url":"https://api.github.com/users/SWilson4/events{/privacy}","received_events_url":"https://api.github.com/users/SWilson4/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2023-09-11T17:16:54Z","updated_at":"2023-10-04T16:05:31Z","closed_at":"2023-09-13T12:59:11Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1547","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1547","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1547.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1547.patch","merged_at":"2023-09-13T12:59:11Z"},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\nPull the ARM Neon implementation of Falcon from PQClean on behalf of @cothan. See https://github.com/PQClean/PQClean/pull/493, https://github.com/PQClean/PQClean/pull/497\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider), [OQS-OpenSSL](https://github.com/open-quantum-safe/openssl), [OQS-BoringSSL](https://github.com/open-quantum-safe/boringssl), and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1547/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1547/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747215230","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1547#issuecomment-1747215230","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1547","id":1747215230,"node_id":"IC_kwDOA-eq3c5oJGN-","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T16:05:30Z","updated_at":"2023-10-04T16:05:30Z","author_association":"MEMBER","body":"> So I made a PR to add SPDX header in [PQClean/PQClean#514](https://github.com/PQClean/PQClean/pull/514)\r\n\r\nMuch appreciated. But CI isn't exactly happy: How can this be? The diffs are only comments...","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747215230/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T16:05:31Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32315705313","type":"IssueCommentEvent","actor":{"id":32562011,"login":"zxjtan","display_login":"zxjtan","gravatar_id":"","url":"https://api.github.com/users/zxjtan","avatar_url":"https://avatars.githubusercontent.com/u/32562011?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549","id":1891002354,"node_id":"PR_kwDOA-eq3c5aDJ8h","number":1549,"title":"Call Keccak_(X4_)Dispatch with pthread_once","user":{"login":"zxjtan","id":32562011,"node_id":"MDQ6VXNlcjMyNTYyMDEx","avatar_url":"https://avatars.githubusercontent.com/u/32562011?v=4","gravatar_id":"","url":"https://api.github.com/users/zxjtan","html_url":"https://github.com/zxjtan","followers_url":"https://api.github.com/users/zxjtan/followers","following_url":"https://api.github.com/users/zxjtan/following{/other_user}","gists_url":"https://api.github.com/users/zxjtan/gists{/gist_id}","starred_url":"https://api.github.com/users/zxjtan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zxjtan/subscriptions","organizations_url":"https://api.github.com/users/zxjtan/orgs","repos_url":"https://api.github.com/users/zxjtan/repos","events_url":"https://api.github.com/users/zxjtan/events{/privacy}","received_events_url":"https://api.github.com/users/zxjtan/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2023-09-11T18:03:27Z","updated_at":"2023-10-04T16:07:43Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1549","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1549.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1549.patch","merged_at":null},"body":"Fixes #1548.\r\n\r\nCall Keccak_(X4_)Dispatch using pthread_once to ensure setting of global function pointers is atomic and done only once.\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  NO\r\n* [x] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? NO\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747218982","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549#issuecomment-1747218982","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549","id":1747218982,"node_id":"IC_kwDOA-eq3c5oJHIm","user":{"login":"zxjtan","id":32562011,"node_id":"MDQ6VXNlcjMyNTYyMDEx","avatar_url":"https://avatars.githubusercontent.com/u/32562011?v=4","gravatar_id":"","url":"https://api.github.com/users/zxjtan","html_url":"https://github.com/zxjtan","followers_url":"https://api.github.com/users/zxjtan/followers","following_url":"https://api.github.com/users/zxjtan/following{/other_user}","gists_url":"https://api.github.com/users/zxjtan/gists{/gist_id}","starred_url":"https://api.github.com/users/zxjtan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zxjtan/subscriptions","organizations_url":"https://api.github.com/users/zxjtan/orgs","repos_url":"https://api.github.com/users/zxjtan/repos","events_url":"https://api.github.com/users/zxjtan/events{/privacy}","received_events_url":"https://api.github.com/users/zxjtan/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T16:07:43Z","updated_at":"2023-10-04T16:07:43Z","author_association":"NONE","body":"@baentsch Sure, I can gate the pthread functionality and pass the CI quite soon.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747218982/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T16:07:44Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32315766960","type":"IssueCommentEvent","actor":{"id":9219016,"login":"cothan","display_login":"cothan","gravatar_id":"","url":"https://api.github.com/users/cothan","avatar_url":"https://avatars.githubusercontent.com/u/9219016?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1547","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1547/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1547/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1547/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1547","id":1890936772,"node_id":"PR_kwDOA-eq3c5aC7wA","number":1547,"title":"Pull Neon implementation of Falcon from PQClean","user":{"login":"SWilson4","id":39264796,"node_id":"MDQ6VXNlcjM5MjY0Nzk2","avatar_url":"https://avatars.githubusercontent.com/u/39264796?v=4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","html_url":"https://github.com/SWilson4","followers_url":"https://api.github.com/users/SWilson4/followers","following_url":"https://api.github.com/users/SWilson4/following{/other_user}","gists_url":"https://api.github.com/users/SWilson4/gists{/gist_id}","starred_url":"https://api.github.com/users/SWilson4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SWilson4/subscriptions","organizations_url":"https://api.github.com/users/SWilson4/orgs","repos_url":"https://api.github.com/users/SWilson4/repos","events_url":"https://api.github.com/users/SWilson4/events{/privacy}","received_events_url":"https://api.github.com/users/SWilson4/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2023-09-11T17:16:54Z","updated_at":"2023-10-04T16:09:56Z","closed_at":"2023-09-13T12:59:11Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1547","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1547","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1547.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1547.patch","merged_at":"2023-09-13T12:59:11Z"},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\nPull the ARM Neon implementation of Falcon from PQClean on behalf of @cothan. See https://github.com/PQClean/PQClean/pull/493, https://github.com/PQClean/PQClean/pull/497\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider), [OQS-OpenSSL](https://github.com/open-quantum-safe/openssl), [OQS-BoringSSL](https://github.com/open-quantum-safe/boringssl), and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1547/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1547/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747223022","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1547#issuecomment-1747223022","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1547","id":1747223022,"node_id":"IC_kwDOA-eq3c5oJIHu","user":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T16:09:55Z","updated_at":"2023-10-04T16:09:55Z","author_association":"NONE","body":"I totally agree with you. I think the PR changes in Falcon, so it triggers all implementations in Falcon tested. Turn out, AVX2 used defined macros (as it always is from the start) that makes become red. ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747223022/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T16:09:56Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32316112062","type":"IssueCommentEvent","actor":{"id":106774416,"login":"ducnguyen-sb","display_login":"ducnguyen-sb","gravatar_id":"","url":"https://api.github.com/users/ducnguyen-sb","avatar_url":"https://avatars.githubusercontent.com/u/106774416?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1572","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1572/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1572/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1572/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1572","id":1925436974,"node_id":"PR_kwDOA-eq3c5b3AxX","number":1572,"title":"Secret Key Query ","user":{"login":"ashman-p","id":23340773,"node_id":"MDQ6VXNlcjIzMzQwNzcz","avatar_url":"https://avatars.githubusercontent.com/u/23340773?v=4","gravatar_id":"","url":"https://api.github.com/users/ashman-p","html_url":"https://github.com/ashman-p","followers_url":"https://api.github.com/users/ashman-p/followers","following_url":"https://api.github.com/users/ashman-p/following{/other_user}","gists_url":"https://api.github.com/users/ashman-p/gists{/gist_id}","starred_url":"https://api.github.com/users/ashman-p/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashman-p/subscriptions","organizations_url":"https://api.github.com/users/ashman-p/orgs","repos_url":"https://api.github.com/users/ashman-p/repos","events_url":"https://api.github.com/users/ashman-p/events{/privacy}","received_events_url":"https://api.github.com/users/ashman-p/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"ashman-p","id":23340773,"node_id":"MDQ6VXNlcjIzMzQwNzcz","avatar_url":"https://avatars.githubusercontent.com/u/23340773?v=4","gravatar_id":"","url":"https://api.github.com/users/ashman-p","html_url":"https://github.com/ashman-p","followers_url":"https://api.github.com/users/ashman-p/followers","following_url":"https://api.github.com/users/ashman-p/following{/other_user}","gists_url":"https://api.github.com/users/ashman-p/gists{/gist_id}","starred_url":"https://api.github.com/users/ashman-p/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashman-p/subscriptions","organizations_url":"https://api.github.com/users/ashman-p/orgs","repos_url":"https://api.github.com/users/ashman-p/repos","events_url":"https://api.github.com/users/ashman-p/events{/privacy}","received_events_url":"https://api.github.com/users/ashman-p/received_events","type":"User","site_admin":false},"assignees":[{"login":"ashman-p","id":23340773,"node_id":"MDQ6VXNlcjIzMzQwNzcz","avatar_url":"https://avatars.githubusercontent.com/u/23340773?v=4","gravatar_id":"","url":"https://api.github.com/users/ashman-p","html_url":"https://github.com/ashman-p","followers_url":"https://api.github.com/users/ashman-p/followers","following_url":"https://api.github.com/users/ashman-p/following{/other_user}","gists_url":"https://api.github.com/users/ashman-p/gists{/gist_id}","starred_url":"https://api.github.com/users/ashman-p/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashman-p/subscriptions","organizations_url":"https://api.github.com/users/ashman-p/orgs","repos_url":"https://api.github.com/users/ashman-p/repos","events_url":"https://api.github.com/users/ashman-p/events{/privacy}","received_events_url":"https://api.github.com/users/ashman-p/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2023-10-04T05:33:04Z","updated_at":"2023-10-04T16:22:46Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1572","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1572","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1572.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1572.patch","merged_at":null},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\nQuery the number of signing operations a private key can handle in total as well as the number\r\nof signing operations that has already been done..\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider), [OQS-OpenSSL](https://github.com/open-quantum-safe/openssl), [OQS-BoringSSL](https://github.com/open-quantum-safe/boringssl), and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1572/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1572/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747244354","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1572#issuecomment-1747244354","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1572","id":1747244354,"node_id":"IC_kwDOA-eq3c5oJNVC","user":{"login":"ducnguyen-sb","id":106774416,"node_id":"U_kgDOBl0_kA","avatar_url":"https://avatars.githubusercontent.com/u/106774416?v=4","gravatar_id":"","url":"https://api.github.com/users/ducnguyen-sb","html_url":"https://github.com/ducnguyen-sb","followers_url":"https://api.github.com/users/ducnguyen-sb/followers","following_url":"https://api.github.com/users/ducnguyen-sb/following{/other_user}","gists_url":"https://api.github.com/users/ducnguyen-sb/gists{/gist_id}","starred_url":"https://api.github.com/users/ducnguyen-sb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ducnguyen-sb/subscriptions","organizations_url":"https://api.github.com/users/ducnguyen-sb/orgs","repos_url":"https://api.github.com/users/ducnguyen-sb/repos","events_url":"https://api.github.com/users/ducnguyen-sb/events{/privacy}","received_events_url":"https://api.github.com/users/ducnguyen-sb/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T16:22:45Z","updated_at":"2023-10-04T16:22:45Z","author_association":"COLLABORATOR","body":"Thanks @ashman-p , I only have one question. Other than that the PR LGTM! ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747244354/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T16:22:46Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32318158317","type":"IssueCommentEvent","actor":{"id":132921394,"login":"praveksharma","display_login":"praveksharma","gravatar_id":"","url":"https://api.github.com/users/praveksharma","avatar_url":"https://avatars.githubusercontent.com/u/132921394?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/270","id":1924868837,"node_id":"I_kwDOE_A9l85yuyrl","number":270,"title":"Falcon and SPHINCS+ interop with BC","user":{"login":"praveksharma","id":132921394,"node_id":"U_kgDOB-w4Mg","avatar_url":"https://avatars.githubusercontent.com/u/132921394?v=4","gravatar_id":"","url":"https://api.github.com/users/praveksharma","html_url":"https://github.com/praveksharma","followers_url":"https://api.github.com/users/praveksharma/followers","following_url":"https://api.github.com/users/praveksharma/following{/other_user}","gists_url":"https://api.github.com/users/praveksharma/gists{/gist_id}","starred_url":"https://api.github.com/users/praveksharma/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/praveksharma/subscriptions","organizations_url":"https://api.github.com/users/praveksharma/orgs","repos_url":"https://api.github.com/users/praveksharma/repos","events_url":"https://api.github.com/users/praveksharma/events{/privacy}","received_events_url":"https://api.github.com/users/praveksharma/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2023-10-03T20:11:41Z","updated_at":"2023-10-04T17:45:13Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"**Describe the bug**\r\nThe current SPHINCS+ implementation doesn't interop with Bouncy Castle under the [R3 format](https://github.com/IETF-Hackathon/pqc-certificates/tree/master#zip-format-r3) used the PQC Certificates project of IETF hackathons. oqs-provider is unable to verify self-signed certificates produced by Bouncy Castle. This occurs despite the OIDs in [Bouncy Castle](https://github.com/bcgit/bc-java/blob/e007cbe82622e2f3d2ba0c46cceab7d504d4cf9b/core/src/main/java/org/bouncycastle/asn1/bc/BCObjectIdentifiers.java#L157C3-L157C3) matching those in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider/blob/fab30c7f4bb40898aab2a967cdd6b0f990091778/oqs-template/generate.yml#L735).\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\ngit clone https://github.com/IETF-Hackathon/pqc-certificates.git\r\n# Extract provider/bc/artifacts_certs_r3.zip to providers/bc/artifacts/\r\ncd providers/bc/\r\n../oqs/check_r3.sh .\r\n```\r\n\r\n**Expected behavior**\r\nThe script should output `Y` for each certificate signed using SPHINCS+:\r\n\r\n```\r\n1.3.9999.6.4.13,Y\r\n1.3.9999.6.4.16,Y\r\n1.3.9999.6.5.10,Y\r\n1.3.9999.6.5.12,Y\r\n1.3.9999.6.6.10,Y\r\n1.3.9999.6.6.12,Y\r\n1.3.9999.6.7.13,Y\r\n1.3.9999.6.7.16,Y\r\n1.3.9999.6.8.10,Y\r\n1.3.9999.6.8.12,Y\r\n1.3.9999.6.9.10,Y\r\n1.3.9999.6.9.12,Y\r\n```\r\n\r\n**Environment:**\r\nDocker container based on image built with [`/opensll3/Dockerfile-interop`](https://github.com/open-quantum-safe/oqs-demos/blob/main/openssl3/Dockerfile-interop) from oqs-demos. The Dockerfile was modified to build oqs-provider from the interop-test branch instead of main.\r\n\r\n- OpenSSL: 3.2.0-alpha3-dev\r\n- oqsprovider: 0.5.2-interop\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1747366592","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/270#issuecomment-1747366592","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/270","id":1747366592,"node_id":"IC_kwDOE_A9l85oJrLA","user":{"login":"praveksharma","id":132921394,"node_id":"U_kgDOB-w4Mg","avatar_url":"https://avatars.githubusercontent.com/u/132921394?v=4","gravatar_id":"","url":"https://api.github.com/users/praveksharma","html_url":"https://github.com/praveksharma","followers_url":"https://api.github.com/users/praveksharma/followers","following_url":"https://api.github.com/users/praveksharma/following{/other_user}","gists_url":"https://api.github.com/users/praveksharma/gists{/gist_id}","starred_url":"https://api.github.com/users/praveksharma/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/praveksharma/subscriptions","organizations_url":"https://api.github.com/users/praveksharma/orgs","repos_url":"https://api.github.com/users/praveksharma/repos","events_url":"https://api.github.com/users/praveksharma/events{/privacy}","received_events_url":"https://api.github.com/users/praveksharma/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T17:45:12Z","updated_at":"2023-10-04T17:45:12Z","author_association":"MEMBER","body":"I shall first attempt to address your concerns regarding the hackathon test result presentation. The test results are generated using a three step process:\r\n\r\n1. Each provider generates artifacts in the [R3 format](https://github.com/IETF-Hackathon/pqc-certificates/blob/master/readme.md#zip-format-r3) and saves them as `providers/*/artifacts_certs_r3.zip`.\r\n2. Each provider then checks for compatibility with all other providers and generates a compatibility matrix consisting of CSV files in `providers/*/compatMatrices/artifacts_certs_r3.zip`. Since these CSV files are generated manually, a provider may choose to not generate compatibility matrices for all other providers resulting in possible asymmetry in the final results as you note (looks like Digicert and Entrust did not generate the CSV files required to generate the compatibility matrix with oqs-provider):  \r\n> OK interop is documented between Entrust and oqsprovider but not between oqsprovider and Entrust\r\n\r\n>Digging to the next level: OQS seems to interoperate with Digicert and Entrust on [Falcon1024](https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/pqc_hackathon_results_certs_r3.md#falcon-1024-13999939) -- but only in one direction\r\n3. Once all the CSV files are generated (or changed), scripts inside `src/` must be manually run to update the final results. Since these scripts haven't been run the results you're seeing are out of date compared to the updated CSVs resulting in the inconsistencies you note:\r\n> there is no result mark between BC and oqsprovider (but between oqsprovider and BC)\r\n\r\n(the results are based on the CSVs generated by OQS Provider v.0.5.2-main which doesn't provide the required OID)\r\n> One more issue with the Sphincs interop results: [Here is a Sphincs interop results table](https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/pqc_hackathon_results_certs_r3.md#sphincs-sha256-192f-simple-139999653): Looking at it, one may believe oqsprovider and entrust interoperate. However, this is impossible, as the stated OID is not active in oqsprovider any more (in \"interop-test\" branch)\r\n\r\nSo the results are as you say:\r\n>  Is this results presentation an \"amalgamation\" of various previous runs? It would be sensible to add the output of `openssl list -verbose -providers -provider oqsprovider` (and the equivalent code identification methods in the other implementations) to all results to avoid such issues.\r\n\r\nI agree with adding the output of `openssl list -verbose -providers -provider oqsprovider`. I shall either open an issue on the pqc-certificates repo asking that the results be updated or attempt to update them myself. In the mean time, I suggest you refer to `/providers/oqs/compatMatrices/artifacts_certs_r3/*.csv` instead.\r\n\r\n> So this issue should read \"Falcon and Sphincs+ interop with BC\" then?\r\n\r\nI didn't think including the Falcon in the issue was necessary since it's the OIDs in BC which are out of date but I've updated the issue.\r\n\r\n> So is this summary correct then: (FIPS) Dilithium interop is confirmed (with BC as the only other implementation doing FIPS Dilithium using \"interop-test\" branch) and (Round3) Dilithium interop is confirmed with all other implementations (using \"main branch\")? Please note such confirmation would be running counter to the results stated in the [interop results table](https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/pqc_hackathon_results_certs_r3.md#ml-dsa-44-ipd-13614122671244) for the \"FIPS Dilithium\" OID.\r\n\r\nYes, I agree with this summary. Any inconsistency with the hackathon results are due to reasons I've listed above.\r\n\r\n> In general, your statement seems to indicate that all logic in oqs-provider (incl. (O)IDs) is correct (as there is no Dilithium-unique code in `oqsprovider` apart from labelling an algorithm via OID). Would you concur?\r\n\r\nYes, I agree.\r\n\r\n> With such OID clash interop is impossible (or is the above moniker indeed representing the same algorithm?). \r\n\r\nYes, they are the same algorithm, NIST chose to name Sphincs+ SLH-DSA in FIPS 205 initial public draft.\r\n\r\n> Final suggestion: Would it be sensible to drop `oqs-openssl111` from the results tables in the hackathon? This code is surely not run any more and accordingly, no results will ever be added again. The results presentation would become more legible, too.\r\n\r\nI agree with you and removed `oqs-openssl111` results from `/providers/oqs/compatMatrices/artifacts_certs_r3/` when I last updated the CSVs. \r\n\r\nWith these issues out of the way:\r\n\r\n> Looking at it, one may believe oqsprovider and entrust interoperate. However, this is impossible, as the stated OID is not active in oqsprovider any more (in \"interop-test\" branch). \r\n\r\nWhile what you say is correct (as verified by the output of `openssl list -objects`) the up to date results in  `/providers/oqs/compatMatrices/artifacts_certs_r3/` (generated with OQS Provider v.0.5.2-interop (ed6462a) based on liboqs v.0.9.0-standard) show that Entrust (with incorrect OIDs) interops fine with oqs-provider while BC (with correct OIDs) does not interop with oqs-provider.\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1747366592/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T17:45:13Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32319108124","type":"IssueCommentEvent","actor":{"id":23340773,"login":"ashman-p","display_login":"ashman-p","gravatar_id":"","url":"https://api.github.com/users/ashman-p","avatar_url":"https://avatars.githubusercontent.com/u/23340773?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1572","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1572/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1572/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1572/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1572","id":1925436974,"node_id":"PR_kwDOA-eq3c5b3AxX","number":1572,"title":"Secret Key Query ","user":{"login":"ashman-p","id":23340773,"node_id":"MDQ6VXNlcjIzMzQwNzcz","avatar_url":"https://avatars.githubusercontent.com/u/23340773?v=4","gravatar_id":"","url":"https://api.github.com/users/ashman-p","html_url":"https://github.com/ashman-p","followers_url":"https://api.github.com/users/ashman-p/followers","following_url":"https://api.github.com/users/ashman-p/following{/other_user}","gists_url":"https://api.github.com/users/ashman-p/gists{/gist_id}","starred_url":"https://api.github.com/users/ashman-p/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashman-p/subscriptions","organizations_url":"https://api.github.com/users/ashman-p/orgs","repos_url":"https://api.github.com/users/ashman-p/repos","events_url":"https://api.github.com/users/ashman-p/events{/privacy}","received_events_url":"https://api.github.com/users/ashman-p/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"ashman-p","id":23340773,"node_id":"MDQ6VXNlcjIzMzQwNzcz","avatar_url":"https://avatars.githubusercontent.com/u/23340773?v=4","gravatar_id":"","url":"https://api.github.com/users/ashman-p","html_url":"https://github.com/ashman-p","followers_url":"https://api.github.com/users/ashman-p/followers","following_url":"https://api.github.com/users/ashman-p/following{/other_user}","gists_url":"https://api.github.com/users/ashman-p/gists{/gist_id}","starred_url":"https://api.github.com/users/ashman-p/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashman-p/subscriptions","organizations_url":"https://api.github.com/users/ashman-p/orgs","repos_url":"https://api.github.com/users/ashman-p/repos","events_url":"https://api.github.com/users/ashman-p/events{/privacy}","received_events_url":"https://api.github.com/users/ashman-p/received_events","type":"User","site_admin":false},"assignees":[{"login":"ashman-p","id":23340773,"node_id":"MDQ6VXNlcjIzMzQwNzcz","avatar_url":"https://avatars.githubusercontent.com/u/23340773?v=4","gravatar_id":"","url":"https://api.github.com/users/ashman-p","html_url":"https://github.com/ashman-p","followers_url":"https://api.github.com/users/ashman-p/followers","following_url":"https://api.github.com/users/ashman-p/following{/other_user}","gists_url":"https://api.github.com/users/ashman-p/gists{/gist_id}","starred_url":"https://api.github.com/users/ashman-p/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashman-p/subscriptions","organizations_url":"https://api.github.com/users/ashman-p/orgs","repos_url":"https://api.github.com/users/ashman-p/repos","events_url":"https://api.github.com/users/ashman-p/events{/privacy}","received_events_url":"https://api.github.com/users/ashman-p/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2023-10-04T05:33:04Z","updated_at":"2023-10-04T18:25:27Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1572","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1572","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1572.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1572.patch","merged_at":null},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\nQuery the number of signing operations a private key can handle in total as well as the number\r\nof signing operations that has already been done..\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider), [OQS-OpenSSL](https://github.com/open-quantum-safe/openssl), [OQS-BoringSSL](https://github.com/open-quantum-safe/boringssl), and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1572/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1572/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747422305","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1572#issuecomment-1747422305","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1572","id":1747422305,"node_id":"IC_kwDOA-eq3c5oJ4xh","user":{"login":"ashman-p","id":23340773,"node_id":"MDQ6VXNlcjIzMzQwNzcz","avatar_url":"https://avatars.githubusercontent.com/u/23340773?v=4","gravatar_id":"","url":"https://api.github.com/users/ashman-p","html_url":"https://github.com/ashman-p","followers_url":"https://api.github.com/users/ashman-p/followers","following_url":"https://api.github.com/users/ashman-p/following{/other_user}","gists_url":"https://api.github.com/users/ashman-p/gists{/gist_id}","starred_url":"https://api.github.com/users/ashman-p/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashman-p/subscriptions","organizations_url":"https://api.github.com/users/ashman-p/orgs","repos_url":"https://api.github.com/users/ashman-p/repos","events_url":"https://api.github.com/users/ashman-p/events{/privacy}","received_events_url":"https://api.github.com/users/ashman-p/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T18:25:27Z","updated_at":"2023-10-04T18:25:27Z","author_association":"COLLABORATOR","body":"> Thanks @ashman-p , I only have one question. Other than that the PR LGTM!\r\n\r\nThank you. Also, you will see that some of the tests only address LMS but that will change once the relevant callback features have been added to XMSS.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747422305/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T18:25:28Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32322897974","type":"IssueCommentEvent","actor":{"id":32562011,"login":"zxjtan","display_login":"zxjtan","gravatar_id":"","url":"https://api.github.com/users/zxjtan","avatar_url":"https://avatars.githubusercontent.com/u/32562011?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549","id":1891002354,"node_id":"PR_kwDOA-eq3c5aDJ8h","number":1549,"title":"Call Keccak_(X4_)Dispatch with pthread_once","user":{"login":"zxjtan","id":32562011,"node_id":"MDQ6VXNlcjMyNTYyMDEx","avatar_url":"https://avatars.githubusercontent.com/u/32562011?v=4","gravatar_id":"","url":"https://api.github.com/users/zxjtan","html_url":"https://github.com/zxjtan","followers_url":"https://api.github.com/users/zxjtan/followers","following_url":"https://api.github.com/users/zxjtan/following{/other_user}","gists_url":"https://api.github.com/users/zxjtan/gists{/gist_id}","starred_url":"https://api.github.com/users/zxjtan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zxjtan/subscriptions","organizations_url":"https://api.github.com/users/zxjtan/orgs","repos_url":"https://api.github.com/users/zxjtan/repos","events_url":"https://api.github.com/users/zxjtan/events{/privacy}","received_events_url":"https://api.github.com/users/zxjtan/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2023-09-11T18:03:27Z","updated_at":"2023-10-04T21:18:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1549","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1549.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1549.patch","merged_at":null},"body":"Fixes #1548.\r\n\r\nCall Keccak_(X4_)Dispatch using pthread_once to ensure setting of global function pointers is atomic and done only once.\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  NO\r\n* [x] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? NO\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747656872","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1549#issuecomment-1747656872","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1549","id":1747656872,"node_id":"IC_kwDOA-eq3c5oKyCo","user":{"login":"zxjtan","id":32562011,"node_id":"MDQ6VXNlcjMyNTYyMDEx","avatar_url":"https://avatars.githubusercontent.com/u/32562011?v=4","gravatar_id":"","url":"https://api.github.com/users/zxjtan","html_url":"https://github.com/zxjtan","followers_url":"https://api.github.com/users/zxjtan/followers","following_url":"https://api.github.com/users/zxjtan/following{/other_user}","gists_url":"https://api.github.com/users/zxjtan/gists{/gist_id}","starred_url":"https://api.github.com/users/zxjtan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zxjtan/subscriptions","organizations_url":"https://api.github.com/users/zxjtan/orgs","repos_url":"https://api.github.com/users/zxjtan/repos","events_url":"https://api.github.com/users/zxjtan/events{/privacy}","received_events_url":"https://api.github.com/users/zxjtan/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T21:18:31Z","updated_at":"2023-10-04T21:18:31Z","author_association":"NONE","body":"CI still runs into `undefined reference to symbol 'call_once@@GLIBC_2.28'`, any tips on how to proceed?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1747656872/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T21:18:32Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32323302959","type":"IssueCommentEvent","actor":{"id":132921394,"login":"praveksharma","display_login":"praveksharma","gravatar_id":"","url":"https://api.github.com/users/praveksharma","avatar_url":"https://avatars.githubusercontent.com/u/132921394?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/239","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/239/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/239/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/239/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/239","id":1874531092,"node_id":"I_kwDOE_A9l85vuxMU","number":239,"title":"Missing support for hash-n-sign","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[{"id":2701983054,"node_id":"MDU6TGFiZWwyNzAxOTgzMDU0","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2701983059,"node_id":"MDU6TGFiZWwyNzAxOTgzMDU5","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/labels/futurework","name":"futurework","color":"ffffff","default":false,"description":"This may or may not be worked on"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2023-08-30T23:51:35Z","updated_at":"2023-10-04T21:40:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The current implementation for the oqsprovider does not allow the use of the hash-n-sign paradigm with the signature algorithms. It would be useful to add support for signing pre-hashed data. This would enable, for example, the possibility to sign with <algorithmX>With<hashAlgY> type of algorithms:\r\n```bash\r\n$ openssl req -new -key \"dilithium2.key\" -subj \"/O=OpenCA\" -sha256 -out dilithium2.req\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/239/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/239/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1747681479","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/239#issuecomment-1747681479","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/239","id":1747681479,"node_id":"IC_kwDOE_A9l85oK4DH","user":{"login":"praveksharma","id":132921394,"node_id":"U_kgDOB-w4Mg","avatar_url":"https://avatars.githubusercontent.com/u/132921394?v=4","gravatar_id":"","url":"https://api.github.com/users/praveksharma","html_url":"https://github.com/praveksharma","followers_url":"https://api.github.com/users/praveksharma/followers","following_url":"https://api.github.com/users/praveksharma/following{/other_user}","gists_url":"https://api.github.com/users/praveksharma/gists{/gist_id}","starred_url":"https://api.github.com/users/praveksharma/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/praveksharma/subscriptions","organizations_url":"https://api.github.com/users/praveksharma/orgs","repos_url":"https://api.github.com/users/praveksharma/repos","events_url":"https://api.github.com/users/praveksharma/events{/privacy}","received_events_url":"https://api.github.com/users/praveksharma/received_events","type":"User","site_admin":false},"created_at":"2023-10-04T21:40:44Z","updated_at":"2023-10-04T21:40:44Z","author_association":"MEMBER","body":"Following up on this thread to recap recent conversations that we've had on the subject of hash-n-sign support in oqs-provider. The FIPS 204 and FIPS 205 initial public drafts for Dilithium and Sphincs+ respectively suggest optionally supporting hash-n-sign for these algorithms (the future FIPS draft for Falcon may make a similar recommendation). The IETF pqc-certificates hackathons team has published a [tentative list of OIDs](https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/oid_mapping.md#hash-n-sign-pqc-signatures-oids) to support development and interop testing for hash-n-sign with PQ algorithms (it is worth noting that this list deviates from the FIPS 205 recommendation of providing hash-n-sign support for Sphincs+ and instead chooses not to). \r\n\r\nAdditionally, I believe @christianpaquin mentioned that the various hardware vendors participating in NCCoE have decided to support hash-n-sign for the various hash and PQ algorithm combinations (including Sphincs+; please correct me if I'm wrong).  \r\n\r\nGiven these updates I think we should work on providing support for hash-n-sign to oqs-provider; perhaps picking up #240 and getting it ready to merge might be a good place to start.\r\n\r\nAnswering some earlier questions:\r\n\r\n> If integrated/done within the `openssl` framework, wouldn't this lead to an \"explosion\" in algorithm names & required OIDs and algorithm IDs (\"mixing\" all kinds of hashes with all kinds of (plain and hybrid) PQ algs)?\r\n\r\nGoing through the list of OIDs proposed by the IETF pqc-certificates hackathons team this does indeed seem to be the case. Although they offer a possible simplification by suggesting a \"recommended\" combination of hash for every PQ algorithm.\r\n\r\n> Which entity would be (or is?) working on/providing this (or defining a (preferably?) limited set of PQ alg/hash alg combinations)?\r\n\r\nThe FIPS initial public drafts don't include OIDs in them, although there is interest from Entrust to bring this issue up at a future NCCoE meeting. In the meantime, following the IETF hackathons list seems to be the way to go. Further, there is no definitive spec for generic hash-n-sign for PQ algorithms (provided by NIST or otherwise) and implementing support for hash-n-sign in oqs-provider could then act as a helpful de facto standard for further development and interop testing. \r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1747681479/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-10-04T21:40:44Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
