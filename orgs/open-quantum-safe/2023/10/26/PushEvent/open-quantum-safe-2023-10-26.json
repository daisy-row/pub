{"id":"32856086533","type":"PushEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"repository_id":334511511,"push_id":15570528987,"size":1,"distinct_size":1,"ref":"refs/heads/main","head":"4dac252a16815b0612e79e63efd5b8aebeacd98a","before":"8a96fed20927d17762bc1b5d9e27aa3c26b6bd49","commits":[{"sha":"4dac252a16815b0612e79e63efd5b8aebeacd98a","author":{"email":"57787676+baentsch@users.noreply.github.com","name":"Michael Baentsch"},"message":"check empty params lists passed (#296)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/commits/4dac252a16815b0612e79e63efd5b8aebeacd98a"}]},"public":true,"created_at":"2023-10-26T04:42:07Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32856153443","type":"PushEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"repository_id":334511511,"push_id":15570564297,"size":1,"distinct_size":1,"ref":"refs/heads/mb-newpolicy","head":"e5f9697c1a1d46d45592d2dd13091e95657c7f8c","before":"eee85a228501e55d8696f2744f498077c7b821fb","commits":[{"sha":"e5f9697c1a1d46d45592d2dd13091e95657c7f8c","author":{"email":"spencer.wilson@uwaterloo.ca","name":"Spencer Wilson"},"message":"Governance document fixes / clarification / softening (#297)\n\n* Fix link to OpenSSL\r\n\r\n* s/github/GitHub/\r\n\r\n* Clarify reinstatement into role\r\n\r\n* English fixup\r\n\r\n* Add cheesy foreword","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/commits/e5f9697c1a1d46d45592d2dd13091e95657c7f8c"}]},"public":true,"created_at":"2023-10-26T04:47:09Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32858720944","type":"PushEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":218087071,"name":"open-quantum-safe/oqs-demos","url":"https://api.github.com/repos/open-quantum-safe/oqs-demos"},"payload":{"repository_id":218087071,"push_id":15571883811,"size":1,"distinct_size":1,"ref":"refs/heads/bhe-testserver-090-final","head":"c50eade0c5f82982c9052033f103bdb96ad4a2d7","before":"885142a17ba427d6a1aa6576ae9115338e70ad10","commits":[{"sha":"c50eade0c5f82982c9052033f103bdb96ad4a2d7","author":{"email":"bhe@zurich.ibm.com","name":"Basil Hess"},"message":"Update README.md","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/commits/c50eade0c5f82982c9052033f103bdb96ad4a2d7"}]},"public":true,"created_at":"2023-10-26T07:08:36Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32860142759","type":"PushEvent","actor":{"id":74706004,"login":"pi-314159","display_login":"pi-314159","gravatar_id":"","url":"https://api.github.com/users/pi-314159","avatar_url":"https://avatars.githubusercontent.com/u/74706004?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"repository_id":179335992,"push_id":15572561987,"size":194,"distinct_size":194,"ref":"refs/heads/master","head":"e95537cc2460b143830ed94a2b7a4d382435ecb7","before":"1ca41b49e9198f510991fb4f350b4a5fd4c1d5ff","commits":[{"sha":"acfb1062f4c3f08cdfeb7fef496121d4f5edfc3f","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Fix tests on Arm when NEON is unavailable\n\nI forgot a CPU capability check in X25519Test.NeonABI.\n\nChange-Id: Ie2fa4a7b04a7eb152aa3b720687ec529e5dd5b0f\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60745\nReviewed-by: Adam Langley <agl@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>\nCommit-Queue: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/acfb1062f4c3f08cdfeb7fef496121d4f5edfc3f"},{"sha":"98e1227cb7bfe4b845c7fc5136e83f8d368065b2","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Make bn_mod_lshift_consttime faster\n\nbn_mod_lshift_consttime currently calls bn_mod_lshift1_consttime in a\nloop, but between needing a temporary value and having to guard against\nsome complications in our fixed-width BIGNUM convention, it's actually\npicking up a lot of overhead.\n\nThis function is currently called to setup Montgomery contexts with\nsecret moduli (RSA primes). The setup operation is not\nperformance-sensitive in our benchmarks, because it is amortized away in\nRSA private key signing. However, as part of reducing thread contention\nwith the RSA object, I'm planning to make RSA creation, which we do\nbenchmark, eagerly fill in the Montgomery context.\n\nWe do benchmark RSA parsing, so adding a slow Montgomery setup would\nshow up in benchmarks. This distinction is mostly artificial. Work done\non creation and work done on first use is still work done once per RSA\nkey. However, work done on key creation may slow server startup, while\nwork deferred to first use is amortized but less predictable.\n\nEither way, from this CL, and especially the one to follow it, we have\nplenty of low-hanging fruit in this function. As a bonus, this should\nhelp single-use RSA private keys, but that's not something we currently\nbenchmark.\n\nModulus sizes below chosen based on:\n\n- Common curve sizes (moot because we use a variable-time setup anyway)\n\n- Common RSA modulus sizes (also variable-time setup)\n\n- Half of common RSA modulus sizes (the secret primes involved)\n\nOf these, only the third category matters. The others can use the\ndivision-based path where it's faster anyway. However, by the end of\nthis patch series, they'll get a bit closer, so I benchmarked them all\nto compare. (Though division still wins in the end.)\n\nBenchmarks on an M1 Max:\n\nBefore:\nDid 528000 256-bit mont (constime) operations in 2000993us (263869.0 ops/sec)\nDid 312000 384-bit mont (constime) operations in 2001281us (155900.1 ops/sec)\nDid 246000 512-bit mont (constime) operations in 2001521us (122906.5 ops/sec)\nDid 191000 521-bit mont (constime) operations in 2006336us (95198.4 ops/sec)\nDid 98000 1024-bit mont (constime) operations in 2001438us (48964.8 ops/sec)\nDid 55000 1536-bit mont (constime) operations in 2025306us (27156.4 ops/sec)\nDid 35000 2048-bit mont (constime) operations in 2022714us (17303.5 ops/sec)\nDid 17640 3072-bit mont (constime) operations in 2028352us (8696.7 ops/sec)\nDid 10290 4096-bit mont (constime) operations in 2065529us (4981.8 ops/sec)\n\nAfter:\nDid 712000 256-bit mont (constime) operations in 2000454us (355919.2 ops/sec) [+34.9%]\nDid 440000 384-bit mont (constime) operations in 2001121us (219876.8 ops/sec) [+41.0%]\nDid 259000 512-bit mont (constime) operations in 2003709us (129260.3 ops/sec) [+5.2%]\nDid 212000 521-bit mont (constime) operations in 2007033us (105628.6 ops/sec) [+11.0%]\nDid 107000 1024-bit mont (constime) operations in 2018551us (53008.3 ops/sec) [+8.3%]\nDid 57000 1536-bit mont (constime) operations in 2001027us (28485.4 ops/sec) [+4.9%]\nDid 37000 2048-bit mont (constime) operations in 2039631us (18140.5 ops/sec) [+4.8%]\nDid 20000 3072-bit mont (constime) operations in 2041163us (9798.3 ops/sec) [+12.7%]\nDid 11760 4096-bit mont (constime) operations in 2007195us (5858.9 ops/sec) [+17.6%]\n\nBug: 316\nChange-Id: I06f4a065fdecc1aec3160fe32a41e200538d1ee3\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60685\nAuto-Submit: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/98e1227cb7bfe4b845c7fc5136e83f8d368065b2"},{"sha":"02d2715bcc95d0f03ae394310d32739f4fcfa1ac","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Implement BN_MONT_CTX_new_consttime with Montgomery reduction\n\nSetting up Montgomery reduction requires computing RR, a larger power of\n2 mod N. When N is secret (RSA primes), we currently start at\n2^(n_bits-1), then iteratively double and reduce.\n\nInstead, once we reach 2R = 2^(r_bits+1) or higher, we can switch to a\nMontgomery square-and-multiply. (Montgomery reduction only needs n0. RR\nis just for conversion.) This takes some tuning because, at low powers\nof 2 (in Montgomery form), it is still more efficient to square by\ndoubling. I ran benchmarks for 32-bit and 64-bit, x86 and Arm, on the\nmachines I had available and picked a threshold that works decently\nwell.\n\n(On the hardware I tested, it's the right threshold on all but the Pixel\n5A. The 5A would ideally want a slightly higher threshold---it seems to\nbe worse at multiplying or better at addition, but the gap isn't that\nlarge, and this operation isn't perf-sensitive anyway.)\n\nThe result is dramatically faster than the old shift-based approach.\nThat said, see I06f4a065fdecc1aec3160fe32a41e200538d1ee3 for discussion\non this operation. These speedups are not expected to translate to\nincreased RSA throughput. They just clear up some initialization work.\nThis speedup is not quite enough to match the division-based\nvariable-time one (perf-sensitive for RSA verification), so we'll keep\nboth codepaths around.\n\nM1 Max\nBefore:\nDid 712000 256-bit mont (constime) operations in 2000454us (355919.2 ops/sec)\nDid 440000 384-bit mont (constime) operations in 2001121us (219876.8 ops/sec)\nDid 259000 512-bit mont (constime) operations in 2003709us (129260.3 ops/sec)\nDid 212000 521-bit mont (constime) operations in 2007033us (105628.6 ops/sec)\nDid 107000 1024-bit mont (constime) operations in 2018551us (53008.3 ops/sec)\nDid 57000 1536-bit mont (constime) operations in 2001027us (28485.4 ops/sec)\nDid 37000 2048-bit mont (constime) operations in 2039631us (18140.5 ops/sec)\nDid 20000 3072-bit mont (constime) operations in 2041163us (9798.3 ops/sec)\nDid 11760 4096-bit mont (constime) operations in 2007195us (5858.9 ops/sec)\nAfter:\nDid 3996000 256-bit mont (constime) operations in 2000366us (1997634.4 ops/sec) [+461.3%]\nDid 2687000 384-bit mont (constime) operations in 2000464us (1343188.4 ops/sec) [+510.9%]\nDid 2615000 512-bit mont (constime) operations in 2000146us (1307404.6 ops/sec) [+911.5%]\nDid 1029000 521-bit mont (constime) operations in 2000944us (514257.3 ops/sec) [+386.9%]\nDid 1246000 1024-bit mont (constime) operations in 2000899us (622720.1 ops/sec) [+1074.8%]\nDid 688000 1536-bit mont (constime) operations in 2000579us (343900.4 ops/sec) [+1107.3%]\nDid 425000 2048-bit mont (constime) operations in 2003622us (212115.9 ops/sec) [+1069.3%]\nDid 212000 3072-bit mont (constime) operations in 2004430us (105765.7 ops/sec) [+979.4%]\nDid 125000 4096-bit mont (constime) operations in 2009677us (62199.0 ops/sec) [+961.6%]\n\nIntel(R) Xeon(R) Gold 6154 CPU @ 3.00GHz\nBefore:\nDid 781000 256-bit mont (constime) operations in 2000740us (390355.6 ops/sec)\nDid 414000 384-bit mont (constime) operations in 2000180us (206981.4 ops/sec)\nDid 258000 512-bit mont (constime) operations in 2001729us (128888.6 ops/sec)\nDid 194000 521-bit mont (constime) operations in 2008814us (96574.4 ops/sec)\nDid 79000 1024-bit mont (constime) operations in 2009309us (39317.0 ops/sec)\nDid 36000 1536-bit mont (constime) operations in 2003945us (17964.6 ops/sec)\nDid 21000 2048-bit mont (constime) operations in 2074987us (10120.5 ops/sec)\nDid 9040 3072-bit mont (constime) operations in 2003869us (4511.3 ops/sec)\nDid 5250 4096-bit mont (constime) operations in 2067796us (2538.9 ops/sec)\nAfter:\nDid 3496000 256-bit mont (constime) operations in 2000542us (1747526.4 ops/sec) [+347.7%]\nDid 2466000 384-bit mont (constime) operations in 2000327us (1232798.4 ops/sec) [+495.6%]\nDid 2392000 512-bit mont (constime) operations in 2000732us (1195562.4 ops/sec) [+827.6%]\nDid 908000 521-bit mont (constime) operations in 2001181us (453732.1 ops/sec) [+369.8%]\nDid 1054000 1024-bit mont (constime) operations in 2001429us (526623.7 ops/sec) [+1239.4%]\nDid 548000 1536-bit mont (constime) operations in 2002417us (273669.3 ops/sec) [+1423.4%]\nDid 339000 2048-bit mont (constime) operations in 2004127us (169151.0 ops/sec) [+1571.4%]\nDid 162000 3072-bit mont (constime) operations in 2008221us (80668.4 ops/sec) [+1688.2%]\nDid 94000 4096-bit mont (constime) operations in 2013848us (46676.8 ops/sec) [+1738.4%]\n\nIntel(R) Xeon(R) Gold 6154 CPU @ 3.00GHz, 32-bit mode\nBefore:\nDid 335000 256-bit mont (constime) operations in 2000006us (167499.5 ops/sec)\nDid 170000 384-bit mont (constime) operations in 2010398us (84560.4 ops/sec)\nDid 102000 512-bit mont (constime) operations in 2013510us (50657.8 ops/sec)\nDid 88000 521-bit mont (constime) operations in 2022909us (43501.7 ops/sec)\nDid 27000 1024-bit mont (constime) operations in 2063490us (13084.6 ops/sec)\nDid 11760 1536-bit mont (constime) operations in 2000600us (5878.2 ops/sec)\nDid 6825 2048-bit mont (constime) operations in 2069343us (3298.1 ops/sec)\nDid 2982 3072-bit mont (constime) operations in 2090651us (1426.3 ops/sec)\nDid 1680 4096-bit mont (constime) operations in 2074824us (809.7 ops/sec)\nAfter:\nDid 1559000 256-bit mont (constime) operations in 2000884us (779155.6 ops/sec) [+365.2%]\nDid 940000 384-bit mont (constime) operations in 2001511us (469645.2 ops/sec) [+455.4%]\nDid 608000 512-bit mont (constime) operations in 2000380us (303942.3 ops/sec) [+500.0%]\nDid 439000 521-bit mont (constime) operations in 2004282us (219031.1 ops/sec) [+403.5%]\nDid 180000 1024-bit mont (constime) operations in 2005427us (89756.4 ops/sec) [+586.0%]\nDid 85000 1536-bit mont (constime) operations in 2017009us (42141.6 ops/sec) [+616.9%]\nDid 49000 2048-bit mont (constime) operations in 2035401us (24073.9 ops/sec) [+629.9%]\nDid 22000 3072-bit mont (constime) operations in 2047404us (10745.3 ops/sec) [+653.3%]\nDid 12642 4096-bit mont (constime) operations in 2094210us (6036.6 ops/sec) [+645.5%]\n\nPixel 5A:\nBefore:\nDid 483000 256-bit mont (constime) operations in 2001460us (241323.8 ops/sec)\nDid 279000 384-bit mont (constime) operations in 2004682us (139174.2 ops/sec)\nDid 198000 512-bit mont (constime) operations in 2003995us (98802.6 ops/sec)\nDid 141000 521-bit mont (constime) operations in 2006305us (70278.4 ops/sec)\nDid 62000 1024-bit mont (constime) operations in 2022138us (30660.6 ops/sec)\nDid 29000 1536-bit mont (constime) operations in 2007150us (14448.3 ops/sec)\nDid 17376 2048-bit mont (constime) operations in 2044894us (8497.3 ops/sec)\nDid 7686 3072-bit mont (constime) operations in 2011537us (3821.0 ops/sec)\nDid 4620 4096-bit mont (constime) operations in 2048780us (2255.0 ops/sec)\nAfter:\nDid 1187000 256-bit mont (constime) operations in 2000099us (593470.6 ops/sec) [+145.9%]\nDid 794000 384-bit mont (constime) operations in 2002162us (396571.3 ops/sec) [+184.9%]\nDid 658000 512-bit mont (constime) operations in 2002808us (328538.7 ops/sec) [+232.5%]\nDid 373000 521-bit mont (constime) operations in 2005135us (186022.4 ops/sec) [+164.7%]\nDid 231000 1024-bit mont (constime) operations in 2008117us (115033.1 ops/sec) [+275.2%]\nDid 112000 1536-bit mont (constime) operations in 2003151us (55911.9 ops/sec) [+287.0%]\nDid 66000 2048-bit mont (constime) operations in 2022295us (32636.2 ops/sec) [+284.1%]\nDid 30000 3072-bit mont (constime) operations in 2006199us (14953.7 ops/sec) [+291.4%]\nDid 17182 4096-bit mont (constime) operations in 2017938us (8514.6 ops/sec) [+277.6%]\n\nPixel 5A, 32-bit mode:\nBefore:\nDid 124000 256-bit mont (constime) operations in 2013082us (61597.1 ops/sec)\nDid 66000 384-bit mont (constime) operations in 2024604us (32599.0 ops/sec)\nDid 40000 512-bit mont (constime) operations in 2018560us (19816.1 ops/sec)\nDid 38000 521-bit mont (constime) operations in 2043776us (18593.0 ops/sec)\nDid 11466 1024-bit mont (constime) operations in 2010767us (5702.3 ops/sec)\nDid 5481 1536-bit mont (constime) operations in 2061892us (2658.2 ops/sec)\nDid 3171 2048-bit mont (constime) operations in 2075359us (1527.9 ops/sec)\nDid 1407 3072-bit mont (constime) operations in 2032032us (692.4 ops/sec)\nDid 819 4096-bit mont (constime) operations in 2070367us (395.6 ops/sec)\nAfter:\nDid 718000 256-bit mont (constime) operations in 2000496us (358911.0 ops/sec) [+482.7%]\nDid 424000 384-bit mont (constime) operations in 2000523us (211944.6 ops/sec) [+550.2%]\nDid 401000 512-bit mont (constime) operations in 2000933us (200406.5 ops/sec) [+911.3%]\nDid 205000 521-bit mont (constime) operations in 2004212us (102284.6 ops/sec) [+450.1%]\nDid 153000 1024-bit mont (constime) operations in 2004644us (76322.8 ops/sec) [+1238.5%]\nDid 78000 1536-bit mont (constime) operations in 2007510us (38854.1 ops/sec) [+1361.6%]\nDid 47000 2048-bit mont (constime) operations in 2018015us (23290.2 ops/sec) [+1424.3%]\nDid 22848 3072-bit mont (constime) operations in 2079082us (10989.5 ops/sec) [+1487.1%]\nDid 13156 4096-bit mont (constime) operations in 2067424us (6363.5 ops/sec) [+1508.6%]\n\nBug: 316\nChange-Id: I402df85170cae780442225eaa879884e707ffa86\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60686\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/02d2715bcc95d0f03ae394310d32739f4fcfa1ac"},{"sha":"6a7d8b54725d6e762f758726464da2dc2e112435","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Remove p > q normalization in RSA keys\n\nRSA CRT is tiny bit messier when p < q.\nhttps://boringssl-review.googlesource.com/25263 solved this by\nnormalizing to p > q. The cost was we sometimes had to compute a new\niqmp.\n\nModular inversion is expensive. We did it only once per key, but it's\nstill a performance cliff in per-key costs. When later work moves\nfreeze_private_key into RSA private key parsing, it will be a\nperformance cliff in the private key parser.\n\nInstead, just handle p < q in the CRT function. The only difference is\nneeding one extra reduction before the modular subtraction. Even using\nthe fully general mod_montgomery function (as opposed to checking p < q,\nor using bn_reduce_once when num_bits(p) == num_bits(q)) was not\nmeasurable.\n\nIn doing so, I noticed we didn't actually have tests that exercise the\nreduction step. I added one to evp_tests.txt, but it is only meaningful\nwhen blinding is disabled. (Another cost of blinding.) When blinding is\nenabled, the answers mod p and q are randomized and we hit this case\nwith about 1.8% probability. See comment in evp_test.txt.\n\nI kept the optimization where we store iqmp in Montgomery form, not\nbecause the optimization matters, but because we need to store a\ncorrected, fixed-width version of the value anyway, so we may as well\nstore it in a more convenient form.\n\nM1 Max\nBefore:\nDid 9048 RSA 2048 signing operations in 5033403us (1797.6 ops/sec)\nDid 1500 RSA 4096 signing operations in 5009288us (299.4 ops/sec)\nAfter:\nDid 9116 RSA 2048 signing operations in 5053802us (1803.8 ops/sec) [+0.3%]\nDid 1500 RSA 4096 signing operations in 5008283us (299.5 ops/sec) [+0.0%]\n\nIntel(R) Xeon(R) Gold 6154 CPU @ 3.00GHz\nBefore:\nDid 9282 RSA 2048 signing operations in 5019395us (1849.2 ops/sec)\nDid 1302 RSA 4096 signing operations in 5055011us (257.6 ops/sec)\nAfter:\nDid 9240 RSA 2048 signing operations in 5024845us (1838.9 ops/sec) [-0.6%]\nDid 1302 RSA 4096 signing operations in 5046157us (258.0 ops/sec) [+0.2%]\n\nBug: 316\nChange-Id: Icb90c7d5f5188f9b69a6d7bcc63db13d92ec26d5\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60705\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/6a7d8b54725d6e762f758726464da2dc2e112435"},{"sha":"d28237e273b2a2d02358e7de422fb4f23adf3ee5","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Remove -D__ASSEMBLER__=1 when shelling out to the preprocessor\n\nThe compiler already knows that .S means assembler and should define\n__ASSEMBLER__ for us. At least on the CQ, it seems this is not\nnecessary, and some builds are showing a warning about redefining\n__ASSEMBLER__, which may be caused by this.\n\nChange-Id: I390bfcb50cefef42df72cd61ead55159b1838771\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60785\nReviewed-by: Bob Beck <bbe@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>\nCommit-Queue: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/d28237e273b2a2d02358e7de422fb4f23adf3ee5"},{"sha":"e1b8685770d0e82e5a4a3c5d24ad1602e05f2e83","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Log failure to create SSL objects in handshakers\n\nThis would have made debugging some cross-version test easier.\n\nChange-Id: I7b1bc160b5acf40ec02b9ed5ac2d836e3203cf9a\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60805\nCommit-Queue: Bob Beck <bbe@google.com>\nReviewed-by: Bob Beck <bbe@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/e1b8685770d0e82e5a4a3c5d24ad1602e05f2e83"},{"sha":"8ead3f531445004f1122d11fa7083e8d1bcc5200","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Add more tests for recognizing explicit forms of built-in curves\n\nWe really should remove these (we only support them in private keys)\nbut, in the meantime, add some tests for all the curves, not just P-256.\n\nChange-Id: I9c4c0660f082fa1701afe11f51bb157b06befd3c\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60925\nReviewed-by: Adam Langley <agl@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>\nCommit-Queue: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/8ead3f531445004f1122d11fa7083e8d1bcc5200"},{"sha":"e33257fa6702d3a4c539c7666cb7678e05ab68ee","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Pass IPv6 vs IPv4 down to the shim\n\nThe runner currently tries to listen on IPv6 and then falls back to IPv4\non error. The shim does the same. If they pick different ones, this\nbreaks down.\n\nNormally, fallback happens because the system doesn't have IPv6, and\nboth sides will make the same decision. But if binding to IPv6 fails for\nother reasons, they may mismatch. We're observing them fail due to what\nseems to port exhaustion. When this happens, shim and runner don't\nagree on the same address family.\n\nInstead, just tell the shim which address to connect to. This doesn't\nfix the underlying port exhaustion problem, but it does seem to fix the\nflakes. Although given we are still exhausting ports and falling back to\nIPv4, it doesn't truly fix it. Later CLs will address port exhaustion by\nusing a single server port.\n\nThis changes the runner <-> shim protocol, but hopefully in a fairly\nobvious way that others using BoGo can easily follow. It shouldn't break\nour cross-version tests because we keep runner and shim at the same\nversio there.\n\nTo avoid needing to make an incompatible change to the shim <->\nhandshaker protocol, which would impact our cross-version tests, this\nintroduces a mechanism for the shim omit flags when talking to the\nhandshaker. The handshaker doesn't need to know how to connect to the\nrunner.\n\nAlso print the error string on Windows. Sadly this is a bit tedious.\n\nChange-Id: Ic8bda9a854a115c206c05a659a2e34f544b844a6\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60885\nAuto-Submit: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/e33257fa6702d3a4c539c7666cb7678e05ab68ee"},{"sha":"73dcd474b5bd2dbf21b3cf84dac7c10826e175e7","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Turn SocketCloser in bssl_shim into a proper owning type\n\nIt's a bit more verbose to set up, but makes the error paths in\nConnect() tidier. While I'm here, stick to Windows' actual SOCKET\ntype until we have to cross into BIO. It doesn't really matter\n(Windows cannot use the upper half of that type without badly\nbreaking backwards compatibility), but it silences some 64/32\ntruncation warnings.\n\nChange-Id: I7be7c2b543373a7a9fc50711131e5345d84ebb8b\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60886\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/73dcd474b5bd2dbf21b3cf84dac7c10826e175e7"},{"sha":"f4d1d79eeeda22c40be51551f04a2d631a6512dc","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Simplify shimProcess accept and wait\n\nThat we pull a value out of a channel and put it back is pretty weird.\nAlso we don't need a select in accept(). It's enough to just close the\nlistener when we learn the child is gone. (That will cancel the\nAccept call.)\n\nChange-Id: If520d9f405fa0b1ad6e3cd23e9ba8a35ff39ba75\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60887\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/f4d1d79eeeda22c40be51551f04a2d631a6512dc"},{"sha":"50ee09552cde1c2019bef24520848d041920cfd4","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Use a single TCP server port in runner\n\nThe shim is now passed a shim ID which allows us to dispatch.\nPreviously, we dispatched with a distinct TCP server port per test, but\nthis seems to exhaust local ports.\n\nAs with https://boringssl-review.googlesource.com/c/boringssl/+/60885,\nthis changes the runner/shim protocol, but not the shim/handshaker\nprotocol. See that CL for discussion.\n\nChange-Id: Ia22d1bc0bcda1b1869bce4630138538c30f02668\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60888\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/50ee09552cde1c2019bef24520848d041920cfd4"},{"sha":"9fcaec6435a42cda37f3e8d4c5b8eed480c0e917","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Start recognizing the OPENSSL_NANOLIBC define\n\nnanolibc is an embedded platform with no threads. To start unforking\nthat build, generalize some of the OPENSSL_TRUSTY defines. OpenSSL has\nOPENSSL_NO_SOCK if you don't have sockets and OPENSSL_NO_POSIX_IO if you\ndon't have file descriptors. Those names are fine enough, so I've\nborrowed them here too.\n\nThere's more to be done here, but this will clear out some of it.\n\nChange-Id: Iaba1fafdebb46ebb8f68b7956535dd0ccaaa832f\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60890\nAuto-Submit: David Benjamin <davidben@google.com>\nCommit-Queue: Bob Beck <bbe@google.com>\nReviewed-by: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/9fcaec6435a42cda37f3e8d4c5b8eed480c0e917"},{"sha":"9c30e5389c6878fc95d21e754df935a1d71f333d","author":{"email":"andreser@google.com","name":"Andres Erbsen"},"message":"Credit CryptOpt in third_party/fiat/README.md\n\nChange-Id: I824560a5bddb9183e61c663ca4cbdc4530177e66\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60945\nReviewed-by: Adam Langley <agl@google.com>\nAuto-Submit: Andres Erbsen <andreser@google.com>\nCommit-Queue: Adam Langley <agl@google.com>\nReviewed-by: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/9c30e5389c6878fc95d21e754df935a1d71f333d"},{"sha":"ee194c75a65ca813fc78eb2cb7eca65ce344ec7b","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Slightly tidy BIO_C_SET_FILENAME logic\n\nWe could just use the string literal as-is.\n\nChange-Id: I2efe01fd9b020db1bb086001407bcf7fa8487551\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/61045\nAuto-Submit: David Benjamin <davidben@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/ee194c75a65ca813fc78eb2cb7eca65ce344ec7b"},{"sha":"bc97b7a8e1952bab69fea961301a90e5ad3344e9","author":{"email":"bbe@google.com","name":"Bob Beck"},"message":"Bring in the core of  chromium certificate verifier as libpki\n\nInitially this leaves the canonical source in chrome, Additions\nand fillins are committed directly, the chrome files are coverted\nusing the IMPORT script run from the pki directory for the moment.\n\nThe intention here is to continue frequent automatic conversion\n(and avoid wholesale cosmetic changes in here for now) until\nchrome converts to use these files in place of it's versions.\nAt that point these will become the definiative files, and the\nIMPORT script can be tossed out.\n\nA middle step along the way will be to change google3's verify.cc\nin third_party/chromium_certificate_verifier to use this instead\nof it's own extracted copy.\n\nStatus (and what is not done yet) being roughly tracked in README.md\n\nBug: chromium:1322914\n\nChange-Id: Ibdb5479bc68985fa61ce6b10f98f31f6b3a7cbdf\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60285\nCommit-Queue: Bob Beck <bbe@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/bc97b7a8e1952bab69fea961301a90e5ad3344e9"},{"sha":"e79649ba4d515a1b5f57e397431d81f079ff158e","author":{"email":"ajgo@chromium.org","name":"Alex Gough"},"message":"Use ProcessPrng instead of RtlGenRandom on Windows\n\nThe Windows system RNG[1] lives in bcryptprimitives.dll which exports\nthe function ProcessPrng[2] to supply random bytes from its internal\ngenerators. These are seeded and reseeded from the operating\nsystem using a device connection to \\\\Device\\CNG which is opened\nwhen bcryptprimitives.dll is first loaded.\n\nAfter this CL boringssl calls ProcessPrng() directly.\n\nBefore this CL boringssl got its system randomness (on non-UWP\ndesktop Windows) from calls to RtlGenRandom[3].\nThis function is undocumented and unsupported, but has always been\navailable by linking to SystemFunction036 in advadpi32.dll. In\nWindows 10 and later, this export simply forwards to\ncryptbase.dll!SystemFunction036 which calls ProcessPrng()\ndirectly.\n\ncryptbase!SystemFunction036 decompiled:\n\n```\nBOOLEAN SystemFunction036(PVOID RandomBuffer,ULONG RandomBufferLength)\n{\n  BOOL retval;\n  retval = ProcessPrng(RandomBuffer,RandomBufferLength);\n  return retval != 0;\n}\n```\n\nLoading cryptbase.dll has the side effect of opening a device handle\nto \\\\Device\\KsecDD which is not used by boringssl's random number\nwrappers. Calling ProcessPrng() directly allows sandboxed programs\nsuch as Chromium to avoid having this handle if they do not need it.\nProcessPrng() also takes a size_t length rather than a u32 length,\nallowing some simplification of the calling code.\n\nAfter this CL we require bcryptprimitives to be loaded before the\nfirst call to CRYPTO_srand(). Applications using the library should\neither load the module themselves or call CRYPTO_pre_sandbox_init().\nBefore this CL boringssl required that advapi32, cryptbase and\nbcryptprimitives were all loaded so this should not represent a\nbreaking change.\n\n[1] https://learn.microsoft.com/en-us/windows/win32/seccng/processprng\n[2] https://download.microsoft.com/download/1/c/9/1c9813b8-089c-4fef-b2ad-ad80e79403ba/Whitepaper%20-%20The%20Windows%2010%20random%20number%20generation%20infrastructure.pdf\n[3] https://docs.google.com/document/d/13n1t5ak0yofzcadQCF7Ew5TewSUkNfQ3n-IYodjeRYc/edit\n\nBug: chromium:74242\nChange-Id: Ifb1d6ef1a4539ff6e9a2c36cc119b7700ca2be8f\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60825\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/e79649ba4d515a1b5f57e397431d81f079ff158e"},{"sha":"a905bbb52a7bac5099f2cbee008c6f3eae96218c","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Consistently include BTI markers in every assembly file\n\nTrying to migrate Chromium to the \"link all the asm files together\"\nstrategy broke the aarch64 Android build because some of the ifdef'd out\nassembly files were missing the .note.gnu.property section for BTI. If\nwe add support for IBT, that'll be another one.\n\nTo fix this, introduce <openssl/asm_base.h>, which must be included at\nthe start of every assembly file (before the target ifdefs). This does a\ncouple things:\n\n- It emits BTI and noexecstack markers into every assembly file, even\n  those that ifdef themselves out.\n\n- It resolves the MSan -> OPENSSL_NO_ASM logic, so we only need to do it\n  once.\n\n- It defines the same OPENSSL_X86_64, etc., defines we set elsewhere, so\n  we can ensure they're consistent.\n\nThis required carving files up a bit. <openssl/base.h> has a lot of\nthings, such that trying to guard everything in it on __ASSEMBLER__\nwould be tedious. Instead, I moved the target defines to a new\n<openssl/target.h>. Then <openssl/asm_base.h> is the new header that\npulls in all those things.\n\nBug: 542\nChange-Id: I1682b4d929adea72908655fa1bb15765a6b3473b\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60765\nReviewed-by: Bob Beck <bbe@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/a905bbb52a7bac5099f2cbee008c6f3eae96218c"},{"sha":"a36924781733a73ecddf2f02ba74069fd5ba341c","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Fix the Windows fuzzer build\n\nOPENSSL_WINDOWS doesn't *quite* imply that crypto/rand_extra/windows.c\nis used, thanks to fuzzer mode.\n\nThe sea of ifdefs here is becoming quite a mess, so I've added\nOPENSSL_RAND_* resolve the dispatch in one place. Perhaps later we\nshould also we can also simplify this by just including\nCRYPTO_init_sysrand and CRYPTO_sysrand_if_available in all the C files.\nBut that'll be easier to do when Trusty's RNG is moved in tree.\n\nWhile I'm here, fold some of the ifdefs in windows.c together.\n\nChange-Id: Ic9c21c5c943a409ebb1d77f27daea1eeb9422e9d\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/61085\nAuto-Submit: David Benjamin <davidben@google.com>\nReviewed-by: Bob Beck <bbe@google.com>\nCommit-Queue: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/a36924781733a73ecddf2f02ba74069fd5ba341c"},{"sha":"824f0e9113916d0258ce515079492f43d3ed67c3","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Fix libpki build\n\nThis is breaking the oss-fuzz build. Changes made:\n\n- No need make a subproject, I think. In particular, keep the minimum\n  CMake versions matching.\n\n- Let's not include it in install just yet, since it's still\n  experimental.\n\n- I removed the comment about public headers. The target doesn't\n  actually provide any public headers for the moment.\n\n- Apparently the \"modern CMake\" way to set properties is per-target\n  rather than using the directory-wide options, so I've switched to\n  that.\n\nBug: oss-fuzz:60049\nChange-Id: I511667ca8e83cb1997f82b329ed38f980574305e\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/61126\nReviewed-by: Bob Beck <bbe@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>\nCommit-Queue: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/824f0e9113916d0258ce515079492f43d3ed67c3"},{"sha":"a08b71194f7787549f6e0b47db9eea2a88c88f7a","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Temporarily add sk_new_null, etc., wrappers in bssl-sys\n\nAndroid have not updated their bindgen (see b/279198502), so they cannot\nyet pick up inline functions automatically.\n\nBug: 596\nChange-Id: I49d5adaaa3537ada545c9c6fce98ea2dbf2f40ae\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/61165\nReviewed-by: Bob Beck <bbe@google.com>\nCommit-Queue: Bob Beck <bbe@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/a08b71194f7787549f6e0b47db9eea2a88c88f7a"}]},"public":true,"created_at":"2023-10-26T08:03:36Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32865370740","type":"PushEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":218087071,"name":"open-quantum-safe/oqs-demos","url":"https://api.github.com/repos/open-quantum-safe/oqs-demos"},"payload":{"repository_id":218087071,"push_id":15575093642,"size":1,"distinct_size":1,"ref":"refs/heads/main","head":"f08c3199229ad9e45522f0f6c971b94b42dd64d2","before":"a292f0904805fea132b08f408e84fcf6d285f6e4","commits":[{"sha":"f08c3199229ad9e45522f0f6c971b94b42dd64d2","author":{"email":"bhe@zurich.ibm.com","name":"Basil Hess"},"message":"nginx server: update to oqs-provider 0.5.2 & config update (#241)\n\n* nginx server: update to oqs-provider 0.5.2\r\nconfig: close connection immediately\r\n\r\n* Update README.md","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/commits/f08c3199229ad9e45522f0f6c971b94b42dd64d2"}]},"public":true,"created_at":"2023-10-26T11:05:09Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32874076138","type":"PushEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"repository_id":65514205,"push_id":15579347665,"size":1,"distinct_size":1,"ref":"refs/heads/mb-fixcopyfromupstream","head":"232a219e496c362c011723be2eb3adea0052b917","before":"86f616d0d6c7a114cc7e1386928ff8180c746685","commits":[{"sha":"232a219e496c362c011723be2eb3adea0052b917","author":{"email":"57787676+baentsch@users.noreply.github.com","name":"Michael Baentsch"},"message":"run copy_from_upstream with -k [skip ci]","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs/commits/232a219e496c362c011723be2eb3adea0052b917"}]},"public":true,"created_at":"2023-10-26T15:43:17Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"32874488832","type":"PushEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"repository_id":65514205,"push_id":15579545232,"size":1,"distinct_size":1,"ref":"refs/heads/mb-fixcopyfromupstream","head":"f2274ff2aa828d6c80956acab9899219bdf60339","before":"232a219e496c362c011723be2eb3adea0052b917","commits":[{"sha":"f2274ff2aa828d6c80956acab9899219bdf60339","author":{"email":"57787676+baentsch@users.noreply.github.com","name":"Michael Baentsch"},"message":"remove apparently extraneous rmtree statement to ensure documentation patches survive","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs/commits/f2274ff2aa828d6c80956acab9899219bdf60339"}]},"public":true,"created_at":"2023-10-26T15:57:34Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
