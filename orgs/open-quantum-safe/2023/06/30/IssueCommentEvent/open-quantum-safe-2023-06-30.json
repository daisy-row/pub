{"id":"30108662957","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/201","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/201/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/201/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/201/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/pull/201","id":1781101035,"node_id":"PR_kwDOE_A9l85UQaEM","number":201,"title":"Allow the user to build oqs-provider as a static library.","user":{"login":"thb-sb","id":108470890,"node_id":"U_kgDOBnciag","avatar_url":"https://avatars.githubusercontent.com/u/108470890?v=4","gravatar_id":"","url":"https://api.github.com/users/thb-sb","html_url":"https://github.com/thb-sb","followers_url":"https://api.github.com/users/thb-sb/followers","following_url":"https://api.github.com/users/thb-sb/following{/other_user}","gists_url":"https://api.github.com/users/thb-sb/gists{/gist_id}","starred_url":"https://api.github.com/users/thb-sb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thb-sb/subscriptions","organizations_url":"https://api.github.com/users/thb-sb/orgs","repos_url":"https://api.github.com/users/thb-sb/repos","events_url":"https://api.github.com/users/thb-sb/events{/privacy}","received_events_url":"https://api.github.com/users/thb-sb/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2023-06-29T15:45:28Z","updated_at":"2023-06-30T05:20:52Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/pulls/201","html_url":"https://github.com/open-quantum-safe/oqs-provider/pull/201","diff_url":"https://github.com/open-quantum-safe/oqs-provider/pull/201.diff","patch_url":"https://github.com/open-quantum-safe/oqs-provider/pull/201.patch","merged_at":null},"body":"This commit removes the `SHARED` argument of the `add_library`. By doing so, we let the user choose the build type of library.\r\n\r\nBy default, CMake will build a static library. Thus, [`BUILD_SHARED_LIBS`] must be used to switch to a shared library.\r\n\r\n`oqs-provider` as a static library allows us to use the provider without having to store its shared library somewhere. In addition, it happens that some operating systems prohibit the use of `dlopen`/`dlsym`.\r\n\r\nTo load `oqs-provider` when it is embedded into a library of a binary, one can use the [`OSSL_PROVIDER_add_builtin`] API from OpenSSL 3.\r\n\r\n[`BUILD_SHARED_LIBS`]: https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html\r\n[`OSSL_PROVIDER_add_builtin`]: https://www.openssl.org/docs/man3.1/man3/OSSL_PROVIDER_add_builtin.html\r\n\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/201/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/201/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1614143343","html_url":"https://github.com/open-quantum-safe/oqs-provider/pull/201#issuecomment-1614143343","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/201","id":1614143343,"node_id":"IC_kwDOE_A9l85gNd9v","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-06-30T05:20:52Z","updated_at":"2023-06-30T05:20:52Z","author_association":"MEMBER","body":"The latest discussion above on the use of the static/shared/module moniker had me review also your rationale for the PR:\r\n\r\n> it happens that some operating systems prohibit the use of dlopen/dlsym\r\n\r\nWhich OS are you referring-to? Wouldn't such OS feature completely disable the purpose of `openssl` providers (as a dynamically loadable library)? I can understand this argument\r\n\r\n> one can use the [OSSL_PROVIDER_add_builtin](https://www.openssl.org/docs/man3.1/man3/OSSL_PROVIDER_add_builtin.html) API from OpenSSL 3.\r\n\r\nfor wanting to build `oqsprovider` as a static lib: That way its should be possible to completely embed it into an application without (wanting) it being dynamically linked in: That definitely eases distribution of binaries with PQ capabilities inside.\r\n\r\nBut if this is the reason for this PR (?), the default behaviour of `cmake` (building static) clashes with the default purpose of a provider (being dynamically loadable).\r\n\r\nWhat about this proposal then: We'd add a specific build option, say \"OQS_PROVIDER_BUILD_STATIC\" that --when set-- changes \"MODULE\" to \"STATIC\" in https://github.com/open-quantum-safe/oqs-provider/blob/6b3483965293db2a3a1dc607468f82739247958c/oqsprov/CMakeLists.txt#L34 (and probably also resets/warns of set  \"BUILD_SHARED_LIBS\" option)?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1614143343/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-06-30T05:20:52Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"30108969951","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/198","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/198/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/198/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/198/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/pull/198","id":1778187199,"node_id":"PR_kwDOE_A9l85UGfyS","number":198,"title":"first test for macos CI","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-06-28T04:54:32Z","updated_at":"2023-06-30T05:44:40Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/pulls/198","html_url":"https://github.com/open-quantum-safe/oqs-provider/pull/198","diff_url":"https://github.com/open-quantum-safe/oqs-provider/pull/198.diff","patch_url":"https://github.com/open-quantum-safe/oqs-provider/pull/198.patch","merged_at":null},"body":"Adds github MacOS CI \r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/198/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/198/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1614158632","html_url":"https://github.com/open-quantum-safe/oqs-provider/pull/198#issuecomment-1614158632","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/198","id":1614158632,"node_id":"IC_kwDOE_A9l85gNhso","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-06-30T05:44:40Z","updated_at":"2023-06-30T05:44:40Z","author_association":"MEMBER","body":"@dstebila (if not obvious from the many CI trials :) this also adds support for \"brew\"ing oqsprovider. After the next release of `oqsprovider`, I'll do a PR to \"homebrew/core\". After that, OQS will have arrived (on Mac) \"for daily use\" by non-developers.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1614158632/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-06-30T05:44:41Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"30110830101","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/199","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/199/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/199/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/199/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/199","id":1778287767,"node_id":"I_kwDOE_A9l85p_oSX","number":199,"title":"build failure on Mac Pro with Apple M2 Chip.","user":{"login":"tpa10","id":4023371,"node_id":"MDQ6VXNlcjQwMjMzNzE=","avatar_url":"https://avatars.githubusercontent.com/u/4023371?v=4","gravatar_id":"","url":"https://api.github.com/users/tpa10","html_url":"https://github.com/tpa10","followers_url":"https://api.github.com/users/tpa10/followers","following_url":"https://api.github.com/users/tpa10/following{/other_user}","gists_url":"https://api.github.com/users/tpa10/gists{/gist_id}","starred_url":"https://api.github.com/users/tpa10/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tpa10/subscriptions","organizations_url":"https://api.github.com/users/tpa10/orgs","repos_url":"https://api.github.com/users/tpa10/repos","events_url":"https://api.github.com/users/tpa10/events{/privacy}","received_events_url":"https://api.github.com/users/tpa10/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-06-28T06:23:12Z","updated_at":"2023-06-30T07:36:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nld emits warning:\r\nld: warning: ignoring file /Users/tpa/oqs-provider-git-repo/oqs-provider/.local/lib/libcrypto.dylib, building for macOS-x86_64 but attempting to link with file built for macOS-arm64 \r\nand subsequent link step fails due to not finding entry points...\r\n\r\nUndefined symbols for architecture x86_64:\r\n  \"_ASN1_item_d2i_ex\", referenced from:\r\n      _oqsx_d2i_X509_PUBKEY_INTERNAL in oqs_decode_der2key.c.o\r\n  \"_ERR_new\", referenced from:\r\n      _OSSL_provider_init in oqsprov.c.o\r\n      _oqsx_key_op in oqsprov_keys.c.o\r\n      _oqsx_key_new in oqsprov_keys.c.o\r\n      _oqsx_key_fromdata in oqsprov_keys.c.o\r\n      _oqsx_key_recreate_classickey in oqsprov_keys.c.o\r\n      _oqsx_key_new_from_nid in oqsprov_keys.c.o\r\n      _oqsx_import in oqs_kmgmt.c.o\r\n      ...\r\netc, etc.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. git clone https://github.com/open-quantum-safe/oqs-provider.git\r\n2. cd ors-provider\r\n3. scripts/fullbuild.sh -F\r\n\r\n**Expected behavior**\r\nExpected build to complete without error.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: MacOS Ventura 13.3.1\r\n - OpenSSL version:  OpenSSL 3.2.0-dev  (Library: OpenSSL 3.2.0-dev ) \r\n - Version [e.g. 0.4.0]\r\n\r\n**Additional context**\r\nit appears that openssl is being built for arm64 and oqs-provider is trying to build for X86_64, but I have no idea how to fix this.\r\nnote that I get the same result, whether I use the \"fullbuild.sh\" script, or if I manually build & install openssl and liboqs.  \r\nThose components build and run, but when I attempt to use them to build oqs-provider, I get the arch mismatch problem.\r\nI expect this is NOT an issue on an older Mac that is using an intel chip.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/199/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/199/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1614255129","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/199#issuecomment-1614255129","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/199","id":1614255129,"node_id":"IC_kwDOE_A9l85gN5QZ","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-06-30T07:36:26Z","updated_at":"2023-06-30T07:36:26Z","author_association":"MEMBER","body":"Thanks for this report. It's puzzling indeed and I have no M2 to test this on. Build on M1 following the 3 steps outlined above works without problems. Also there is no reference to \"x64\" anywhere in the code of `oqsprovider`.\r\n\r\nSo the best thing I can offer is to review the output of your `cmake` run: Please share everything output by `fullbuild.sh`: Maybe there's a wrong compiler setting visible somewhere... In addition, can I ask you to run `make run_tests` in the `liboqs/_build` subdirectory created as part of the `oqsprovider` build? This just to test that `cmake` works OK for `liboqs`.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1614255129/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-06-30T07:36:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"30117661634","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":288761656,"name":"open-quantum-safe/profiling","url":"https://api.github.com/repos/open-quantum-safe/profiling"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/101","repository_url":"https://api.github.com/repos/open-quantum-safe/profiling","labels_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/101/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/101/comments","events_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/101/events","html_url":"https://github.com/open-quantum-safe/profiling/issues/101","id":1782433519,"node_id":"I_kwDOETYnOM5qPcbv","number":101,"title":"Handshake performance of \"reference code\" vs \"performance code\"","user":{"login":"Honzaik","id":1215544,"node_id":"MDQ6VXNlcjEyMTU1NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/1215544?v=4","gravatar_id":"","url":"https://api.github.com/users/Honzaik","html_url":"https://github.com/Honzaik","followers_url":"https://api.github.com/users/Honzaik/followers","following_url":"https://api.github.com/users/Honzaik/following{/other_user}","gists_url":"https://api.github.com/users/Honzaik/gists{/gist_id}","starred_url":"https://api.github.com/users/Honzaik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Honzaik/subscriptions","organizations_url":"https://api.github.com/users/Honzaik/orgs","repos_url":"https://api.github.com/users/Honzaik/repos","events_url":"https://api.github.com/users/Honzaik/events{/privacy}","received_events_url":"https://api.github.com/users/Honzaik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-06-30T12:18:50Z","updated_at":"2023-06-30T12:52:03Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi,\r\nwhile looking at the TLS handshake performance data at https://openquantumsafe.org/benchmarking/visualization/handshakes.html (specifically, from 2023-06-24 but other days have the same potential discrepancy) I came across a strange result. The reference code on x86 (and sometimes aarch64) is (almost) always faster (more handshakes per second) than the performance version for classical ECDHE (x25519/x448) with signature algorithm: Ed25519 or Dilithium2.\r\nWith Ed25519:\r\n\r\n- X25519 (x86_64-ref) | 1575.83\r\n- X448 (x86_64-ref) | 1033.33\r\n\r\nvs\r\n\r\n- X25519 (x86_64-noport) | 1514.52\r\n- X448 (x86_64-noport) | 1054.72 (here the performance code is faster)\r\n\r\nor (aarch64)\r\n\r\n- X25519 (aarch64-ref) | 1261.40\r\n- X448 (aarch64-ref) | 608.65\r\n\r\nvs\r\n\r\n- X25519 (aarch64-noport) | 1252.21\r\n- X448 (aarch64-noport) | 602.88\r\n\r\nWith Dilitihum2:\r\n\r\n- X25519 (x86_64-ref) | 1320.63\r\n- X448 (x86_64-ref) | 836.89\r\n\r\nvs\r\n\r\n- X25519 (x86_64-noport) | 1283.85\r\n- X448 (x86_64-noport) | 814.40\r\n\r\nWhen looking at post-quantum key exchanges it makes sense (performance code is faster than reference) but with classical key exchange it seems to be the opposite on x86.\r\n\r\nHowever, when I select RSA2048 or ECDSAprime256v1 those results for ECDHE make sense (performance code is faster than reference) but then Kyber key exchange has the opposite effect (reference code Kyber + (RSA or ECDSA) is faster than performance code).\r\n\r\nIs this a measurement error due to high variance? Is the \"performance code\" for classical key exchanges even different from the \"reference code\" since I would guess you use the OpenSSL implementation? Is there any other explanation for these strange results?\r\n\r\nBy the way, thank you for making and maintaining this project!","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/101/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/101/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/comments/1614608403","html_url":"https://github.com/open-quantum-safe/profiling/issues/101#issuecomment-1614608403","issue_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/101","id":1614608403,"node_id":"IC_kwDOETYnOM5gPPgT","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-06-30T12:52:03Z","updated_at":"2023-06-30T12:52:03Z","author_association":"MEMBER","body":"Thanks for your interest(ed comments):\r\n\r\n> Is this a measurement error due to high variance? \r\n\r\nThis is my assumption, too. But I have no proof.\r\n\r\n> Is the \"performance code\" for classical key exchanges even different from the \"reference code\" since I would guess you use the OpenSSL implementation? \r\n\r\nThis is a very correct observation: Indeed, for plain, classic algorithms, there should be absolutely no performance difference as the figures for handshaking those algs comes straight from [openssl s_time](https://www.openssl.org/docs/man3.0/man1/openssl-s_time.html) -- and that (code) indeed has been built outside of the \"performance options\" available in `liboqs`. My assumption indeed is that the VMs used for those tests have pretty high variance in load making these handshake results shaky (pardon the pun). What might be more tell-tale is running the tests on an empty, dedicated machine... If you have one, feel free [to do that](https://hub.docker.com/repository/docker/openquantumsafe/oqs-perf) and check the numbers then.\r\n\r\n> Is there any other explanation for these strange results?\r\n\r\nI found none. But admittedly, I have not looked long and hard at those numbers. You might have judged in sofar as well by seeing #74 and #97 still being open.... \r\n\r\n> By the way, thank you for making and maintaining this project!\r\n\r\nYou're welcome. Glad to hear!","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/comments/1614608403/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-06-30T12:52:03Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"30120809290","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/201","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/201/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/201/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/201/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/pull/201","id":1781101035,"node_id":"PR_kwDOE_A9l85UQaEM","number":201,"title":"Allow the user to build oqs-provider as a static library.","user":{"login":"thb-sb","id":108470890,"node_id":"U_kgDOBnciag","avatar_url":"https://avatars.githubusercontent.com/u/108470890?v=4","gravatar_id":"","url":"https://api.github.com/users/thb-sb","html_url":"https://github.com/thb-sb","followers_url":"https://api.github.com/users/thb-sb/followers","following_url":"https://api.github.com/users/thb-sb/following{/other_user}","gists_url":"https://api.github.com/users/thb-sb/gists{/gist_id}","starred_url":"https://api.github.com/users/thb-sb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thb-sb/subscriptions","organizations_url":"https://api.github.com/users/thb-sb/orgs","repos_url":"https://api.github.com/users/thb-sb/repos","events_url":"https://api.github.com/users/thb-sb/events{/privacy}","received_events_url":"https://api.github.com/users/thb-sb/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2023-06-29T15:45:28Z","updated_at":"2023-06-30T15:01:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/pulls/201","html_url":"https://github.com/open-quantum-safe/oqs-provider/pull/201","diff_url":"https://github.com/open-quantum-safe/oqs-provider/pull/201.diff","patch_url":"https://github.com/open-quantum-safe/oqs-provider/pull/201.patch","merged_at":null},"body":"This commit removes the `SHARED` argument of the `add_library`. By doing so, we let the user choose the build type of library.\r\n\r\nBy default, CMake will build a static library. Thus, [`BUILD_SHARED_LIBS`] must be used to switch to a shared library.\r\n\r\n`oqs-provider` as a static library allows us to use the provider without having to store its shared library somewhere. In addition, it happens that some operating systems prohibit the use of `dlopen`/`dlsym`.\r\n\r\nTo load `oqs-provider` when it is embedded into a library of a binary, one can use the [`OSSL_PROVIDER_add_builtin`] API from OpenSSL 3.\r\n\r\n[`BUILD_SHARED_LIBS`]: https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html\r\n[`OSSL_PROVIDER_add_builtin`]: https://www.openssl.org/docs/man3.1/man3/OSSL_PROVIDER_add_builtin.html\r\n\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/201/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/201/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1614782742","html_url":"https://github.com/open-quantum-safe/oqs-provider/pull/201#issuecomment-1614782742","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/201","id":1614782742,"node_id":"IC_kwDOE_A9l85gP6EW","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-06-30T15:01:05Z","updated_at":"2023-06-30T15:01:05Z","author_association":"MEMBER","body":"> About the MODULE type, I can do it in another PR (I tried it here, and it failed to compile, so I guess it needs additional investigation).\r\n\r\nACK. Makes sense. Pushed your PR to the OQS CI test realm to see that everything's OK (apart from the CI nit above). Thanks again for the addition. Please consider adding yourself to the Contributors section at the end of the README.md.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1614782742/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-06-30T15:01:06Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
