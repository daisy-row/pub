{"id":"29821493428","type":"PushEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"repository_id":179335992,"push_id":14016163219,"size":434,"distinct_size":434,"ref":"refs/heads/master","head":"b32bb67216b095b5ab5567c90b8152fefae6a4ab","before":"e2d2587065eacfe97aaae940dd43cd964b71f5b4","commits":[{"sha":"39707fe73bd27fb3736e15638e9c478effc77f8e","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Bump minimum CMake version.\n\nCMake 3.10 was released November 20, 2017, which is now more than five\nyears ago.\n\nChange-Id: Ic939fd137983914ce1041740f58d98a56433e739\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55271\nCommit-Queue: Bob Beck <bbe@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>\nReviewed-by: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/39707fe73bd27fb3736e15638e9c478effc77f8e"},{"sha":"aa72a6c3fadff91b815b5bd62b8ab1bb4afe2b91","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Update build tools.\n\nThe clang script needed to be tweaked slightly because they've since\nchanged the URL. Also libc++ now needs to be built as C++20. (The\nbundled libc++ is only built in some of our test configs, so this\ndoesn't imply a C++20 dependency across the board.)\n\nChange-Id: I0a9e3aed71268bcd37059af8549a23cfc0270b05\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55272\nReviewed-by: Bob Beck <bbe@google.com>\nCommit-Queue: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/aa72a6c3fadff91b815b5bd62b8ab1bb4afe2b91"},{"sha":"e5c86b740520111558eaaca59ec1692d5fa9bb30","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Update SDE.\n\nChange-Id: Ia176cf8d03452e96ae8103fae40c9617a9dd71e1\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55273\nCommit-Queue: Bob Beck <bbe@google.com>\nReviewed-by: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/e5c86b740520111558eaaca59ec1692d5fa9bb30"},{"sha":"e0bb21bc8f8aafe67056242bc7f5ab2e22b14b8e","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Update x86_64-mont5.pl and RSAZ comments a bit.\n\nBack in https://boringssl-review.googlesource.com/c/boringssl/+/33268, I\nwrote that I had no idea what the mont5 assembly was doing. In\npreparation for fixing up some comments around\nBN_mod_exp_mont_consttime, I wanted to understand whether we were still\nmaking assumptions about cache lines.\n\nHappily, for the mont5 code, the answer is no, we are not. We just make\na bunch of masks and apply them in the natural way. But we do require\n16-byte alignment on the table, because we use movdqa to read out of it.\n\nI didn't look as closely at RSAZ, but I believe it too is fine. It\nfairly quickly tosses $power into an XMM register and builds up masks,\nrather than incorporating it into address computations.\n\n(Both scatter5 functions incorporate it into the address, but that's\npart of table building, where the index is public. I've updated the\ncomments to note when the index is secret or public.)\n\nThere is one reference to cache lines in the comments of mont5.pl, in\ncomputing $N. However, $N has been unused since\nhttps://boringssl-review.googlesource.com/c/boringssl/+/7244. (There are\nreferences to $N[0] and friends, but those refer to @N, which is a\ncompletely unrelated variable.) Remove it.\n\nChange-Id: I1fac0660dffcd1380572029de2e5baece60cddf6\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55225\nReviewed-by: Bob Beck <bbe@google.com>\nCommit-Queue: Bob Beck <bbe@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/e0bb21bc8f8aafe67056242bc7f5ab2e22b14b8e"},{"sha":"31dcfcd080cf43ecec7f3f06c441f17eb0f7621e","author":{"email":"agl@imperialviolet.org","name":"Adam Langley"},"message":"delocate: be able to preprocess inputs.\n\nIn the CMake build we did this with\nhttps://boringssl-review.googlesource.com/c/boringssl/+/44847. But in\nother environments delocate may need to run cpp itself.\n\nChange-Id: I429e849f6d7c566aa14e63be6c8e93f9dd6847ed\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55306\nCommit-Queue: Bob Beck <bbe@google.com>\nReviewed-by: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/31dcfcd080cf43ecec7f3f06c441f17eb0f7621e"},{"sha":"6cda656e4a2e1545e23b30dfb7dc05fe423e3f6c","author":{"email":"bbe@google.com","name":"Bob Beck"},"message":"Make OPENSSL_tm_to_posix and OPENSSL_posix_to_tm public API\n\nI have a use for these in the chrome verifier conversions, we\ncould choose to make them hidden again after a future move to\nboringssl..\n\nChange-Id: If059debbdf482d64577ad04c1ec4f9c82724de1e\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55305\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/6cda656e4a2e1545e23b30dfb7dc05fe423e3f6c"},{"sha":"2fd8de65347cebe9870b872e528658b922f61fe3","author":{"email":"bbe@google.com","name":"Bob Beck"},"message":"Add a hint to the C++ ending guard message\n\nChange-Id: I26f90a3a9f81d71e4cc2bf13777492552227140d\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55325\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/2fd8de65347cebe9870b872e528658b922f61fe3"},{"sha":"a880d2ac8261adca474f8682c5fe4420717e8d08","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Replace MOD_EXP_CTIME_ALIGN with align_pointer.\n\nChange-Id: Iea1cf557acc85e9bab7ddd50a15376ce77b1c65d\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55226\nReviewed-by: Bob Beck <bbe@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/a880d2ac8261adca474f8682c5fe4420717e8d08"},{"sha":"7ab49bf0af78e4b068822f8cd8b4f0fa6bbb4bc0","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Fix comments now BN_mod_exp_mont_consttime is not cache-line-sensitive\n\nBN_mod_exp_mont_consttime originally assumed accesses within a cache\nline were indistinguishable and indexed into a cache line with secret\nvalues. As a result, it required all of its tables, etc., to be\ncache-line-aligned. Nowadays, the standard constant time memory model is\nto assume the whole address leaks and not make these assumptions.\n\nIn particular, CacheBleed (CVE-2016-0702) showed this assumption was\nfalse and which cache bank you accessed as leaked. OpenSSL's fix for the\nassembly (mont5 and rsaz) appears to match the standard constant-time\nmodel. However, its fix to the C code narrowed the assumption to cache\nbanks, so the alignment was still necessary.\n\nAfter https://boringssl-review.googlesource.com/c/boringssl/+/33268, we\ndropped this and use the standard model. All together, it should mean we\nno longer make assumptions about cache lines. Update all the comments\nand variable names accordingly.\n\nChange-Id: I7bcb828eb2751a0167c3a3c8242b1b3971efc708\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55227\nReviewed-by: Bob Beck <bbe@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/7ab49bf0af78e4b068822f8cd8b4f0fa6bbb4bc0"},{"sha":"27e45c43420125ed293d4646ddf8ff2c321f01b9","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Work around some valgrind warnings in GTest.\n\nGTest likes to dump the underlying bytes for parameters which, in its\nfallback paths, tends to hit uninitialized memory. See\nhttps://github.com/google/googletest/issues/3805\n\nWork around this. Use the NID, rather than the whole EC_builtin_curve\nfor ECCurveTest, and then don't use TEST_P for one of the BIO tests at\nall.\n\nChange-Id: Ic578d1a1b08294b0cd2f13b3bd17f23f6e5f996d\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55229\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/27e45c43420125ed293d4646ddf8ff2c321f01b9"},{"sha":"cdc1299f8351c17d1a0a533a2890e1aae180cc14","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Split bn_tests.txt into several test files.\n\nFileTests run sequentially and cannot be filtered. Split them up so it's\neasier to, say, just run the ModExp ones. Also our test sharding\nmachinery will do a slightly better job parallelizing them when split up\nlike this. (This is one of our slower tests.)\n\nChange-Id: Ie69864982f043655f68e592440b1f36e971b033a\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55230\nReviewed-by: Bob Beck <bbe@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/cdc1299f8351c17d1a0a533a2890e1aae180cc14"},{"sha":"f3a0b745c1b26f27d48a976f6c45a1a21e05b4a0","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Bump Go version in go.mod and run go mod tidy.\n\nI did a go mod tidy run because https://go.dev/doc/modules/gomod-ref#go\nmentions something about transitive dependencies being noted\ndifferently.\n\nFixed: 544\nChange-Id: Ie631d83b8bb5e94f4ab7d47ae5d4eb4cc0b4ac06\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55365\nAuto-Submit: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/f3a0b745c1b26f27d48a976f6c45a1a21e05b4a0"},{"sha":"4463657435c322dedf23c015de3b196a9aafc5c1","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Minor style tweaks in BN_mod_exp_mont_consttime.\n\nChange-Id: I57a65d26c2a69f7084ea80b1a565ed7cb89b2a72\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55228\nReviewed-by: Bob Beck <bbe@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/4463657435c322dedf23c015de3b196a9aafc5c1"},{"sha":"d94d41ca394a21d52995e3ee39cfeb61730d45a3","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Add a note in bn.h that this is not for general-purpose math.\n\nSadly we do have to keep existing uses working, but let's make it clear\nin the documentation that they're not a priority. Also tweak the text\nabout being limited by memory; we actually impose a tighter limit than\nmemory alone.\n\nChange-Id: Ibaccd91cd0a1fe354f93f0123497115b649c0630\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55265\nReviewed-by: Bob Beck <bbe@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/d94d41ca394a21d52995e3ee39cfeb61730d45a3"},{"sha":"87cbe22b59a34423fa932e686b509c68315b6e6c","author":{"email":"agl@imperialviolet.org","name":"Adam Langley"},"message":"Preprocess asm on all platforms with delocate.\n\nSince 31dcfcd080cf43ecec7f3f06c441f17eb0f7621e, delocate can drive cpp\nitself to preprocess assembly inputs. This change switches the CMake\nbuild to doing that and does it on all platforms in order to be more\nuniform.\n\nChange-Id: Ie28228fb1a4c63a2d43ab8a97f09cfe890ef39a1\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55326\nReviewed-by: David Benjamin <davidben@google.com>\nCommit-Queue: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/87cbe22b59a34423fa932e686b509c68315b6e6c"},{"sha":"3ae0778f3d60a078356a683ee3a9a825008c6711","author":{"email":"agl@chromium.org","name":"Adam Langley"},"message":"delocate: learn about more Aarch64 registers.\n\nSome compiler configuration are manipulating the 16-bit register `h0`\nand delocate needs to know that's a register, not a symbol. Likewise,\nNZCV is Aarch64's condition flags register which can be (and is) read\nwith `msr`.\n\nChange-Id: Ica5be6a059ead61d22d60fd2db1a484d9ac2be3b\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55307\nReviewed-by: David Benjamin <davidben@google.com>\nCommit-Queue: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/3ae0778f3d60a078356a683ee3a9a825008c6711"},{"sha":"de434576d7412b95a8eb90d613fc9f01e2d7166b","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Fix allocation size in BN_mod_exp_mont_consttime.\n\npowerbuf's layout is:\n- num_powers values mod m, stored transposed\n- one value mod m, tmp\n- one value mod m, am\n- (mont5-only) an extra copy of m\n\npowerbuf_len broadly computed this, but where tmp + am would be\nsizeof(BN_ULONG) * top * 2, it used\nsizeof(BN_ULONG) * max(top * 2, num_powers).\n\n(In the actual code it's written as a ternary op and some\nmultiplications are factored out.)\n\nThat is, it allocated enough room for tmp + am OR an extra row in the\nnum_powers table, as if each entry were top + 1 words long instead of\ntop, with the space overlapping. This expression dates to upstream's\nhttps://github.com/openssl/openssl/commit/361512da0d900ba276096cbd152e304d402aca65,\nthough the exact layout has shifted over the years as mont5 evolved.\n(Originally, it only contained one extra value mod m.)\n\nAt the time, this was necessary because bn_mul_mont_gather5 actually\noverreads the table by one row! Although it only uses top * 32 words, it\nrequires the table to have (top + 1) * 32 words. This is because the\ncomputation was scheduled so that the .Louter4x loop would read and mask\noff the next iteration's value while incorporating the previous\niteration:\n\nThere were masked reads from $bp into XMM registers at the start of the\nloop:\nhttps://github.com/openssl/openssl/blob/361512da0d900ba276096cbd152e304d402aca65/crypto/bn/asm/x86_64-mont5.pl#L541\n\nThe XMM logic is interleaved throughout and does not move to a\ngeneral-purpose register, $m0, until much later. $m is not read again\nuntil after the jump.\nhttps://github.com/openssl/openssl/blob/361512da0d900ba276096cbd152e304d402aca65/crypto/bn/asm/x86_64-mont5.pl#L700\n\nMeanwhile, the loop is already reading $m0 at the start of the\niteration.\nhttps://github.com/openssl/openssl/blob/361512da0d900ba276096cbd152e304d402aca65/crypto/bn/asm/x86_64-mont5.pl#L551\n\nThe whole thing is bootstrapped by similar code just above it:\nhttps://github.com/openssl/openssl/blob/361512da0d900ba276096cbd152e304d402aca65/crypto/bn/asm/x86_64-mont5.pl#L531\n\nIn the final iteration, we read one extra row into $m0 but never use it.\nThat is the overread.\n\nI also confirmed this by rewinding our x86_64-mont5.pl to this state,\nhacking things up until it built, and then hacking up\nBN_mod_exp_mont_consttime to place the table in its own allocation, with\nno extra slop using C11 aligned_alloc. This was so valgrind could\naccurately instrument the bounds. When I did that, valgrind was clean if\nI allocated (top + 1) * num_powers, but flagged an out-of-bounds read at\ntop * num_powers.\n\nThis no longer applies. After\nhttps://github.com/openssl/openssl/commit/25d14c6c29b53907bf614b9964d43cd98401a7fc,\nbn_mul_mont_gather5's scheduling is far less complicated. .Louter4x now\nbegins with a masked read, setting up $m0, and then it incorporates $m0\ninto the product. The same valgrind strategy confirmed this. Thus, I\ndon't believe this extra row is needed and we can allocate the buffer\nstraightforwardly.\n\nChange-Id: I6c1ee8d5ebdb66eb4e5fec63d2140814c13ae146\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55231\nReviewed-by: Bob Beck <bbe@google.com>\nCommit-Queue: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/de434576d7412b95a8eb90d613fc9f01e2d7166b"},{"sha":"db10ae50361a05508683282fcd8d2344a6a1517c","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Cap Montgomery moduli to 8 KiB.\n\nWe have two places where the current cap on BIGNUM sizes (64 MiB) is too\nlarge, both involving Montgomery reduction: bn_mul_mont allocates a\nspare value on the stack, and BN_mod_exp_mont_constime needs to allocate\na buffer of up to 64 contiguous values, which may overflow an int.\n\nMake BN_MONT_CTX reject any BIGNUM larger than 8 KiB. This is 65,536\nbits which is well above our maximum RSA key size, 16,384 bits. Ideally\nwe'd just apply this in bn_wexpand, to all BIGNUMs across the board, but\nwe found one caller that depends on creating an 8 MiB BIGNUM.\n\nUpdate-Note: This will not affect any cryptography implemented by\nBoringSSL, such as RSA, but other callers may run into this limit. If\nnecessary, we can raise this a bit, but the stack allocation means we\ndon't want to go *significantly* beyond what's in this CL.\n\nFixed: 541\nChange-Id: Ia00f3ea6714a5042434f446943db55a533752dc5\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55266\nReviewed-by: Bob Beck <bbe@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/db10ae50361a05508683282fcd8d2344a6a1517c"},{"sha":"e0d601a57fde7d67a1c771e7d87468faf1f8fe55","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Tidy up cipher_test.cc slightly\n\nIt's weird to have both \"in\" and \"input\" in the same function. Also the\nvector const refs can be spans. This is a bit of preparatory cleanup\nalong the way to a larger refactor so we can do negative tests and test\nthe weird EVP_Cipher API more coherently.\n\nBug: 494\nChange-Id: I5cddf1b3ab88b3419bd88ce15bee56a2016bcd57\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55385\nReviewed-by: Adam Langley <agl@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/e0d601a57fde7d67a1c771e7d87468faf1f8fe55"},{"sha":"7f7599a7264ddde9c720db49135ec919593789e2","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Correct the maximum output size in cipher_test.cc\n\nEVP_CIPH_NO_PADDING is a no-op when block_size is one, yet we sized the\noutput expecting it to always add a byte of padding. (I don't think this\nmakes a difference because most call sites of DoCipher set\nEVP_CIPH_NO_PADDING.)\n\nBug: 494\nChange-Id: Ic75e48a60e669270a093416b862ec03706e1d6ef\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/55386\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/7f7599a7264ddde9c720db49135ec919593789e2"}]},"public":true,"created_at":"2023-06-17T05:02:41Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"29823950776","type":"PushEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"repository_id":334511511,"push_id":14017698755,"size":1,"distinct_size":1,"ref":"refs/heads/mb-doc-update","head":"188a913513b61c6223ceda3377e98186e371a4c2","before":"9972653b537e0c823e7ba200e126e4d62411bf23","commits":[{"sha":"188a913513b61c6223ceda3377e98186e371a4c2","author":{"email":"57787676+baentsch@users.noreply.github.com","name":"Michael"},"message":"correct links [skip ci]","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/commits/188a913513b61c6223ceda3377e98186e371a4c2"}]},"public":true,"created_at":"2023-06-17T11:59:08Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
