{"id":"26868660943","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/134","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/134/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/134/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/134/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/134","id":1570168583,"node_id":"I_kwDOBsoLV85dlt8H","number":134,"title":"PQ KEM method names per draft iteration","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-02-03T17:09:16Z","updated_at":"2023-02-04T06:45:46Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi folks, \r\n\r\nSome collaborators are trying to interop our PQ SSH key exchange in NIST NCCOE's PQ Migration effort. As we are working through this, we will all try to interop with the ```ecdh-nistp256-kyber-512-sha256```. It is supported in OQS OpenSSH and wolfSSH, which is great. \r\n\r\nNow there is one concern about backwards compatibility. Someone that implements the method name ```ecdh-nistp256-kyber-512-sha256``` today may have interop issues in a couple of years when Kyber has been slightly tweaked or something in the method has been tweaked in the draft and the peer implements the latest version. That is a concern for any RFC draft which changes over time. \r\n\r\nTo prevent such problems we could introduce a temporary identifier that basically creates a snapshot of the method in time. For example, we could rename ```ecdh-nistp256-kyber-512-sha256``` to method name ```ecdh-nistp256-kyber-512r3-sha256-d00```. That basically means the method is specific to the time it was implemented (Kyber-512 round 3 the way draft -00 explained the method). In the next change which breaks compatibility for that method, its name will change to something like ```ecdh-nistp256-kyber-512r4-sha256-d01``` or something like that. So, old clients that were not upgraded would not be able to negotiate ```ecdh-nistp256-kyber-512r3-sha256-d00``` any more and they would still interop using classical methods. When the RFC is ratified, the final standardized name would be ```ecdh-nistp256-kyber-512-sha256```\r\n\r\nI know this is not something we have done for TLS 1.3 group names, or SSH methods. But have you given it any thought? Would it be too much overhead to rename the method every time something underlying (KEM algorithm, or implementation detail) changes?\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/134/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/134/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1416679468","html_url":"https://github.com/open-quantum-safe/openssh/issues/134#issuecomment-1416679468","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/134","id":1416679468,"node_id":"IC_kwDOBsoLV85UcNAs","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-02-04T06:45:46Z","updated_at":"2023-02-04T06:45:46Z","author_association":"MEMBER","body":"> Would it be too much overhead to rename the method every time something underlying (KEM algorithm, or implementation detail) changes?\r\n\r\nSimple answer probably is \"No\": Speaking for the arguably equivalent TLS group names that I'm more familiar with, it surely would be possible to map them to specific `liboqs` versions (carrying specific Kyber versions); it's \"just software\" after all and \"there's no problem in CS that cannot be solved by another level of indirection\".\r\n\r\nBut I see the following implications/questions affecting any software where different algorithm versions are lifted to/exposed at \"user level\":\r\n- Each user is made acutely aware that this is not a reliable/durable piece of software/cryptography the moment they configure it and thus might refrain from deploying it until finally standardized. This arguably would be goodness (stopping people considering things \"final\" that are not) so I'd find it good if every implementation at this point in time were using the name `ecdh-nistp256-kyber-512-sha256-draft` in your example.\r\n- Bigger issue: Which entity defines \"the need\" for a name change -- and to which specific name? For example, what exactly constitutes \"-d01\"? A new hash over the KATs? Who maintains this name/KAT table? Why should the name change if a non-KAT-changing implementation change occurs? If done separately by each project, the (interop) problem would not be solved. If done by some \"registrar\", how far away is that from a real standardization?\r\n- Practically, (sample) code / downstream integrations would need to be constantly upgraded as some PQ algorithm detail changes if that is encoded in a (configurable) name. I'm not sure everyone would appreciate this. It would be good and fair to require a name change once a standard has been finalized, but doing this more often I find problematic from a \"practical acceptance\" perspective (and more cumbersome than just replacing an outdated library -- which actually can happen automatically).\r\n\r\n> So, old clients that were not upgraded would not be able to negotiate ecdh-nistp256-kyber-512r3-sha256-d00 any more and they would still interop using classical methods.\r\n\r\nThis I find very risky: Is the suggestion that although PQ has been configured, the client shall silently fall back to classic crypto because of an algorithm version mismatch? Wouldn't it be more advisable to have users *experience* a real error (due to client and server not being able to interop via PQ due to _actually different_ algorithms being used) such as to trigger a check of code/library version and a suitable upgrade?\r\n\r\nIn sum, I'd personally try to refrain from creating PQ \"legacy software\" (defined as code that can keep working in a future it wasn't written for) from the get-go, but rather standardize things more quickly. I do agree, though, that using names without some \"draft\" moniker can mislead users into thinking PQ is already as stable as classic crypto.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1416679468/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-04T06:45:47Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26868690171","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/135","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/135/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/135/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/135/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/135","id":1570324001,"node_id":"I_kwDOBsoLV85dmT4h","number":135,"title":"Migrate to OpenSSH 9.2","user":{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-02-03T19:17:26Z","updated_at":"2023-02-04T06:51:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Migrate to the 9.x branch. Interestingly, hybrid PQC is now the *default* since 9.0.\r\n\r\nFrom the 9.0 [release notes](https://www.openssh.com/releasenotes.html):\r\n```\r\n* [ssh(1)](https://man.openbsd.org/ssh.1), [sshd(8)](https://man.openbsd.org/sshd.8): use the hybrid Streamlined NTRU Prime + x25519 key\r\n   exchange method by default (\"sntrup761x25519-sha512@openssh.com\").\r\n   The NTRU algorithm is believed to resist attacks enabled by future\r\n   quantum computers and is paired with the X25519 ECDH key exchange\r\n   (the previous default) as a backstop against any weaknesses in\r\n   NTRU Prime that may be discovered in the future. The combination\r\n   ensures that the hybrid exchange offers at least as good security\r\n   as the status quo.\r\n\r\n   We are making this change now (i.e. ahead of cryptographically-\r\n   relevant quantum computers) to prevent \"capture now, decrypt\r\n   later\" attacks where an adversary who can record and store SSH\r\n   session ciphertext would be able to decrypt it once a sufficiently\r\n   advanced quantum computer is available.\r\n```","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/135/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/135/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1416680169","html_url":"https://github.com/open-quantum-safe/openssh/issues/135#issuecomment-1416680169","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/135","id":1416680169,"node_id":"IC_kwDOBsoLV85UcNLp","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-02-04T06:51:18Z","updated_at":"2023-02-04T06:51:18Z","author_association":"MEMBER","body":"Is this a \"migration\" or rather a more complete code update -- incl. the requirement to first implement #66 to be able to interop with \"sntrup761x25519-sha512\"?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1416680169/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-04T06:51:18Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26870445556","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/106","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/106/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/106/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/106/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/106","id":1566075838,"node_id":"I_kwDOE_A9l85dWGu-","number":106,"title":"Error using 'dgst' with empty inputfile","user":{"login":"VeronikaNguyen","id":82515642,"node_id":"MDQ6VXNlcjgyNTE1NjQy","avatar_url":"https://avatars.githubusercontent.com/u/82515642?v=4","gravatar_id":"","url":"https://api.github.com/users/VeronikaNguyen","html_url":"https://github.com/VeronikaNguyen","followers_url":"https://api.github.com/users/VeronikaNguyen/followers","following_url":"https://api.github.com/users/VeronikaNguyen/following{/other_user}","gists_url":"https://api.github.com/users/VeronikaNguyen/gists{/gist_id}","starred_url":"https://api.github.com/users/VeronikaNguyen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/VeronikaNguyen/subscriptions","organizations_url":"https://api.github.com/users/VeronikaNguyen/orgs","repos_url":"https://api.github.com/users/VeronikaNguyen/repos","events_url":"https://api.github.com/users/VeronikaNguyen/events{/privacy}","received_events_url":"https://api.github.com/users/VeronikaNguyen/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2023-02-01T13:03:04Z","updated_at":"2023-02-04T11:52:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I built the provider in msys mingw64 under Windows 11.\r\n\r\nWhen running the commands\r\n```\r\nset OPENSSL=[path_to]\\openssl.exe\r\nset OPENSSL_CONF=[path_to]\\openssl.cfg\r\nset ALGO=falcon1024\r\nset KEY=falcon1024_srv.key\r\nset PUBKEY=falcon1024_srv.pubkey\r\nset CERT=falcon1024_srv.crt\r\nset ISSUERCERT=falcon1024_CA.crt\r\nset ISSUERKEY=falcon1024_CA.key\r\n:: Issuer Cert & Key\r\n%OPENSSL% req -x509 -new -newkey %ALGO% -keyout %ISSUERKEY% -out %ISSUERCERT% -nodes -subj \"/CN=oqstest CA\" -days 365\r\n:: Subject Key & csr\r\n%OPENSSL% req -new -newkey %ALGO% -keyout %KEY% -out %ALGO%_srv.csr -nodes -subj \"/CN=oqstest server\"\r\n:: Subject Cert\r\n%OPENSSL% x509 -req -in %ALGO%_srv.csr -out %CERT% -CA %ISSUERCERT% -CAkey %ISSUERKEY% -CAcreateserial -days 365\r\n:: Subject Pub Key\r\n%OPENSSL% x509 -in %CERT% -pubkey -noout > %PUBKEY%\r\n:: Sign / Verify\r\n%OPENSSL% dgst -sign %KEY% -out dgstsignfile inputfile\r\n%OPENSSL% dgst -signature dgstsignfile -verify %PUBKEY% inputfile\r\n```\r\nwith empty inputfile, the following error occurs\r\n`9CDB0000:error:4000000D:lib(128):oqs_sig_verify:reason(13):C:/projects/openssl_jetzt_tuts/oqs_provider/oqsprov/oqs_sig.c:335:\r\n9CDB0000:error:0300009E:digital envelope routines:do_sigver_init:no default digest:crypto/evp/m_sigver.c:277:`.\r\n\r\nThis error does not occur when using a non-empty inputfile. Is the behaviour on empty inputfiles intended?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/106/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/106/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1416732530","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/106#issuecomment-1416732530","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/106","id":1416732530,"node_id":"IC_kwDOE_A9l85UcZ9y","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-02-04T11:52:26Z","updated_at":"2023-02-04T11:52:26Z","author_association":"MEMBER","body":"@VeronikaNguyen , fyi, found a stupid oversight triggering this behaviour. See the diff in #107 .","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1416732530/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-04T11:52:26Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26872325491","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/82","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/82/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/82/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/82/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/82","id":1424316745,"node_id":"I_kwDOE_A9l85U5VlJ","number":82,"title":"Static library support","user":{"login":"mingw-io","id":70483213,"node_id":"MDQ6VXNlcjcwNDgzMjEz","avatar_url":"https://avatars.githubusercontent.com/u/70483213?v=4","gravatar_id":"","url":"https://api.github.com/users/mingw-io","html_url":"https://github.com/mingw-io","followers_url":"https://api.github.com/users/mingw-io/followers","following_url":"https://api.github.com/users/mingw-io/following{/other_user}","gists_url":"https://api.github.com/users/mingw-io/gists{/gist_id}","starred_url":"https://api.github.com/users/mingw-io/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mingw-io/subscriptions","organizations_url":"https://api.github.com/users/mingw-io/orgs","repos_url":"https://api.github.com/users/mingw-io/repos","events_url":"https://api.github.com/users/mingw-io/events{/privacy}","received_events_url":"https://api.github.com/users/mingw-io/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2022-10-26T16:11:18Z","updated_at":"2023-02-04T16:21:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi.\r\n\r\nMany people build OpenSSL as a static library.\r\nIt appears that OQS provider does NOT work properly with a static OpenSSL as some failing tests demonstrate (e.g. oqs_endecode).\r\nWe have been experimenting/trying to build OpenSSL statically with OQS provider 'embedded' the same way as the legacy provider is built.\r\nThis is our first attempt and it seems to be working.\r\nObviously there are advantages and disadvantages here.\r\nThe main advantage is that we end up with only one file.\r\n\r\nWe have run all OQS tests (oqs_signatures, oqs_kems, oqs_groups & oqs_endecode) and they have all passed.\r\n\r\nDo we need to run/do more testing here? We can make the binary available (if that helps!).\r\n\r\nCheers and thanks for this project.\r\n\r\n![image](https://user-images.githubusercontent.com/70483213/198078367-ed64cc5a-80f5-42a5-8b50-12d0b0795c3e.png)\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/82/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/82/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1416792914","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/82#issuecomment-1416792914","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/82","id":1416792914,"node_id":"IC_kwDOE_A9l85UcotS","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-02-04T16:21:31Z","updated_at":"2023-02-04T16:21:31Z","author_association":"MEMBER","body":"@mingw-io ping/Did you see the questions above?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1416792914/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-04T16:21:31Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
