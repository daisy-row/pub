{"id":"27276091902","type":"IssueCommentEvent","actor":{"id":25055813,"login":"dkostic","display_login":"dkostic","gravatar_id":"","url":"https://api.github.com/users/dkostic","avatar_url":"https://avatars.githubusercontent.com/u/25055813?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1397","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1397/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1397/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1397/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1397","id":1592810246,"node_id":"PR_kwDOA-eq3c5KZRBQ","number":1397,"title":"document BIKE lacks constant time protection","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2023-02-21T05:07:55Z","updated_at":"2023-02-23T05:25:52Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1397","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1397","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1397.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1397.patch","merged_at":null},"body":"Fixes #1396 . Tagging @dkostic @crockeea for fact check.\r\n\r\n* [no] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ no Does this PR change the the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider), [OQS-OpenSSL](https://github.com/open-quantum-safe/openssl), [OQS-BoringSSL](https://github.com/open-quantum-safe/boringssl), and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1397/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1397/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1441234170","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1397#issuecomment-1441234170","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1397","id":1441234170,"node_id":"IC_kwDOA-eq3c5V53z6","user":{"login":"dkostic","id":25055813,"node_id":"MDQ6VXNlcjI1MDU1ODEz","avatar_url":"https://avatars.githubusercontent.com/u/25055813?v=4","gravatar_id":"","url":"https://api.github.com/users/dkostic","html_url":"https://github.com/dkostic","followers_url":"https://api.github.com/users/dkostic/followers","following_url":"https://api.github.com/users/dkostic/following{/other_user}","gists_url":"https://api.github.com/users/dkostic/gists{/gist_id}","starred_url":"https://api.github.com/users/dkostic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkostic/subscriptions","organizations_url":"https://api.github.com/users/dkostic/orgs","repos_url":"https://api.github.com/users/dkostic/repos","events_url":"https://api.github.com/users/dkostic/events{/privacy}","received_events_url":"https://api.github.com/users/dkostic/received_events","type":"User","site_admin":false},"created_at":"2023-02-23T05:25:52Z","updated_at":"2023-02-23T05:25:52Z","author_association":"COLLABORATOR","body":"I opened #1400 to address one of the issues reported by Valgrind. I believe the other issues are false positives but I'd appreciate another set of eyes on it to confirm that:\r\n```\r\n==7198== Use of uninitialised value of size 1\r\n==7198==    at 0x114055: _mm256_slli_epi64 (avx2intrin.h:698)\r\n==7198==    by 0x114055: OQS_KEM_bike_l5_secure_set_bits_avx2 (sampling_avx2.c:67)\r\n...\r\n==7198== Use of uninitialised value of size 1\r\n==7198==    at 0x1AA559: _mm256_srli_epi64 (avx2intrin.h:789)\r\n==7198==    by 0x1AA559: rotate256_small (decode_avx2.c:88)\r\n```\r\n^^Both values in those function calls are initialized afaict.\r\n\r\n```\r\n==7198== Conditional jump or move depends on uninitialised value(s)\r\n==7198==    at 0x1A6AF1: get_threshold (decode.c:103)\r\n```\r\n^^There is no conditional jump in this function and all the variables are initialized before use.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1441234170/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-23T05:25:52Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27287518876","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1388","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1388/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1388/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1388/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1388","id":1582740748,"node_id":"I_kwDOA-eq3c5eVrUM","number":1388,"title":"Licensing questions","user":{"login":"beldmit","id":13785747,"node_id":"MDQ6VXNlcjEzNzg1NzQ3","avatar_url":"https://avatars.githubusercontent.com/u/13785747?v=4","gravatar_id":"","url":"https://api.github.com/users/beldmit","html_url":"https://github.com/beldmit","followers_url":"https://api.github.com/users/beldmit/followers","following_url":"https://api.github.com/users/beldmit/following{/other_user}","gists_url":"https://api.github.com/users/beldmit/gists{/gist_id}","starred_url":"https://api.github.com/users/beldmit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/beldmit/subscriptions","organizations_url":"https://api.github.com/users/beldmit/orgs","repos_url":"https://api.github.com/users/beldmit/repos","events_url":"https://api.github.com/users/beldmit/events{/privacy}","received_events_url":"https://api.github.com/users/beldmit/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2023-02-13T17:09:53Z","updated_at":"2023-02-23T14:30:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm going to bring liboqs to Fedora and dealing with the licenses. We have some questions to be discussed internally and one I want to raise immediately.\r\n\r\nAs of 2022-08-01 CC0 is prohibited for code included in Fedora because it contains an express exclusion of patent permissions, and AFAIK it is not the only distro with similar problem. Is there any relevant workaround for this?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1388/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1388/timeline","performed_via_github_app":null,"state_reason":"reopened"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1441893299","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1388#issuecomment-1441893299","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1388","id":1441893299,"node_id":"IC_kwDOA-eq3c5V8Yuz","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2023-02-23T14:30:06Z","updated_at":"2023-02-23T14:30:06Z","author_association":"CONTRIBUTOR","body":"Kyber and Dilithium licenses have been updated to dual license with Apache-2.0. I will create a PR to reflect the change.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1441893299/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-23T14:30:07Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27288987776","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1388","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1388/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1388/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1388/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1388","id":1582740748,"node_id":"I_kwDOA-eq3c5eVrUM","number":1388,"title":"Licensing questions","user":{"login":"beldmit","id":13785747,"node_id":"MDQ6VXNlcjEzNzg1NzQ3","avatar_url":"https://avatars.githubusercontent.com/u/13785747?v=4","gravatar_id":"","url":"https://api.github.com/users/beldmit","html_url":"https://github.com/beldmit","followers_url":"https://api.github.com/users/beldmit/followers","following_url":"https://api.github.com/users/beldmit/following{/other_user}","gists_url":"https://api.github.com/users/beldmit/gists{/gist_id}","starred_url":"https://api.github.com/users/beldmit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/beldmit/subscriptions","organizations_url":"https://api.github.com/users/beldmit/orgs","repos_url":"https://api.github.com/users/beldmit/repos","events_url":"https://api.github.com/users/beldmit/events{/privacy}","received_events_url":"https://api.github.com/users/beldmit/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":16,"created_at":"2023-02-13T17:09:53Z","updated_at":"2023-02-23T15:21:27Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm going to bring liboqs to Fedora and dealing with the licenses. We have some questions to be discussed internally and one I want to raise immediately.\r\n\r\nAs of 2022-08-01 CC0 is prohibited for code included in Fedora because it contains an express exclusion of patent permissions, and AFAIK it is not the only distro with similar problem. Is there any relevant workaround for this?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1388/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1388/timeline","performed_via_github_app":null,"state_reason":"reopened"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1441969348","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1388#issuecomment-1441969348","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1388","id":1441969348,"node_id":"IC_kwDOA-eq3c5V8rTE","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2023-02-23T15:21:27Z","updated_at":"2023-02-23T15:21:27Z","author_association":"CONTRIBUTOR","body":"See PR #1403. This applies to the generic and AVX2 versions pulled from pqcrystals. The ARM versions pulled from pqclean are still under CC0.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1441969348/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-23T15:21:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27289274684","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/136","id":1592791838,"node_id":"I_kwDOBsoLV85e8BMe","number":136,"title":"PQ-hybrid key exchange encodings","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2023-02-21T04:56:06Z","updated_at":"2023-02-23T15:31:45Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\n\r\nAs we are interop testing we found an issue in how OQS OpenSSH encodes the exchanged keys.\r\n\r\nThe way it works today in OQS OpenSSH, the shared secret is `K = HASH((PQ shared key) || (ECDH shared key))`\r\n- The ```PQ shared key``` is encoded as raw data (`byte` in the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 ). \r\n- The ```ECDH shared key``` is encoded as ```mpint``` as per the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 . That is probably because that it was done previously as per RFC4253 and because the exchanged ECDH shared key is a big integer and `K` ended up being `mpint`. \r\n- `K = HASH((PQ shared key) || (ECDH shared key))` is used as a `byte` array for deriving encryption keys for SSH https://github.com/open-quantum-safe/openssh/blob/92c59cf2f25fb32b21ce8d7b11a8af246ea17062/kexoqsecdh.c#L94 \r\n\r\nThe PQ SSH draft is currently a little ambiguous on this, and I will update it to be more prescriptive, but we want to make a suggestion here to make sure we are all implementers on the same page: \r\n\r\nBoth ```PQ shared key``` and ```ECDH shared key``` would rather be a simple `byte` array padded to the nearest byte boundary. Previously `mpint` worked because ```ECDH shared key``` was going directly into `K`, but that is not the case any more. ```PQ shared key``` and ```ECDH shared key``` go into a hash, so they ought to be raw data, fixed-length, simple `byte` array padded to the nearest byte boundary. Using `mpint` for one shared key and raw data for the other is inconsistent and `mpint` adds some predictability into the content of the hash input buffer. \r\n\r\nBtw, that is what OpenSSH does with its X25519+SNTRU PQ-hybrid key exchange method. \r\n\r\n@dstebila , @baentsch , @christianpaquin , what do you think? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1441984513","html_url":"https://github.com/open-quantum-safe/openssh/issues/136#issuecomment-1441984513","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","id":1441984513,"node_id":"IC_kwDOBsoLV85V8vAB","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2023-02-23T15:31:45Z","updated_at":"2023-02-23T15:31:45Z","author_association":"MEMBER","body":"Hi Panos, I think your proposal makes sense.  But to be clear, when you say that the ECDH shared key is going to be a \"simple `byte` array padded to the nearest byte boundary\", that boundary will be based on the size of finite field in which the ECC arithmetic is being done, not the size of the shared secret.  In other words, if the top 8 bits of one particular shared secret are all zero, that is still encoded in a byte array of the same length as a shared secret where there top 8 bits were not all zero?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1441984513/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-23T15:31:45Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27289340967","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1401","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1401/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1401/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1401/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1401","id":1596663573,"node_id":"I_kwDOA-eq3c5fKycV","number":1401,"title":"Is there a method to display the public key of signatures?","user":{"login":"JannisFengler","id":20631393,"node_id":"MDQ6VXNlcjIwNjMxMzkz","avatar_url":"https://avatars.githubusercontent.com/u/20631393?v=4","gravatar_id":"","url":"https://api.github.com/users/JannisFengler","html_url":"https://github.com/JannisFengler","followers_url":"https://api.github.com/users/JannisFengler/followers","following_url":"https://api.github.com/users/JannisFengler/following{/other_user}","gists_url":"https://api.github.com/users/JannisFengler/gists{/gist_id}","starred_url":"https://api.github.com/users/JannisFengler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JannisFengler/subscriptions","organizations_url":"https://api.github.com/users/JannisFengler/orgs","repos_url":"https://api.github.com/users/JannisFengler/repos","events_url":"https://api.github.com/users/JannisFengler/events{/privacy}","received_events_url":"https://api.github.com/users/JannisFengler/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[{"login":"vsoftco","id":6188943,"node_id":"MDQ6VXNlcjYxODg5NDM=","avatar_url":"https://avatars.githubusercontent.com/u/6188943?v=4","gravatar_id":"","url":"https://api.github.com/users/vsoftco","html_url":"https://github.com/vsoftco","followers_url":"https://api.github.com/users/vsoftco/followers","following_url":"https://api.github.com/users/vsoftco/following{/other_user}","gists_url":"https://api.github.com/users/vsoftco/gists{/gist_id}","starred_url":"https://api.github.com/users/vsoftco/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vsoftco/subscriptions","organizations_url":"https://api.github.com/users/vsoftco/orgs","repos_url":"https://api.github.com/users/vsoftco/repos","events_url":"https://api.github.com/users/vsoftco/events{/privacy}","received_events_url":"https://api.github.com/users/vsoftco/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2023-01-19T13:07:35Z","updated_at":"2023-02-23T15:34:13Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"There are 2 ways to init the signatures. One is to initiate with\r\n ```signer.Init(sigName, nil)``` \r\nAfter that, a keypair can be generated with \r\n```signer.GenerateKeyPair()``` \r\nwhich returns the public key. \r\n\r\nThe second way is to initiate with: \r\n```signer.Init(sigName, secretKeyBytes)```\r\n\r\nThis function doesn't return a public key. I also didn't find a function like:\r\n```signer.publicKey()```\r\n\r\nIs there a best practice for extracting the public key? It would be great if this function would be part of the liboqs-go library. ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1401/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1401/timeline","performed_via_github_app":null,"state_reason":"reopened"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1441988190","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1401#issuecomment-1441988190","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1401","id":1441988190,"node_id":"IC_kwDOA-eq3c5V8v5e","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-02-23T15:34:13Z","updated_at":"2023-02-23T15:34:13Z","author_association":"MEMBER","body":"As this is a general API question, not specific to one language wrapper, reopening it here for wider discussion. \r\nMy personal vote would be to not include an API that cannot be implemented for all PQ algorithms. The discussion thread referenced above also hints at a very special, Falcon-only, use case. Opinions to the contrary welcome.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1441988190/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-23T15:34:13Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27289620667","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1399","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1399/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1399/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1399/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1399","id":1594935324,"node_id":"PR_kwDOA-eq3c5KgVLR","number":1399,"title":"correct free in test_kem/sig","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2023-02-22T11:25:49Z","updated_at":"2023-02-23T15:44:29Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1399","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1399","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1399.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1399.patch","merged_at":null},"body":"Fixes #1398 \r\n\r\n* [no] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [no] Does this PR change the the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider), [OQS-OpenSSL](https://github.com/open-quantum-safe/openssl), [OQS-BoringSSL](https://github.com/open-quantum-safe/boringssl), and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1399/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1399/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1442007658","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1399#issuecomment-1442007658","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1399","id":1442007658,"node_id":"IC_kwDOA-eq3c5V80pq","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-02-23T15:44:28Z","updated_at":"2023-02-23T15:44:28Z","author_association":"MEMBER","body":"@thomwiggers Please re-review to remove the merge blocker.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1442007658/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-23T15:44:29Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27291029809","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1401","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1401/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1401/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1401/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1401","id":1596663573,"node_id":"I_kwDOA-eq3c5fKycV","number":1401,"title":"Is there a method to display the public key of signatures?","user":{"login":"JannisFengler","id":20631393,"node_id":"MDQ6VXNlcjIwNjMxMzkz","avatar_url":"https://avatars.githubusercontent.com/u/20631393?v=4","gravatar_id":"","url":"https://api.github.com/users/JannisFengler","html_url":"https://github.com/JannisFengler","followers_url":"https://api.github.com/users/JannisFengler/followers","following_url":"https://api.github.com/users/JannisFengler/following{/other_user}","gists_url":"https://api.github.com/users/JannisFengler/gists{/gist_id}","starred_url":"https://api.github.com/users/JannisFengler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JannisFengler/subscriptions","organizations_url":"https://api.github.com/users/JannisFengler/orgs","repos_url":"https://api.github.com/users/JannisFengler/repos","events_url":"https://api.github.com/users/JannisFengler/events{/privacy}","received_events_url":"https://api.github.com/users/JannisFengler/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[{"login":"vsoftco","id":6188943,"node_id":"MDQ6VXNlcjYxODg5NDM=","avatar_url":"https://avatars.githubusercontent.com/u/6188943?v=4","gravatar_id":"","url":"https://api.github.com/users/vsoftco","html_url":"https://github.com/vsoftco","followers_url":"https://api.github.com/users/vsoftco/followers","following_url":"https://api.github.com/users/vsoftco/following{/other_user}","gists_url":"https://api.github.com/users/vsoftco/gists{/gist_id}","starred_url":"https://api.github.com/users/vsoftco/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vsoftco/subscriptions","organizations_url":"https://api.github.com/users/vsoftco/orgs","repos_url":"https://api.github.com/users/vsoftco/repos","events_url":"https://api.github.com/users/vsoftco/events{/privacy}","received_events_url":"https://api.github.com/users/vsoftco/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2023-01-19T13:07:35Z","updated_at":"2023-02-23T16:37:03Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"There are 2 ways to init the signatures. One is to initiate with\r\n ```signer.Init(sigName, nil)``` \r\nAfter that, a keypair can be generated with \r\n```signer.GenerateKeyPair()``` \r\nwhich returns the public key. \r\n\r\nThe second way is to initiate with: \r\n```signer.Init(sigName, secretKeyBytes)```\r\n\r\nThis function doesn't return a public key. I also didn't find a function like:\r\n```signer.publicKey()```\r\n\r\nIs there a best practice for extracting the public key? It would be great if this function would be part of the liboqs-go library. ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1401/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1401/timeline","performed_via_github_app":null,"state_reason":"reopened"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1442085640","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1401#issuecomment-1442085640","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1401","id":1442085640,"node_id":"IC_kwDOA-eq3c5V9HsI","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2023-02-23T16:37:03Z","updated_at":"2023-02-23T16:37:03Z","author_association":"MEMBER","body":"I agree with Michael, I'm not inclined to add an API that can only be implemented by some algorithms.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1442085640/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-23T16:37:03Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27291787979","type":"IssueCommentEvent","actor":{"id":13785747,"login":"beldmit","display_login":"beldmit","gravatar_id":"","url":"https://api.github.com/users/beldmit","avatar_url":"https://avatars.githubusercontent.com/u/13785747?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1389","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1389/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1389/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1389/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1389","id":1582748815,"node_id":"I_kwDOA-eq3c5eVtSP","number":1389,"title":"F38/Fedora rawhide test failures","user":{"login":"beldmit","id":13785747,"node_id":"MDQ6VXNlcjEzNzg1NzQ3","avatar_url":"https://avatars.githubusercontent.com/u/13785747?v=4","gravatar_id":"","url":"https://api.github.com/users/beldmit","html_url":"https://github.com/beldmit","followers_url":"https://api.github.com/users/beldmit/followers","following_url":"https://api.github.com/users/beldmit/following{/other_user}","gists_url":"https://api.github.com/users/beldmit/gists{/gist_id}","starred_url":"https://api.github.com/users/beldmit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/beldmit/subscriptions","organizations_url":"https://api.github.com/users/beldmit/orgs","repos_url":"https://api.github.com/users/beldmit/repos","events_url":"https://api.github.com/users/beldmit/events{/privacy}","received_events_url":"https://api.github.com/users/beldmit/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":39,"created_at":"2023-02-13T17:15:09Z","updated_at":"2023-02-23T17:06:28Z","closed_at":"2023-02-23T17:06:27Z","author_association":"NONE","active_lock_reason":null,"body":"Dear colleagues,\r\n\r\nI came across a test failure on Fedora 38 and fedora rawhide. We use the 0.7.2 release \r\n\r\nhttps://copr.fedorainfracloud.org/coprs/g/fedora-review/fedora-review-2168929-liboqs/build/5521897/ is the build in question. https://download.copr.fedorainfracloud.org/results/@fedora-review/fedora-review-2168929-liboqs/fedora-rawhide-x86_64/05521897-liboqs/builder-live.log.gz is a log file with errors.\r\n\r\nCould you please take a look? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1389/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1389/timeline","performed_via_github_app":null,"state_reason":"completed"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1442130359","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1389#issuecomment-1442130359","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1389","id":1442130359,"node_id":"IC_kwDOA-eq3c5V9Sm3","user":{"login":"beldmit","id":13785747,"node_id":"MDQ6VXNlcjEzNzg1NzQ3","avatar_url":"https://avatars.githubusercontent.com/u/13785747?v=4","gravatar_id":"","url":"https://api.github.com/users/beldmit","html_url":"https://github.com/beldmit","followers_url":"https://api.github.com/users/beldmit/followers","following_url":"https://api.github.com/users/beldmit/following{/other_user}","gists_url":"https://api.github.com/users/beldmit/gists{/gist_id}","starred_url":"https://api.github.com/users/beldmit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/beldmit/subscriptions","organizations_url":"https://api.github.com/users/beldmit/orgs","repos_url":"https://api.github.com/users/beldmit/repos","events_url":"https://api.github.com/users/beldmit/events{/privacy}","received_events_url":"https://api.github.com/users/beldmit/received_events","type":"User","site_admin":false},"created_at":"2023-02-23T17:06:27Z","updated_at":"2023-02-23T17:06:27Z","author_association":"NONE","body":"Found a bug in my specfile. Thanks for your patience, sorry for disturbing.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1442130359/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-23T17:06:28Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27292308160","type":"IssueCommentEvent","actor":{"id":24617764,"login":"csosto-pk","display_login":"csosto-pk","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","avatar_url":"https://avatars.githubusercontent.com/u/24617764?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/136","id":1592791838,"node_id":"I_kwDOBsoLV85e8BMe","number":136,"title":"PQ-hybrid key exchange encodings","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2023-02-21T04:56:06Z","updated_at":"2023-02-23T17:27:23Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\n\r\nAs we are interop testing we found an issue in how OQS OpenSSH encodes the exchanged keys.\r\n\r\nThe way it works today in OQS OpenSSH, the shared secret is `K = HASH((PQ shared key) || (ECDH shared key))`\r\n- The ```PQ shared key``` is encoded as raw data (`byte` in the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 ). \r\n- The ```ECDH shared key``` is encoded as ```mpint``` as per the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 . That is probably because that it was done previously as per RFC4253 and because the exchanged ECDH shared key is a big integer and `K` ended up being `mpint`. \r\n- `K = HASH((PQ shared key) || (ECDH shared key))` is used as a `byte` array for deriving encryption keys for SSH https://github.com/open-quantum-safe/openssh/blob/92c59cf2f25fb32b21ce8d7b11a8af246ea17062/kexoqsecdh.c#L94 \r\n\r\nThe PQ SSH draft is currently a little ambiguous on this, and I will update it to be more prescriptive, but we want to make a suggestion here to make sure we are all implementers on the same page: \r\n\r\nBoth ```PQ shared key``` and ```ECDH shared key``` would rather be a simple `byte` array padded to the nearest byte boundary. Previously `mpint` worked because ```ECDH shared key``` was going directly into `K`, but that is not the case any more. ```PQ shared key``` and ```ECDH shared key``` go into a hash, so they ought to be raw data, fixed-length, simple `byte` array padded to the nearest byte boundary. Using `mpint` for one shared key and raw data for the other is inconsistent and `mpint` adds some predictability into the content of the hash input buffer. \r\n\r\nBtw, that is what OpenSSH does with its X25519+SNTRU PQ-hybrid key exchange method. \r\n\r\n@dstebila , @baentsch , @christianpaquin , what do you think? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1442162350","html_url":"https://github.com/open-quantum-safe/openssh/issues/136#issuecomment-1442162350","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","id":1442162350,"node_id":"IC_kwDOBsoLV85V9aau","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"created_at":"2023-02-23T17:27:22Z","updated_at":"2023-02-23T17:27:22Z","author_association":"NONE","body":"Thx @dstebila , \r\n\r\n> In other words, if the top 8 bits of one particular shared secret are all zero, that is still encoded in a byte array of the same length as a shared secret where there top 8 bits were not all zero?\r\n\r\nExactly.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1442162350/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-23T17:27:23Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27292839329","type":"IssueCommentEvent","actor":{"id":24617764,"login":"csosto-pk","display_login":"csosto-pk","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","avatar_url":"https://avatars.githubusercontent.com/u/24617764?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/136","id":1592791838,"node_id":"I_kwDOBsoLV85e8BMe","number":136,"title":"PQ-hybrid key exchange encodings","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2023-02-21T04:56:06Z","updated_at":"2023-02-23T17:50:27Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\n\r\nAs we are interop testing we found an issue in how OQS OpenSSH encodes the exchanged keys.\r\n\r\nThe way it works today in OQS OpenSSH, the shared secret is `K = HASH((PQ shared key) || (ECDH shared key))`\r\n- The ```PQ shared key``` is encoded as raw data (`byte` in the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 ). \r\n- The ```ECDH shared key``` is encoded as ```mpint``` as per the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 . That is probably because that it was done previously as per RFC4253 and because the exchanged ECDH shared key is a big integer and `K` ended up being `mpint`. \r\n- `K = HASH((PQ shared key) || (ECDH shared key))` is used as a `byte` array for deriving encryption keys for SSH https://github.com/open-quantum-safe/openssh/blob/92c59cf2f25fb32b21ce8d7b11a8af246ea17062/kexoqsecdh.c#L94 \r\n\r\nThe PQ SSH draft is currently a little ambiguous on this, and I will update it to be more prescriptive, but we want to make a suggestion here to make sure we are all implementers on the same page: \r\n\r\nBoth ```PQ shared key``` and ```ECDH shared key``` would rather be a simple `byte` array padded to the nearest byte boundary. Previously `mpint` worked because ```ECDH shared key``` was going directly into `K`, but that is not the case any more. ```PQ shared key``` and ```ECDH shared key``` go into a hash, so they ought to be raw data, fixed-length, simple `byte` array padded to the nearest byte boundary. Using `mpint` for one shared key and raw data for the other is inconsistent and `mpint` adds some predictability into the content of the hash input buffer. \r\n\r\nBtw, that is what OpenSSH does with its X25519+SNTRU PQ-hybrid key exchange method. \r\n\r\n@dstebila , @baentsch , @christianpaquin , what do you think? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1442191423","html_url":"https://github.com/open-quantum-safe/openssh/issues/136#issuecomment-1442191423","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","id":1442191423,"node_id":"IC_kwDOBsoLV85V9hg_","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"created_at":"2023-02-23T17:50:27Z","updated_at":"2023-02-23T17:50:27Z","author_association":"NONE","body":"For completeness, I added [text in the draft to](https://github.com/csosto-pk/pq-ssh/blob/master/draft-kampanakis-ssh-pq-ke.txt) be more prescriptive about it. It now reads \r\n\r\n>   The ECDH shared secret was traditionally encoded as an integer as per\r\n>   [RFC4253], [RFC5656], and [RFC8731] and used in deriving the key.  In\r\n>   this specification, the two shared secrets, K_PQ and K_CL, are fed\r\n>   into the hash function to derive K.  Thus, K_PQ and K_CL are encoded\r\n>   **as fixed-length byte arrays, not as integers**.  Byte arrays are\r\n>   defined in Section 5 of [RFC4251] padded to fixed-length.\r\n\r\n>  K, the shared secret used in H, was traditionally encoded as an\r\n>  integer (mpint) as per [RFC4253], [RFC5656], and [RFC8731].  In this\r\n>  specification, K is the hash output of the **two concatenated byte**\r\n>  **arrays (Section 2.4) which is not an integer.  Thus, K is encoded as**\r\n>  **a string** using the process described in Section 5 of [RFC4251] and is\r\n>  then fed along with other data in H to the key exchange method's HASH\r\n>  function to generate encryption keys.\r\n   ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1442191423/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-02-23T17:50:28Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
