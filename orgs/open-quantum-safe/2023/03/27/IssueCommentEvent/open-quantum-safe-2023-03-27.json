{"id":"28012469877","type":"IssueCommentEvent","actor":{"id":5923577,"login":"mouse07410","display_login":"mouse07410","gravatar_id":"","url":"https://api.github.com/users/mouse07410","avatar_url":"https://avatars.githubusercontent.com/u/5923577?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/17","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/17/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/17/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/17/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/17","id":844531551,"node_id":"MDU6SXNzdWU4NDQ1MzE1NTE=","number":17,"title":"Hybrid KEM: more combiners, more abstraction","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-30T13:15:07Z","updated_at":"2023-03-27T19:43:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Follow-up after #16:\r\n\r\n- So far, the shared secret uses \"Comb-Concat\" as described in https://tools.ietf.org/html/draft-ietf-tls-hybrid-design-01#appendix-B.4.1. The same is done in OSSL111. This is suitable for inputting the shared secret to the TLS 1.3 key schedule. Compared to the implementation in OSSL111, the oqs-provider can also be used outside a TLS context. For this purpose, a method like \"Comb-KDF\" would be useful.\r\n- Investigate using more OSSL3 API to allow more flexible combination of hybrid schemes:\r\n -> query algorithm parameters (secret-, ciphertext-, key-lengths) with provider API\r\n -> define individual algorithms for hybrid KEM in an array\r\n -> unify initialization of EVP-ECP and EVP-ECX code","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/17/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/17/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1485763234","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/17#issuecomment-1485763234","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/17","id":1485763234,"node_id":"IC_kwDOE_A9l85YjvKi","user":{"login":"mouse07410","id":5923577,"node_id":"MDQ6VXNlcjU5MjM1Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/5923577?v=4","gravatar_id":"","url":"https://api.github.com/users/mouse07410","html_url":"https://github.com/mouse07410","followers_url":"https://api.github.com/users/mouse07410/followers","following_url":"https://api.github.com/users/mouse07410/following{/other_user}","gists_url":"https://api.github.com/users/mouse07410/gists{/gist_id}","starred_url":"https://api.github.com/users/mouse07410/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mouse07410/subscriptions","organizations_url":"https://api.github.com/users/mouse07410/orgs","repos_url":"https://api.github.com/users/mouse07410/repos","events_url":"https://api.github.com/users/mouse07410/events{/privacy}","received_events_url":"https://api.github.com/users/mouse07410/received_events","type":"User","site_admin":false},"created_at":"2023-03-27T19:43:34Z","updated_at":"2023-03-27T19:43:34Z","author_association":"NONE","body":"IMHO, from practical point of view, a construct like \r\n```\r\nK = KDF (SS1 || SS2 || ... || SSn)\r\n```\r\nis hard to beat, both security-wise and simplicity-wise. I don't think we need anything more elaborated, though a few details should be written down, like fixed length of each shared secret.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1485763234/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-27T19:43:34Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
