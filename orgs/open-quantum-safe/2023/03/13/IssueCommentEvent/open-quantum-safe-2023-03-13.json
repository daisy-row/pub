{"id":"27669154179","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":218087071,"name":"open-quantum-safe/oqs-demos","url":"https://api.github.com/repos/open-quantum-safe/oqs-demos"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/events","html_url":"https://github.com/open-quantum-safe/oqs-demos/issues/183","id":1601006073,"node_id":"I_kwDODP--n85fbWn5","number":183,"title":"error when using openvpn with OQS signature","user":{"login":"k-Artin","id":120385775,"node_id":"U_kgDOByzw7w","avatar_url":"https://avatars.githubusercontent.com/u/120385775?v=4","gravatar_id":"","url":"https://api.github.com/users/k-Artin","html_url":"https://github.com/k-Artin","followers_url":"https://api.github.com/users/k-Artin/followers","following_url":"https://api.github.com/users/k-Artin/following{/other_user}","gists_url":"https://api.github.com/users/k-Artin/gists{/gist_id}","starred_url":"https://api.github.com/users/k-Artin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/k-Artin/subscriptions","organizations_url":"https://api.github.com/users/k-Artin/orgs","repos_url":"https://api.github.com/users/k-Artin/repos","events_url":"https://api.github.com/users/k-Artin/events{/privacy}","received_events_url":"https://api.github.com/users/k-Artin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":22,"created_at":"2023-02-27T11:32:20Z","updated_at":"2023-03-13T06:02:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"hello \r\ni am getting the following error when using openvpn with OQS signature:\r\n\r\n2023-02-27 13:18:36 us=339169 Control Channel: TLSv1.3, cipher TLSv1.3 TLS_AES_256_GCM_SHA384, peer certificate: 256 bit unknown type, signature: p521_falcon1024\r\n2023-02-27 13:18:36 us=362887 [test server] Peer Connection Initiated with [AF_INET]myip:2234\r\n2023-02-27 13:18:36 us=365937 OpenSSL: error:04000065:object identifier routines::unknown nid\r\n2023-02-27 13:18:36 us=368782 TLS_ERROR: BIO read tls_read_plaintext error\r\n2023-02-27 13:18:36 us=371915 TLS Error: TLS object -> incoming plaintext read error\r\n2023-02-27 13:18:36 us=374594 TLS Error: TLS handshake failed\r\n2023-02-27 13:18:36 us=377651 Fatal TLS error (check_tls_errors_co), restarting\r\n2023-02-27 13:18:36 us=380265 TCP/UDP: Closing socket\r\n\r\nthe signature algorithm is p521_falcon1024 and the key of CA certificate، server key and server certificate is p521_falcon1024.\r\nI can communicate between the openssl s_server and openssl s_client with this certificates and keys.\r\nthe openssl and openvpn version is :\r\nopenssl 3.2.0-dev\r\nOpenVPN 2.7_git\r\n\r\nand the OS is windows 10.\r\n\r\ni think something wrong.\r\nThank you in advance!","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/comments/1465562909","html_url":"https://github.com/open-quantum-safe/oqs-demos/issues/183#issuecomment-1465562909","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183","id":1465562909,"node_id":"IC_kwDODP--n85XWrcd","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-03-13T06:02:57Z","updated_at":"2023-03-13T06:02:57Z","author_association":"MEMBER","body":"> thank you this is working.\r\n\r\nThanks for confirming this solves the issue for you.\r\n\r\n>  this error shouldn't happen. (Just because of verb option )\r\n\r\nCorrect. It should not happen. As I wrote before:\r\n\r\n> triggers an error in OpenSSLv3 (not properly displaying a provided signature algorithm). \r\n\r\nTo your comment; \r\n\r\n> are you see any issue or community talking about that???\r\n\r\nNot yet. We'll need to create a stand-alone reproducer for this and raise an issue in OpenSSL.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/comments/1465562909/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-13T06:02:58Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27686035297","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":218087071,"name":"open-quantum-safe/oqs-demos","url":"https://api.github.com/repos/open-quantum-safe/oqs-demos"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/events","html_url":"https://github.com/open-quantum-safe/oqs-demos/issues/183","id":1601006073,"node_id":"I_kwDODP--n85fbWn5","number":183,"title":"error when using openvpn with OQS signature","user":{"login":"k-Artin","id":120385775,"node_id":"U_kgDOByzw7w","avatar_url":"https://avatars.githubusercontent.com/u/120385775?v=4","gravatar_id":"","url":"https://api.github.com/users/k-Artin","html_url":"https://github.com/k-Artin","followers_url":"https://api.github.com/users/k-Artin/followers","following_url":"https://api.github.com/users/k-Artin/following{/other_user}","gists_url":"https://api.github.com/users/k-Artin/gists{/gist_id}","starred_url":"https://api.github.com/users/k-Artin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/k-Artin/subscriptions","organizations_url":"https://api.github.com/users/k-Artin/orgs","repos_url":"https://api.github.com/users/k-Artin/repos","events_url":"https://api.github.com/users/k-Artin/events{/privacy}","received_events_url":"https://api.github.com/users/k-Artin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":23,"created_at":"2023-02-27T11:32:20Z","updated_at":"2023-03-13T17:07:52Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"hello \r\ni am getting the following error when using openvpn with OQS signature:\r\n\r\n2023-02-27 13:18:36 us=339169 Control Channel: TLSv1.3, cipher TLSv1.3 TLS_AES_256_GCM_SHA384, peer certificate: 256 bit unknown type, signature: p521_falcon1024\r\n2023-02-27 13:18:36 us=362887 [test server] Peer Connection Initiated with [AF_INET]myip:2234\r\n2023-02-27 13:18:36 us=365937 OpenSSL: error:04000065:object identifier routines::unknown nid\r\n2023-02-27 13:18:36 us=368782 TLS_ERROR: BIO read tls_read_plaintext error\r\n2023-02-27 13:18:36 us=371915 TLS Error: TLS object -> incoming plaintext read error\r\n2023-02-27 13:18:36 us=374594 TLS Error: TLS handshake failed\r\n2023-02-27 13:18:36 us=377651 Fatal TLS error (check_tls_errors_co), restarting\r\n2023-02-27 13:18:36 us=380265 TCP/UDP: Closing socket\r\n\r\nthe signature algorithm is p521_falcon1024 and the key of CA certificate، server key and server certificate is p521_falcon1024.\r\nI can communicate between the openssl s_server and openssl s_client with this certificates and keys.\r\nthe openssl and openvpn version is :\r\nopenssl 3.2.0-dev\r\nOpenVPN 2.7_git\r\n\r\nand the OS is windows 10.\r\n\r\ni think something wrong.\r\nThank you in advance!","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/comments/1466552917","html_url":"https://github.com/open-quantum-safe/oqs-demos/issues/183#issuecomment-1466552917","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183","id":1466552917,"node_id":"IC_kwDODP--n85XadJV","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-03-13T17:07:51Z","updated_at":"2023-03-13T17:07:51Z","author_association":"MEMBER","body":"> Not yet. We'll need to create a stand-alone reproducer for this and raise an issue in OpenSSL.\r\n\r\nIn case you're interested @k-Artin, I did this now & here's a pointer to a possible fix (and background discussion in the issue): https://github.com/openssl/openssl/pull/20501","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/comments/1466552917/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-13T17:07:52Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27687321477","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/136","id":1592791838,"node_id":"I_kwDOBsoLV85e8BMe","number":136,"title":"PQ-hybrid key exchange encodings","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2023-02-21T04:56:06Z","updated_at":"2023-03-13T17:59:56Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\n\r\nAs we are interop testing we found an issue in how OQS OpenSSH encodes the exchanged keys.\r\n\r\nThe way it works today in OQS OpenSSH, the shared secret is `K = HASH((PQ shared key) || (ECDH shared key))`\r\n- The ```PQ shared key``` is encoded as raw data (`byte` in the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 ). \r\n- The ```ECDH shared key``` is encoded as ```mpint``` as per the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 . That is probably because that it was done previously as per RFC4253 and because the exchanged ECDH shared key is a big integer and `K` ended up being `mpint`. \r\n- `K = HASH((PQ shared key) || (ECDH shared key))` is used as a `byte` array for deriving encryption keys for SSH https://github.com/open-quantum-safe/openssh/blob/92c59cf2f25fb32b21ce8d7b11a8af246ea17062/kexoqsecdh.c#L94 \r\n\r\nThe PQ SSH draft is currently a little ambiguous on this, and I will update it to be more prescriptive, but we want to make a suggestion here to make sure we are all implementers on the same page: \r\n\r\nBoth ```PQ shared key``` and ```ECDH shared key``` would rather be a simple `byte` array padded to the nearest byte boundary. Previously `mpint` worked because ```ECDH shared key``` was going directly into `K`, but that is not the case any more. ```PQ shared key``` and ```ECDH shared key``` go into a hash, so they ought to be raw data, fixed-length, simple `byte` array padded to the nearest byte boundary. Using `mpint` for one shared key and raw data for the other is inconsistent and `mpint` adds some predictability into the content of the hash input buffer. \r\n\r\nBtw, that is what OpenSSH does with its X25519+SNTRU PQ-hybrid key exchange method. \r\n\r\n@dstebila , @baentsch , @christianpaquin , what do you think? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1466641727","html_url":"https://github.com/open-quantum-safe/openssh/issues/136#issuecomment-1466641727","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","id":1466641727,"node_id":"IC_kwDOBsoLV85Xay0_","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2023-03-13T17:59:56Z","updated_at":"2023-03-13T17:59:56Z","author_association":"MEMBER","body":"Okay, then I'd propose we rename the hybrid KEX methods effective as of this PR with\r\n\r\n`ecdh-nistp256-kyber-512-r4-hybrid-d00-sha256@openquantumsafe.org`\r\n\r\nwhere the components in the name are:\r\n\r\n- the elliptic curve `ecdh-nistp256`\r\n- the PQ algorithm `kyber-512`\r\n- the PQ algorithm version `r4`\r\n- the keyword `hybrid`\r\n- `d` followed by the hybrid draft version `00`\r\n- the hash function `sha256`\r\n- domain name for non-standard method: `@openquantumsafe.org`\r\n\r\nThe only annoying thing for updating the PR might be putting in the algorithm version for all the PQ algorithms, I'm not sure if it's available in the metadata file yet or not.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1466641727/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-13T17:59:57Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27689567900","type":"IssueCommentEvent","actor":{"id":24617764,"login":"csosto-pk","display_login":"csosto-pk","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","avatar_url":"https://avatars.githubusercontent.com/u/24617764?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/136","id":1592791838,"node_id":"I_kwDOBsoLV85e8BMe","number":136,"title":"PQ-hybrid key exchange encodings","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":17,"created_at":"2023-02-21T04:56:06Z","updated_at":"2023-03-13T19:39:25Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\n\r\nAs we are interop testing we found an issue in how OQS OpenSSH encodes the exchanged keys.\r\n\r\nThe way it works today in OQS OpenSSH, the shared secret is `K = HASH((PQ shared key) || (ECDH shared key))`\r\n- The ```PQ shared key``` is encoded as raw data (`byte` in the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 ). \r\n- The ```ECDH shared key``` is encoded as ```mpint``` as per the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 . That is probably because that it was done previously as per RFC4253 and because the exchanged ECDH shared key is a big integer and `K` ended up being `mpint`. \r\n- `K = HASH((PQ shared key) || (ECDH shared key))` is used as a `byte` array for deriving encryption keys for SSH https://github.com/open-quantum-safe/openssh/blob/92c59cf2f25fb32b21ce8d7b11a8af246ea17062/kexoqsecdh.c#L94 \r\n\r\nThe PQ SSH draft is currently a little ambiguous on this, and I will update it to be more prescriptive, but we want to make a suggestion here to make sure we are all implementers on the same page: \r\n\r\nBoth ```PQ shared key``` and ```ECDH shared key``` would rather be a simple `byte` array padded to the nearest byte boundary. Previously `mpint` worked because ```ECDH shared key``` was going directly into `K`, but that is not the case any more. ```PQ shared key``` and ```ECDH shared key``` go into a hash, so they ought to be raw data, fixed-length, simple `byte` array padded to the nearest byte boundary. Using `mpint` for one shared key and raw data for the other is inconsistent and `mpint` adds some predictability into the content of the hash input buffer. \r\n\r\nBtw, that is what OpenSSH does with its X25519+SNTRU PQ-hybrid key exchange method. \r\n\r\n@dstebila , @baentsch , @christianpaquin , what do you think? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1466842818","html_url":"https://github.com/open-quantum-safe/openssh/issues/136#issuecomment-1466842818","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","id":1466842818,"node_id":"IC_kwDOBsoLV85Xbj7C","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"created_at":"2023-03-13T19:39:25Z","updated_at":"2023-03-13T19:39:25Z","author_association":"NONE","body":"> Okay, then I'd propose we rename the hybrid KEX methods effective as of this PR with\r\n\r\nYou mean, in the next backwards compatibility breaking iteration, right?\r\n\r\nI would suggest to lose ```hybrid``` for brevity, as the existence of ```ecdh-nistp256``` and ```kyber-512``` implies it already. ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1466842818/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-13T19:39:26Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27689751785","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/136","id":1592791838,"node_id":"I_kwDOBsoLV85e8BMe","number":136,"title":"PQ-hybrid key exchange encodings","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":18,"created_at":"2023-02-21T04:56:06Z","updated_at":"2023-03-13T19:48:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\n\r\nAs we are interop testing we found an issue in how OQS OpenSSH encodes the exchanged keys.\r\n\r\nThe way it works today in OQS OpenSSH, the shared secret is `K = HASH((PQ shared key) || (ECDH shared key))`\r\n- The ```PQ shared key``` is encoded as raw data (`byte` in the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 ). \r\n- The ```ECDH shared key``` is encoded as ```mpint``` as per the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 . That is probably because that it was done previously as per RFC4253 and because the exchanged ECDH shared key is a big integer and `K` ended up being `mpint`. \r\n- `K = HASH((PQ shared key) || (ECDH shared key))` is used as a `byte` array for deriving encryption keys for SSH https://github.com/open-quantum-safe/openssh/blob/92c59cf2f25fb32b21ce8d7b11a8af246ea17062/kexoqsecdh.c#L94 \r\n\r\nThe PQ SSH draft is currently a little ambiguous on this, and I will update it to be more prescriptive, but we want to make a suggestion here to make sure we are all implementers on the same page: \r\n\r\nBoth ```PQ shared key``` and ```ECDH shared key``` would rather be a simple `byte` array padded to the nearest byte boundary. Previously `mpint` worked because ```ECDH shared key``` was going directly into `K`, but that is not the case any more. ```PQ shared key``` and ```ECDH shared key``` go into a hash, so they ought to be raw data, fixed-length, simple `byte` array padded to the nearest byte boundary. Using `mpint` for one shared key and raw data for the other is inconsistent and `mpint` adds some predictability into the content of the hash input buffer. \r\n\r\nBtw, that is what OpenSSH does with its X25519+SNTRU PQ-hybrid key exchange method. \r\n\r\n@dstebila , @baentsch , @christianpaquin , what do you think? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1466857735","html_url":"https://github.com/open-quantum-safe/openssh/issues/136#issuecomment-1466857735","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","id":1466857735,"node_id":"IC_kwDOBsoLV85XbnkH","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2023-03-13T19:48:20Z","updated_at":"2023-03-13T19:48:20Z","author_association":"MEMBER","body":"> > Okay, then I'd propose we rename the hybrid KEX methods effective as of this PR with\r\n> \r\n> You mean, in the next backwards compatibility breaking iteration, right?\r\n\r\nWell, this is a compatibility-breaking iteration?  Not compatibility-breaking in terms of the algorithm versions, but compatibility-breaking in terms of the hybrid mechanism.  Unless I misunderstood?\r\n\r\n> I would suggest to lose `hybrid` for brevity, as the existence of `ecdh-nistp256` and `kyber-512` implies it already.\r\n\r\nYes... I was just concerned with ensuring that the `d00` is clearly the version identifier for the hybridization draft, rather than the Kyber draft.  Perhaps I'm overthinking things. ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1466857735/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-13T19:48:21Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
