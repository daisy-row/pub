{"id":"27563098220","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1414","id":1611134006,"node_id":"PR_kwDOA-eq3c5LWoKw","number":1414,"title":"add merge group","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2023-03-06T10:47:26Z","updated_at":"2023-03-08T00:15:48Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1414","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1414","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1414.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1414.patch","merged_at":null},"body":"Adds the use of Github action merge groups as per https://github.com/open-quantum-safe/liboqs/pull/1400#issuecomment-1453292004\r\n\r\nMay completely replace weekly testing if everyone agrees this is a good approach (and it works as advertised :).\r\n\r\n* [no] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [no] Does this PR change the the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider), [OQS-OpenSSL](https://github.com/open-quantum-safe/openssl), [OQS-BoringSSL](https://github.com/open-quantum-safe/boringssl), and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1459070628","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1414#issuecomment-1459070628","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414","id":1459070628,"node_id":"IC_kwDOA-eq3c5W96ak","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2023-03-08T00:15:48Z","updated_at":"2023-03-08T00:15:48Z","author_association":"MEMBER","body":"> > I don't think any of the options will help. Here's a screenshot of the available options, none of them look like obvious helpers to me.\r\n> \r\n> Well, the first one shows it's using Squash-and-merge by default (just without the ability to edit the combined merge message): Is there a \"Squash-and-merge-with-edit\" option? If not, maybe we should suggest that feature -- and/or drop our use of merge queues. What's your opinion? At the core, lots of effort to save committers from themselves (having to fix bugs emerging in the weekly run that would be obvious if they'd run that single test locally).\r\n\r\nThe options are \"Merge commit\", \"Squash and merge\", or \"Rebase and merge\".  \r\n\r\nIf we want to edit the main merge commit title, I think we can do that by editing the Pull Request title first, and it will just use that.  But as for the longer merge commit comment, I don't think there'll be any way to clean that up.\r\n\r\n> > As for the AppVeyor fail, I don't know why the requested branch is not available from AppVeyor's perspective. One could probably set up the AppVeyor configuration to be skipped on branches matching this naming convention, but that's a workaround, not a solution.\r\n> \r\n> Agree. \"Funny\" thing: After the merge was done, AppVeyor ran again on `main` -- and ran OK. So the \"intermediate AppVeyor failure\" isn't really one (i.e., the last merge CI run is OK as it should be). [The documentation](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue#triggering-merge-group-checks-with-other-ci-providers) suggests creating such \"work-around\", but then again, why? If AppVeyor doesn't properly run on these temporary branches, I'd call it goodness: It _should_ run only once (on `main`) -- and that it does. So I'd consider this not a problem.\r\n\r\nOkay, so we'd need to implement this workaround to tell AppVeyor not to run on these temporary branches?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1459070628/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-08T00:15:48Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27566067356","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1414","id":1611134006,"node_id":"PR_kwDOA-eq3c5LWoKw","number":1414,"title":"add merge group","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2023-03-06T10:47:26Z","updated_at":"2023-03-08T03:58:12Z","closed_at":"2023-03-08T03:58:11Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1414","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1414","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1414.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1414.patch","merged_at":null},"body":"Adds the use of Github action merge groups as per https://github.com/open-quantum-safe/liboqs/pull/1400#issuecomment-1453292004\r\n\r\nMay completely replace weekly testing if everyone agrees this is a good approach (and it works as advertised :).\r\n\r\n* [no] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [no] Does this PR change the the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider), [OQS-OpenSSL](https://github.com/open-quantum-safe/openssl), [OQS-BoringSSL](https://github.com/open-quantum-safe/boringssl), and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1459375677","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1414#issuecomment-1459375677","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414","id":1459375677,"node_id":"IC_kwDOA-eq3c5W_E49","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-03-08T03:58:11Z","updated_at":"2023-03-08T03:58:11Z","author_association":"MEMBER","body":"> But as for the longer merge commit comment, I don't think there'll be any way to clean that up.\r\n\r\nI'd then consider this feature to create an unduly unreadable commit log and suggest to disable merge groups again. Closing this PR in turn.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1459375677/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-08T03:58:12Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27574166139","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":218087071,"name":"open-quantum-safe/oqs-demos","url":"https://api.github.com/repos/open-quantum-safe/oqs-demos"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/events","html_url":"https://github.com/open-quantum-safe/oqs-demos/issues/183","id":1601006073,"node_id":"I_kwDODP--n85fbWn5","number":183,"title":"error when using openvpn with OQS signature","user":{"login":"k-Artin","id":120385775,"node_id":"U_kgDOByzw7w","avatar_url":"https://avatars.githubusercontent.com/u/120385775?v=4","gravatar_id":"","url":"https://api.github.com/users/k-Artin","html_url":"https://github.com/k-Artin","followers_url":"https://api.github.com/users/k-Artin/followers","following_url":"https://api.github.com/users/k-Artin/following{/other_user}","gists_url":"https://api.github.com/users/k-Artin/gists{/gist_id}","starred_url":"https://api.github.com/users/k-Artin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/k-Artin/subscriptions","organizations_url":"https://api.github.com/users/k-Artin/orgs","repos_url":"https://api.github.com/users/k-Artin/repos","events_url":"https://api.github.com/users/k-Artin/events{/privacy}","received_events_url":"https://api.github.com/users/k-Artin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":20,"created_at":"2023-02-27T11:32:20Z","updated_at":"2023-03-08T11:40:36Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"hello \r\ni am getting the following error when using openvpn with OQS signature:\r\n\r\n2023-02-27 13:18:36 us=339169 Control Channel: TLSv1.3, cipher TLSv1.3 TLS_AES_256_GCM_SHA384, peer certificate: 256 bit unknown type, signature: p521_falcon1024\r\n2023-02-27 13:18:36 us=362887 [test server] Peer Connection Initiated with [AF_INET]myip:2234\r\n2023-02-27 13:18:36 us=365937 OpenSSL: error:04000065:object identifier routines::unknown nid\r\n2023-02-27 13:18:36 us=368782 TLS_ERROR: BIO read tls_read_plaintext error\r\n2023-02-27 13:18:36 us=371915 TLS Error: TLS object -> incoming plaintext read error\r\n2023-02-27 13:18:36 us=374594 TLS Error: TLS handshake failed\r\n2023-02-27 13:18:36 us=377651 Fatal TLS error (check_tls_errors_co), restarting\r\n2023-02-27 13:18:36 us=380265 TCP/UDP: Closing socket\r\n\r\nthe signature algorithm is p521_falcon1024 and the key of CA certificate، server key and server certificate is p521_falcon1024.\r\nI can communicate between the openssl s_server and openssl s_client with this certificates and keys.\r\nthe openssl and openvpn version is :\r\nopenssl 3.2.0-dev\r\nOpenVPN 2.7_git\r\n\r\nand the OS is windows 10.\r\n\r\ni think something wrong.\r\nThank you in advance!","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/comments/1460031864","html_url":"https://github.com/open-quantum-safe/oqs-demos/issues/183#issuecomment-1460031864","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/183","id":1460031864,"node_id":"IC_kwDODP--n85XBlF4","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-03-08T11:40:36Z","updated_at":"2023-03-08T11:40:36Z","author_association":"MEMBER","body":"TLDR; will do an overhaul of the demo to allow everyone to select arbitrary PQ sig algs. If you're interested in the problem(s), read on.\r\n\r\n> >     VERIFY ERROR: could not extract CN from X509 subject string ('C=AU, ST=Some-State, O=Internet Widgits Pty Ltd') -- note that the field length is limited to 64 characters\r\n\r\n> if you notice to log messages, you can see that problem refer to length limitation. Can you find main reason of this problem? @baentsch\r\n\r\nYes. The problem you stated above:\r\n \r\n> I have not entered any CN , ST and etc in the certificate.\r\n\r\nThus, the error message is logical: \"could not extract CN from X509 subject string\". The length limitation statement is just \"FYI\" and irrelevant in this context (where you did not provide CN). This is the first error. A CN _must_ be provided.\r\n\r\nThen:\r\n\r\n> No. I test it, my setup script workes with RSA as a signature algorithm (openvpn with oqs-provider and kyber512) without any error.\r\n\r\nThe script works OK, agreed, but it does not create certificates in a form required for `openvpn` to work correctly: The certificates _must_ have ExtendedKeyUsage fields set as per [the documentation](https://openvpn.net/community-resources/how-to/#mitm). Your sample script does _not_ do that. Here is a corrected script that works (also not doing any prompting):\r\n\r\n```\r\nopenssl genpkey -algorithm $1 -out server_key.key && \\\r\nopenssl genpkey -algorithm $1 -out client_key.key && \\\r\nopenssl genpkey -algorithm $1 -out ca_key.key && \\\r\nopenssl req -key ca_key.key -x509 -subj \"/CN=oqsopenvpntest CA\" -config openvpn-openssl.cnf -out ca_cert.crt && \\\r\nopenssl req -new -key client_key.key -subj \"/CN=openvpnclient.openquantumsafe.org\" -config openvpn-openssl.cnf -out client_cert.csr && \\\r\nopenssl req -new -key server_key.key -subj \"/CN=openvpnserver.openquantumsafe.org\" -config openvpn-openssl.cnf -out server_cert.csr && \\\r\nopenssl x509 -req -in server_cert.csr -CA ca_cert.crt -CAkey ca_key.key -CAcreateserial -out server_cert.crt -extensions usr_cert -extfile openvpn-openssl.cnf && \\\r\nopenssl x509 -req -in client_cert.csr -CA ca_cert.crt -CAkey ca_key.key -out client_cert.crt -extensions usr_cert -extfile openvpn-openssl.cnf \r\n\r\n```\r\n\r\nEssential to the correct operation of that script (where the algorithm name is given as parameter) is an `openvpn-openssl.cnf` file with the following changes compared to the `openssl.cnf` that is currently embedded in the docker image:\r\n\r\n```\r\ndiff openvpn-openssl.cnf openssl.cnf \r\n177c177\r\n< req_extensions = v3_req # The extensions to add to a certificate request\r\n---\r\n> # req_extensions = v3_req # The extensions to add to a certificate request\r\n225,226c225\r\n< keyUsage = nonRepudiation, digitalSignature, keyEncipherment,keyAgreement\r\n< extendedKeyUsage        = serverAuth, clientAuth\r\n---\r\n> # keyUsage = nonRepudiation, digitalSignature, keyEncipherment\r\n250,251c249\r\n< extendedKeyUsage        = serverAuth, clientAuth\r\n< keyUsage = nonRepudiation, digitalSignature, keyEncipherment, keyAgreement\r\n---\r\n> keyUsage = nonRepudiation, digitalSignature, keyEncipherment\r\n270c268\r\n< keyUsage = cRLSign, keyCertSign\r\n---\r\n> # keyUsage = cRLSign, keyCertSign\r\n\r\n```\r\n\r\nWith these changes (to the creation of certificates), `openvpn` properly starts (both for \"rsa\" as well as any OQS signature algorithm) -- but only if the debug level is set to 0 (\"verb 0\" in both client and server config): The reason is that the debug message for \"Control Channel:\" triggers an error in OpenSSLv3 (not properly displaying a provided signature algorithm). I'll also create a reproducer for this independent of `openvpn` and fix this in the upstream code.\r\n\r\nThanks again for the report -- lots of moving pieces that need improvement....\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/comments/1460031864/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-08T11:40:36Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27575390476","type":"IssueCommentEvent","actor":{"id":105746808,"login":"Moeed148a","display_login":"Moeed148a","gravatar_id":"","url":"https://api.github.com/users/Moeed148a","avatar_url":"https://avatars.githubusercontent.com/u/105746808?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1413","id":1609783998,"node_id":"I_kwDOA-eq3c5f81q-","number":1413,"title":"Shared Library not found ","user":{"login":"Moeed148a","id":105746808,"node_id":"U_kgDOBk2ReA","avatar_url":"https://avatars.githubusercontent.com/u/105746808?v=4","gravatar_id":"","url":"https://api.github.com/users/Moeed148a","html_url":"https://github.com/Moeed148a","followers_url":"https://api.github.com/users/Moeed148a/followers","following_url":"https://api.github.com/users/Moeed148a/following{/other_user}","gists_url":"https://api.github.com/users/Moeed148a/gists{/gist_id}","starred_url":"https://api.github.com/users/Moeed148a/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Moeed148a/subscriptions","organizations_url":"https://api.github.com/users/Moeed148a/orgs","repos_url":"https://api.github.com/users/Moeed148a/repos","events_url":"https://api.github.com/users/Moeed148a/events{/privacy}","received_events_url":"https://api.github.com/users/Moeed148a/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2023-03-04T13:52:17Z","updated_at":"2023-03-08T12:36:41Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have followed all the step to import the liboqs library in python. Unfortunately when i try to run the library it shows the error (Shared library is not found). Kindly help me to resolve this issue.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1460090399","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1413#issuecomment-1460090399","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413","id":1460090399,"node_id":"IC_kwDOA-eq3c5XBzYf","user":{"login":"Moeed148a","id":105746808,"node_id":"U_kgDOBk2ReA","avatar_url":"https://avatars.githubusercontent.com/u/105746808?v=4","gravatar_id":"","url":"https://api.github.com/users/Moeed148a","html_url":"https://github.com/Moeed148a","followers_url":"https://api.github.com/users/Moeed148a/followers","following_url":"https://api.github.com/users/Moeed148a/following{/other_user}","gists_url":"https://api.github.com/users/Moeed148a/gists{/gist_id}","starred_url":"https://api.github.com/users/Moeed148a/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Moeed148a/subscriptions","organizations_url":"https://api.github.com/users/Moeed148a/orgs","repos_url":"https://api.github.com/users/Moeed148a/repos","events_url":"https://api.github.com/users/Moeed148a/events{/privacy}","received_events_url":"https://api.github.com/users/Moeed148a/received_events","type":"User","site_admin":false},"created_at":"2023-03-08T12:36:40Z","updated_at":"2023-03-08T12:36:40Z","author_association":"NONE","body":"Hello,\r\nCan you please share your email or any contact. So, i can show to problem. I need help as soon as possible. I shall be thankful to you.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1460090399/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-08T12:36:41Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27578235468","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1413","id":1609783998,"node_id":"I_kwDOA-eq3c5f81q-","number":1413,"title":"Shared Library not found ","user":{"login":"Moeed148a","id":105746808,"node_id":"U_kgDOBk2ReA","avatar_url":"https://avatars.githubusercontent.com/u/105746808?v=4","gravatar_id":"","url":"https://api.github.com/users/Moeed148a","html_url":"https://github.com/Moeed148a","followers_url":"https://api.github.com/users/Moeed148a/followers","following_url":"https://api.github.com/users/Moeed148a/following{/other_user}","gists_url":"https://api.github.com/users/Moeed148a/gists{/gist_id}","starred_url":"https://api.github.com/users/Moeed148a/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Moeed148a/subscriptions","organizations_url":"https://api.github.com/users/Moeed148a/orgs","repos_url":"https://api.github.com/users/Moeed148a/repos","events_url":"https://api.github.com/users/Moeed148a/events{/privacy}","received_events_url":"https://api.github.com/users/Moeed148a/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2023-03-04T13:52:17Z","updated_at":"2023-03-08T14:31:27Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have followed all the step to import the liboqs library in python. Unfortunately when i try to run the library it shows the error (Shared library is not found). Kindly help me to resolve this issue.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1460247521","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1413#issuecomment-1460247521","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413","id":1460247521,"node_id":"IC_kwDOA-eq3c5XCZvh","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-03-08T14:31:26Z","updated_at":"2023-03-08T14:31:26Z","author_association":"MEMBER","body":"So far, we always managed to solve things via github -- I'd be glad if we could do it the same way in your case, too. The big advantage is that everyone from the OQS team can look at the problem and help solve it. \r\n\r\nFinal comment, did you already try running `docker run -it openquantumsafe/python sh`? This gives you a ready-to-run dockerized OQS-enabled python environment.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1460247521/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-08T14:31:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27578313468","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1413","id":1609783998,"node_id":"I_kwDOA-eq3c5f81q-","number":1413,"title":"Shared Library not found ","user":{"login":"Moeed148a","id":105746808,"node_id":"U_kgDOBk2ReA","avatar_url":"https://avatars.githubusercontent.com/u/105746808?v=4","gravatar_id":"","url":"https://api.github.com/users/Moeed148a","html_url":"https://github.com/Moeed148a","followers_url":"https://api.github.com/users/Moeed148a/followers","following_url":"https://api.github.com/users/Moeed148a/following{/other_user}","gists_url":"https://api.github.com/users/Moeed148a/gists{/gist_id}","starred_url":"https://api.github.com/users/Moeed148a/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Moeed148a/subscriptions","organizations_url":"https://api.github.com/users/Moeed148a/orgs","repos_url":"https://api.github.com/users/Moeed148a/repos","events_url":"https://api.github.com/users/Moeed148a/events{/privacy}","received_events_url":"https://api.github.com/users/Moeed148a/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2023-03-04T13:52:17Z","updated_at":"2023-03-08T14:34:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have followed all the step to import the liboqs library in python. Unfortunately when i try to run the library it shows the error (Shared library is not found). Kindly help me to resolve this issue.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1460253915","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1413#issuecomment-1460253915","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1413","id":1460253915,"node_id":"IC_kwDOA-eq3c5XCbTb","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-03-08T14:34:22Z","updated_at":"2023-03-08T14:34:22Z","author_association":"MEMBER","body":"> Also, I use the docker to integrate the liboqs with python\r\n\r\nThat reminds me: Shouldn't this issue be rather raised in https://github.com/open-quantum-safe/liboqs-python/issues? And did you check out https://github.com/open-quantum-safe/liboqs-python/tree/main/docker ?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1460253915/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-08T14:34:22Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27579845696","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1414","id":1611134006,"node_id":"PR_kwDOA-eq3c5LWoKw","number":1414,"title":"add merge group","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2023-03-06T10:47:26Z","updated_at":"2023-03-08T15:30:09Z","closed_at":"2023-03-08T03:58:11Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1414","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1414","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1414.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1414.patch","merged_at":null},"body":"Adds the use of Github action merge groups as per https://github.com/open-quantum-safe/liboqs/pull/1400#issuecomment-1453292004\r\n\r\nMay completely replace weekly testing if everyone agrees this is a good approach (and it works as advertised :).\r\n\r\n* [no] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [no] Does this PR change the the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider), [OQS-OpenSSL](https://github.com/open-quantum-safe/openssl), [OQS-BoringSSL](https://github.com/open-quantum-safe/boringssl), and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1460336804","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1414#issuecomment-1460336804","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1414","id":1460336804,"node_id":"IC_kwDOA-eq3c5XCvik","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2023-03-08T15:30:09Z","updated_at":"2023-03-08T15:30:09Z","author_association":"MEMBER","body":"> > But as for the longer merge commit comment, I don't think there'll be any way to clean that up.\r\n> \r\n> I'd then consider this feature to create an unduly unreadable commit log and suggest to disable merge groups again. Closing this PR in turn.\r\n\r\nOkay, I've disabled merge queues.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1460336804/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-08T15:30:09Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27582629772","type":"IssueCommentEvent","actor":{"id":24617764,"login":"csosto-pk","display_login":"csosto-pk","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","avatar_url":"https://avatars.githubusercontent.com/u/24617764?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/136","id":1592791838,"node_id":"I_kwDOBsoLV85e8BMe","number":136,"title":"PQ-hybrid key exchange encodings","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2023-02-21T04:56:06Z","updated_at":"2023-03-08T17:14:14Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\n\r\nAs we are interop testing we found an issue in how OQS OpenSSH encodes the exchanged keys.\r\n\r\nThe way it works today in OQS OpenSSH, the shared secret is `K = HASH((PQ shared key) || (ECDH shared key))`\r\n- The ```PQ shared key``` is encoded as raw data (`byte` in the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 ). \r\n- The ```ECDH shared key``` is encoded as ```mpint``` as per the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 . That is probably because that it was done previously as per RFC4253 and because the exchanged ECDH shared key is a big integer and `K` ended up being `mpint`. \r\n- `K = HASH((PQ shared key) || (ECDH shared key))` is used as a `byte` array for deriving encryption keys for SSH https://github.com/open-quantum-safe/openssh/blob/92c59cf2f25fb32b21ce8d7b11a8af246ea17062/kexoqsecdh.c#L94 \r\n\r\nThe PQ SSH draft is currently a little ambiguous on this, and I will update it to be more prescriptive, but we want to make a suggestion here to make sure we are all implementers on the same page: \r\n\r\nBoth ```PQ shared key``` and ```ECDH shared key``` would rather be a simple `byte` array padded to the nearest byte boundary. Previously `mpint` worked because ```ECDH shared key``` was going directly into `K`, but that is not the case any more. ```PQ shared key``` and ```ECDH shared key``` go into a hash, so they ought to be raw data, fixed-length, simple `byte` array padded to the nearest byte boundary. Using `mpint` for one shared key and raw data for the other is inconsistent and `mpint` adds some predictability into the content of the hash input buffer. \r\n\r\nBtw, that is what OpenSSH does with its X25519+SNTRU PQ-hybrid key exchange method. \r\n\r\n@dstebila , @baentsch , @christianpaquin , what do you think? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1460523703","html_url":"https://github.com/open-quantum-safe/openssh/issues/136#issuecomment-1460523703","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","id":1460523703,"node_id":"IC_kwDOBsoLV85XDdK3","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"created_at":"2023-03-08T17:14:14Z","updated_at":"2023-03-08T17:14:14Z","author_association":"NONE","body":"Thx Douglas. \r\n\r\nHere is the [PR](https://github.com/csosto-pk/opensshpq-136)\r\n\r\n> Should we also rename the KEX methods?\r\n\r\nI changed my comment on this a couple of times. But given that the method names we have in there now, which include the word ```kyber```, will never conflict with the final names because NIST will rename the algorithm to ```mlwe-kem``` or something like that, I think it makes sense to keep it as is for now. No need to create more work for ourselves. \r\n\r\nIn the next iteration of the draft that breaks backwards compatibility, update the names to follow the new nomenclature ecdh-```nistp256-kyber-512r4-sha256-tbd2``` and ```x25519-kyber-512r4-sha256-tbd2``` or something like that. \r\n\r\nFeel free to close https://github.com/open-quantum-safe/openssh/issues/134 , I think we reached consensus on this. ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1460523703/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-08T17:14:14Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27583227289","type":"IssueCommentEvent","actor":{"id":24617764,"login":"csosto-pk","display_login":"csosto-pk","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","avatar_url":"https://avatars.githubusercontent.com/u/24617764?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/134","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/134/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/134/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/134/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/134","id":1570168583,"node_id":"I_kwDOBsoLV85dlt8H","number":134,"title":"PQ KEM method names per draft iteration","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2023-02-03T17:09:16Z","updated_at":"2023-03-08T17:39:17Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi folks, \r\n\r\nSome collaborators are trying to interop our PQ SSH key exchange in NIST NCCOE's PQ Migration effort. As we are working through this, we will all try to interop with the ```ecdh-nistp256-kyber-512-sha256```. It is supported in OQS OpenSSH and wolfSSH, which is great. \r\n\r\nNow there is one concern about backwards compatibility. Someone that implements the method name ```ecdh-nistp256-kyber-512-sha256``` today may have interop issues in a couple of years when Kyber has been slightly tweaked or something in the method has been tweaked in the draft and the peer implements the latest version. That is a concern for any RFC draft which changes over time. \r\n\r\nTo prevent such problems we could introduce a temporary identifier that basically creates a snapshot of the method in time. For example, we could rename ```ecdh-nistp256-kyber-512-sha256``` to method name ```ecdh-nistp256-kyber-512r3-sha256-d00```. That basically means the method is specific to the time it was implemented (Kyber-512 round 3 the way draft -00 explained the method). In the next change which breaks compatibility for that method, its name will change to something like ```ecdh-nistp256-kyber-512r4-sha256-d01``` or something like that. So, old clients that were not upgraded would not be able to negotiate ```ecdh-nistp256-kyber-512r3-sha256-d00``` any more and they would still interop using classical methods. When the RFC is ratified, the final standardized name would be ```ecdh-nistp256-kyber-512-sha256```\r\n\r\nI know this is not something we have done for TLS 1.3 group names, or SSH methods. But have you given it any thought? Would it be too much overhead to rename the method every time something underlying (KEM algorithm, or implementation detail) changes?\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/134/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/134/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1460563596","html_url":"https://github.com/open-quantum-safe/openssh/issues/134#issuecomment-1460563596","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/134","id":1460563596,"node_id":"IC_kwDOBsoLV85XDm6M","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"created_at":"2023-03-08T17:39:16Z","updated_at":"2023-03-08T17:39:16Z","author_association":"NONE","body":"I think this can be closed since we have consensus. I will leave this to the OQS team if they agree. ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1460563596/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-08T17:39:17Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27585204981","type":"IssueCommentEvent","actor":{"id":25055813,"login":"dkostic","display_login":"dkostic","gravatar_id":"","url":"https://api.github.com/users/dkostic","avatar_url":"https://avatars.githubusercontent.com/u/25055813?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1400","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1400/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1400/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1400/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1400","id":1596238831,"node_id":"PR_kwDOA-eq3c5Kktdm","number":1400,"title":"Make BIKE decode function void to avoid ct issues","user":{"login":"dkostic","id":25055813,"node_id":"MDQ6VXNlcjI1MDU1ODEz","avatar_url":"https://avatars.githubusercontent.com/u/25055813?v=4","gravatar_id":"","url":"https://api.github.com/users/dkostic","html_url":"https://github.com/dkostic","followers_url":"https://api.github.com/users/dkostic/followers","following_url":"https://api.github.com/users/dkostic/following{/other_user}","gists_url":"https://api.github.com/users/dkostic/gists{/gist_id}","starred_url":"https://api.github.com/users/dkostic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkostic/subscriptions","organizations_url":"https://api.github.com/users/dkostic/orgs","repos_url":"https://api.github.com/users/dkostic/repos","events_url":"https://api.github.com/users/dkostic/events{/privacy}","received_events_url":"https://api.github.com/users/dkostic/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":16,"created_at":"2023-02-23T05:15:22Z","updated_at":"2023-03-08T19:10:51Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1400","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1400","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1400.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1400.patch","merged_at":null},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\nThe `decode` function in BIKE was made void to avoid any potential constant-time issues.\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\nPartially addresses #1396 \r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in [oqs-provider](https://github.com/open-quantum-safe/oqs-provider), [OQS-OpenSSL](https://github.com/open-quantum-safe/openssl), [OQS-BoringSSL](https://github.com/open-quantum-safe/boringssl), and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1400/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1400/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1460717585","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1400#issuecomment-1460717585","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1400","id":1460717585,"node_id":"IC_kwDOA-eq3c5XEMgR","user":{"login":"dkostic","id":25055813,"node_id":"MDQ6VXNlcjI1MDU1ODEz","avatar_url":"https://avatars.githubusercontent.com/u/25055813?v=4","gravatar_id":"","url":"https://api.github.com/users/dkostic","html_url":"https://github.com/dkostic","followers_url":"https://api.github.com/users/dkostic/followers","following_url":"https://api.github.com/users/dkostic/following{/other_user}","gists_url":"https://api.github.com/users/dkostic/gists{/gist_id}","starred_url":"https://api.github.com/users/dkostic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkostic/subscriptions","organizations_url":"https://api.github.com/users/dkostic/orgs","repos_url":"https://api.github.com/users/dkostic/repos","events_url":"https://api.github.com/users/dkostic/events{/privacy}","received_events_url":"https://api.github.com/users/dkostic/received_events","type":"User","site_admin":false},"created_at":"2023-03-08T19:10:51Z","updated_at":"2023-03-08T19:10:51Z","author_association":"COLLABORATOR","body":">The constants there (THRESHOLD_COEFF0 and THRESHOLD_COEFF1) are floating point values. Looking at the assembly from gcc 10 on my AVX2 machine, I do see a branch inserted for converting a uint64_t into a double using the VCVTSI2SD instruction. The instruction expects a signed integer; the branch is there to handle the case where the high bit of the unsigned integer happens to be set.\r\nI put a breakpoint on the branch in gdb and didn't hit it, and from the C code it doesn't look like the high bit of the integer should ever be set. Still, this doesn't look like a false positive to me. If it is, it might be a bug in valgrind's emulation of a nearby instruction. More likely, especially given the warnings about unintialized values, there's some UB that makes it hard to reason about the compiled program from the C description.\r\n\r\nThat's a very good point, thanks! I'll look into ways to handle this appropriately by doing integer arithmetic instead of floating point (and avoiding division by multiplying and shifting)...","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1460717585/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-08T19:10:51Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27587326394","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/136","id":1592791838,"node_id":"I_kwDOBsoLV85e8BMe","number":136,"title":"PQ-hybrid key exchange encodings","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2023-02-21T04:56:06Z","updated_at":"2023-03-08T20:53:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\n\r\nAs we are interop testing we found an issue in how OQS OpenSSH encodes the exchanged keys.\r\n\r\nThe way it works today in OQS OpenSSH, the shared secret is `K = HASH((PQ shared key) || (ECDH shared key))`\r\n- The ```PQ shared key``` is encoded as raw data (`byte` in the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 ). \r\n- The ```ECDH shared key``` is encoded as ```mpint``` as per the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 . That is probably because that it was done previously as per RFC4253 and because the exchanged ECDH shared key is a big integer and `K` ended up being `mpint`. \r\n- `K = HASH((PQ shared key) || (ECDH shared key))` is used as a `byte` array for deriving encryption keys for SSH https://github.com/open-quantum-safe/openssh/blob/92c59cf2f25fb32b21ce8d7b11a8af246ea17062/kexoqsecdh.c#L94 \r\n\r\nThe PQ SSH draft is currently a little ambiguous on this, and I will update it to be more prescriptive, but we want to make a suggestion here to make sure we are all implementers on the same page: \r\n\r\nBoth ```PQ shared key``` and ```ECDH shared key``` would rather be a simple `byte` array padded to the nearest byte boundary. Previously `mpint` worked because ```ECDH shared key``` was going directly into `K`, but that is not the case any more. ```PQ shared key``` and ```ECDH shared key``` go into a hash, so they ought to be raw data, fixed-length, simple `byte` array padded to the nearest byte boundary. Using `mpint` for one shared key and raw data for the other is inconsistent and `mpint` adds some predictability into the content of the hash input buffer. \r\n\r\nBtw, that is what OpenSSH does with its X25519+SNTRU PQ-hybrid key exchange method. \r\n\r\n@dstebila , @baentsch , @christianpaquin , what do you think? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1460862356","html_url":"https://github.com/open-quantum-safe/openssh/issues/136#issuecomment-1460862356","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","id":1460862356,"node_id":"IC_kwDOBsoLV85XEv2U","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2023-03-08T20:53:50Z","updated_at":"2023-03-08T20:53:50Z","author_association":"MEMBER","body":"> Thx Douglas.\r\n> \r\n> Here is the [PR #137](https://github.com/open-quantum-safe/openssh/pull/137)\r\n> \r\n> > Should we also rename the KEX methods?\r\n> \r\n> I changed my comment on this a couple of times. But given that the method names we have in there now, which include the word `kyber`, will never conflict with the final names because NIST will rename the algorithm to `mlwe-kem` or something like that, I think it makes sense to keep it as is for now. No need to create more work for ourselves.\r\n> \r\n> In the next iteration of the draft that breaks backwards compatibility, update the names to follow the new nomenclature ecdh-`nistp256-kyber-512r4-sha256-tbd2` and `x25519-kyber-512r4-sha256-tbd2` or something like that.\r\n> \r\n> Feel free to close #134 , I think we reached consensus on this.\r\n\r\nI don't think this addresses my concern though.  Within OQS-OpenSSH, what is being called `ecdh-nistp384-kyber-768-sha384` has changed from before this commit to after, and thus a user of the version from before this commit will be incompatible with a user of the version from after this commit for the same method name `ecdh-nistp384-kyber-768-sha384`.  \r\n\r\n(I also just realized that we should have followed the convention of naming non-standardized methods as `newname@openquantumsafe.org`.)","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1460862356/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-08T20:53:50Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"27588787086","type":"IssueCommentEvent","actor":{"id":24617764,"login":"csosto-pk","display_login":"csosto-pk","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","avatar_url":"https://avatars.githubusercontent.com/u/24617764?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/136","id":1592791838,"node_id":"I_kwDOBsoLV85e8BMe","number":136,"title":"PQ-hybrid key exchange encodings","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2023-02-21T04:56:06Z","updated_at":"2023-03-08T22:08:51Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\n\r\nAs we are interop testing we found an issue in how OQS OpenSSH encodes the exchanged keys.\r\n\r\nThe way it works today in OQS OpenSSH, the shared secret is `K = HASH((PQ shared key) || (ECDH shared key))`\r\n- The ```PQ shared key``` is encoded as raw data (`byte` in the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 ). \r\n- The ```ECDH shared key``` is encoded as ```mpint``` as per the SSH RFC https://www.rfc-editor.org/rfc/rfc4251#section-5 . That is probably because that it was done previously as per RFC4253 and because the exchanged ECDH shared key is a big integer and `K` ended up being `mpint`. \r\n- `K = HASH((PQ shared key) || (ECDH shared key))` is used as a `byte` array for deriving encryption keys for SSH https://github.com/open-quantum-safe/openssh/blob/92c59cf2f25fb32b21ce8d7b11a8af246ea17062/kexoqsecdh.c#L94 \r\n\r\nThe PQ SSH draft is currently a little ambiguous on this, and I will update it to be more prescriptive, but we want to make a suggestion here to make sure we are all implementers on the same page: \r\n\r\nBoth ```PQ shared key``` and ```ECDH shared key``` would rather be a simple `byte` array padded to the nearest byte boundary. Previously `mpint` worked because ```ECDH shared key``` was going directly into `K`, but that is not the case any more. ```PQ shared key``` and ```ECDH shared key``` go into a hash, so they ought to be raw data, fixed-length, simple `byte` array padded to the nearest byte boundary. Using `mpint` for one shared key and raw data for the other is inconsistent and `mpint` adds some predictability into the content of the hash input buffer. \r\n\r\nBtw, that is what OpenSSH does with its X25519+SNTRU PQ-hybrid key exchange method. \r\n\r\n@dstebila , @baentsch , @christianpaquin , what do you think? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1460942546","html_url":"https://github.com/open-quantum-safe/openssh/issues/136#issuecomment-1460942546","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/136","id":1460942546,"node_id":"IC_kwDOBsoLV85XFDbS","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"created_at":"2023-03-08T22:08:51Z","updated_at":"2023-03-08T22:08:51Z","author_association":"NONE","body":"> I don't think this addresses my concern though. Within OQS-OpenSSH, what is being called ecdh-nistp384-kyber-768-sha384 has changed from before this commit to after, and thus a user of the version from before this commit will be incompatible with a user of the version from after this commit for the same method name ecdh-nistp384-kyber-768-sha384.\r\n\r\nAgreed.\r\n\r\n> (I also just realized that we should have followed the convention of naming non-standardized methods as newname@openquantumsafe.org.)\r\n\r\nIndeed. But going forward, at least for the method names in the IETF draft, we can add it in the `@openquantumsafe.org` in the name. ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1460942546/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-03-08T22:08:51Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
