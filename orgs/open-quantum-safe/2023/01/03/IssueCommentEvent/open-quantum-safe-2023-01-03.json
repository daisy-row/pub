{"id":"26198785738","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338","id":1517352230,"node_id":"I_kwDOA-eq3c5acPUm","number":1338,"title":"Segfault when running example_sig.c","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-01-03T12:54:06Z","updated_at":"2023-01-03T15:40:00Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nI was trying the library for the first time and I'm getting a segmentation fault when trying to run [this example](https://github.com/open-quantum-safe/liboqs/wiki/Minimal-example-of-a-post-quantum-signature).\r\n\r\nHere is the bt:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x0000000000000000 in ?? ()\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff7bc3a58 in ?? () from /usr/lib/liboqs.so.2\r\n#2  0x00007ffff7bc44c2 in ?? () from /usr/lib/liboqs.so.2\r\n#3  0x00007ffff792c47e in pqcrystals_dilithium2_avx2_pointwise_acc_avx () from /usr/lib/liboqs.so.2\r\n#4  0x00007ffff7931e93 in pqcrystals_dilithium2_avx2_nttunpack_avx () from /usr/lib/liboqs.so.2\r\n#5  0x0000555555555280 in example_stack ()\r\n#6  0x00005555555556f9 in main ()\r\n```\r\n\r\nI build liboqs 0.7.2 with these options (for more details check [this PKGBUILD](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=liboqs) for Arch Linux):\r\n```\r\ncmake -G Ninja -B build -S \"${pkgname}-${pkgver}\"\\\r\n        -DBUILD_SHARED_LIBS='ON' \\\r\n        -DCMAKE_BUILD_TYPE='None' \\\r\n        -DCMAKE_INSTALL_PREFIX=\"${pkgdir}/usr\" \\\r\n        -DOQS_BUILD_ONLY_LIB='OFF' \\\r\n        -DOQS_DIST_BUILD='ON' \\\r\n        -DOQS_USE_AES_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA2_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA3_OPENSSL='ON' \\\r\n        -DOQS_OPT_TARGET='generic' \\\r\n        -Wno-dev\r\n```\r\nAnd I'm using have glibc 2.36. Please let me know anything else I could do to help debug this issue. I will try to build liboqs with `CMAKE_BUILD_TYPE='Debug'`.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1369915161","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338#issuecomment-1369915161","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","id":1369915161,"node_id":"IC_kwDOA-eq3c5Rpz8Z","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-01-03T15:40:00Z","updated_at":"2023-01-03T15:40:00Z","author_association":"MEMBER","body":"This seems weird, indeed. I just re-built with your `cmake` settings and everything is OK as expected on my machine. So, Yes, please do re-build with debugging to also show the so far \"invisible\" functions triggering the SEGV in your case. Oh, and to ask the obvious: The `liboqs` build itself went without errors? Could you execute for example `build/tests/kat_sig` OK? Can you please share the output (config info) of that program?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1369915161/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-01-03T15:40:01Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26198814632","type":"IssueCommentEvent","actor":{"id":15230534,"login":"iyanmv","display_login":"iyanmv","gravatar_id":"","url":"https://api.github.com/users/iyanmv","avatar_url":"https://avatars.githubusercontent.com/u/15230534?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338","id":1517352230,"node_id":"I_kwDOA-eq3c5acPUm","number":1338,"title":"Segfault when running example_sig.c","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2023-01-03T12:54:06Z","updated_at":"2023-01-03T15:41:17Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nI was trying the library for the first time and I'm getting a segmentation fault when trying to run [this example](https://github.com/open-quantum-safe/liboqs/wiki/Minimal-example-of-a-post-quantum-signature).\r\n\r\nHere is the bt:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x0000000000000000 in ?? ()\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff7bc3a58 in ?? () from /usr/lib/liboqs.so.2\r\n#2  0x00007ffff7bc44c2 in ?? () from /usr/lib/liboqs.so.2\r\n#3  0x00007ffff792c47e in pqcrystals_dilithium2_avx2_pointwise_acc_avx () from /usr/lib/liboqs.so.2\r\n#4  0x00007ffff7931e93 in pqcrystals_dilithium2_avx2_nttunpack_avx () from /usr/lib/liboqs.so.2\r\n#5  0x0000555555555280 in example_stack ()\r\n#6  0x00005555555556f9 in main ()\r\n```\r\n\r\nI build liboqs 0.7.2 with these options (for more details check [this PKGBUILD](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=liboqs) for Arch Linux):\r\n```\r\ncmake -G Ninja -B build -S \"${pkgname}-${pkgver}\"\\\r\n        -DBUILD_SHARED_LIBS='ON' \\\r\n        -DCMAKE_BUILD_TYPE='None' \\\r\n        -DCMAKE_INSTALL_PREFIX=\"${pkgdir}/usr\" \\\r\n        -DOQS_BUILD_ONLY_LIB='OFF' \\\r\n        -DOQS_DIST_BUILD='ON' \\\r\n        -DOQS_USE_AES_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA2_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA3_OPENSSL='ON' \\\r\n        -DOQS_OPT_TARGET='generic' \\\r\n        -Wno-dev\r\n```\r\nAnd I'm using have glibc 2.36. Please let me know anything else I could do to help debug this issue. I will try to build liboqs with `CMAKE_BUILD_TYPE='Debug'`.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1369916591","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338#issuecomment-1369916591","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","id":1369916591,"node_id":"IC_kwDOA-eq3c5Rp0Sv","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"created_at":"2023-01-03T15:41:17Z","updated_at":"2023-01-03T15:41:17Z","author_association":"NONE","body":"Actually, it's not just this example, but some other tests as well. I tried both with the release 0.7.2 and with the main branch and 19 tests fail for me.\r\n\r\n<details>\r\n  <summary>Logs</summary>\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n______________________________ test_kem[Kyber512] ______________________________\r\n[gw5] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nkem_name = 'Kyber512'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess(\r\n            [helpers.path_to_executable('test_kem'), kem_name],\r\n        )\r\n\r\ntests/test_cmdline.py:19: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/test_kem', 'Kyber512']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/test_kem Kyber512\r\n\r\n__________________________ test_examples[example_sig] __________________________\r\n[gw4] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nprogram = 'example_sig'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('program', ['example_kem', 'example_sig'])\r\n    def test_examples(program):\r\n>       helpers.run_subprocess(\r\n            [helpers.path_to_executable(program)],\r\n        )\r\n\r\ntests/test_cmdline.py:11: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/example_sig'], working_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/example_sig\r\n\r\n______________________________ test_kem[Kyber768] ______________________________\r\n[gw5] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nkem_name = 'Kyber768'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess(\r\n            [helpers.path_to_executable('test_kem'), kem_name],\r\n        )\r\n\r\ntests/test_cmdline.py:19: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/test_kem', 'Kyber768']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/test_kem Kyber768\r\n\r\n_____________________________ test_kem[Kyber1024] ______________________________\r\n[gw5] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nkem_name = 'Kyber1024'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess(\r\n            [helpers.path_to_executable('test_kem'), kem_name],\r\n        )\r\n\r\ntests/test_cmdline.py:19: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/test_kem', 'Kyber1024']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/test_kem Kyber1024\r\n\r\n_____________________________ test_sig[Dilithium2] _____________________________\r\n[gw5] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nsig_name = 'Dilithium2'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_sig(sig_name):\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)): pytest.skip('Not enabled')\r\n        if sys.platform.startswith(\"win\") and 'APPVEYOR' in os.environ:\r\n            if 'SPHINCS' in sig_name and ('192f' in sig_name or '192s' in sig_name or '256f' in sig_name or '256s' in sig_name):\r\n                pytest.skip('Skipping SPHINCS+ 192s and 256s tests on Windows AppVeyor builds')\r\n>       helpers.run_subprocess(\r\n            [helpers.path_to_executable('test_sig'), sig_name],\r\n        )\r\n\r\ntests/test_cmdline.py:30: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/test_sig', 'Dilithium2']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/test_sig Dilithium2\r\n\r\n_____________________________ test_sig[Dilithium3] _____________________________\r\n[gw5] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nsig_name = 'Dilithium3'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_sig(sig_name):\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)): pytest.skip('Not enabled')\r\n        if sys.platform.startswith(\"win\") and 'APPVEYOR' in os.environ:\r\n            if 'SPHINCS' in sig_name and ('192f' in sig_name or '192s' in sig_name or '256f' in sig_name or '256s' in sig_name):\r\n                pytest.skip('Skipping SPHINCS+ 192s and 256s tests on Windows AppVeyor builds')\r\n>       helpers.run_subprocess(\r\n            [helpers.path_to_executable('test_sig'), sig_name],\r\n        )\r\n\r\ntests/test_cmdline.py:30: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/test_sig', 'Dilithium3']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/test_sig Dilithium3\r\n\r\n_____________________________ test_sig[Dilithium5] _____________________________\r\n[gw5] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nsig_name = 'Dilithium5'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_sig(sig_name):\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)): pytest.skip('Not enabled')\r\n        if sys.platform.startswith(\"win\") and 'APPVEYOR' in os.environ:\r\n            if 'SPHINCS' in sig_name and ('192f' in sig_name or '192s' in sig_name or '256f' in sig_name or '256s' in sig_name):\r\n                pytest.skip('Skipping SPHINCS+ 192s and 256s tests on Windows AppVeyor builds')\r\n>       helpers.run_subprocess(\r\n            [helpers.path_to_executable('test_sig'), sig_name],\r\n        )\r\n\r\ntests/test_cmdline.py:30: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/test_sig', 'Dilithium5']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/test_sig Dilithium5\r\n\r\n______________________________ test_kem[Kyber512] ______________________________\r\n[gw1] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nkem_name = 'Kyber512'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        kats = helpers.get_kats(\"kem\")\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       output = helpers.run_subprocess(\r\n            [helpers.path_to_executable('kat_kem'), kem_name],\r\n        )\r\n\r\ntests/test_kat.py:15: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/kat_kem', 'Kyber512']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/kat_kem Kyber512\r\n\r\n______________________________ test_kem[Kyber768] ______________________________\r\n[gw1] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nkem_name = 'Kyber768'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        kats = helpers.get_kats(\"kem\")\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       output = helpers.run_subprocess(\r\n            [helpers.path_to_executable('kat_kem'), kem_name],\r\n        )\r\n\r\ntests/test_kat.py:15: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/kat_kem', 'Kyber768']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/kat_kem Kyber768\r\n\r\n_____________________________ test_kem[Kyber1024] ______________________________\r\n[gw1] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nkem_name = 'Kyber1024'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        kats = helpers.get_kats(\"kem\")\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       output = helpers.run_subprocess(\r\n            [helpers.path_to_executable('kat_kem'), kem_name],\r\n        )\r\n\r\ntests/test_kat.py:15: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/kat_kem', 'Kyber1024']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/kat_kem Kyber1024\r\n\r\n_____________________________ test_sig[Dilithium2] _____________________________\r\n[gw1] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nsig_name = 'Dilithium2'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_sig(sig_name):\r\n        kats = helpers.get_kats(\"sig\")\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)): pytest.skip('Not enabled')\r\n>       output = helpers.run_subprocess(\r\n            [helpers.path_to_executable('kat_sig'), sig_name],\r\n        )\r\n\r\ntests/test_kat.py:29: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/kat_sig', 'Dilithium2']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/kat_sig Dilithium2\r\n\r\n_____________________________ test_sig[Dilithium3] _____________________________\r\n[gw1] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nsig_name = 'Dilithium3'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_sig(sig_name):\r\n        kats = helpers.get_kats(\"sig\")\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)): pytest.skip('Not enabled')\r\n>       output = helpers.run_subprocess(\r\n            [helpers.path_to_executable('kat_sig'), sig_name],\r\n        )\r\n\r\ntests/test_kat.py:29: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/kat_sig', 'Dilithium3']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/kat_sig Dilithium3\r\n\r\n_____________________________ test_sig[Dilithium5] _____________________________\r\n[gw1] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nsig_name = 'Dilithium5'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_sig(sig_name):\r\n        kats = helpers.get_kats(\"sig\")\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)): pytest.skip('Not enabled')\r\n>       output = helpers.run_subprocess(\r\n            [helpers.path_to_executable('kat_sig'), sig_name],\r\n        )\r\n\r\ntests/test_kat.py:29: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/kat_sig', 'Dilithium5']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/kat_sig Dilithium5\r\n\r\n____________________________ test_mem_kem[Kyber512] ____________________________\r\n[gw1] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nkem_name = 'Kyber512'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_mem_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)):\r\n            pytest.skip('Not enabled')\r\n    \r\n        Path(helpers.get_current_build_dir_name()+'/mem-benchmark').mkdir(parents=True, exist_ok=True)\r\n    \r\n        for i in range(3):\r\n>          helpers.run_subprocess([helpers.path_to_executable('test_kem_mem'), kem_name, str(i)])\r\n\r\ntests/test_mem.py:16: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/test_kem_mem', 'Kyber512', '0']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/test_kem_mem Kyber512 0\r\n\r\n____________________________ test_mem_kem[Kyber768] ____________________________\r\n[gw1] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nkem_name = 'Kyber768'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_mem_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)):\r\n            pytest.skip('Not enabled')\r\n    \r\n        Path(helpers.get_current_build_dir_name()+'/mem-benchmark').mkdir(parents=True, exist_ok=True)\r\n    \r\n        for i in range(3):\r\n>          helpers.run_subprocess([helpers.path_to_executable('test_kem_mem'), kem_name, str(i)])\r\n\r\ntests/test_mem.py:16: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/test_kem_mem', 'Kyber768', '0']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/test_kem_mem Kyber768 0\r\n\r\n___________________________ test_mem_kem[Kyber1024] ____________________________\r\n[gw1] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nkem_name = 'Kyber1024'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_mem_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)):\r\n            pytest.skip('Not enabled')\r\n    \r\n        Path(helpers.get_current_build_dir_name()+'/mem-benchmark').mkdir(parents=True, exist_ok=True)\r\n    \r\n        for i in range(3):\r\n>          helpers.run_subprocess([helpers.path_to_executable('test_kem_mem'), kem_name, str(i)])\r\n\r\ntests/test_mem.py:16: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/test_kem_mem', 'Kyber1024', '0']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/test_kem_mem Kyber1024 0\r\n\r\n___________________________ test_mem_sig[Dilithium2] ___________________________\r\n[gw1] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nsig_name = 'Dilithium2'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_mem_sig(sig_name):\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)):\r\n            pytest.skip('Not enabled')\r\n    \r\n        Path(helpers.get_current_build_dir_name()+'/mem-benchmark').mkdir(parents=True, exist_ok=True)\r\n    \r\n        for i in range(3):\r\n>          helpers.run_subprocess([helpers.path_to_executable('test_sig_mem'), sig_name, str(i)])\r\n\r\ntests/test_mem.py:27: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/test_sig_mem', 'Dilithium2', '0']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/test_sig_mem Dilithium2 0\r\n\r\n___________________________ test_mem_sig[Dilithium3] ___________________________\r\n[gw1] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nsig_name = 'Dilithium3'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_mem_sig(sig_name):\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)):\r\n            pytest.skip('Not enabled')\r\n    \r\n        Path(helpers.get_current_build_dir_name()+'/mem-benchmark').mkdir(parents=True, exist_ok=True)\r\n    \r\n        for i in range(3):\r\n>          helpers.run_subprocess([helpers.path_to_executable('test_sig_mem'), sig_name, str(i)])\r\n\r\ntests/test_mem.py:27: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/test_sig_mem', 'Dilithium3', '0']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/test_sig_mem Dilithium3 0\r\n\r\n___________________________ test_mem_sig[Dilithium5] ___________________________\r\n[gw1] linux -- Python 3.10.9 /usr/bin/python3\r\n\r\nsig_name = 'Dilithium5'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('sig_name', helpers.available_sigs_by_name())\r\n    def test_mem_sig(sig_name):\r\n        if not(helpers.is_sig_enabled_by_name(sig_name)):\r\n            pytest.skip('Not enabled')\r\n    \r\n        Path(helpers.get_current_build_dir_name()+'/mem-benchmark').mkdir(parents=True, exist_ok=True)\r\n    \r\n        for i in range(3):\r\n>          helpers.run_subprocess([helpers.path_to_executable('test_sig_mem'), sig_name, str(i)])\r\n\r\ntests/test_mem.py:27: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/build/liboqs/src/build/tests/test_sig_mem', 'Dilithium5', '0']\r\nworking_dir = '.'\r\nenv = {'BUILDTOOL': 'devtools', 'BUILDTOOLVER': '20221012-2-any', 'CFLAGS': '-march=x86-64 -mtune=generic -O2 -pipe -fno-plt...rror=format-security         -fstack-clash-protection -fcf-protection -flto=auto', 'CHOST': 'x86_64-pc-linux-gnu', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -11\r\n\r\ntests/helpers.py:42: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /build/liboqs/src/build/tests/test_sig_mem Dilithium5 0\r\n\r\n=========================== short test summary info ============================\r\nFAILED tests/test_cmdline.py::test_kem[Kyber512] - AssertionError: Got unexpe...\r\nFAILED tests/test_cmdline.py::test_examples[example_sig] - AssertionError: Go...\r\nFAILED tests/test_cmdline.py::test_kem[Kyber768] - AssertionError: Got unexpe...\r\nFAILED tests/test_cmdline.py::test_kem[Kyber1024] - AssertionError: Got unexp...\r\nFAILED tests/test_cmdline.py::test_sig[Dilithium2] - AssertionError: Got unex...\r\nFAILED tests/test_cmdline.py::test_sig[Dilithium3] - AssertionError: Got unex...\r\nFAILED tests/test_cmdline.py::test_sig[Dilithium5] - AssertionError: Got unex...\r\nFAILED tests/test_kat.py::test_kem[Kyber512] - AssertionError: Got unexpected...\r\nFAILED tests/test_kat.py::test_kem[Kyber768] - AssertionError: Got unexpected...\r\nFAILED tests/test_kat.py::test_kem[Kyber1024] - AssertionError: Got unexpecte...\r\nFAILED tests/test_kat.py::test_sig[Dilithium2] - AssertionError: Got unexpect...\r\nFAILED tests/test_kat.py::test_sig[Dilithium3] - AssertionError: Got unexpect...\r\nFAILED tests/test_kat.py::test_sig[Dilithium5] - AssertionError: Got unexpect...\r\nFAILED tests/test_mem.py::test_mem_kem[Kyber512] - AssertionError: Got unexpe...\r\nFAILED tests/test_mem.py::test_mem_kem[Kyber768] - AssertionError: Got unexpe...\r\nFAILED tests/test_mem.py::test_mem_kem[Kyber1024] - AssertionError: Got unexp...\r\nFAILED tests/test_mem.py::test_mem_sig[Dilithium2] - AssertionError: Got unex...\r\nFAILED tests/test_mem.py::test_mem_sig[Dilithium3] - AssertionError: Got unex...\r\nFAILED tests/test_mem.py::test_mem_sig[Dilithium5] - AssertionError: Got unex...\r\n=========== 19 failed, 362 passed, 216 skipped in 127.25s (0:02:07) ============\r\nFAILED: tests/CMakeFiles/run_tests /build/liboqs/src/build/tests/CMakeFiles/run_tests \r\ncd /build/liboqs/src/liboqs-0.7.2 && /usr/bin/cmake -E env OQS_BUILD_DIR=/build/liboqs/src/build python3 -m pytest --verbose --numprocesses=auto --ignore=scripts/copy_from_upstream/repos\r\nninja: build stopped: subcommand failed.\r\n```\r\n</details>","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1369916591/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-01-03T15:41:17Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26198831773","type":"IssueCommentEvent","actor":{"id":15230534,"login":"iyanmv","display_login":"iyanmv","gravatar_id":"","url":"https://api.github.com/users/iyanmv","avatar_url":"https://avatars.githubusercontent.com/u/15230534?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338","id":1517352230,"node_id":"I_kwDOA-eq3c5acPUm","number":1338,"title":"Segfault when running example_sig.c","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2023-01-03T12:54:06Z","updated_at":"2023-01-03T15:42:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nI was trying the library for the first time and I'm getting a segmentation fault when trying to run [this example](https://github.com/open-quantum-safe/liboqs/wiki/Minimal-example-of-a-post-quantum-signature).\r\n\r\nHere is the bt:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x0000000000000000 in ?? ()\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff7bc3a58 in ?? () from /usr/lib/liboqs.so.2\r\n#2  0x00007ffff7bc44c2 in ?? () from /usr/lib/liboqs.so.2\r\n#3  0x00007ffff792c47e in pqcrystals_dilithium2_avx2_pointwise_acc_avx () from /usr/lib/liboqs.so.2\r\n#4  0x00007ffff7931e93 in pqcrystals_dilithium2_avx2_nttunpack_avx () from /usr/lib/liboqs.so.2\r\n#5  0x0000555555555280 in example_stack ()\r\n#6  0x00005555555556f9 in main ()\r\n```\r\n\r\nI build liboqs 0.7.2 with these options (for more details check [this PKGBUILD](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=liboqs) for Arch Linux):\r\n```\r\ncmake -G Ninja -B build -S \"${pkgname}-${pkgver}\"\\\r\n        -DBUILD_SHARED_LIBS='ON' \\\r\n        -DCMAKE_BUILD_TYPE='None' \\\r\n        -DCMAKE_INSTALL_PREFIX=\"${pkgdir}/usr\" \\\r\n        -DOQS_BUILD_ONLY_LIB='OFF' \\\r\n        -DOQS_DIST_BUILD='ON' \\\r\n        -DOQS_USE_AES_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA2_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA3_OPENSSL='ON' \\\r\n        -DOQS_OPT_TARGET='generic' \\\r\n        -Wno-dev\r\n```\r\nAnd I'm using have glibc 2.36. Please let me know anything else I could do to help debug this issue. I will try to build liboqs with `CMAKE_BUILD_TYPE='Debug'`.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1369917425","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338#issuecomment-1369917425","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","id":1369917425,"node_id":"IC_kwDOA-eq3c5Rp0fx","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"created_at":"2023-01-03T15:42:04Z","updated_at":"2023-01-03T15:42:04Z","author_association":"NONE","body":"I was just writing this and I didn't see your previous comment. I will do what you suggested and come back later.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1369917425/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-01-03T15:42:04Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26198934094","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338","id":1517352230,"node_id":"I_kwDOA-eq3c5acPUm","number":1338,"title":"Segfault when running example_sig.c","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2023-01-03T12:54:06Z","updated_at":"2023-01-03T15:46:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nI was trying the library for the first time and I'm getting a segmentation fault when trying to run [this example](https://github.com/open-quantum-safe/liboqs/wiki/Minimal-example-of-a-post-quantum-signature).\r\n\r\nHere is the bt:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x0000000000000000 in ?? ()\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff7bc3a58 in ?? () from /usr/lib/liboqs.so.2\r\n#2  0x00007ffff7bc44c2 in ?? () from /usr/lib/liboqs.so.2\r\n#3  0x00007ffff792c47e in pqcrystals_dilithium2_avx2_pointwise_acc_avx () from /usr/lib/liboqs.so.2\r\n#4  0x00007ffff7931e93 in pqcrystals_dilithium2_avx2_nttunpack_avx () from /usr/lib/liboqs.so.2\r\n#5  0x0000555555555280 in example_stack ()\r\n#6  0x00005555555556f9 in main ()\r\n```\r\n\r\nI build liboqs 0.7.2 with these options (for more details check [this PKGBUILD](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=liboqs) for Arch Linux):\r\n```\r\ncmake -G Ninja -B build -S \"${pkgname}-${pkgver}\"\\\r\n        -DBUILD_SHARED_LIBS='ON' \\\r\n        -DCMAKE_BUILD_TYPE='None' \\\r\n        -DCMAKE_INSTALL_PREFIX=\"${pkgdir}/usr\" \\\r\n        -DOQS_BUILD_ONLY_LIB='OFF' \\\r\n        -DOQS_DIST_BUILD='ON' \\\r\n        -DOQS_USE_AES_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA2_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA3_OPENSSL='ON' \\\r\n        -DOQS_OPT_TARGET='generic' \\\r\n        -Wno-dev\r\n```\r\nAnd I'm using have glibc 2.36. Please let me know anything else I could do to help debug this issue. I will try to build liboqs with `CMAKE_BUILD_TYPE='Debug'`.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1369922878","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338#issuecomment-1369922878","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","id":1369922878,"node_id":"IC_kwDOA-eq3c5Rp10-","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-01-03T15:46:40Z","updated_at":"2023-01-03T15:46:40Z","author_association":"MEMBER","body":"The trace above already helps: It's indeed only Kyber and Dilithium failing... AFAIK they share code that may be the culprit, so tagging @bhess FYI/additional questions regarding your setup.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1369922878/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-01-03T15:46:40Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26200147088","type":"IssueCommentEvent","actor":{"id":15230534,"login":"iyanmv","display_login":"iyanmv","gravatar_id":"","url":"https://api.github.com/users/iyanmv","avatar_url":"https://avatars.githubusercontent.com/u/15230534?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338","id":1517352230,"node_id":"I_kwDOA-eq3c5acPUm","number":1338,"title":"Segfault when running example_sig.c","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2023-01-03T12:54:06Z","updated_at":"2023-01-03T16:43:36Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nI was trying the library for the first time and I'm getting a segmentation fault when trying to run [this example](https://github.com/open-quantum-safe/liboqs/wiki/Minimal-example-of-a-post-quantum-signature).\r\n\r\nHere is the bt:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x0000000000000000 in ?? ()\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff7bc3a58 in ?? () from /usr/lib/liboqs.so.2\r\n#2  0x00007ffff7bc44c2 in ?? () from /usr/lib/liboqs.so.2\r\n#3  0x00007ffff792c47e in pqcrystals_dilithium2_avx2_pointwise_acc_avx () from /usr/lib/liboqs.so.2\r\n#4  0x00007ffff7931e93 in pqcrystals_dilithium2_avx2_nttunpack_avx () from /usr/lib/liboqs.so.2\r\n#5  0x0000555555555280 in example_stack ()\r\n#6  0x00005555555556f9 in main ()\r\n```\r\n\r\nI build liboqs 0.7.2 with these options (for more details check [this PKGBUILD](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=liboqs) for Arch Linux):\r\n```\r\ncmake -G Ninja -B build -S \"${pkgname}-${pkgver}\"\\\r\n        -DBUILD_SHARED_LIBS='ON' \\\r\n        -DCMAKE_BUILD_TYPE='None' \\\r\n        -DCMAKE_INSTALL_PREFIX=\"${pkgdir}/usr\" \\\r\n        -DOQS_BUILD_ONLY_LIB='OFF' \\\r\n        -DOQS_DIST_BUILD='ON' \\\r\n        -DOQS_USE_AES_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA2_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA3_OPENSSL='ON' \\\r\n        -DOQS_OPT_TARGET='generic' \\\r\n        -Wno-dev\r\n```\r\nAnd I'm using have glibc 2.36. Please let me know anything else I could do to help debug this issue. I will try to build liboqs with `CMAKE_BUILD_TYPE='Debug'`.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1369988418","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338#issuecomment-1369988418","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","id":1369988418,"node_id":"IC_kwDOA-eq3c5RqF1C","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"created_at":"2023-01-03T16:43:35Z","updated_at":"2023-01-03T16:43:35Z","author_association":"NONE","body":"```gdb\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff7bfbec7 in OQS_SHA3_shake128_x4_inc_absorb.isra.0 (in0=<optimized out>, \r\n    in1=0x7fffffff75c0 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, \r\n    in2=0x7fffffff7660 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, \r\n    in3=0x7fffffff7700 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, inplen=66, state=<optimized out>)\r\n    at /usr/src/debug/liboqs/liboqs-0.7.2/src/common/sha3/ossl_sha3x4.c:51\r\n#2  0x00007ffff7a7ac25 in OQS_SHA3_shake128_x4_absorb_once (inlen=66, \r\n    in3=0x7fffffff7700 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, \r\n    in2=0x7fffffff7660 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, \r\n    in1=0x7fffffff75c0 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, \r\n    in0=0x7fffffff7520 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, state=0x7fffffff7518)\r\n    at /usr/src/debug/liboqs/liboqs-0.7.2/src/common/pqclean_shims/fips202x4.c:7\r\n#3  pqcrystals_dilithium2_avx2_poly_uniform_eta_4x (a0=a0@entry=0x7fffffff90a0, a1=a1@entry=0x7fffffff94a0, a2=a2@entry=0x7fffffff98a0, \r\n    a3=a3@entry=0x7fffffff9ca0, \r\n    seed=seed@entry=0x7fffffffc0d0 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, nonce0=nonce0@entry=0, nonce1=1, nonce2=2, nonce3=3)\r\n    at /usr/src/debug/liboqs/liboqs-0.7.2/src/sig/dilithium/pqcrystals-dilithium_dilithium2_avx2/poly.c:582\r\n#4  0x00007ffff7a8b204 in pqcrystals_dilithium2_avx2_keypair (\r\n    pk=0x7fffffffc200 \"\\027\\363cP\\242{\\025-\\267\\224\\317^\\246\\032\\307\\316;\\370\\064C9\\310{\\362\\227\\254*Y\\272\\326\\312n\", \r\n    sk=0x7fffffffd0a0 \"\\027\\363cP\\242{\\025-\\267\\224\\317^\\246\\032\\307\\316;\\370\\064C9\\310{\\362\\227\\254*Y\\272\\326\\312n(4\\232I$\\250[\\345\\342\\037\\264\\212V\\266\\324\\321y^Usȼt\\363\\310\\363\\064\\037\\366y\\005\\273\\260\\061\\374\\367\\377\\177\")\r\n    at /usr/src/debug/liboqs/liboqs-0.7.2/src/sig/dilithium/pqcrystals-dilithium_dilithium2_avx2/sign.c:113\r\n#5  0x0000555555555280 in example_stack ()\r\n#6  0x00005555555556f9 in main ()\r\n```\r\n\r\n```gdb\r\n(gdb) thread apply all bt full\r\n\r\nThread 1 (Thread 0x7ffff7f54e00 (LWP 345530) \"example_sig\"):\r\n#0  0x0000000000000000 in ?? ()\r\nNo symbol table info available.\r\n#1  0x00007ffff7bfbec7 in OQS_SHA3_shake128_x4_inc_absorb.isra.0 (in0=<optimized out>, in1=0x7fffffff75c0 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, in2=0x7fffffff7660 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, in3=0x7fffffff7700 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, inplen=66, state=<optimized out>) at /usr/src/debug/liboqs/liboqs-0.7.2/src/common/sha3/ossl_sha3x4.c:51\r\n        s = 0x55555559a380\r\n#2  0x00007ffff7a7ac25 in OQS_SHA3_shake128_x4_absorb_once (inlen=66, in3=0x7fffffff7700 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, in2=0x7fffffff7660 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, in1=0x7fffffff75c0 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, in0=0x7fffffff7520 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, state=0x7fffffff7518) at /usr/src/debug/liboqs/liboqs-0.7.2/src/common/pqclean_shims/fips202x4.c:7\r\nNo locals.\r\n#3  pqcrystals_dilithium2_avx2_poly_uniform_eta_4x (a0=a0@entry=0x7fffffff90a0, a1=a1@entry=0x7fffffff94a0, a2=a2@entry=0x7fffffff98a0, a3=a3@entry=0x7fffffff9ca0, seed=seed@entry=0x7fffffffc0d0 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>, nonce0=nonce0@entry=0, nonce1=1, nonce2=2, nonce3=3) at /usr/src/debug/liboqs/liboqs-0.7.2/src/sig/dilithium/pqcrystals-dilithium_dilithium2_avx2/poly.c:582\r\n        ctr0 = <optimized out>\r\n        ctr1 = <optimized out>\r\n        ctr2 = <optimized out>\r\n        ctr3 = <optimized out>\r\n        buf = {{coeffs = \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\\352\\250\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\363\\071[V\\360\\316Ҡ\\215VUUU\\000\\000\\320\\344YUUU\\000\\000\\033\\204\\065\\367\\377\\177\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\033\\204\\065\\367\\377\\177\\000\\000֖/\\367\\377\\177\\000\\000\\353\\061\\333+\\227\\002\\362m\", vec = {{-3493201145893806349, 3170998521064505152, -4402387587779638061, -5510685579527030181}, {-2623278024426888487, 1586687294465920120, 112130876641390728, 47545787838985609}, {0, -3256401226853911808, 93824992316832, 93824992535760}, {140737340867611, 0, 140737340867611, 140737340479190}, {7922397542797226475, 1476882522514230122, 7538727250611749899, -6119968977758584015}}}, {coeffs = \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\\352\\250\\000\\001\\000\\327\\031\\262\\345y\\307?\\260\\200\\371ANc!\\361\\352\\244$\\355𒅫^\\344[\\vn\\273\\021\\r\\370-\\253\\020\\006\\276~\\253<P\\261&a\\373\\273@,xB\\325\\315\\025\\231\\240\\330\\307}\\323;\\205\\264\\226{d\\202\\006\\336.--Type <RET> for more, q to quit, c to continue without paging--\r\n\\n\", vec = {{-3493201145893806349, 3170998521064505152, -4402387587779638061, -5510685579527030181}, {-2623278024426888487, 1586687294465920120, 112130876641390728, 47545787838985609}, {-4072971834879442943, 2405852671211778111, -8821723818752677135, 1277735914355056299}, {9132743763015104525, -4901216950651175765, -7415794895568753600, -5438875195445618528}, {733767908846762902, 8576961694772308809, -7429182422301398965, 6104670825968559347}}}, {coeffs = \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\\352\\250\\000\\002\\000ZUUU\\000\\000 \\000\\000\\000\\000\\000\\000\\000\\210\\000\\000\\000\\000\\000\\000\\000\\355\\a&\\367\\377\\177\\000\\000\\260\\006ZUUU\\000\\000Hw\\377\\377\\377\\177\\000\\000\\020w\\377\\377\\377\\177\\000\\000Hw\\377\\377\\377\\177\\000\\000 \\000\\000\\000\\000\\000\\000\", vec = {{-3493201145893806349, 3170998521064505152, -4402387587779638061, -5510685579527030181}, {-2623278024426888487, 1586687294465920120, 112130876641390728, 47545787838985609}, {93824992542722, 32, 136, 140737339852781}, {93824992544432, 140737488320328, 140737488320272, 140737488320328}, {32, 140737339841126, 140737488339120, 93824992516288}}}, {coeffs = \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\\352\\250\\000\\003\\000\\000\\000\\000\\000\\000\\000\\200\\000\\000\\000\\000\\000\\000\\000b\\227\\064\\367\\377\\177\\000\\000\\002\\000\\000\\000\\000\\000\\000\\000Hw\\377\\377\\377\\177\\000\\000\\000\\363\\071[V\\360\\316\\322\\377\\377\\377\\377\\377\\377\\377\\377x\\377\\377\\377\\377\\377\\377\\377\\000\\000\\000\\000\\000\\000\\000\", vec = {{-3493201145893806349, 3170998521064505152, -4402387587779638061, -5510685579527030181}, {-2623278024426888487, 1586687294465920120, 112130876641390728, 47545787838985609}, {3, 128, 140737340807010, 2}, {140737488320328, -3256401226853911808, -1, -136}, {0, 0, 140737488339152, 140737488339456}}}}\r\n        f = <optimized out>\r\n        state = {ctx = 0x55555559a380}\r\n#4  0x00007ffff7a8b204 in pqcrystals_dilithium2_avx2_keypair (pk=0x7fffffffc200 \"\\027\\363cP\\242{\\025-\\267\\224\\317^\\246\\032\\307\\316;\\370\\064C9\\310{\\362\\227\\254*Y\\272\\326\\312n\", sk=0x7fffffffd0a0 \"\\027\\363cP\\242{\\025-\\267\\224\\317^\\246\\032\\307\\316;\\370\\064C9\\310{\\362\\227\\254*Y\\272\\326\\312n(4\\232I$\\250[\\345\\342\\037\\264\\212V\\266\\324\\321y^Usȼt\\363\\310\\363\\064\\037\\366y\\005\\273\\260\\061\\374\\367\\377\\177\") at /usr/src/debug/liboqs/liboqs-0.7.2/src/sig/dilithium/pqcrystals-dilithium_dilithium2_avx2/sign.c:113\r\n        i = <optimized out>\r\n        seedbuf = \"\\027\\363cP\\242{\\025-\\267\\224\\317^\\246\\032\\307\\316;\\370\\064C9\\310{\\362\\227\\254*Y\\272\\326\\312n\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\\352\\250\\000(4\\232I$\\250[\\345\\342\\037\\264\\212V\\266\\324\\321y^Usȼt\\363\\310\\363\\064\\037\\366y\\005\\273\"\r\n        rho = 0x7fffffffc0b0 \"\\027\\363cP\\242{\\025-\\267\\224\\317^\\246\\032\\307\\316;\\370\\064C9\\310{\\362\\227\\254*Y\\272\\326\\312n\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>\r\n        rhoprime = 0x7fffffffc0d0 \"\\363\\036\\003\\312\\020\\250\\205\\317@\\277V\\257Z\\246\\001,\\323L\\316RГ\\347\\302[zl\\213\\251\\034\\206\\263\\331b\\362\\026\\211>\\230\\333xLD\\f\\260\\v\\005\\026\\210\\060\\220.p^\\216\\001\\211u\\265b\\244\", <incomplete sequence \\352\\250>\r\n        key = 0x7fffffffc110 \"(4\\232I$\\250[\\345\\342\\037\\264\\212V\\266\\324\\321y^Usȼt\\363\\310\\363\\064\\037\\366y\\005\\273\"\r\n        rowbuf = {{vec = {{coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}, {coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}, {coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}, {coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}}}, {vec = {{coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}, {coeffs = {0 <repeats 46 times>, -134402009, 32767, -134471040, 32767, 929627655, 0, -142601636, 32767, -142599040, 32767, -18892, 32767, -134400742, 32767, 128, 0, -142580416, 32767, -134471040, 32767, -18888, 32767, -18892, 32767, 0, 0, 0, 0, 1431651942, 21845, 1431651640, 21845, -18688, 32767, -18696, 32767, 14525432, 0, -134465592, 32767, 6, 0 <repeats 19 times>, -134224312, 32767, 929627655, 0, 1431651942, 21845, -18560, 32767, -18696, 32767, 0, 0, -134398313, 32767, 1, 0, 0, 0, 1, 0, 0, 0, 1,--Type <RET> for more, q to quit, c to continue without paging--\r\n 0, -134225216, 32767, -134225216, 32767, 1, 0, -18688, 32767, -134224312, 32767, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -142595968, 32767, -134471040, 32767, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -134225216, 32767, 11, 0, 1431666776, 21845, -9256, 32767, 1431666120, 21845, -134230016, 32767, -134372350, 32767, 1, 0, 0, 0, -142595968, 32767, -139938208, 32767, 0, 0, -16000, 32767, -9584, 32767, 0, 0, -9256, 32767, -134363154, 32767, -15872, 32767, -148952791, 32767, -12128, 32767, -12128, 32767, -15872, 32767, 0, 0, 0, 0, 0, 0, 0, 0, -142664800, 32767, 0, 0, 8064, 65535, 1431730928, 21845, 1431730620, 21845, 7, 0, -143984846, 32767, 1431730928, 21845, 1431787264, 21845, 1431730928, 21845, 1431731056, 21845, 1431787264, 21845, -149201977, 32767, -268740634...}, vec = {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 140737353953319}, {140737353884288, 929627655, 140737345753692, 140737345756288}, {140737488336436, 140737353954586, 128, 140737345774912}, {140737353884288, 140737488336440, 140737488336436, 0}, {0, 93824992233062, 93824992232760, 140737488336640}, {140737488336632, 14525432, 140737353889736, 6}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 140737354131016, 929627655, 93824992233062}, {140737488336768, 140737488336632, 0, 140737353957015}, {1, 0, 1, 0}, {1, 140737354130112, 140737354130112, 1}, {140737488336640, 140737354131016, 0, 0}, {0, 0, 0, 4294967295}, {140737345759360, 140737353884288, 0, 0}, {0, 0, 0, 140737354130112}, {11, 93824992247896, 140737488346072, 93824992247240}, {140737354125312, 140737353982978, 1, 0}, {140737345759360, 140737348417120, 0, 140737488339328}, {140737488345744, 0, 140737488346072, 140737353992174}, {140737488339456, 140737339402537, 140737488343200, 140737488343200}, {140737488339456, 0, 0, 0}, {0, 140737345690528, 0, 281470681751424}, {93824992312048, 93824992311740, 7, 140737344370482}, {93824992312048, 93824992368384, 93824992312048, 93824992312176}, {93824992368384, 140737339153351, 4026226662, -3256401226853911808}, {7, 93824992311760, 93824992368384, 93824992311760}}}, {coeffs = {0 <repeats 70 times>, -149860507, 32767, 0, 0, 0, 0, 1, 1, 32, 0, 1, 0, 12, 0, -147548296, 32767, 2, 32767, 162, 0, 230, -2147483648, 0 <repeats 12 times>, 1431932752, 21845, 7, 0, 1431932464, 21845, -142664800, 32767, 1, 0, -80, -1, 1431735712, 21845, 1431734928, 21845, -146508576, 32767, -143984846, 32767, 1431932608, 21845, -149165074, 32767, 32, 0, -17616, 32767, 1431933984, 21845, -148289043, 32767, 1431933328, 21845, 0, 0, 1431792996, 21845, 0, 0, -148289424, 32767, -149329517, 32767, -147543721, 32767, 2, 21845, -17624, 32767, 8, 0, -1, -1, -17548, 32767, 8, 0, 32, 0, -147543721, 32767, 2, 21845, -16779264, 0, 0, 0, -1073741697, 0 <repeats 11 times>, 1431792996, 21845, 0, 0, -148289424, 32767, -149329517, 32767, -147543721, 32767, 2, 32767, -17448, 32767, 8, 0, -1, -1, -17372, 32767, 8, 0, 32, 0, -147543721, 32767, 2, 32767, -17448, 32767, 8, 0, 8, 0 <repeats 11 times>, 8, 0, 1530524416, -758189994, 1431933328, 21845, -148545382, 32767, 1431933984, 21845, -148289614, 32767, 0, 0, 1530524416, -758189994, 0, 0, 1431792640, 21845, 0, 0, -149165074, 32767, 1, 0, -17120, 32767}, vec = {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 140737338494821}, {0, 0, 4294967297, 32}, {1, 12, 140737340807032, 140733193388034}, {162, -9223372036854775578, 0, 0}, {0, 0, 0, 0}, {93824992513872, 7, 93824992513584, 140737345690528}, {1, -80, 93824992316832, 93824992316048}, {140737341846752, 140737344370482, 93824992513728, 140737339190254}, {32, 140737488337712, 93824992515104, 140737340066285}, {93824992514448, 0, 93824992374116, 0}, {140737340065904, 140737339025811, 140737340811607, 93823560581122}, {140737488337704, 8, -1, 140737488337780}, {8, 32, 140737340811607, 93823560581122}, {4278188032, 0, 3221225599, 0}, {0, 0, 0, 0}, {93824992374116, 0, 140737340065904, 140737339025811}, {140737340811607, 140733193388034, 140737488337880, 8}, {-1, 140737488337956, 8, 32}, {140737340811607, 140733193388034, 140737488337880, 8}, {8, 0, 0, 0}, {0, 0, 8, -3256401226853911808}, {93824992514448, 140737339809946, 93824992515104, 140737340065714}, {0, -3256401226853911808, 0, 93824992373760}, {0, 140737339190254, 1, 140737488338208}}}, {coeffs = {1431936688, 21845, -148289043, 32767, 1431936032, 21845, 0, 0, 1431935668, 21845, 0, 0, -148289424, 32767, -149329517, 32767, -147543721, 32767, 2, 32767, -17128, 32767, 8, 0, -1, -1, 8, 0, -1, -1, 32, 0, -147543721, 32767, 2, 32767, -17128, 32767, 8, 0, 8, 0 <repeats 13 times>, 1530524416, -758189994, 1146798783, -694139627, -1620710502, 1484614369, 1430358046, -895068671, 812593241, 1770837062, 0, 0, 0, 0, 0, 0, 0, 0, 762539124, 6513005, 0, 0, 0, 0, 0, 1685323776, 0, 0, 0, 0, 0, 0, 0, 0, 760431937, 758527282, 5395523, 762537313, 758527282, 7500899, 1663919209, 1818586465, 0, 0, 0, 0, 0, 0, 0, 0, 391333185, 386666248, 5395523, 390684507, 386666248, 4738649, 1494703699, 1449088859, 0 <repeats 14 times>, 1431743136, 21845, 0, 0, 0, 0, 0, 0, 0, 0, 1431784352, 21845, 1431779680, 21845, 0 <repeats 12 times>, 1431774240, 21845, 1431764288, 21845, 1431768848, 21845, 1431752976, 21845, 0, 0, 0, 0, 0, 0, 0, 0, 1431781472, 21845, 1431780544, 21845, 0, 0, 1431779968, 21845, 0 <repeats 12 times>, 1431743136, 21845, 1431770672, 21845, 0 <repeats 64 times>}, vec = {{93824992517808, 140737340066285, 93824992517152, 0}, {93824992516788, 0, 140737340065904, 140737339025811}, {140737340811607, 140733193388034, 140737488338200, 8}, --Type <RET> for more, q to quit, c to continue without paging--\r\n{-1, 8, -1, 32}, {140737340811607, 140733193388034, 140737488338200, 8}, {8, 0, 0, 0}, {0, 0, 0, -3256401226853911808}, {-2981306995675839809, 6376370164700933018, -3844290668188825570, 7605687268647317593}, {0, 0, 0, 0}, {27973144236223604, 0, 0, 7238410501091229696}, {0, 0, 0, 0}, {3257849870074201409, 3275072821320111171, 32216116654126386, 7810769393787167849}, {0, 0, 0, 0}, {1660718890018358593, 1677977180624278595, 20352342868889352, 6223789259897658963}, {0, 0, 0, 0}, {0, 0, 0, 93824992324256}, {0, 0, 0, 0}, {93824992365472, 93824992360800, 0, 0}, {0, 0, 0, 0}, {93824992355360, 93824992345408, 93824992349968, 93824992334096}, {0, 0, 0, 0}, {93824992362592, 93824992361664, 0, 93824992361088}, {0, 0, 0, 0}, {0, 0, 93824992324256, 93824992351792}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}}}}\r\n        s1 = {vec = {{coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}, {coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}, {coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}, {coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}}}\r\n        row = 0x7fffffffa0a0\r\n        s2 = {vec = {{coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}, {coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}, {coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}, {coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}}}\r\n        t1 = {coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}\r\n        t0 = {coeffs = {0 <repeats 256 times>}, vec = {{0, 0, 0, 0} <repeats 32 times>}}\r\n#5  0x0000555555555280 in example_stack ()\r\nNo symbol table info available.\r\n#6  0x00005555555556f9 in main ()\r\n```","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1369988418/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-01-03T16:43:36Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26200282359","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338","id":1517352230,"node_id":"I_kwDOA-eq3c5acPUm","number":1338,"title":"Segfault when running example_sig.c","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2023-01-03T12:54:06Z","updated_at":"2023-01-03T16:50:27Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nI was trying the library for the first time and I'm getting a segmentation fault when trying to run [this example](https://github.com/open-quantum-safe/liboqs/wiki/Minimal-example-of-a-post-quantum-signature).\r\n\r\nHere is the bt:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x0000000000000000 in ?? ()\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff7bc3a58 in ?? () from /usr/lib/liboqs.so.2\r\n#2  0x00007ffff7bc44c2 in ?? () from /usr/lib/liboqs.so.2\r\n#3  0x00007ffff792c47e in pqcrystals_dilithium2_avx2_pointwise_acc_avx () from /usr/lib/liboqs.so.2\r\n#4  0x00007ffff7931e93 in pqcrystals_dilithium2_avx2_nttunpack_avx () from /usr/lib/liboqs.so.2\r\n#5  0x0000555555555280 in example_stack ()\r\n#6  0x00005555555556f9 in main ()\r\n```\r\n\r\nI build liboqs 0.7.2 with these options (for more details check [this PKGBUILD](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=liboqs) for Arch Linux):\r\n```\r\ncmake -G Ninja -B build -S \"${pkgname}-${pkgver}\"\\\r\n        -DBUILD_SHARED_LIBS='ON' \\\r\n        -DCMAKE_BUILD_TYPE='None' \\\r\n        -DCMAKE_INSTALL_PREFIX=\"${pkgdir}/usr\" \\\r\n        -DOQS_BUILD_ONLY_LIB='OFF' \\\r\n        -DOQS_DIST_BUILD='ON' \\\r\n        -DOQS_USE_AES_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA2_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA3_OPENSSL='ON' \\\r\n        -DOQS_OPT_TARGET='generic' \\\r\n        -Wno-dev\r\n```\r\nAnd I'm using have glibc 2.36. Please let me know anything else I could do to help debug this issue. I will try to build liboqs with `CMAKE_BUILD_TYPE='Debug'`.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1369995822","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338#issuecomment-1369995822","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","id":1369995822,"node_id":"IC_kwDOA-eq3c5RqHou","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-01-03T16:50:27Z","updated_at":"2023-01-03T16:50:27Z","author_association":"MEMBER","body":"Can you please check and see whether you can run `build/tests/test_sha3` successfully (and post the output)?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1369995822/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-01-03T16:50:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26200548201","type":"IssueCommentEvent","actor":{"id":56026339,"login":"drouhana","display_login":"drouhana","gravatar_id":"","url":"https://api.github.com/users/drouhana","avatar_url":"https://avatars.githubusercontent.com/u/56026339?"},"repo":{"id":218087071,"name":"open-quantum-safe/oqs-demos","url":"https://api.github.com/repos/open-quantum-safe/oqs-demos"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/161","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/161/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/161/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/161/events","html_url":"https://github.com/open-quantum-safe/oqs-demos/pull/161","id":1430480103,"node_id":"PR_kwDODP--n85B6t9B","number":161,"title":"OQS Enabled Envoy Contribution","user":{"login":"drouhana","id":56026339,"node_id":"MDQ6VXNlcjU2MDI2MzM5","avatar_url":"https://avatars.githubusercontent.com/u/56026339?v=4","gravatar_id":"","url":"https://api.github.com/users/drouhana","html_url":"https://github.com/drouhana","followers_url":"https://api.github.com/users/drouhana/followers","following_url":"https://api.github.com/users/drouhana/following{/other_user}","gists_url":"https://api.github.com/users/drouhana/gists{/gist_id}","starred_url":"https://api.github.com/users/drouhana/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drouhana/subscriptions","organizations_url":"https://api.github.com/users/drouhana/orgs","repos_url":"https://api.github.com/users/drouhana/repos","events_url":"https://api.github.com/users/drouhana/events{/privacy}","received_events_url":"https://api.github.com/users/drouhana/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2022-10-31T20:51:29Z","updated_at":"2023-01-03T17:03:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/pulls/161","html_url":"https://github.com/open-quantum-safe/oqs-demos/pull/161","diff_url":"https://github.com/open-quantum-safe/oqs-demos/pull/161.diff","patch_url":"https://github.com/open-quantum-safe/oqs-demos/pull/161.patch","merged_at":null},"body":"I hope I have checked all the boxes in the contribution guide.\r\n\r\nThank you!\r\n\r\nDaniel","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/161/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/161/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/comments/1370009897","html_url":"https://github.com/open-quantum-safe/oqs-demos/pull/161#issuecomment-1370009897","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/161","id":1370009897,"node_id":"IC_kwDODP--n85RqLEp","user":{"login":"drouhana","id":56026339,"node_id":"MDQ6VXNlcjU2MDI2MzM5","avatar_url":"https://avatars.githubusercontent.com/u/56026339?v=4","gravatar_id":"","url":"https://api.github.com/users/drouhana","html_url":"https://github.com/drouhana","followers_url":"https://api.github.com/users/drouhana/followers","following_url":"https://api.github.com/users/drouhana/following{/other_user}","gists_url":"https://api.github.com/users/drouhana/gists{/gist_id}","starred_url":"https://api.github.com/users/drouhana/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drouhana/subscriptions","organizations_url":"https://api.github.com/users/drouhana/orgs","repos_url":"https://api.github.com/users/drouhana/repos","events_url":"https://api.github.com/users/drouhana/events{/privacy}","received_events_url":"https://api.github.com/users/drouhana/received_events","type":"User","site_admin":false},"created_at":"2023-01-03T17:03:47Z","updated_at":"2023-01-03T17:03:47Z","author_association":"NONE","body":"No worries, it was a good learning experience :)\r\n\r\nprocess.yml was only needed for local circleci building and testing, I have removed it and the \"ls -la\" (good catch, thank you again)\r\n\r\nI have added the link and my name to the contributor list as well. Thank you again for your patience, I know I have taken my sweet time finishing this! Please let me know if you need anything else from me for this PR","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/comments/1370009897/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-01-03T17:03:48Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26200747537","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338","id":1517352230,"node_id":"I_kwDOA-eq3c5acPUm","number":1338,"title":"Segfault when running example_sig.c","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2023-01-03T12:54:06Z","updated_at":"2023-01-03T17:13:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nI was trying the library for the first time and I'm getting a segmentation fault when trying to run [this example](https://github.com/open-quantum-safe/liboqs/wiki/Minimal-example-of-a-post-quantum-signature).\r\n\r\nHere is the bt:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x0000000000000000 in ?? ()\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff7bc3a58 in ?? () from /usr/lib/liboqs.so.2\r\n#2  0x00007ffff7bc44c2 in ?? () from /usr/lib/liboqs.so.2\r\n#3  0x00007ffff792c47e in pqcrystals_dilithium2_avx2_pointwise_acc_avx () from /usr/lib/liboqs.so.2\r\n#4  0x00007ffff7931e93 in pqcrystals_dilithium2_avx2_nttunpack_avx () from /usr/lib/liboqs.so.2\r\n#5  0x0000555555555280 in example_stack ()\r\n#6  0x00005555555556f9 in main ()\r\n```\r\n\r\nI build liboqs 0.7.2 with these options (for more details check [this PKGBUILD](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=liboqs) for Arch Linux):\r\n```\r\ncmake -G Ninja -B build -S \"${pkgname}-${pkgver}\"\\\r\n        -DBUILD_SHARED_LIBS='ON' \\\r\n        -DCMAKE_BUILD_TYPE='None' \\\r\n        -DCMAKE_INSTALL_PREFIX=\"${pkgdir}/usr\" \\\r\n        -DOQS_BUILD_ONLY_LIB='OFF' \\\r\n        -DOQS_DIST_BUILD='ON' \\\r\n        -DOQS_USE_AES_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA2_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA3_OPENSSL='ON' \\\r\n        -DOQS_OPT_TARGET='generic' \\\r\n        -Wno-dev\r\n```\r\nAnd I'm using have glibc 2.36. Please let me know anything else I could do to help debug this issue. I will try to build liboqs with `CMAKE_BUILD_TYPE='Debug'`.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1370023009","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338#issuecomment-1370023009","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","id":1370023009,"node_id":"IC_kwDOA-eq3c5RqORh","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2023-01-03T17:13:37Z","updated_at":"2023-01-03T17:13:37Z","author_association":"CONTRIBUTOR","body":"Thanks for the report, I was able to reproduce it. Will have a closer look.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1370023009/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-01-03T17:13:38Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26200772638","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338","id":1517352230,"node_id":"I_kwDOA-eq3c5acPUm","number":1338,"title":"Segfault when running example_sig.c","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2023-01-03T12:54:06Z","updated_at":"2023-01-03T17:14:56Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nI was trying the library for the first time and I'm getting a segmentation fault when trying to run [this example](https://github.com/open-quantum-safe/liboqs/wiki/Minimal-example-of-a-post-quantum-signature).\r\n\r\nHere is the bt:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x0000000000000000 in ?? ()\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff7bc3a58 in ?? () from /usr/lib/liboqs.so.2\r\n#2  0x00007ffff7bc44c2 in ?? () from /usr/lib/liboqs.so.2\r\n#3  0x00007ffff792c47e in pqcrystals_dilithium2_avx2_pointwise_acc_avx () from /usr/lib/liboqs.so.2\r\n#4  0x00007ffff7931e93 in pqcrystals_dilithium2_avx2_nttunpack_avx () from /usr/lib/liboqs.so.2\r\n#5  0x0000555555555280 in example_stack ()\r\n#6  0x00005555555556f9 in main ()\r\n```\r\n\r\nI build liboqs 0.7.2 with these options (for more details check [this PKGBUILD](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=liboqs) for Arch Linux):\r\n```\r\ncmake -G Ninja -B build -S \"${pkgname}-${pkgver}\"\\\r\n        -DBUILD_SHARED_LIBS='ON' \\\r\n        -DCMAKE_BUILD_TYPE='None' \\\r\n        -DCMAKE_INSTALL_PREFIX=\"${pkgdir}/usr\" \\\r\n        -DOQS_BUILD_ONLY_LIB='OFF' \\\r\n        -DOQS_DIST_BUILD='ON' \\\r\n        -DOQS_USE_AES_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA2_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA3_OPENSSL='ON' \\\r\n        -DOQS_OPT_TARGET='generic' \\\r\n        -Wno-dev\r\n```\r\nAnd I'm using have glibc 2.36. Please let me know anything else I could do to help debug this issue. I will try to build liboqs with `CMAKE_BUILD_TYPE='Debug'`.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1370024434","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338#issuecomment-1370024434","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","id":1370024434,"node_id":"IC_kwDOA-eq3c5RqOny","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2023-01-03T17:14:56Z","updated_at":"2023-01-03T17:14:56Z","author_association":"MEMBER","body":"This config output indicates use of OpenSSL3 for SHA3 but the bt symbols then point to OQS code... If you feel like trying something else, please recompile without OpenSSL support and see whether that changes sth... I'm not too sure too many people have used `liboqs` with OpenSSL3... Thanks @bhess for the \"reproducer\". Also with OSSL3 or 1.1.1?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1370024434/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-01-03T17:14:56Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26200816278","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338","id":1517352230,"node_id":"I_kwDOA-eq3c5acPUm","number":1338,"title":"Segfault when running example_sig.c","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2023-01-03T12:54:06Z","updated_at":"2023-01-03T17:17:15Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nI was trying the library for the first time and I'm getting a segmentation fault when trying to run [this example](https://github.com/open-quantum-safe/liboqs/wiki/Minimal-example-of-a-post-quantum-signature).\r\n\r\nHere is the bt:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x0000000000000000 in ?? ()\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff7bc3a58 in ?? () from /usr/lib/liboqs.so.2\r\n#2  0x00007ffff7bc44c2 in ?? () from /usr/lib/liboqs.so.2\r\n#3  0x00007ffff792c47e in pqcrystals_dilithium2_avx2_pointwise_acc_avx () from /usr/lib/liboqs.so.2\r\n#4  0x00007ffff7931e93 in pqcrystals_dilithium2_avx2_nttunpack_avx () from /usr/lib/liboqs.so.2\r\n#5  0x0000555555555280 in example_stack ()\r\n#6  0x00005555555556f9 in main ()\r\n```\r\n\r\nI build liboqs 0.7.2 with these options (for more details check [this PKGBUILD](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=liboqs) for Arch Linux):\r\n```\r\ncmake -G Ninja -B build -S \"${pkgname}-${pkgver}\"\\\r\n        -DBUILD_SHARED_LIBS='ON' \\\r\n        -DCMAKE_BUILD_TYPE='None' \\\r\n        -DCMAKE_INSTALL_PREFIX=\"${pkgdir}/usr\" \\\r\n        -DOQS_BUILD_ONLY_LIB='OFF' \\\r\n        -DOQS_DIST_BUILD='ON' \\\r\n        -DOQS_USE_AES_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA2_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA3_OPENSSL='ON' \\\r\n        -DOQS_OPT_TARGET='generic' \\\r\n        -Wno-dev\r\n```\r\nAnd I'm using have glibc 2.36. Please let me know anything else I could do to help debug this issue. I will try to build liboqs with `CMAKE_BUILD_TYPE='Debug'`.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1370027017","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338#issuecomment-1370027017","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","id":1370027017,"node_id":"IC_kwDOA-eq3c5RqPQJ","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2023-01-03T17:17:15Z","updated_at":"2023-01-03T17:17:15Z","author_association":"CONTRIBUTOR","body":"The issue only occurs with OpenSSL SHA3. Kyber and Dilithium might be the only ones using this particular API. I only tested with OpenSSL 1.1.1q.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1370027017/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-01-03T17:17:15Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26202423216","type":"IssueCommentEvent","actor":{"id":15230534,"login":"iyanmv","display_login":"iyanmv","gravatar_id":"","url":"https://api.github.com/users/iyanmv","avatar_url":"https://avatars.githubusercontent.com/u/15230534?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338","id":1517352230,"node_id":"I_kwDOA-eq3c5acPUm","number":1338,"title":"Segfault when running example_sig.c","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2023-01-03T12:54:06Z","updated_at":"2023-01-03T18:49:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nI was trying the library for the first time and I'm getting a segmentation fault when trying to run [this example](https://github.com/open-quantum-safe/liboqs/wiki/Minimal-example-of-a-post-quantum-signature).\r\n\r\nHere is the bt:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x0000000000000000 in ?? ()\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff7bc3a58 in ?? () from /usr/lib/liboqs.so.2\r\n#2  0x00007ffff7bc44c2 in ?? () from /usr/lib/liboqs.so.2\r\n#3  0x00007ffff792c47e in pqcrystals_dilithium2_avx2_pointwise_acc_avx () from /usr/lib/liboqs.so.2\r\n#4  0x00007ffff7931e93 in pqcrystals_dilithium2_avx2_nttunpack_avx () from /usr/lib/liboqs.so.2\r\n#5  0x0000555555555280 in example_stack ()\r\n#6  0x00005555555556f9 in main ()\r\n```\r\n\r\nI build liboqs 0.7.2 with these options (for more details check [this PKGBUILD](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=liboqs) for Arch Linux):\r\n```\r\ncmake -G Ninja -B build -S \"${pkgname}-${pkgver}\"\\\r\n        -DBUILD_SHARED_LIBS='ON' \\\r\n        -DCMAKE_BUILD_TYPE='None' \\\r\n        -DCMAKE_INSTALL_PREFIX=\"${pkgdir}/usr\" \\\r\n        -DOQS_BUILD_ONLY_LIB='OFF' \\\r\n        -DOQS_DIST_BUILD='ON' \\\r\n        -DOQS_USE_AES_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA2_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA3_OPENSSL='ON' \\\r\n        -DOQS_OPT_TARGET='generic' \\\r\n        -Wno-dev\r\n```\r\nAnd I'm using have glibc 2.36. Please let me know anything else I could do to help debug this issue. I will try to build liboqs with `CMAKE_BUILD_TYPE='Debug'`.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1370111968","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338#issuecomment-1370111968","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","id":1370111968,"node_id":"IC_kwDOA-eq3c5Rqj_g","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"created_at":"2023-01-03T18:49:54Z","updated_at":"2023-01-03T18:49:54Z","author_association":"NONE","body":"Yes, exactly, just tried with `-DOQS_USE_SHA3_OPENSSL=OFF` and all tests passed and `example_sig` runs fine.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1370111968/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-01-03T18:49:54Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26202738185","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338","id":1517352230,"node_id":"I_kwDOA-eq3c5acPUm","number":1338,"title":"Segfault when running example_sig.c","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2023-01-03T12:54:06Z","updated_at":"2023-01-03T19:08:45Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nI was trying the library for the first time and I'm getting a segmentation fault when trying to run [this example](https://github.com/open-quantum-safe/liboqs/wiki/Minimal-example-of-a-post-quantum-signature).\r\n\r\nHere is the bt:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x0000000000000000 in ?? ()\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff7bc3a58 in ?? () from /usr/lib/liboqs.so.2\r\n#2  0x00007ffff7bc44c2 in ?? () from /usr/lib/liboqs.so.2\r\n#3  0x00007ffff792c47e in pqcrystals_dilithium2_avx2_pointwise_acc_avx () from /usr/lib/liboqs.so.2\r\n#4  0x00007ffff7931e93 in pqcrystals_dilithium2_avx2_nttunpack_avx () from /usr/lib/liboqs.so.2\r\n#5  0x0000555555555280 in example_stack ()\r\n#6  0x00005555555556f9 in main ()\r\n```\r\n\r\nI build liboqs 0.7.2 with these options (for more details check [this PKGBUILD](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=liboqs) for Arch Linux):\r\n```\r\ncmake -G Ninja -B build -S \"${pkgname}-${pkgver}\"\\\r\n        -DBUILD_SHARED_LIBS='ON' \\\r\n        -DCMAKE_BUILD_TYPE='None' \\\r\n        -DCMAKE_INSTALL_PREFIX=\"${pkgdir}/usr\" \\\r\n        -DOQS_BUILD_ONLY_LIB='OFF' \\\r\n        -DOQS_DIST_BUILD='ON' \\\r\n        -DOQS_USE_AES_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA2_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA3_OPENSSL='ON' \\\r\n        -DOQS_OPT_TARGET='generic' \\\r\n        -Wno-dev\r\n```\r\nAnd I'm using have glibc 2.36. Please let me know anything else I could do to help debug this issue. I will try to build liboqs with `CMAKE_BUILD_TYPE='Debug'`.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1370128286","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338#issuecomment-1370128286","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","id":1370128286,"node_id":"IC_kwDOA-eq3c5Rqn-e","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2023-01-03T19:08:45Z","updated_at":"2023-01-03T19:08:45Z","author_association":"CONTRIBUTOR","body":"Looks like an issue in the OpenSSL code for sha3x4. After a reset, the context needs to be initialized again before use. Otherwise we get the segfault as observed:\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/2e42595804242d1e24e04f0f770a348c0c22313b/src/common/sha3/ossl_sha3x4.c#L119-L126\r\n\r\n...compared to the implementation for sha3(x1) reset:\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/2e42595804242d1e24e04f0f770a348c0c22313b/src/common/sha3/ossl_sha3.c#L222-L227\r\n\r\nI will open a PR with the fix.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1370128286/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-01-03T19:08:45Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26204174270","type":"IssueCommentEvent","actor":{"id":15230534,"login":"iyanmv","display_login":"iyanmv","gravatar_id":"","url":"https://api.github.com/users/iyanmv","avatar_url":"https://avatars.githubusercontent.com/u/15230534?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338","id":1517352230,"node_id":"I_kwDOA-eq3c5acPUm","number":1338,"title":"Segfault when running example_sig.c","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2023-01-03T12:54:06Z","updated_at":"2023-01-03T20:37:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nI was trying the library for the first time and I'm getting a segmentation fault when trying to run [this example](https://github.com/open-quantum-safe/liboqs/wiki/Minimal-example-of-a-post-quantum-signature).\r\n\r\nHere is the bt:\r\n```\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x0000000000000000 in ?? ()\r\n(gdb) bt\r\n#0  0x0000000000000000 in ?? ()\r\n#1  0x00007ffff7bc3a58 in ?? () from /usr/lib/liboqs.so.2\r\n#2  0x00007ffff7bc44c2 in ?? () from /usr/lib/liboqs.so.2\r\n#3  0x00007ffff792c47e in pqcrystals_dilithium2_avx2_pointwise_acc_avx () from /usr/lib/liboqs.so.2\r\n#4  0x00007ffff7931e93 in pqcrystals_dilithium2_avx2_nttunpack_avx () from /usr/lib/liboqs.so.2\r\n#5  0x0000555555555280 in example_stack ()\r\n#6  0x00005555555556f9 in main ()\r\n```\r\n\r\nI build liboqs 0.7.2 with these options (for more details check [this PKGBUILD](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=liboqs) for Arch Linux):\r\n```\r\ncmake -G Ninja -B build -S \"${pkgname}-${pkgver}\"\\\r\n        -DBUILD_SHARED_LIBS='ON' \\\r\n        -DCMAKE_BUILD_TYPE='None' \\\r\n        -DCMAKE_INSTALL_PREFIX=\"${pkgdir}/usr\" \\\r\n        -DOQS_BUILD_ONLY_LIB='OFF' \\\r\n        -DOQS_DIST_BUILD='ON' \\\r\n        -DOQS_USE_AES_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA2_OPENSSL='ON' \\\r\n        -DOQS_USE_SHA3_OPENSSL='ON' \\\r\n        -DOQS_OPT_TARGET='generic' \\\r\n        -Wno-dev\r\n```\r\nAnd I'm using have glibc 2.36. Please let me know anything else I could do to help debug this issue. I will try to build liboqs with `CMAKE_BUILD_TYPE='Debug'`.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1370202162","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1338#issuecomment-1370202162","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1338","id":1370202162,"node_id":"IC_kwDOA-eq3c5Rq6Ay","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"created_at":"2023-01-03T20:37:54Z","updated_at":"2023-01-03T20:37:54Z","author_association":"NONE","body":"Applying that patch fixes the issue for me. Thanks!","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1370202162/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2023-01-03T20:37:55Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
