{"id":"30311138536","type":"IssuesEvent","actor":{"id":15230534,"login":"iyanmv","display_login":"iyanmv","gravatar_id":"","url":"https://api.github.com/users/iyanmv","avatar_url":"https://avatars.githubusercontent.com/u/15230534?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/210","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/210/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/210/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/210/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/210","id":1796661386,"node_id":"I_kwDOE_A9l85rFuCK","number":210,"title":"Missing algorithms even though enabled in liboqs","user":{"login":"iyanmv","id":15230534,"node_id":"MDQ6VXNlcjE1MjMwNTM0","avatar_url":"https://avatars.githubusercontent.com/u/15230534?v=4","gravatar_id":"","url":"https://api.github.com/users/iyanmv","html_url":"https://github.com/iyanmv","followers_url":"https://api.github.com/users/iyanmv/followers","following_url":"https://api.github.com/users/iyanmv/following{/other_user}","gists_url":"https://api.github.com/users/iyanmv/gists{/gist_id}","starred_url":"https://api.github.com/users/iyanmv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iyanmv/subscriptions","organizations_url":"https://api.github.com/users/iyanmv/orgs","repos_url":"https://api.github.com/users/iyanmv/repos","events_url":"https://api.github.com/users/iyanmv/events{/privacy}","received_events_url":"https://api.github.com/users/iyanmv/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2023-07-10T12:21:36Z","updated_at":"2023-07-10T12:54:11Z","closed_at":"2023-07-10T12:54:10Z","author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nI compiled `liboqs` in the following way:\r\n\r\n```\r\nbuild() {\r\n    cmake -G Ninja -B build -S \"${pkgname}-${pkgver//_/-}\"\\\r\n        -DBUILD_SHARED_LIBS=ON \\\r\n        -DCMAKE_BUILD_TYPE=None \\\r\n        -DCMAKE_INSTALL_PREFIX=\"${pkgdir}/usr\" \\\r\n        -DOQS_ALGS_ENABLED=All \\\r\n        -DOQS_BUILD_ONLY_LIB=OFF \\\r\n        -DOQS_DIST_BUILD=ON \\\r\n        -DOQS_USE_OPENSSL=ON \\\r\n        -DOQS_USE_AES_OPENSSL=ON \\\r\n        -DOQS_USE_SHA2_OPENSSL=ON \\\r\n        -DOQS_USE_SHA3_OPENSSL=ON \\\r\n        -DOQS_OPT_TARGET=x86-64 \\\r\n        -DOQS_STRICT_WARNINGS=ON \\\r\n        -Wno-dev\r\n    ninja -C build\r\n    ninja -C build gen_docs\r\n}\r\n```\r\nThe complete PKGBUILD can be found [here](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=liboqs).\r\n\r\nThen I compiled oqs-provider with:\r\n\r\n```\r\nbuild() {\r\n    cmake -B build -S \"${_pkgname}-${pkgver}\" \\\r\n        -DCMAKE_BUILD_TYPE='None' \\\r\n        -DCMAKE_INSTALL_PREFIX='/usr' \\\r\n        -Wno-dev\r\n    cmake --build build\r\n}\r\n```\r\nThe full PKGBUILD is also [here](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=oqsprovider).\r\n\r\nThe issue is that I don't get all the available algorithms that I can use with `liboqs` directly. For example, \r\n\r\n```bash\r\n$ openssl list -signature-algorithms -provider oqsprovider | grep sphincsshake\r\n  sphincsshake128fsimple @ oqsprovider\r\n  p256_sphincsshake128fsimple @ oqsprovider\r\n  rsa3072_sphincsshake128fsimple @ oqsprovider\r\n```\r\n\r\nOnly the NIST level 1 and fast variant of SPHINCS+ are available. Is this a known limitation or am I doing something wrong? \r\n\r\nThe complete list of signature algorithms that I get from the oqs-provider is this:\r\n\r\n```bash\r\nopenssl list -signature-algorithms -provider oqsprovider                    \r\n  dilithium2 @ oqsprovider\r\n  p256_dilithium2 @ oqsprovider\r\n  rsa3072_dilithium2 @ oqsprovider\r\n  dilithium3 @ oqsprovider\r\n  p384_dilithium3 @ oqsprovider\r\n  dilithium5 @ oqsprovider\r\n  p521_dilithium5 @ oqsprovider\r\n  falcon512 @ oqsprovider\r\n  p256_falcon512 @ oqsprovider\r\n  rsa3072_falcon512 @ oqsprovider\r\n  falcon1024 @ oqsprovider\r\n  p521_falcon1024 @ oqsprovider\r\n  sphincssha2128fsimple @ oqsprovider\r\n  p256_sphincssha2128fsimple @ oqsprovider\r\n  rsa3072_sphincssha2128fsimple @ oqsprovider\r\n  sphincssha2128ssimple @ oqsprovider\r\n  p256_sphincssha2128ssimple @ oqsprovider\r\n  rsa3072_sphincssha2128ssimple @ oqsprovider\r\n  sphincssha2192fsimple @ oqsprovider\r\n  p384_sphincssha2192fsimple @ oqsprovider\r\n  sphincsshake128fsimple @ oqsprovider\r\n  p256_sphincsshake128fsimple @ oqsprovider\r\n  rsa3072_sphincsshake128fsimple @ oqsprovider\r\n```\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Arch Linux\r\n - OpenSSL version: OpenSSL 3.1.1 30 May 2023 (Library: OpenSSL 3.1.1 30 May 2023)\r\n - Version: 0.5.0","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/210/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/210/timeline","performed_via_github_app":null,"state_reason":"completed"}},"public":true,"created_at":"2023-07-10T12:54:11Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"30314835062","type":"IssuesEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1038","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1038/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1038/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1038/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1038","id":932296798,"node_id":"MDU6SXNzdWU5MzIyOTY3OTg=","number":1038,"title":"SPHINCS+ memcpy source and destination overlap - undefined behavior","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-06-29T07:12:04Z","updated_at":"2023-07-10T14:56:17Z","closed_at":"2023-07-10T14:56:16Z","author_association":"MEMBER","active_lock_reason":null,"body":"The SPHINCS+ implementations have cases of memcpy use where the source and destination overlap. According to the C standard and posix, memcpy behavior is undefined if memory regions overlap.\r\n\r\nDetected using valgrind on ppc64le/Ubuntu focal. Memcpy implementations vary, so it seems to be not detected with valgrind on x86_64.\r\n\r\nThe cause in `gen_chain`:\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/d9fb4e0e81ccd0a0972b38743404d982fe0a90c1/src/sig/sphincs/pqclean_sphincs-haraka-128f-robust_clean/wots.c#L37-L44\r\n\r\nUsed for example by `wots_gen_pk`, where src and dst are the same. The replicated code of all variants is affected:\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/d9fb4e0e81ccd0a0972b38743404d982fe0a90c1/src/sig/sphincs/pqclean_sphincs-haraka-128f-robust_clean/wots.c#L122-L123\r\n\r\nUsing memmove would be the safe alternative, or avoid memcpy if src and dst are the same.\r\n\r\nBelow is the valgrind log. It's part of a constant-time check, but the issues detected are because of overlapping memory.\r\n[ppc64le.txt](https://github.com/open-quantum-safe/liboqs/files/6731356/ppc64le.txt)","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1038/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1038/timeline","performed_via_github_app":null,"state_reason":"completed"}},"public":true,"created_at":"2023-07-10T14:56:18Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"30316331499","type":"IssuesEvent","actor":{"id":5929871,"login":"micheleselea","display_login":"micheleselea","gravatar_id":"","url":"https://api.github.com/users/micheleselea","avatar_url":"https://avatars.githubusercontent.com/u/5929871?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/211","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/211/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/211/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/211/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/211","id":1797053562,"node_id":"I_kwDOE_A9l85rHNx6","number":211,"title":"Programmatically load provider","user":{"login":"micheleselea","id":5929871,"node_id":"MDQ6VXNlcjU5Mjk4NzE=","avatar_url":"https://avatars.githubusercontent.com/u/5929871?v=4","gravatar_id":"","url":"https://api.github.com/users/micheleselea","html_url":"https://github.com/micheleselea","followers_url":"https://api.github.com/users/micheleselea/followers","following_url":"https://api.github.com/users/micheleselea/following{/other_user}","gists_url":"https://api.github.com/users/micheleselea/gists{/gist_id}","starred_url":"https://api.github.com/users/micheleselea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/micheleselea/subscriptions","organizations_url":"https://api.github.com/users/micheleselea/orgs","repos_url":"https://api.github.com/users/micheleselea/repos","events_url":"https://api.github.com/users/micheleselea/events{/privacy}","received_events_url":"https://api.github.com/users/micheleselea/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-07-10T15:48:57Z","updated_at":"2023-07-10T15:48:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi all, I was able to compile libqos and oqsprovider under windows, so I end up with oqsprovider.dll\r\nI'm trying to integrate dll in my c++ code loading dll in some way as\r\n`OSSL_PROVIDER_try_load(NULL, \"oqsprovider\", 1);`\r\nbut I can't load it. Do you have some advice for me on how can programmatically load provider?\r\nthanks","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/211/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/211/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2023-07-10T15:48:58Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"30316732986","type":"IssuesEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1506","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1506/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1506/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1506/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1506","id":1797076784,"node_id":"I_kwDOA-eq3c5rHTcw","number":1506,"title":"macOS M1: dilithium/aarch64 not compiling with gcc","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-07-10T16:04:03Z","updated_at":"2023-07-10T16:04:03Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"**Describe the bug**\r\nCompiling fails on macOS (M1) when using gcc.\r\n\r\n```\r\n...\r\n[ 63%] Building ASM object src/sig/dilithium/CMakeFiles/dilithium_2_aarch64.dir/pqclean_dilithium2_aarch64/__asm_iNTT.S.o\r\n/Users/bhe/git/liboqs/src/sig/dilithium/pqclean_dilithium2_aarch64/__asm_iNTT.S:8:1: error: unknown directive\r\n.type PQCLEAN_DILITHIUM2_AARCH64_asm_intt_SIMD_top, %function\r\n^\r\n/Users/bhe/git/liboqs/src/sig/dilithium/pqclean_dilithium2_aarch64/__asm_iNTT.S:418:1: error: unknown directive\r\n.type PQCLEAN_DILITHIUM2_AARCH64_asm_intt_SIMD_bot, %function\r\n^\r\n...\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\ncmake -DCMAKE_C_COMPILER=gcc-13 ..\r\nmake\r\n```\r\n\r\n**Environment (please complete the following information):**\r\n - OS: macOS 13.4.1\r\n - OpenSSL version 1.1.1t\r\n - Compiler version used: gcc-13 (Homebrew GCC 13.1.0) 13.1.0\r\n - Build variables used \"-DCMAKE_C_COMPILER=gcc-13\"\r\n - liboqs version: main\r\n\r\n**Additional context**\r\nThe respective \".type <fun>, %function\" statements in the aarch64 assembly code are excluded for clang but not for gcc:\r\nhttps://github.com/open-quantum-safe/liboqs/blob/93e784725e3be0aaa2691a557456ff786155a7b2/src/sig/dilithium/pqclean_dilithium2_aarch64/__asm_iNTT.S#L7-L9\r\nPQClean upstream appears to have removed the \".type <fun>, %function\" statements in the [meanwhile](https://github.com/PQClean/PQClean/commit/0b8db0f8323734b60f638c97f026ac8b66b42378), so a fresh copy_from_upstream might help.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1506/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1506/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2023-07-10T16:04:04Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
