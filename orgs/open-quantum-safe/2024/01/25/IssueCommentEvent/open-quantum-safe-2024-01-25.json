{"id":"35107927735","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1676","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1676/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1676/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1676/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1676","id":2095404797,"node_id":"PR_kwDOA-eq3c5kzQLj","number":1676,"title":"Disable Stateful Signatures in the build by default","user":{"login":"ashman-p","id":23340773,"node_id":"MDQ6VXNlcjIzMzQwNzcz","avatar_url":"https://avatars.githubusercontent.com/u/23340773?v=4","gravatar_id":"","url":"https://api.github.com/users/ashman-p","html_url":"https://github.com/ashman-p","followers_url":"https://api.github.com/users/ashman-p/followers","following_url":"https://api.github.com/users/ashman-p/following{/other_user}","gists_url":"https://api.github.com/users/ashman-p/gists{/gist_id}","starred_url":"https://api.github.com/users/ashman-p/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashman-p/subscriptions","organizations_url":"https://api.github.com/users/ashman-p/orgs","repos_url":"https://api.github.com/users/ashman-p/repos","events_url":"https://api.github.com/users/ashman-p/events{/privacy}","received_events_url":"https://api.github.com/users/ashman-p/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"ashman-p","id":23340773,"node_id":"MDQ6VXNlcjIzMzQwNzcz","avatar_url":"https://avatars.githubusercontent.com/u/23340773?v=4","gravatar_id":"","url":"https://api.github.com/users/ashman-p","html_url":"https://github.com/ashman-p","followers_url":"https://api.github.com/users/ashman-p/followers","following_url":"https://api.github.com/users/ashman-p/following{/other_user}","gists_url":"https://api.github.com/users/ashman-p/gists{/gist_id}","starred_url":"https://api.github.com/users/ashman-p/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashman-p/subscriptions","organizations_url":"https://api.github.com/users/ashman-p/orgs","repos_url":"https://api.github.com/users/ashman-p/repos","events_url":"https://api.github.com/users/ashman-p/events{/privacy}","received_events_url":"https://api.github.com/users/ashman-p/received_events","type":"User","site_admin":false},"assignees":[{"login":"ashman-p","id":23340773,"node_id":"MDQ6VXNlcjIzMzQwNzcz","avatar_url":"https://avatars.githubusercontent.com/u/23340773?v=4","gravatar_id":"","url":"https://api.github.com/users/ashman-p","html_url":"https://github.com/ashman-p","followers_url":"https://api.github.com/users/ashman-p/followers","following_url":"https://api.github.com/users/ashman-p/following{/other_user}","gists_url":"https://api.github.com/users/ashman-p/gists{/gist_id}","starred_url":"https://api.github.com/users/ashman-p/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashman-p/subscriptions","organizations_url":"https://api.github.com/users/ashman-p/orgs","repos_url":"https://api.github.com/users/ashman-p/repos","events_url":"https://api.github.com/users/ashman-p/events{/privacy}","received_events_url":"https://api.github.com/users/ashman-p/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2024-01-23T07:14:17Z","updated_at":"2024-01-25T07:04:26Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1676","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1676","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1676.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1676.patch","merged_at":null},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\nThis commit will disable XMSS and LMS from the build by default. When enabled key and signature generation is also disabled by default. They can be enabled by defining the following variables on the config command.\r\n\r\n-DOQS_ENABLE_SIG_STFL_KEY_SIG_GEN=ON\r\n-DOQS_ENABLE_SIG_STFL_XMSS = ON\r\n-DOQS_ENABLE_SIG_STFL_LMS = ON\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in fully supported downstream projects dependent on these, i.e., [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1676/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1676/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1909468421","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1676#issuecomment-1909468421","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1676","id":1909468421,"node_id":"IC_kwDOA-eq3c5x0C0F","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2024-01-25T07:04:24Z","updated_at":"2024-01-25T07:04:24Z","author_association":"MEMBER","body":"> > Thanks for adding this separator (and turning it off by default)! May I ask whether it would be possible to completely replace [OQS_SIG_STFL](https://github.com/open-quantum-safe/liboqs/blob/3bf7e800f93f6f9ee362f2cdbc068e33c0fb1b7c/src/sig_stfl/sig_stfl.h#L184) with [OQS_SIG](https://github.com/open-quantum-safe/liboqs/blob/3bf7e800f93f6f9ee362f2cdbc068e33c0fb1b7c/src/sig/sig.h#L108) if \"OQS_ALLOW_SFTL_KEY_AND_SIG_GEN\" is not set?\r\n> \r\n> Hi, could you give an example or describe more about how that would look? Thanks.\r\n\r\nSure, my question is whether it would be possible (for the rest of the code to continue working) when completely wrapping the current definition for OQS_SIG_STFL in \"sig_stfl.h\" in an #ifdef OQS_ALLOW_SFTL_KEY_AND_SIG_GEN and \r\n\r\n    #define OQS_SIG_STFL OQS_SIG\r\n\r\nin the #else (#ifndef OQS_ALLOW_SFTL_KEY_AND_SIG_GEN) branch.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1909468421/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-25T07:04:26Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35117294718","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1206","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1206/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1206/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1206/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1206","id":1217903263,"node_id":"I_kwDOA-eq3c5Il7qf","number":1206,"title":"Adding a DeriveKeyPair functionality","user":{"login":"tedeaton","id":7863838,"node_id":"MDQ6VXNlcjc4NjM4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/7863838?v=4","gravatar_id":"","url":"https://api.github.com/users/tedeaton","html_url":"https://github.com/tedeaton","followers_url":"https://api.github.com/users/tedeaton/followers","following_url":"https://api.github.com/users/tedeaton/following{/other_user}","gists_url":"https://api.github.com/users/tedeaton/gists{/gist_id}","starred_url":"https://api.github.com/users/tedeaton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tedeaton/subscriptions","organizations_url":"https://api.github.com/users/tedeaton/orgs","repos_url":"https://api.github.com/users/tedeaton/repos","events_url":"https://api.github.com/users/tedeaton/events{/privacy}","received_events_url":"https://api.github.com/users/tedeaton/received_events","type":"User","site_admin":false},"labels":[{"id":423520878,"node_id":"MDU6TGFiZWw0MjM1MjA4Nzg=","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":"New feature or request"},{"id":5748933254,"node_id":"LA_kwDOA-eq3c8AAAABVqnChg","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/good%20first%20issue","name":"good first issue","color":"fbca04","default":true,"description":"Issue for new contributors"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":21,"created_at":"2022-04-27T21:30:19Z","updated_at":"2024-01-25T12:41:41Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"When a KEM keypair is derived in liboqs, it relies on randomness using [rand.h](https://github.com/open-quantum-safe/liboqs/blob/main/src/common/rand/rand.h). In some situations, it's useful to generate keypairs deterministically from a seed. When [RFC9180](https://www.rfc-editor.org/rfc/rfc9180#name-cryptographic-dependencies) defines a KEM, they include a `DeriveKeyPair` option to generate keypairs deterministically from a seed. As an example use case, [Messaging Layer Security](https://messaginglayersecurity.rocks/mls-protocol/draft-ietf-mls-protocol.html) makes extensive use of functionality to share multiple keypairs by communicating seeds. I think it would be nice to match RFC9180 and add a functionality to deterministically derive a keypair from a seed.\r\n\r\nThis is kind of possible in liboqs currently. You can set the randomness to use `OQS_RAND_alg_nist_kat`, and derive all the randomness used from a seed, but this is a somewhat imperfect solution for a few reasons:\r\n\r\n- The seed must be exactly 48 bytes\r\n- It references a global variable, resulting in concurrency issues\r\n- Modifying the randomness used is (to my knowledge) not available with any of the liboqs language wrappers\r\n\r\nI'm curious if others think this is a functionality worth adding and if so, what the proper way to tackle it might be. Some schemes, like Kyber, are already constructed in such a way that everything is derived from a seed, but liboqs provides limited ability to set that seed. I suspect the situation for other schemes is much more complex.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1206/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1206/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1910124650","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1206#issuecomment-1910124650","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1206","id":1910124650,"node_id":"IC_kwDOA-eq3c5x2jBq","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2024-01-25T12:41:40Z","updated_at":"2024-01-25T12:41:40Z","author_association":"MEMBER","body":"> Alternatively, I suppose they could return an error code and call the randomized keygen / encaps so that the caller gets secure key / ciphertext material even if they forget to check the error code.\r\n\r\nI'm not sure about this: Wouldn't this rather delay the inevitable (error occurring) for algorithms not geared to support this -- possibly to a (code) place where it's no longer obvious (creating support issues, well, probably an FAQ) for us? From the support perspective I'd much prefer a \"hard exit\" (or at the very least some error output) in such cases.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1910124650/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-25T12:41:42Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35121091708","type":"IssueCommentEvent","actor":{"id":18574746,"login":"seschu","display_login":"seschu","gravatar_id":"","url":"https://api.github.com/users/seschu","avatar_url":"https://avatars.githubusercontent.com/u/18574746?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/340","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/340/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/340/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/340/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/340","id":2093634910,"node_id":"I_kwDOE_A9l858ylVe","number":340,"title":"on replacing a pqc algorithm with a custom implementation","user":{"login":"seschu","id":18574746,"node_id":"MDQ6VXNlcjE4NTc0NzQ2","avatar_url":"https://avatars.githubusercontent.com/u/18574746?v=4","gravatar_id":"","url":"https://api.github.com/users/seschu","html_url":"https://github.com/seschu","followers_url":"https://api.github.com/users/seschu/followers","following_url":"https://api.github.com/users/seschu/following{/other_user}","gists_url":"https://api.github.com/users/seschu/gists{/gist_id}","starred_url":"https://api.github.com/users/seschu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/seschu/subscriptions","organizations_url":"https://api.github.com/users/seschu/orgs","repos_url":"https://api.github.com/users/seschu/repos","events_url":"https://api.github.com/users/seschu/events{/privacy}","received_events_url":"https://api.github.com/users/seschu/received_events","type":"User","site_admin":false},"labels":[{"id":2701983058,"node_id":"MDU6TGFiZWwyNzAxOTgzMDU4","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/labels/question","name":"question","color":"d876e3","default":true,"description":"No code change required"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2024-01-22T10:52:22Z","updated_at":"2024-01-25T14:41:06Z","closed_at":"2024-01-25T14:41:06Z","author_association":"NONE","active_lock_reason":null,"body":"Hi there,\r\n\r\nmy question is I think related to the provider concept in generel and I'd like to apologize in advance if you think this is not the right place to ask this.\r\nIf I want to \"replace\" one of the pqc kem algos with a custom lets say hardware accelerated implementation, I could probably just write my own custom provider. But would it still be possible to use the implemented hybrid schemes between pqc and classic algorithms (forex ample kyber and elliptic curves)?\r\n\r\nThanks, Sebastian","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/340/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/340/timeline","performed_via_github_app":null,"state_reason":"completed"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1910346564","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/340#issuecomment-1910346564","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/340","id":1910346564,"node_id":"IC_kwDOE_A9l85x3ZNE","user":{"login":"seschu","id":18574746,"node_id":"MDQ6VXNlcjE4NTc0NzQ2","avatar_url":"https://avatars.githubusercontent.com/u/18574746?v=4","gravatar_id":"","url":"https://api.github.com/users/seschu","html_url":"https://github.com/seschu","followers_url":"https://api.github.com/users/seschu/followers","following_url":"https://api.github.com/users/seschu/following{/other_user}","gists_url":"https://api.github.com/users/seschu/gists{/gist_id}","starred_url":"https://api.github.com/users/seschu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/seschu/subscriptions","organizations_url":"https://api.github.com/users/seschu/orgs","repos_url":"https://api.github.com/users/seschu/repos","events_url":"https://api.github.com/users/seschu/events{/privacy}","received_events_url":"https://api.github.com/users/seschu/received_events","type":"User","site_admin":false},"created_at":"2024-01-25T14:41:06Z","updated_at":"2024-01-25T14:41:06Z","author_association":"NONE","body":"\r\n> That said, \"sntrup761\" is only temporarily supported in `liboqs` because it's not proceeding through standardization but only used in `openssh`, so support may be removed in the not-too-distant future. Can I ask why you want to use/enhance with HW support this algorithm?\r\n\r\nYour curiosity is understandable. It is just for demonstrating a PQC algorithm with hardware acceleration building on existing assets taht should be used. As long as the current versions of the main work with these algos we are happy. Anyway thanks for your help!\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/1910346564/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-25T14:41:07Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35121857651","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626","id":2037831525,"node_id":"PR_kwDOA-eq3c5hzBNS","number":1626,"title":"Add ML-DSA-ipd and ML-KEM-ipd & NIST supplied test vectors","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2023-12-12T14:06:37Z","updated_at":"2024-01-25T15:03:43Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1626","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1626.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1626.patch","merged_at":null},"body":"Pull ML-DSA-ipd / ML-KEM-ipd from pq-crystals \"standard\" branch.\r\nAdds test cases with NIST supplied test vectors: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files (see also _Note on the intermediate values for ML-KEM:_ and _Note on the intermediate values for ML-DSA:_)\r\n\r\nThe NIST files are rather large (several MB) and we only use parts of the data that can be passed via the public API + randomness. So we process them and store only the data we need in `tests/PQC_Intermediate_Values` (script is included to reproduce the files)\r\n\r\nThe PR adds new test code vectors_sig.c and vectors_kem.c that for testing the NIST vectors.\r\n\r\nThe idea is to keep the current Kyber/Dilithium (round 3) versions for compatibility reasons, and add the ML-* algorithms additionally.\r\n\r\nThe naming of the algorithms is done following the IETF hackathon: ML-DSA-44-ipd, ML-DSA-65-ipd, ML-DSA-87-ipd, ML-KEM-512-ipd, ML-KEM-768-ipd, ML-KEM-1024-ipd: https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/oid_mapping.md\r\n\r\nTODOs:\r\n- [x] Add NIST supplied test vectors and code to test them\r\n- [x] Compact NIST test vectors: the files are quite large and we need only a small part of the value\r\n- [x] Pull ML-DSA-ipd from pq-crystals \"standard\" branch\r\n- [x] Pull ML-KEM-ipd from pq-crystals \"standard\" branch\r\n- [x] add patches for copy_from_upstream (for renaming to ML-KEM-ipd / ML-DSA-ipd)\r\n- [ ] ~~Pull pqclean aarch64 code (may omit for now)~~\r\n- [x] Integrate tests with CI\r\n- [x] Update docs\r\n- [x] Ensure updating to latest upstream versions (e.g. with Kyberslash fixes)\r\n- [x] Run constant-time tests on new algorithms & update valgrind files\r\n\r\nCloses #1521.\r\n\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [x] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in fully supported downstream projects dependent on these, i.e., [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1910389573","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626#issuecomment-1910389573","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626","id":1910389573,"node_id":"IC_kwDOA-eq3c5x3jtF","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2024-01-25T15:03:42Z","updated_at":"2024-01-25T15:03:42Z","author_association":"MEMBER","body":"Thanks for the review and comment @baentsch. Good point regarding naming, including the versioning in the names would indeed be a change from the current approach. I see the point of ease of re-compiling and re-deploying. However, I think there are arguments for including the versioning:\r\nFor a downstream users it seems not directly obvious if a compatibility-breaking update happened when the same name is kept (besides looking at the release notes or documentation). They in addition have to make sure that compatibility is kept, e.g. by updating OIDs for certificates. I'd argue that a name-update can help downstream to resolve ambiguities and avoid compatibility-breaking changes.\r\nFor the NIST \"competition\" algorithms, keeping the same name seems to be not much an issue as the experimenting/prototyping users will just update everything to the latest versions.\r\nWith the (almost) standard algorithms and practical deployments like the Kyber-r3-hybrid in Chrome it can be useful for interoperability to identify the exact version, and to be able to support different versions at the same time (r3, ipd, final ML-KEM).\r\nA versioning scheme for algorithms is also suggested by the IETF-PQUIP [naming convention](https://github.com/ietf-wg-pquip/state-of-protocols-and-pqc?tab=readme-ov-file#algorithm-names).","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1910389573/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-25T15:03:44Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35123303939","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626","id":2037831525,"node_id":"PR_kwDOA-eq3c5hzBNS","number":1626,"title":"Add ML-DSA-ipd and ML-KEM-ipd & NIST supplied test vectors","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2023-12-12T14:06:37Z","updated_at":"2024-01-25T15:46:49Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1626","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1626.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1626.patch","merged_at":null},"body":"Pull ML-DSA-ipd / ML-KEM-ipd from pq-crystals \"standard\" branch.\r\nAdds test cases with NIST supplied test vectors: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files (see also _Note on the intermediate values for ML-KEM:_ and _Note on the intermediate values for ML-DSA:_)\r\n\r\nThe NIST files are rather large (several MB) and we only use parts of the data that can be passed via the public API + randomness. So we process them and store only the data we need in `tests/PQC_Intermediate_Values` (script is included to reproduce the files)\r\n\r\nThe PR adds new test code vectors_sig.c and vectors_kem.c that for testing the NIST vectors.\r\n\r\nThe idea is to keep the current Kyber/Dilithium (round 3) versions for compatibility reasons, and add the ML-* algorithms additionally.\r\n\r\nThe naming of the algorithms is done following the IETF hackathon: ML-DSA-44-ipd, ML-DSA-65-ipd, ML-DSA-87-ipd, ML-KEM-512-ipd, ML-KEM-768-ipd, ML-KEM-1024-ipd: https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/oid_mapping.md\r\n\r\nTODOs:\r\n- [x] Add NIST supplied test vectors and code to test them\r\n- [x] Compact NIST test vectors: the files are quite large and we need only a small part of the value\r\n- [x] Pull ML-DSA-ipd from pq-crystals \"standard\" branch\r\n- [x] Pull ML-KEM-ipd from pq-crystals \"standard\" branch\r\n- [x] add patches for copy_from_upstream (for renaming to ML-KEM-ipd / ML-DSA-ipd)\r\n- [ ] ~~Pull pqclean aarch64 code (may omit for now)~~\r\n- [x] Integrate tests with CI\r\n- [x] Update docs\r\n- [x] Ensure updating to latest upstream versions (e.g. with Kyberslash fixes)\r\n- [x] Run constant-time tests on new algorithms & update valgrind files\r\n\r\nCloses #1521.\r\n\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [x] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in fully supported downstream projects dependent on these, i.e., [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1910475265","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626#issuecomment-1910475265","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626","id":1910475265,"node_id":"IC_kwDOA-eq3c5x34oB","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2024-01-25T15:46:48Z","updated_at":"2024-01-25T15:46:48Z","author_association":"MEMBER","body":"> For a downstream users it seems not directly obvious if a compatibility-breaking update happened when the same name is kept (besides looking at the release notes or documentation). They in addition have to make sure that compatibility is kept, e.g. by updating OIDs for certificates. I'd argue that a name-update can help downstream to resolve ambiguities and avoid compatibility-breaking changes.\r\n\r\nThe above has different meanings of the word \"user\" (of `liboqs`), so let me be precise:\r\nLet me call \"End users\" those users not knowing about software development but just interested in deploying PQC -- at most writing `nginx` config files, but typically just reading documentation, writing papers or toggling algorithm name switches. Big majority by far.\r\nLet me call \"PQ integrators\" those users writing code to make use of `liboqs`, e.g., entities changing code and assigning OIDs. No so numerous.\r\n\r\nIf PQ integrators need name changes to ascertain they also update their OIDs and link the right libraries, they may need to reconsider their job choice. \r\n\r\nThe argumentation of the IETF\r\n\r\n> However, the community wants to avoid the situation where we over-eagerly adopt the new names, then see a compatibility-breaking change in a future iteration of the FIPS draft standards, and then have multiple non-compatible algorithms with the same name.\r\n\r\nindeed seems to indicate a lack of trust in the capabilities of software developers and interop testers to weed out possibly incompatible implementations using the same name. \r\n\r\nDoes this mean that if there is a step after \"IPD\", let's call it \"SPD\" that everyone would need to update their software again? Good business for IT consultancies paid by the hour, bad choice for the End Users footing the bill.\r\n\r\n> it can be useful for interoperability to identify the exact version, and to be able to support different versions at the same time (r3, ipd, final ML-KE\r\n\r\nThis is a good argument. But it is relevant only for comparative testing, i.e., development and test purposes. Should End Users be impacted by this (currently still interesting, but in the long run irrelevant) use case?\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1910475265/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-25T15:46:50Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35123437167","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626","id":2037831525,"node_id":"PR_kwDOA-eq3c5hzBNS","number":1626,"title":"Add ML-DSA-ipd and ML-KEM-ipd & NIST supplied test vectors","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2023-12-12T14:06:37Z","updated_at":"2024-01-25T15:50:57Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1626","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1626.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1626.patch","merged_at":null},"body":"Pull ML-DSA-ipd / ML-KEM-ipd from pq-crystals \"standard\" branch.\r\nAdds test cases with NIST supplied test vectors: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files (see also _Note on the intermediate values for ML-KEM:_ and _Note on the intermediate values for ML-DSA:_)\r\n\r\nThe NIST files are rather large (several MB) and we only use parts of the data that can be passed via the public API + randomness. So we process them and store only the data we need in `tests/PQC_Intermediate_Values` (script is included to reproduce the files)\r\n\r\nThe PR adds new test code vectors_sig.c and vectors_kem.c that for testing the NIST vectors.\r\n\r\nThe idea is to keep the current Kyber/Dilithium (round 3) versions for compatibility reasons, and add the ML-* algorithms additionally.\r\n\r\nThe naming of the algorithms is done following the IETF hackathon: ML-DSA-44-ipd, ML-DSA-65-ipd, ML-DSA-87-ipd, ML-KEM-512-ipd, ML-KEM-768-ipd, ML-KEM-1024-ipd: https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/oid_mapping.md\r\n\r\nTODOs:\r\n- [x] Add NIST supplied test vectors and code to test them\r\n- [x] Compact NIST test vectors: the files are quite large and we need only a small part of the value\r\n- [x] Pull ML-DSA-ipd from pq-crystals \"standard\" branch\r\n- [x] Pull ML-KEM-ipd from pq-crystals \"standard\" branch\r\n- [x] add patches for copy_from_upstream (for renaming to ML-KEM-ipd / ML-DSA-ipd)\r\n- [ ] ~~Pull pqclean aarch64 code (may omit for now)~~\r\n- [x] Integrate tests with CI\r\n- [x] Update docs\r\n- [x] Ensure updating to latest upstream versions (e.g. with Kyberslash fixes)\r\n- [x] Run constant-time tests on new algorithms & update valgrind files\r\n\r\nCloses #1521.\r\n\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [x] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in fully supported downstream projects dependent on these, i.e., [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1910483082","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626#issuecomment-1910483082","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626","id":1910483082,"node_id":"IC_kwDOA-eq3c5x36iK","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2024-01-25T15:50:56Z","updated_at":"2024-01-25T15:50:56Z","author_association":"MEMBER","body":"Re-reading this discussion, what about the idea to introduce a macro \"-ipd\" _now_? That way we can satisfy the IETF folks placing no trust in software developers _and_ allow people knowing what they do to minimize their long-term work effort (by taking the \"risk\" of using the non-ipd variant)?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1910483082/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-25T15:50:58Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35128483212","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626","id":2037831525,"node_id":"PR_kwDOA-eq3c5hzBNS","number":1626,"title":"Add ML-DSA-ipd and ML-KEM-ipd & NIST supplied test vectors","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2023-12-12T14:06:37Z","updated_at":"2024-01-25T18:49:53Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1626","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1626.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1626.patch","merged_at":null},"body":"Pull ML-DSA-ipd / ML-KEM-ipd from pq-crystals \"standard\" branch.\r\nAdds test cases with NIST supplied test vectors: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files (see also _Note on the intermediate values for ML-KEM:_ and _Note on the intermediate values for ML-DSA:_)\r\n\r\nThe NIST files are rather large (several MB) and we only use parts of the data that can be passed via the public API + randomness. So we process them and store only the data we need in `tests/PQC_Intermediate_Values` (script is included to reproduce the files)\r\n\r\nThe PR adds new test code vectors_sig.c and vectors_kem.c that for testing the NIST vectors.\r\n\r\nThe idea is to keep the current Kyber/Dilithium (round 3) versions for compatibility reasons, and add the ML-* algorithms additionally.\r\n\r\nThe naming of the algorithms is done following the IETF hackathon: ML-DSA-44-ipd, ML-DSA-65-ipd, ML-DSA-87-ipd, ML-KEM-512-ipd, ML-KEM-768-ipd, ML-KEM-1024-ipd: https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/oid_mapping.md\r\n\r\nTODOs:\r\n- [x] Add NIST supplied test vectors and code to test them\r\n- [x] Compact NIST test vectors: the files are quite large and we need only a small part of the value\r\n- [x] Pull ML-DSA-ipd from pq-crystals \"standard\" branch\r\n- [x] Pull ML-KEM-ipd from pq-crystals \"standard\" branch\r\n- [x] add patches for copy_from_upstream (for renaming to ML-KEM-ipd / ML-DSA-ipd)\r\n- [ ] ~~Pull pqclean aarch64 code (may omit for now)~~\r\n- [x] Integrate tests with CI\r\n- [x] Update docs\r\n- [x] Ensure updating to latest upstream versions (e.g. with Kyberslash fixes)\r\n- [x] Run constant-time tests on new algorithms & update valgrind files\r\n\r\nCloses #1521.\r\n\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [x] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in fully supported downstream projects dependent on these, i.e., [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1910793677","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626#issuecomment-1910793677","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626","id":1910793677,"node_id":"IC_kwDOA-eq3c5x5GXN","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2024-01-25T18:49:52Z","updated_at":"2024-01-25T18:49:52Z","author_association":"MEMBER","body":"@bhess Stepping back from the discussion about -IPD naming in that one specific file to a more general question: what was your philosophy around when to use the ML-KEM-IPD naming and when to use plain ML-KEM?  \r\n\r\nIf ML-KEM-IPD != ML-KEM, then there may be a time period where we want to have both ML-KEM-IPD and ML-KEM present in the library, similar to how we're currently imagining wanting to have both Kyber and ML-KEM-IPD present in the library.  I'm not sure that would be possible with the current naming in the PR...","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1910793677/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-25T18:49:54Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
