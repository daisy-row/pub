{"id":"35163461872","type":"IssueCommentEvent","actor":{"id":47549,"login":"ueno","display_login":"ueno","gravatar_id":"","url":"https://api.github.com/users/ueno","avatar_url":"https://avatars.githubusercontent.com/u/47549?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1603","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1603/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1603/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1603/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1603","id":1978342065,"node_id":"PR_kwDOA-eq3c5epUes","number":1603,"title":"Make common algorithms implementation pluggable","user":{"login":"ueno","id":47549,"node_id":"MDQ6VXNlcjQ3NTQ5","avatar_url":"https://avatars.githubusercontent.com/u/47549?v=4","gravatar_id":"","url":"https://api.github.com/users/ueno","html_url":"https://github.com/ueno","followers_url":"https://api.github.com/users/ueno/followers","following_url":"https://api.github.com/users/ueno/following{/other_user}","gists_url":"https://api.github.com/users/ueno/gists{/gist_id}","starred_url":"https://api.github.com/users/ueno/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ueno/subscriptions","organizations_url":"https://api.github.com/users/ueno/orgs","repos_url":"https://api.github.com/users/ueno/repos","events_url":"https://api.github.com/users/ueno/events{/privacy}","received_events_url":"https://api.github.com/users/ueno/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2023-11-06T05:48:38Z","updated_at":"2024-01-27T00:29:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1603","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1603","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1603.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1603.patch","merged_at":null},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\nAs discussed on #1599, this is a strawman proposal to make the common cryptographic algorithms (AES, SHA2, SHA3, and RNG) switchable to avoid OpenSSL dependency at package installation time. The applications can replace the implementation by providing custom callback functions for with `OQS_AES_set_callbacks`, `OQS_SHA2_set_callbacks`,\r\n`OQS_SHA3_set_callbacks`, and `OQS_SHA3_x4_callbacks`.\r\n\r\nThis also switches to using dlopen to load OpenSSL (libcrypto.so.*), so that the existing applications wouldn't need to relink with multiple support libraries.\r\n\r\nI'm marking this as draft as it is largely incomplete and has the following portability concerns:\r\n- This relies on `__typeof__` keyword to define redirection symbols\r\n- Only libcrypto.so.3 is supported; we could try libcrypto.so.1\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\nFixes #1599\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in fully supported downstream projects dependent on these, i.e., [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1603/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1603/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1912867325","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1603#issuecomment-1912867325","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1603","id":1912867325,"node_id":"IC_kwDOA-eq3c5yBAn9","user":{"login":"ueno","id":47549,"node_id":"MDQ6VXNlcjQ3NTQ5","avatar_url":"https://avatars.githubusercontent.com/u/47549?v=4","gravatar_id":"","url":"https://api.github.com/users/ueno","html_url":"https://github.com/ueno","followers_url":"https://api.github.com/users/ueno/followers","following_url":"https://api.github.com/users/ueno/following{/other_user}","gists_url":"https://api.github.com/users/ueno/gists{/gist_id}","starred_url":"https://api.github.com/users/ueno/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ueno/subscriptions","organizations_url":"https://api.github.com/users/ueno/orgs","repos_url":"https://api.github.com/users/ueno/repos","events_url":"https://api.github.com/users/ueno/events{/privacy}","received_events_url":"https://api.github.com/users/ueno/received_events","type":"User","site_admin":false},"created_at":"2024-01-27T00:29:07Z","updated_at":"2024-01-27T00:29:07Z","author_association":"NONE","body":"@SWilson4 sorry for the inactivity; yes, I'm still interested in working on this, targeting the end of this quarter.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1912867325/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-27T00:29:09Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35167716337","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1678","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1678/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1678/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1678/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1678","id":2102811735,"node_id":"I_kwDOA-eq3c59VlxX","number":1678,"title":"Investigate BIKE failures on x86","user":{"login":"SWilson4","id":39264796,"node_id":"MDQ6VXNlcjM5MjY0Nzk2","avatar_url":"https://avatars.githubusercontent.com/u/39264796?v=4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","html_url":"https://github.com/SWilson4","followers_url":"https://api.github.com/users/SWilson4/followers","following_url":"https://api.github.com/users/SWilson4/following{/other_user}","gists_url":"https://api.github.com/users/SWilson4/gists{/gist_id}","starred_url":"https://api.github.com/users/SWilson4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SWilson4/subscriptions","organizations_url":"https://api.github.com/users/SWilson4/orgs","repos_url":"https://api.github.com/users/SWilson4/repos","events_url":"https://api.github.com/users/SWilson4/events{/privacy}","received_events_url":"https://api.github.com/users/SWilson4/received_events","type":"User","site_admin":false},"labels":[{"id":1876026231,"node_id":"MDU6TGFiZWwxODc2MDI2MjMx","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/future-work","name":"future-work","color":"cccccc","default":false,"description":"Will not be fixed in current release cycle"},{"id":5700733396,"node_id":"LA_kwDOA-eq3c8AAAABU8pJ1A","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/platform-specific","name":"platform-specific","color":"C4AA6F","default":false,"description":"Issue related to a specific platform configuration; core team may not have required platform"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2024-01-26T19:56:16Z","updated_at":"2024-01-27T09:33:55Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Enabling BIKE on x86 builds leads to [test failures](https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/3279/workflows/e8d367d9-2717-4105-a2f4-4bee216b0de3/jobs/26246), so we don't do it. However, the [upstream](https://github.com/awslabs/bike-kem/tree/master) documentation states that BIKE is supported for x86. It would be nice to figure out what's going on.\r\n\r\nSee also: #1443 ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1678/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1678/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1913094180","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1678#issuecomment-1913094180","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1678","id":1913094180,"node_id":"IC_kwDOA-eq3c5yB4Ak","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2024-01-27T09:33:54Z","updated_at":"2024-01-27T09:33:54Z","author_association":"MEMBER","body":"Thanks for doing #1679: Just approved.\r\n\r\nIMO the upstream use of the term \"x86\" is just (the computer scientist's equivalent of) \"slang\", really meaning \"x86_64\": Those of us remembering that the term originally meant a 32bit platform are dying out. Also they explicitly reference Intel Xeon and a 64 bit compiler:\r\n\r\n> The package was compiled and tested with clang (version 10.0.0) in 64-bit mode, on a Linux (Ubuntu 20.04) on Intel Xeon (x86) and Graviton 2 (ARM) processors.\r\n\r\nAdmittedly the following statement is pretty broad:\r\n\r\n> The x86 tests are done with Intel SDE which can emulate any Intel CPU.\r\n\r\nbut doesn't completely rule out my understanding: The Intel SDE may be able to emulate _any_ Intel CPU, but the statement does not go so far as to say that tests for any Intel CPU have actually been _done_.\r\n\r\nAsking @dkostic @drucker-nir for input as to what is really meant in the documentation: Has BIKE been tested to run on _any_ Intel CPU or really \"just\" `x64`?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1913094180/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-27T09:33:55Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
