{"id":"35145025005","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626","id":2037831525,"node_id":"PR_kwDOA-eq3c5hzBNS","number":1626,"title":"Add ML-DSA-ipd and ML-KEM-ipd & NIST supplied test vectors","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2023-12-12T14:06:37Z","updated_at":"2024-01-26T10:23:31Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1626","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1626.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1626.patch","merged_at":null},"body":"Pull ML-DSA-ipd / ML-KEM-ipd from pq-crystals \"standard\" branch.\r\nAdds test cases with NIST supplied test vectors: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files (see also _Note on the intermediate values for ML-KEM:_ and _Note on the intermediate values for ML-DSA:_)\r\n\r\nThe NIST files are rather large (several MB) and we only use parts of the data that can be passed via the public API + randomness. So we process them and store only the data we need in `tests/PQC_Intermediate_Values` (script is included to reproduce the files)\r\n\r\nThe PR adds new test code vectors_sig.c and vectors_kem.c that for testing the NIST vectors.\r\n\r\nThe idea is to keep the current Kyber/Dilithium (round 3) versions for compatibility reasons, and add the ML-* algorithms additionally.\r\n\r\nThe naming of the algorithms is done following the IETF hackathon: ML-DSA-44-ipd, ML-DSA-65-ipd, ML-DSA-87-ipd, ML-KEM-512-ipd, ML-KEM-768-ipd, ML-KEM-1024-ipd: https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/oid_mapping.md\r\n\r\nTODOs:\r\n- [x] Add NIST supplied test vectors and code to test them\r\n- [x] Compact NIST test vectors: the files are quite large and we need only a small part of the value\r\n- [x] Pull ML-DSA-ipd from pq-crystals \"standard\" branch\r\n- [x] Pull ML-KEM-ipd from pq-crystals \"standard\" branch\r\n- [x] add patches for copy_from_upstream (for renaming to ML-KEM-ipd / ML-DSA-ipd)\r\n- [ ] ~~Pull pqclean aarch64 code (may omit for now)~~\r\n- [x] Integrate tests with CI\r\n- [x] Update docs\r\n- [x] Ensure updating to latest upstream versions (e.g. with Kyberslash fixes)\r\n- [x] Run constant-time tests on new algorithms & update valgrind files\r\n\r\nCloses #1521.\r\n\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [x] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in fully supported downstream projects dependent on these, i.e., [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1911811411","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626#issuecomment-1911811411","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626","id":1911811411,"node_id":"IC_kwDOA-eq3c5x8-1T","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2024-01-26T10:23:29Z","updated_at":"2024-01-26T10:23:29Z","author_association":"MEMBER","body":"> what about the idea to introduce a macro \"-ipd\" _now_?\r\n\r\nI like the idea of a macro/alias. What about the other way around, i.e. \"ML-KEM-512\" is an alias of \"ML-KEM-512-ipd\"? Should there be something like an \"-spd\" version, the ML-KEM-512 alias can just become an alias of the -spd version. The same would then be possible for the upcoming on-ramp signatures (\"OnrampSig\"-R1, \"OnrampSig\"-R2, ..., and an alias \"OnrampSig\").\r\n\r\n\r\n\r\n> what was your philosophy around when to use the ML-KEM-IPD naming and when to use plain ML-KEM?\r\n\r\nThe idea was to have a family name \"ML-KEM\" the individual schemes are called \"ML-KEM-512-ipd\", \"ML-KEM-768-ipd\" and \"ML-KEM-1024-ipd\".\r\n\r\n> I'm not sure that would be possible with the current naming in the PR...\r\n\r\nI think you are right, the import logic builds the internal API names using \"name\"_\"scheme\":\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/3468dc8b7d7f1cbddb9f036560ee020450ba5069/scripts/copy_from_upstream/copy_from_upstream.yml#L140-L148\r\n\r\nIf \"scheme\" is named \"512_ipd\" instead then it should work.\r\n\r\nI'll update the PR next week.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1911811411/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-26T10:23:32Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35145360783","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626","id":2037831525,"node_id":"PR_kwDOA-eq3c5hzBNS","number":1626,"title":"Add ML-DSA-ipd and ML-KEM-ipd & NIST supplied test vectors","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2023-12-12T14:06:37Z","updated_at":"2024-01-26T10:36:32Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1626","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1626.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1626.patch","merged_at":null},"body":"Pull ML-DSA-ipd / ML-KEM-ipd from pq-crystals \"standard\" branch.\r\nAdds test cases with NIST supplied test vectors: https://csrc.nist.gov/Projects/post-quantum-cryptography/post-quantum-cryptography-standardization/example-files (see also _Note on the intermediate values for ML-KEM:_ and _Note on the intermediate values for ML-DSA:_)\r\n\r\nThe NIST files are rather large (several MB) and we only use parts of the data that can be passed via the public API + randomness. So we process them and store only the data we need in `tests/PQC_Intermediate_Values` (script is included to reproduce the files)\r\n\r\nThe PR adds new test code vectors_sig.c and vectors_kem.c that for testing the NIST vectors.\r\n\r\nThe idea is to keep the current Kyber/Dilithium (round 3) versions for compatibility reasons, and add the ML-* algorithms additionally.\r\n\r\nThe naming of the algorithms is done following the IETF hackathon: ML-DSA-44-ipd, ML-DSA-65-ipd, ML-DSA-87-ipd, ML-KEM-512-ipd, ML-KEM-768-ipd, ML-KEM-1024-ipd: https://github.com/IETF-Hackathon/pqc-certificates/blob/master/docs/oid_mapping.md\r\n\r\nTODOs:\r\n- [x] Add NIST supplied test vectors and code to test them\r\n- [x] Compact NIST test vectors: the files are quite large and we need only a small part of the value\r\n- [x] Pull ML-DSA-ipd from pq-crystals \"standard\" branch\r\n- [x] Pull ML-KEM-ipd from pq-crystals \"standard\" branch\r\n- [x] add patches for copy_from_upstream (for renaming to ML-KEM-ipd / ML-DSA-ipd)\r\n- [ ] ~~Pull pqclean aarch64 code (may omit for now)~~\r\n- [x] Integrate tests with CI\r\n- [x] Update docs\r\n- [x] Ensure updating to latest upstream versions (e.g. with Kyberslash fixes)\r\n- [x] Run constant-time tests on new algorithms & update valgrind files\r\n\r\nCloses #1521.\r\n\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [x] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in fully supported downstream projects dependent on these, i.e., [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1911831057","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1626#issuecomment-1911831057","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1626","id":1911831057,"node_id":"IC_kwDOA-eq3c5x9DoR","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2024-01-26T10:36:31Z","updated_at":"2024-01-26T10:36:31Z","author_association":"MEMBER","body":"> I like the idea of a macro/alias. What about the other way around, i.e. \"ML-KEM-512\" is an alias of \"ML-KEM-512-ipd\"?\r\n\r\nThanks & fine with me. As long as \"ML-KEM-512\" (also) becomes available now. Analog for the other \"ML...\" (sig) algs & strengths.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1911831057/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-26T10:36:32Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35155124416","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1676","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1676/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1676/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1676/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1676","id":2095404797,"node_id":"PR_kwDOA-eq3c5kzQLj","number":1676,"title":"Disable Stateful Signatures in the build by default","user":{"login":"ashman-p","id":23340773,"node_id":"MDQ6VXNlcjIzMzQwNzcz","avatar_url":"https://avatars.githubusercontent.com/u/23340773?v=4","gravatar_id":"","url":"https://api.github.com/users/ashman-p","html_url":"https://github.com/ashman-p","followers_url":"https://api.github.com/users/ashman-p/followers","following_url":"https://api.github.com/users/ashman-p/following{/other_user}","gists_url":"https://api.github.com/users/ashman-p/gists{/gist_id}","starred_url":"https://api.github.com/users/ashman-p/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashman-p/subscriptions","organizations_url":"https://api.github.com/users/ashman-p/orgs","repos_url":"https://api.github.com/users/ashman-p/repos","events_url":"https://api.github.com/users/ashman-p/events{/privacy}","received_events_url":"https://api.github.com/users/ashman-p/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"ashman-p","id":23340773,"node_id":"MDQ6VXNlcjIzMzQwNzcz","avatar_url":"https://avatars.githubusercontent.com/u/23340773?v=4","gravatar_id":"","url":"https://api.github.com/users/ashman-p","html_url":"https://github.com/ashman-p","followers_url":"https://api.github.com/users/ashman-p/followers","following_url":"https://api.github.com/users/ashman-p/following{/other_user}","gists_url":"https://api.github.com/users/ashman-p/gists{/gist_id}","starred_url":"https://api.github.com/users/ashman-p/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashman-p/subscriptions","organizations_url":"https://api.github.com/users/ashman-p/orgs","repos_url":"https://api.github.com/users/ashman-p/repos","events_url":"https://api.github.com/users/ashman-p/events{/privacy}","received_events_url":"https://api.github.com/users/ashman-p/received_events","type":"User","site_admin":false},"assignees":[{"login":"ashman-p","id":23340773,"node_id":"MDQ6VXNlcjIzMzQwNzcz","avatar_url":"https://avatars.githubusercontent.com/u/23340773?v=4","gravatar_id":"","url":"https://api.github.com/users/ashman-p","html_url":"https://github.com/ashman-p","followers_url":"https://api.github.com/users/ashman-p/followers","following_url":"https://api.github.com/users/ashman-p/following{/other_user}","gists_url":"https://api.github.com/users/ashman-p/gists{/gist_id}","starred_url":"https://api.github.com/users/ashman-p/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashman-p/subscriptions","organizations_url":"https://api.github.com/users/ashman-p/orgs","repos_url":"https://api.github.com/users/ashman-p/repos","events_url":"https://api.github.com/users/ashman-p/events{/privacy}","received_events_url":"https://api.github.com/users/ashman-p/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2024-01-23T07:14:17Z","updated_at":"2024-01-26T17:03:26Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1676","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1676","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1676.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1676.patch","merged_at":null},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\nThis commit will disable XMSS and LMS from the build by default. When enabled key and signature generation is also disabled by default. They can be enabled by defining the following variables on the config command.\r\n\r\n-DOQS_ENABLE_SIG_STFL_KEY_SIG_GEN=ON\r\n-DOQS_ENABLE_SIG_STFL_XMSS = ON\r\n-DOQS_ENABLE_SIG_STFL_LMS = ON\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in fully supported downstream projects dependent on these, i.e., [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1676/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1676/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1912389078","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1676#issuecomment-1912389078","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1676","id":1912389078,"node_id":"IC_kwDOA-eq3c5x_L3W","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2024-01-26T17:03:26Z","updated_at":"2024-01-26T17:03:26Z","author_association":"MEMBER","body":"@ashman-p I've started fleshing out my proposal above in the branch \"mb-stfl-no-sigkeygen\", so see e.g. https://github.com/open-quantum-safe/liboqs/blob/14999164201ffa61c20731de63abb9a3fbbcba07/src/sig_stfl/sig_stfl.h#L181-L183 ...\r\n\r\nQuestion: What code generator did you use to create the many variants? It's tedious to manually #ifdef the now apparently unneeded replicate references to \"oid\", \"sigs_remaining\", \"sigs_total\"... I started this in the branch to see whether compilation succeeds -- it does: Those structs are apparently only needed in the disabled (under unset OQS_ALLOW_SFTL_KEY_AND_SIG_GEN) `keygen` and `sign` routines... So now I wonder whether there's a master template that can be adapted and used to generate the many *xmss*.c files(?).\r\n\r\nIf this were successful, XMSS/LMS algs might indeed be used (for verification) just like any other OQS_SIG & no downstream changes appear to be necessary to use this code right out of the box (only if configured without sig/gen).","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1912389078/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-26T17:03:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35159058908","type":"IssueCommentEvent","actor":{"id":39264796,"login":"SWilson4","display_login":"SWilson4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","avatar_url":"https://avatars.githubusercontent.com/u/39264796?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1679","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1679/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1679/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1679/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1679","id":2102812418,"node_id":"PR_kwDOA-eq3c5lMOhp","number":1679,"title":"Update BIKE documentation to exclude x86","user":{"login":"SWilson4","id":39264796,"node_id":"MDQ6VXNlcjM5MjY0Nzk2","avatar_url":"https://avatars.githubusercontent.com/u/39264796?v=4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","html_url":"https://github.com/SWilson4","followers_url":"https://api.github.com/users/SWilson4/followers","following_url":"https://api.github.com/users/SWilson4/following{/other_user}","gists_url":"https://api.github.com/users/SWilson4/gists{/gist_id}","starred_url":"https://api.github.com/users/SWilson4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SWilson4/subscriptions","organizations_url":"https://api.github.com/users/SWilson4/orgs","repos_url":"https://api.github.com/users/SWilson4/repos","events_url":"https://api.github.com/users/SWilson4/events{/privacy}","received_events_url":"https://api.github.com/users/SWilson4/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2024-01-26T19:56:53Z","updated_at":"2024-01-26T19:59:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1679","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1679","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1679.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1679.patch","merged_at":null},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\nWe don't enable BIKE in x86 builds, and [enabling it on x86 leads to CI failures](https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/3279/workflows/e8d367d9-2717-4105-a2f4-4bee216b0de3/jobs/26246). This PR is to bring documentation in line with the build configuration.\r\n\r\nFixes #1443.\r\n\r\nNotably, the [upstream implementation](https://github.com/awslabs/bike-kem/tree/master) does apparently support x86, so this is something we may wish to look into.\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in fully supported downstream projects dependent on these, i.e., [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\nNo to both.\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1679/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1679/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1912616644","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1679#issuecomment-1912616644","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1679","id":1912616644,"node_id":"IC_kwDOA-eq3c5yADbE","user":{"login":"SWilson4","id":39264796,"node_id":"MDQ6VXNlcjM5MjY0Nzk2","avatar_url":"https://avatars.githubusercontent.com/u/39264796?v=4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","html_url":"https://github.com/SWilson4","followers_url":"https://api.github.com/users/SWilson4/followers","following_url":"https://api.github.com/users/SWilson4/following{/other_user}","gists_url":"https://api.github.com/users/SWilson4/gists{/gist_id}","starred_url":"https://api.github.com/users/SWilson4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SWilson4/subscriptions","organizations_url":"https://api.github.com/users/SWilson4/orgs","repos_url":"https://api.github.com/users/SWilson4/repos","events_url":"https://api.github.com/users/SWilson4/events{/privacy}","received_events_url":"https://api.github.com/users/SWilson4/received_events","type":"User","site_admin":false},"created_at":"2024-01-26T19:59:07Z","updated_at":"2024-01-26T19:59:07Z","author_association":"CONTRIBUTOR","body":"I've opened #1679 to track the inconsistency with upstream.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1912616644/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-26T19:59:08Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35159264626","type":"IssueCommentEvent","actor":{"id":39264796,"login":"SWilson4","display_login":"SWilson4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","avatar_url":"https://avatars.githubusercontent.com/u/39264796?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1653","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1653/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1653/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1653/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1653","id":2067864834,"node_id":"PR_kwDOA-eq3c5jVxqU","number":1653,"title":"find_package(Threads) regardless of BUILD_ONLY_LIB","user":{"login":"zxjtan","id":32562011,"node_id":"MDQ6VXNlcjMyNTYyMDEx","avatar_url":"https://avatars.githubusercontent.com/u/32562011?v=4","gravatar_id":"","url":"https://api.github.com/users/zxjtan","html_url":"https://github.com/zxjtan","followers_url":"https://api.github.com/users/zxjtan/followers","following_url":"https://api.github.com/users/zxjtan/following{/other_user}","gists_url":"https://api.github.com/users/zxjtan/gists{/gist_id}","starred_url":"https://api.github.com/users/zxjtan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zxjtan/subscriptions","organizations_url":"https://api.github.com/users/zxjtan/orgs","repos_url":"https://api.github.com/users/zxjtan/repos","events_url":"https://api.github.com/users/zxjtan/events{/privacy}","received_events_url":"https://api.github.com/users/zxjtan/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2024-01-05T18:39:18Z","updated_at":"2024-01-26T20:08:28Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1653","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1653","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1653.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1653.patch","merged_at":null},"body":"Retroactive follow-up to #1576: I realised that #1549 introduces usage of pthreads into the main library code. I also infer that the reason `find_package(Threads)` was originally gated behind `OQS BUILD_ONLY_LIB` was because only test code used pthreads. Hence, CMake should now always look for the Threads package (on non-MSVC compilers).\r\n\r\nJust doing the above breaks Zephyr builds. Hence, this PR also adds a new CMake variable `OQS_USE_PTHREADS` that will be `true` `if (CMAKE_USE_PTHREADS_INIT AND NOT OQS_EMBEDDED_BUILD)`. It also changes code gated on `#CMAKE_USE_PTHREADS_INIT` macro to gate on `#OQS_USE_PTHREADS` instead.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1653/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1653/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1912627437","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1653#issuecomment-1912627437","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1653","id":1912627437,"node_id":"IC_kwDOA-eq3c5yAGDt","user":{"login":"SWilson4","id":39264796,"node_id":"MDQ6VXNlcjM5MjY0Nzk2","avatar_url":"https://avatars.githubusercontent.com/u/39264796?v=4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","html_url":"https://github.com/SWilson4","followers_url":"https://api.github.com/users/SWilson4/followers","following_url":"https://api.github.com/users/SWilson4/following{/other_user}","gists_url":"https://api.github.com/users/SWilson4/gists{/gist_id}","starred_url":"https://api.github.com/users/SWilson4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SWilson4/subscriptions","organizations_url":"https://api.github.com/users/SWilson4/orgs","repos_url":"https://api.github.com/users/SWilson4/repos","events_url":"https://api.github.com/users/SWilson4/events{/privacy}","received_events_url":"https://api.github.com/users/SWilson4/received_events","type":"User","site_admin":false},"created_at":"2024-01-26T20:08:27Z","updated_at":"2024-01-26T20:08:27Z","author_association":"CONTRIBUTOR","body":"@zxjtan Sorry it's taken so long for us to provide feedback on this PR! It looks reasonable to me (pending a rebase on the latest `main`), but I don't have enough knowledge about `pthreads` (and threading in general) to feel comfortable approving it. @baentsch @dstebila you reviewed #1549 and #1576; would you also be able to chime in here?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1912627437/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-26T20:08:29Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35159394582","type":"IssueCommentEvent","actor":{"id":39264796,"login":"SWilson4","display_login":"SWilson4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","avatar_url":"https://avatars.githubusercontent.com/u/39264796?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1603","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1603/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1603/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1603/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1603","id":1978342065,"node_id":"PR_kwDOA-eq3c5epUes","number":1603,"title":"Make common algorithms implementation pluggable","user":{"login":"ueno","id":47549,"node_id":"MDQ6VXNlcjQ3NTQ5","avatar_url":"https://avatars.githubusercontent.com/u/47549?v=4","gravatar_id":"","url":"https://api.github.com/users/ueno","html_url":"https://github.com/ueno","followers_url":"https://api.github.com/users/ueno/followers","following_url":"https://api.github.com/users/ueno/following{/other_user}","gists_url":"https://api.github.com/users/ueno/gists{/gist_id}","starred_url":"https://api.github.com/users/ueno/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ueno/subscriptions","organizations_url":"https://api.github.com/users/ueno/orgs","repos_url":"https://api.github.com/users/ueno/repos","events_url":"https://api.github.com/users/ueno/events{/privacy}","received_events_url":"https://api.github.com/users/ueno/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2023-11-06T05:48:38Z","updated_at":"2024-01-26T20:14:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1603","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1603","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1603.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1603.patch","merged_at":null},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\nAs discussed on #1599, this is a strawman proposal to make the common cryptographic algorithms (AES, SHA2, SHA3, and RNG) switchable to avoid OpenSSL dependency at package installation time. The applications can replace the implementation by providing custom callback functions for with `OQS_AES_set_callbacks`, `OQS_SHA2_set_callbacks`,\r\n`OQS_SHA3_set_callbacks`, and `OQS_SHA3_x4_callbacks`.\r\n\r\nThis also switches to using dlopen to load OpenSSL (libcrypto.so.*), so that the existing applications wouldn't need to relink with multiple support libraries.\r\n\r\nI'm marking this as draft as it is largely incomplete and has the following portability concerns:\r\n- This relies on `__typeof__` keyword to define redirection symbols\r\n- Only libcrypto.so.3 is supported; we could try libcrypto.so.1\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\nFixes #1599\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in fully supported downstream projects dependent on these, i.e., [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1603/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1603/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1912634045","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1603#issuecomment-1912634045","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1603","id":1912634045,"node_id":"IC_kwDOA-eq3c5yAHq9","user":{"login":"SWilson4","id":39264796,"node_id":"MDQ6VXNlcjM5MjY0Nzk2","avatar_url":"https://avatars.githubusercontent.com/u/39264796?v=4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","html_url":"https://github.com/SWilson4","followers_url":"https://api.github.com/users/SWilson4/followers","following_url":"https://api.github.com/users/SWilson4/following{/other_user}","gists_url":"https://api.github.com/users/SWilson4/gists{/gist_id}","starred_url":"https://api.github.com/users/SWilson4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SWilson4/subscriptions","organizations_url":"https://api.github.com/users/SWilson4/orgs","repos_url":"https://api.github.com/users/SWilson4/repos","events_url":"https://api.github.com/users/SWilson4/events{/privacy}","received_events_url":"https://api.github.com/users/SWilson4/received_events","type":"User","site_admin":false},"created_at":"2024-01-26T20:14:31Z","updated_at":"2024-01-26T20:14:31Z","author_association":"CONTRIBUTOR","body":"@ueno Are you interested in continuing to work on this? Just wondering whether to leave this PR open for further development or to close it. Either way, it will remain linked to the issue and can be used as a proof-of-concept / starting point for future work.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1912634045/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-26T20:14:33Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35159700087","type":"IssueCommentEvent","actor":{"id":39264796,"login":"SWilson4","display_login":"SWilson4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","avatar_url":"https://avatars.githubusercontent.com/u/39264796?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1072","id":962813852,"node_id":"MDU6SXNzdWU5NjI4MTM4NTI=","number":1072,"title":"Android Buildscript problem with Cross Compilation","user":{"login":"Hatzen","id":21283655,"node_id":"MDQ6VXNlcjIxMjgzNjU1","avatar_url":"https://avatars.githubusercontent.com/u/21283655?v=4","gravatar_id":"","url":"https://api.github.com/users/Hatzen","html_url":"https://github.com/Hatzen","followers_url":"https://api.github.com/users/Hatzen/followers","following_url":"https://api.github.com/users/Hatzen/following{/other_user}","gists_url":"https://api.github.com/users/Hatzen/gists{/gist_id}","starred_url":"https://api.github.com/users/Hatzen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Hatzen/subscriptions","organizations_url":"https://api.github.com/users/Hatzen/orgs","repos_url":"https://api.github.com/users/Hatzen/repos","events_url":"https://api.github.com/users/Hatzen/events{/privacy}","received_events_url":"https://api.github.com/users/Hatzen/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-08-06T14:58:25Z","updated_at":"2024-01-26T20:28:46Z","closed_at":"2024-01-26T20:28:46Z","author_association":"NONE","active_lock_reason":null,"body":"I try to setup a CI pipeline for compiling liboqs with liboqs-java for android.  \r\nBut with the current master version (and release 0.6.0) of this repo it is not possible to run the android build script (https://github.com/open-quantum-safe/liboqs/blob/main/scripts/build-android.sh)  \r\n  \r\ni run in a similar issue like compiling for windows.  But cannot use wine for this problem afaik.  \r\nhttps://github.com/open-quantum-safe/liboqs/issues/727  \r\n  \r\nWhen i run  \r\nbash build-android.sh $ndkPath -s 19-a x86_64  \r\n  \r\n1. it first runs into the problem that \"try_run\" is not working as the target architecture is not the same.  \r\nhttps://github.com/open-quantum-safe/liboqs/blob/2db7f97922a7d3e50aa9f56b7e86566f62c0365a/.CMake/gcc_clang_intrinsics.cmake#L3  \r\nExcluding that file let the compile process start.  \r\n  \r\n2. But then it crashes afterwards for the common c files  \r\n\r\n```\r\ncommon.c:169:9: error: incompatible integer to pointer conversion returning 'int' from a function with result type 'void *' [-Werror,-Wint-conversion]\r\n        return aligned_alloc(alignment, size);\r\n```\r\n\r\n<details>\r\n<summary>click for full build log</summary>  \r\n  \r\n```\r\n-- Build files have been written to: /home/hatzen/LibOQSTestApp--12-add-ci-for-prebuild-liboqs/liboqs-android/prebuild-liboqs/liboqs/build\r\nScanning dependencies of target falcon_512_clean\r\n[  0%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/sig_falcon_512.c.o\r\n[  0%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/codec.c.o\r\n[  0%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/common.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/fft.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/fpr.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/keygen.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/pqclean.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/rng.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/sign.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/vrfy.c.o\r\n[  1%] Built target falcon_512_clean\r\nScanning dependencies of target common\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/aes/aes.c.o\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/aes/aes_c.c.o\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/sha2/sha2_c.c.o\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/sha3/xkcp_sha3.c.o\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/sha3/xkcp_sha3x4.c.o\r\n[  2%] Building C object src/common/CMakeFiles/common.dir/common.c.o\r\n/home/hatzen/LibOQSTestApp--12-add-ci-for-prebuild-liboqs/liboqs-android/prebuild-liboqs/liboqs/src/common/common.c:169:9: error: implicit declaration of function 'aligned_alloc' is invalid in C99 [-Werror,-Wimplicit-function-declaration]\r\n        return aligned_alloc(alignment, size);\r\n               ^\r\n/home/hatzen/LibOQSTestApp--12-add-ci-for-prebuild-liboqs/liboqs-android/prebuild-liboqs/liboqs/src/common/common.c:169:9: error: incompatible integer to pointer conversion returning 'int' from a function with result type 'void *' [-Werror,-Wint-conversion]\r\n        return aligned_alloc(alignment, size);\r\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n2 errors generated.\r\nsrc/common/CMakeFiles/common.dir/build.make:182: recipe for target 'src/common/CMakeFiles/common.dir/common.c.o' failed\r\nmake[2]: *** [src/common/CMakeFiles/common.dir/common.c.o] Error 1\r\nCMakeFiles/Makefile2:260: recipe for target 'src/common/CMakeFiles/common.dir/all' failed\r\nmake[1]: *** [src/common/CMakeFiles/common.dir/all] Error 2\r\nMakefile:129: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n```  \r\n  \r\n</details>  \r\n  \r\nAs i would like to make a CI pipe for my android integration [here](https://github.com/Hatzen/LibOQSTestApp/pull/13/files#diff-cec8aea73739e8e679768673e3a38cee42b5fe69d0837642cdd7f7bfab56de59) it would be a charm if we can make the android build script work without the need of changing anything in the cloned files.  \r\nSo i would suggest \r\n1. For the first problem to pass a property which disables \"try_run\"\r\n2.  and for the second problem i need help as i am not very familiar with the code or error. So can anyone provide a suggestion or solution?   \r\n  \r\nThank you   ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072/timeline","performed_via_github_app":null,"state_reason":"completed"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1912655723","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1072#issuecomment-1912655723","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072","id":1912655723,"node_id":"IC_kwDOA-eq3c5yAM9r","user":{"login":"SWilson4","id":39264796,"node_id":"MDQ6VXNlcjM5MjY0Nzk2","avatar_url":"https://avatars.githubusercontent.com/u/39264796?v=4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","html_url":"https://github.com/SWilson4","followers_url":"https://api.github.com/users/SWilson4/followers","following_url":"https://api.github.com/users/SWilson4/following{/other_user}","gists_url":"https://api.github.com/users/SWilson4/gists{/gist_id}","starred_url":"https://api.github.com/users/SWilson4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SWilson4/subscriptions","organizations_url":"https://api.github.com/users/SWilson4/orgs","repos_url":"https://api.github.com/users/SWilson4/repos","events_url":"https://api.github.com/users/SWilson4/events{/privacy}","received_events_url":"https://api.github.com/users/SWilson4/received_events","type":"User","site_admin":false},"created_at":"2024-01-26T20:28:46Z","updated_at":"2024-01-26T20:28:46Z","author_association":"CONTRIBUTOR","body":"Closing this as resolved via #1531.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1912655723/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-26T20:28:47Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35160437722","type":"IssueCommentEvent","actor":{"id":39264796,"login":"SWilson4","display_login":"SWilson4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","avatar_url":"https://avatars.githubusercontent.com/u/39264796?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1366","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1366/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1366/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1366/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1366","id":1551271465,"node_id":"I_kwDOA-eq3c5cdoYp","number":1366,"title":"Wrong flag passed to Clang when memory sanitizer build is requested.","user":{"login":"xvzcf","id":21228961,"node_id":"MDQ6VXNlcjIxMjI4OTYx","avatar_url":"https://avatars.githubusercontent.com/u/21228961?v=4","gravatar_id":"","url":"https://api.github.com/users/xvzcf","html_url":"https://github.com/xvzcf","followers_url":"https://api.github.com/users/xvzcf/followers","following_url":"https://api.github.com/users/xvzcf/following{/other_user}","gists_url":"https://api.github.com/users/xvzcf/gists{/gist_id}","starred_url":"https://api.github.com/users/xvzcf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xvzcf/subscriptions","organizations_url":"https://api.github.com/users/xvzcf/orgs","repos_url":"https://api.github.com/users/xvzcf/repos","events_url":"https://api.github.com/users/xvzcf/events{/privacy}","received_events_url":"https://api.github.com/users/xvzcf/received_events","type":"User","site_admin":false},"labels":[{"id":423520878,"node_id":"MDU6TGFiZWw0MjM1MjA4Nzg=","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":"New feature or request"},{"id":5748933254,"node_id":"LA_kwDOA-eq3c8AAAABVqnChg","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/good%20first%20issue","name":"good first issue","color":"fbca04","default":true,"description":"Issue for new contributors"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2023-01-20T18:20:38Z","updated_at":"2024-01-26T21:06:22Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"In [compiler_opts.cmake](https://github.com/open-quantum-safe/liboqs/blob/main/.CMake/compiler_opts.cmake#L112), we have the following code:\r\n\r\n```\r\nelseif(USE_SANITIZER STREQUAL \"Memory\")\r\n    add_compile_options(-fsanitize=address)\r\n    set(SANITIZER_LD_FLAGS \"-fsanitize=memory\")\r\nelseif(USE_SANITIZER STREQUAL \"MemoryWithOrigins\")\r\n...\r\n```\r\nI opened this issue to ask whether we should be running a memory-sanitizer build regularly to test this option.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1366/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1366/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1912696336","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1366#issuecomment-1912696336","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1366","id":1912696336,"node_id":"IC_kwDOA-eq3c5yAW4Q","user":{"login":"SWilson4","id":39264796,"node_id":"MDQ6VXNlcjM5MjY0Nzk2","avatar_url":"https://avatars.githubusercontent.com/u/39264796?v=4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","html_url":"https://github.com/SWilson4","followers_url":"https://api.github.com/users/SWilson4/followers","following_url":"https://api.github.com/users/SWilson4/following{/other_user}","gists_url":"https://api.github.com/users/SWilson4/gists{/gist_id}","starred_url":"https://api.github.com/users/SWilson4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SWilson4/subscriptions","organizations_url":"https://api.github.com/users/SWilson4/orgs","repos_url":"https://api.github.com/users/SWilson4/repos","events_url":"https://api.github.com/users/SWilson4/events{/privacy}","received_events_url":"https://api.github.com/users/SWilson4/received_events","type":"User","site_admin":false},"created_at":"2024-01-26T21:06:21Z","updated_at":"2024-01-26T21:06:21Z","author_association":"CONTRIBUTOR","body":"I tried running the tests with the memory sanitizer turned on after creating #1680. The build was intensive, and the tests failed _very_ loudly. Interestingly enough there were quite a few complaints about functions in `libcrypto`, so some of the failures might be beyond our control. (That said, the tests also failed loudly with `-DOQS_USE_OPENSSL=OFF`.)\r\n\r\n#1680 contains the one-line fix for the compile flag, so I'm going to preemptively rename this issue to clarify that it's tracking the proposed CI configuration. However, I think it will be a significant amount of work to get the memory sanitizer working in CI.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1912696336/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-01-26T21:06:23Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
