{"id":"40403848663","type":"PullRequestReviewCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/pulls/comments/1688759012","pull_request_review_id":2195141586,"id":1688759012,"node_id":"PRRC_kwDOBsoLV85kqGrk","diff_hunk":"@@ -211,7 +280,125 @@ static int ssh_generic_copy_public(const struct sshkey *from, struct sshkey *to)\n   return 0;\n }\n \n-static int ssh_generic_sign(OQS_SIG *oqs_sig,\n+static int ssh_generic_generate(struct sshkey *k, int bits)\n+{\n+  const struct sshkey_impl *impl;\n+  int r;\n+  impl = oqs_classical_sshkey_impl(k);\n+  if ((impl != NULL) && (impl->funcs->generate != NULL)) {\n+    if ((r = impl->funcs->generate(k, bits)) != 0) {\n+      return r;\n+    }\n+  }\n+  impl = oqs_pq_sshkey_impl(k);\n+  if ((r = impl->funcs->generate(k, bits)) != 0) {\n+    return r;\n+  }\n+  return 0;\n+}\n+\n+static int ssh_generic_sign(struct sshkey *key, u_char **sigp,\n+        size_t *lenp, const u_char *data, size_t datalen, const char *alg,\n+        const char *sk_provider, const char *sk_pin, u_int compat)\n+{\n+  u_char *sig_classical = NULL, *sig_pq = NULL;\n+  size_t len_classical = 0, len_pq = 0;\n+  int index = 0;\n+  int r;\n+  const struct sshkey_impl *impl;\n+  if (lenp != NULL) {\n+    *lenp = 0;\n+  }\n+  if (sigp != NULL) {\n+    *sigp = NULL;\n+  }\n+  impl = oqs_pq_sshkey_impl(key);\n+  if ((r = impl->funcs->sign(key, &sig_pq, &len_pq, data, datalen, alg,\n+                             sk_provider, sk_pin, compat)) != 0) {\n+    free(sig_pq);\n+    return r;\n+  }\n+\n+  impl = oqs_classical_sshkey_impl(key);\n+  if ((impl != NULL) && (impl->funcs->sign != NULL)) {\n+    if ((r = impl->funcs->sign(key, &sig_classical, &len_classical, data,\n+                               datalen, alg, sk_provider, sk_pin, compat))\n+                               != 0) {\n+      free(sig_classical);\n+      free(sig_pq);\n+      return r;\n+    }\n+    *lenp = 4 + len_classical + 4 + len_pq;\n+    if ((*sigp = malloc(*lenp)) == NULL) {\n+      free(sig_classical);\n+      free(sig_pq);\n+      return SSH_ERR_ALLOC_FAIL;\n+    }\n+    /* encode the classical sig length */\n+    POKE_U32(*sigp + index, (size_t) len_classical);\n+    index += 4;\n+    /* encode the classical sig */\n+    memcpy(*sigp + index, sig_classical, (size_t) len_classical);\n+    index += len_classical;\n+    free(sig_classical);\n+    /* encode the PQ sig length */\n+    POKE_U32(*sigp + index, len_pq);\n+    index += 4;\n+    /* encode the PQ sig */\n+    memcpy(*sigp + index, sig_pq, len_pq);\n+    index += len_pq;\n+    free(sig_pq);\n+  } else {\n+    *sigp = sig_pq;\n+    *lenp = len_pq;\n+  }\n+\treturn 0;\n+}\n+\n+static int ssh_generic_verify(const struct sshkey *key,\n+        const u_char *sig, size_t siglen, const u_char *data, size_t dlen,\n+        const char *alg, u_int compat, struct sshkey_sig_details **detailsp)\n+{\n+  const struct sshkey_impl *impl;\n+  const u_char *sig_classical = NULL;\n+  size_t siglen_classical = 0;\n+  int index = 0;\n+  const u_char *sig_pq = NULL;\n+  size_t siglen_pq = 0;\n+  int r;\n+  impl = oqs_classical_sshkey_impl(key);\n+  if (impl) {\n+    /* classical-PQ hybrid: we separate the signatures */\n+    /* decode the classical sig length */\n+    siglen_classical = (size_t) PEEK_U32(sig + index);\n+    index += 4;\n+    /* point to the classical sig */\n+    sig_classical = sig + index;\n+    index += siglen_classical;\n+    /* decode the PQ sig length */\n+    siglen_pq = (size_t) PEEK_U32(sig + index);","path":"ssh-oqs.c","commit_id":"ad933c652e5b721fb63f64a365297d690cc8ee2f","original_commit_id":"ad933c652e5b721fb63f64a365297d690cc8ee2f","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"body":"Are the lengths here coming from hard-coded values elsewhere or from potentially adversarial input?  If the latter than additional checks would be needed to prevent out-of-bounds reads.","created_at":"2024-07-23T21:39:43Z","updated_at":"2024-07-23T21:39:43Z","html_url":"https://github.com/open-quantum-safe/openssh/pull/161#discussion_r1688759012","pull_request_url":"https://api.github.com/repos/open-quantum-safe/openssh/pulls/161","author_association":"MEMBER","_links":{"self":{"href":"https://api.github.com/repos/open-quantum-safe/openssh/pulls/comments/1688759012"},"html":{"href":"https://github.com/open-quantum-safe/openssh/pull/161#discussion_r1688759012"},"pull_request":{"href":"https://api.github.com/repos/open-quantum-safe/openssh/pulls/161"}},"reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/pulls/comments/1688759012/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"start_line":null,"original_start_line":null,"start_side":null,"line":379,"original_line":379,"side":"RIGHT","original_position":276,"position":276,"subject_type":"line"},"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/pulls/161","id":1983489544,"node_id":"PR_kwDOBsoLV852OaYI","html_url":"https://github.com/open-quantum-safe/openssh/pull/161","diff_url":"https://github.com/open-quantum-safe/openssh/pull/161.diff","patch_url":"https://github.com/open-quantum-safe/openssh/pull/161.patch","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/161","number":161,"state":"open","locked":false,"title":"Implement Hybrid SSH Keys","user":{"login":"geedo0","id":7552310,"node_id":"MDQ6VXNlcjc1NTIzMTA=","avatar_url":"https://avatars.githubusercontent.com/u/7552310?v=4","gravatar_id":"","url":"https://api.github.com/users/geedo0","html_url":"https://github.com/geedo0","followers_url":"https://api.github.com/users/geedo0/followers","following_url":"https://api.github.com/users/geedo0/following{/other_user}","gists_url":"https://api.github.com/users/geedo0/gists{/gist_id}","starred_url":"https://api.github.com/users/geedo0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geedo0/subscriptions","organizations_url":"https://api.github.com/users/geedo0/orgs","repos_url":"https://api.github.com/users/geedo0/repos","events_url":"https://api.github.com/users/geedo0/events{/privacy}","received_events_url":"https://api.github.com/users/geedo0/received_events","type":"User","site_admin":false},"body":"This finishes the work in PR #160 which applied the upstream `sshkey.c` refactor to the OQS fork by adding support for hybrid SSH keys. More importantly, this brings the `OQS-v9` branch up to parity with `OQS-v8` in terms of supported algorithms and functionality. Therefore, we can do more in depth and thorough validation to increase confidence in cutting over to this newer branch.\r\n\r\nSpeaking to the code changes for hybrid SSH key support, this works by adding logic to `ssh-oqs` which branches on hybrid SSH key implementations to handle the classical portion of the key and combine it with the PQ portion as-appropriate. The main trick is to introduce a small lookup table for the RSA/ECDSA implementation and exposing the symbols to `ssh-oqs` via an extern declaration. One notable oddity is that upstream OpenSSH multiplexes the underlying EC curves by placing a generic implementation behind the P-256 struct and allowing the implementation to fork based on the `bits` or `key->type` parameters. Depending on the context, this is how `sshkey` does things so I followed their convention.\r\n\r\nRelated to issue #135\r\n\r\n### Testing\r\n\r\nAsserted that Circle CI jobs pass. These tests run through a subset of the OpenSSH unit tests that have been documented to pass against the OQS fork and skip tests that depend on missing/broken functionality. This demonstrates internal consistency and parity with the testing bar set by `OQS-v8`.\r\n\r\nPerformed interop testing between `OQS-v8` and `OQS-v9` to assert that we have no regressions from pulling in 2 years of upstream changes and re-implementing PQ+Hybrid SSH Keys. This was done by modifying `try_connection.py` which tests all PQ+Hybrid signatures and key exchanges by connecting the built SSH client to the SSHD server and explicitly specifying each algorithm. By adding CLI flags to override this test to use an SSH or SSHD binary from somewhere else, we can perform thorough interop testing between an `OQS-v8` server and `OQS-v9` client or vice versa. Detailed process/commands outlined below.\r\n\r\n```\r\n# Clone and build OQS-v8 in a different location\r\ngit clone git@github.com:open-quantum-safe/openssh.git oqs-openssh-clean\r\ncd oqs-openssh-clean\r\ngit checkout OQS-v8\r\n./oqs-scripts/clone_liboqs.sh\r\n./oqs-scripts/build_liboqs.sh\r\n./oqs-scripts/build_openssh.sh\r\n\r\n# Assert that all key exchange and signature algorithms interop between v8 and v9\r\n## OQS-v9 ssh client connecting to an OQS-v8 sshd server\r\npython3 oqs-test/try_connection.py --sshd `readlink -f ../oqs-openssh-clean/sshd` doall\r\nSuccess! Key Exchange Algorithm: frodokem-640-aes-sha256. Signature Algorithm: ssh-falcon512.\r\nSuccess! Key Exchange Algorithm: frodokem-640-aes-sha256. Signature Algorithm: ssh-rsa3072-falcon512.\r\nSuccess! Key Exchange Algorithm: frodokem-640-aes-sha256. Signature Algorithm: ssh-ecdsa-nistp256-falcon512.\r\nSuccess! Key Exchange Algorithm: frodokem-640-aes-sha256. Signature Algorithm: ssh-falcon1024.\r\nSuccess! Key Exchange Algorithm: frodokem-640-aes-sha256. Signature Algorithm: ssh-ecdsa-nistp521-falcon1024.\r\nSuccess! Key Exchange Algorithm: frodokem-640-aes-sha256. Signature Algorithm: ssh-dilithium2.\r\n...\r\n\r\n## OQS-v8 ssh client connecting to an OQS-v9 sshd server\r\npython3 oqs-test/try_connection.py --ssh `readlink -f ../oqs-openssh-clean/ssh` doall\r\nSuccess! Key Exchange Algorithm: frodokem-640-aes-sha256. Signature Algorithm: ssh-falcon512.\r\nSuccess! Key Exchange Algorithm: frodokem-640-aes-sha256. Signature Algorithm: ssh-rsa3072-falcon512.\r\nSuccess! Key Exchange Algorithm: frodokem-640-aes-sha256. Signature Algorithm: ssh-ecdsa-nistp256-falcon512.\r\nSuccess! Key Exchange Algorithm: frodokem-640-aes-sha256. Signature Algorithm: ssh-falcon1024.\r\nSuccess! Key Exchange Algorithm: frodokem-640-aes-sha256. Signature Algorithm: ssh-ecdsa-nistp521-falcon1024.\r\nSuccess! Key Exchange Algorithm: frodokem-640-aes-sha256. Signature Algorithm: ssh-dilithium2.\r\n...\r\n```\r\n","created_at":"2024-07-23T14:34:32Z","updated_at":"2024-07-23T21:39:43Z","closed_at":null,"merged_at":null,"merge_commit_sha":"cce0f4a24a02a8b8c5f469ed304ce777c4b17120","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/open-quantum-safe/openssh/pulls/161/commits","review_comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/pulls/161/comments","review_comment_url":"https://api.github.com/repos/open-quantum-safe/openssh/pulls/comments{/number}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/161/comments","statuses_url":"https://api.github.com/repos/open-quantum-safe/openssh/statuses/ad933c652e5b721fb63f64a365297d690cc8ee2f","head":{"label":"geedo0:hybrid","ref":"hybrid","sha":"ad933c652e5b721fb63f64a365297d690cc8ee2f","user":{"login":"geedo0","id":7552310,"node_id":"MDQ6VXNlcjc1NTIzMTA=","avatar_url":"https://avatars.githubusercontent.com/u/7552310?v=4","gravatar_id":"","url":"https://api.github.com/users/geedo0","html_url":"https://github.com/geedo0","followers_url":"https://api.github.com/users/geedo0/followers","following_url":"https://api.github.com/users/geedo0/following{/other_user}","gists_url":"https://api.github.com/users/geedo0/gists{/gist_id}","starred_url":"https://api.github.com/users/geedo0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geedo0/subscriptions","organizations_url":"https://api.github.com/users/geedo0/orgs","repos_url":"https://api.github.com/users/geedo0/repos","events_url":"https://api.github.com/users/geedo0/events{/privacy}","received_events_url":"https://api.github.com/users/geedo0/received_events","type":"User","site_admin":false},"repo":{"id":819545415,"node_id":"R_kgDOMNlFRw","name":"openssh","full_name":"geedo0/openssh","private":false,"owner":{"login":"geedo0","id":7552310,"node_id":"MDQ6VXNlcjc1NTIzMTA=","avatar_url":"https://avatars.githubusercontent.com/u/7552310?v=4","gravatar_id":"","url":"https://api.github.com/users/geedo0","html_url":"https://github.com/geedo0","followers_url":"https://api.github.com/users/geedo0/followers","following_url":"https://api.github.com/users/geedo0/following{/other_user}","gists_url":"https://api.github.com/users/geedo0/gists{/gist_id}","starred_url":"https://api.github.com/users/geedo0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geedo0/subscriptions","organizations_url":"https://api.github.com/users/geedo0/orgs","repos_url":"https://api.github.com/users/geedo0/repos","events_url":"https://api.github.com/users/geedo0/events{/privacy}","received_events_url":"https://api.github.com/users/geedo0/received_events","type":"User","site_admin":false},"html_url":"https://github.com/geedo0/openssh","description":"Fork of OpenSSH that includes prototype quantum-resistant key exchange and authentication in SSH based on liboqs. PROJECT INACTIVE. CONTRIBUTORS WANTED.","fork":true,"url":"https://api.github.com/repos/geedo0/openssh","forks_url":"https://api.github.com/repos/geedo0/openssh/forks","keys_url":"https://api.github.com/repos/geedo0/openssh/keys{/key_id}","collaborators_url":"https://api.github.com/repos/geedo0/openssh/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/geedo0/openssh/teams","hooks_url":"https://api.github.com/repos/geedo0/openssh/hooks","issue_events_url":"https://api.github.com/repos/geedo0/openssh/issues/events{/number}","events_url":"https://api.github.com/repos/geedo0/openssh/events","assignees_url":"https://api.github.com/repos/geedo0/openssh/assignees{/user}","branches_url":"https://api.github.com/repos/geedo0/openssh/branches{/branch}","tags_url":"https://api.github.com/repos/geedo0/openssh/tags","blobs_url":"https://api.github.com/repos/geedo0/openssh/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/geedo0/openssh/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/geedo0/openssh/git/refs{/sha}","trees_url":"https://api.github.com/repos/geedo0/openssh/git/trees{/sha}","statuses_url":"https://api.github.com/repos/geedo0/openssh/statuses/{sha}","languages_url":"https://api.github.com/repos/geedo0/openssh/languages","stargazers_url":"https://api.github.com/repos/geedo0/openssh/stargazers","contributors_url":"https://api.github.com/repos/geedo0/openssh/contributors","subscribers_url":"https://api.github.com/repos/geedo0/openssh/subscribers","subscription_url":"https://api.github.com/repos/geedo0/openssh/subscription","commits_url":"https://api.github.com/repos/geedo0/openssh/commits{/sha}","git_commits_url":"https://api.github.com/repos/geedo0/openssh/git/commits{/sha}","comments_url":"https://api.github.com/repos/geedo0/openssh/comments{/number}","issue_comment_url":"https://api.github.com/repos/geedo0/openssh/issues/comments{/number}","contents_url":"https://api.github.com/repos/geedo0/openssh/contents/{+path}","compare_url":"https://api.github.com/repos/geedo0/openssh/compare/{base}...{head}","merges_url":"https://api.github.com/repos/geedo0/openssh/merges","archive_url":"https://api.github.com/repos/geedo0/openssh/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/geedo0/openssh/downloads","issues_url":"https://api.github.com/repos/geedo0/openssh/issues{/number}","pulls_url":"https://api.github.com/repos/geedo0/openssh/pulls{/number}","milestones_url":"https://api.github.com/repos/geedo0/openssh/milestones{/number}","notifications_url":"https://api.github.com/repos/geedo0/openssh/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/geedo0/openssh/labels{/name}","releases_url":"https://api.github.com/repos/geedo0/openssh/releases{/id}","deployments_url":"https://api.github.com/repos/geedo0/openssh/deployments","created_at":"2024-06-24T18:13:11Z","updated_at":"2024-06-24T18:33:57Z","pushed_at":"2024-07-23T17:07:00Z","git_url":"git://github.com/geedo0/openssh.git","ssh_url":"git@github.com:geedo0/openssh.git","clone_url":"https://github.com/geedo0/openssh.git","svn_url":"https://github.com/geedo0/openssh","homepage":"https://openquantumsafe.org/","size":27120,"stargazers_count":0,"watchers_count":0,"language":"C","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":{"key":"other","name":"Other","spdx_id":"NOASSERTION","url":null,"node_id":"MDc6TGljZW5zZTA="},"allow_forking":true,"is_template":false,"web_commit_signoff_required":true,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"OQS-v8"}},"base":{"label":"open-quantum-safe:OQS-v9","ref":"OQS-v9","sha":"1173eccd34ad89b8fcab57dc7ec9dedf1d2a3b4f","user":{"login":"open-quantum-safe","id":20689385,"node_id":"MDEyOk9yZ2FuaXphdGlvbjIwNjg5Mzg1","avatar_url":"https://avatars.githubusercontent.com/u/20689385?v=4","gravatar_id":"","url":"https://api.github.com/users/open-quantum-safe","html_url":"https://github.com/open-quantum-safe","followers_url":"https://api.github.com/users/open-quantum-safe/followers","following_url":"https://api.github.com/users/open-quantum-safe/following{/other_user}","gists_url":"https://api.github.com/users/open-quantum-safe/gists{/gist_id}","starred_url":"https://api.github.com/users/open-quantum-safe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/open-quantum-safe/subscriptions","organizations_url":"https://api.github.com/users/open-quantum-safe/orgs","repos_url":"https://api.github.com/users/open-quantum-safe/repos","events_url":"https://api.github.com/users/open-quantum-safe/events{/privacy}","received_events_url":"https://api.github.com/users/open-quantum-safe/received_events","type":"Organization","site_admin":false},"repo":{"id":113904471,"node_id":"MDEwOlJlcG9zaXRvcnkxMTM5MDQ0NzE=","name":"openssh","full_name":"open-quantum-safe/openssh","private":false,"owner":{"login":"open-quantum-safe","id":20689385,"node_id":"MDEyOk9yZ2FuaXphdGlvbjIwNjg5Mzg1","avatar_url":"https://avatars.githubusercontent.com/u/20689385?v=4","gravatar_id":"","url":"https://api.github.com/users/open-quantum-safe","html_url":"https://github.com/open-quantum-safe","followers_url":"https://api.github.com/users/open-quantum-safe/followers","following_url":"https://api.github.com/users/open-quantum-safe/following{/other_user}","gists_url":"https://api.github.com/users/open-quantum-safe/gists{/gist_id}","starred_url":"https://api.github.com/users/open-quantum-safe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/open-quantum-safe/subscriptions","organizations_url":"https://api.github.com/users/open-quantum-safe/orgs","repos_url":"https://api.github.com/users/open-quantum-safe/repos","events_url":"https://api.github.com/users/open-quantum-safe/events{/privacy}","received_events_url":"https://api.github.com/users/open-quantum-safe/received_events","type":"Organization","site_admin":false},"html_url":"https://github.com/open-quantum-safe/openssh","description":"Fork of OpenSSH that includes prototype quantum-resistant key exchange and authentication in SSH based on liboqs. PROJECT INACTIVE. CONTRIBUTORS WANTED.","fork":true,"url":"https://api.github.com/repos/open-quantum-safe/openssh","forks_url":"https://api.github.com/repos/open-quantum-safe/openssh/forks","keys_url":"https://api.github.com/repos/open-quantum-safe/openssh/keys{/key_id}","collaborators_url":"https://api.github.com/repos/open-quantum-safe/openssh/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/open-quantum-safe/openssh/teams","hooks_url":"https://api.github.com/repos/open-quantum-safe/openssh/hooks","issue_events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/events{/number}","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/events","assignees_url":"https://api.github.com/repos/open-quantum-safe/openssh/assignees{/user}","branches_url":"https://api.github.com/repos/open-quantum-safe/openssh/branches{/branch}","tags_url":"https://api.github.com/repos/open-quantum-safe/openssh/tags","blobs_url":"https://api.github.com/repos/open-quantum-safe/openssh/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/open-quantum-safe/openssh/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/open-quantum-safe/openssh/git/refs{/sha}","trees_url":"https://api.github.com/repos/open-quantum-safe/openssh/git/trees{/sha}","statuses_url":"https://api.github.com/repos/open-quantum-safe/openssh/statuses/{sha}","languages_url":"https://api.github.com/repos/open-quantum-safe/openssh/languages","stargazers_url":"https://api.github.com/repos/open-quantum-safe/openssh/stargazers","contributors_url":"https://api.github.com/repos/open-quantum-safe/openssh/contributors","subscribers_url":"https://api.github.com/repos/open-quantum-safe/openssh/subscribers","subscription_url":"https://api.github.com/repos/open-quantum-safe/openssh/subscription","commits_url":"https://api.github.com/repos/open-quantum-safe/openssh/commits{/sha}","git_commits_url":"https://api.github.com/repos/open-quantum-safe/openssh/git/commits{/sha}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/comments{/number}","issue_comment_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments{/number}","contents_url":"https://api.github.com/repos/open-quantum-safe/openssh/contents/{+path}","compare_url":"https://api.github.com/repos/open-quantum-safe/openssh/compare/{base}...{head}","merges_url":"https://api.github.com/repos/open-quantum-safe/openssh/merges","archive_url":"https://api.github.com/repos/open-quantum-safe/openssh/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/open-quantum-safe/openssh/downloads","issues_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues{/number}","pulls_url":"https://api.github.com/repos/open-quantum-safe/openssh/pulls{/number}","milestones_url":"https://api.github.com/repos/open-quantum-safe/openssh/milestones{/number}","notifications_url":"https://api.github.com/repos/open-quantum-safe/openssh/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/labels{/name}","releases_url":"https://api.github.com/repos/open-quantum-safe/openssh/releases{/id}","deployments_url":"https://api.github.com/repos/open-quantum-safe/openssh/deployments","created_at":"2017-12-11T20:20:33Z","updated_at":"2024-07-13T21:58:21Z","pushed_at":"2024-07-23T17:08:25Z","git_url":"git://github.com/open-quantum-safe/openssh.git","ssh_url":"git@github.com:open-quantum-safe/openssh.git","clone_url":"https://github.com/open-quantum-safe/openssh.git","svn_url":"https://github.com/open-quantum-safe/openssh","homepage":"https://openquantumsafe.org/","size":28721,"stargazers_count":152,"watchers_count":152,"language":"C","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":true,"forks_count":57,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":11,"license":{"key":"other","name":"Other","spdx_id":"NOASSERTION","url":null,"node_id":"MDc6TGljZW5zZTA="},"allow_forking":true,"is_template":false,"web_commit_signoff_required":true,"topics":["cryptography","post-quantum","ssh"],"visibility":"public","forks":57,"open_issues":11,"watchers":152,"default_branch":"OQS-v8"}},"_links":{"self":{"href":"https://api.github.com/repos/open-quantum-safe/openssh/pulls/161"},"html":{"href":"https://github.com/open-quantum-safe/openssh/pull/161"},"issue":{"href":"https://api.github.com/repos/open-quantum-safe/openssh/issues/161"},"comments":{"href":"https://api.github.com/repos/open-quantum-safe/openssh/issues/161/comments"},"review_comments":{"href":"https://api.github.com/repos/open-quantum-safe/openssh/pulls/161/comments"},"review_comment":{"href":"https://api.github.com/repos/open-quantum-safe/openssh/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/open-quantum-safe/openssh/pulls/161/commits"},"statuses":{"href":"https://api.github.com/repos/open-quantum-safe/openssh/statuses/ad933c652e5b721fb63f64a365297d690cc8ee2f"}},"author_association":"NONE","auto_merge":null,"active_lock_reason":null}},"public":true,"created_at":"2024-07-23T21:39:43Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
