{"id":"40387313647","type":"IssuesEvent","actor":{"id":171677399,"login":"abhinav-thales","display_login":"abhinav-thales","gravatar_id":"","url":"https://api.github.com/users/abhinav-thales","avatar_url":"https://avatars.githubusercontent.com/u/171677399?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1853","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1853/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1853/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1853/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1853","id":2425108934,"node_id":"I_kwDOA-eq3c6QjDnG","number":1853,"title":"Incorrect Order of z and d in NIST tests","user":{"login":"abhinav-thales","id":171677399,"node_id":"U_kgDOCjuW1w","avatar_url":"https://avatars.githubusercontent.com/u/171677399?v=4","gravatar_id":"","url":"https://api.github.com/users/abhinav-thales","html_url":"https://github.com/abhinav-thales","followers_url":"https://api.github.com/users/abhinav-thales/followers","following_url":"https://api.github.com/users/abhinav-thales/following{/other_user}","gists_url":"https://api.github.com/users/abhinav-thales/gists{/gist_id}","starred_url":"https://api.github.com/users/abhinav-thales/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhinav-thales/subscriptions","organizations_url":"https://api.github.com/users/abhinav-thales/orgs","repos_url":"https://api.github.com/users/abhinav-thales/repos","events_url":"https://api.github.com/users/abhinav-thales/events{/privacy}","received_events_url":"https://api.github.com/users/abhinav-thales/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-07-23T12:35:58Z","updated_at":"2024-07-23T12:35:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"In the NIST tests for ML-KEM, the random number stream is constructed as [z || d || m] i.e. the first random byte returned by randombytes() would be z followed by d and m.\r\n\r\nHowever, in the code\r\n\r\n64 bytes random is generated together https://github.com/open-quantum-safe/liboqs/blob/main/src/kem/ml_kem/pqcrystals-kyber-standard_ml-kem-512-ipd_ref/kem.c#L54\r\nand then passed to derand api for keypair generation.\r\n\r\nIn the derand api, first 32 byte is used for keypair generation https://github.com/open-quantum-safe/liboqs/blob/main/src/kem/ml_kem/pqcrystals-kyber-standard_ml-kem-512-ipd_ref/kem.c#L29\r\nwhich makes the first 32 byte as 'd' as per Algo 12 of FIPS-203.\r\n\r\nThe next 32 bytes are appended to end of private key https://github.com/open-quantum-safe/liboqs/blob/main/src/kem/ml_kem/pqcrystals-kyber-standard_ml-kem-512-ipd_ref/kem.c#L33 \r\nwhich makes it 'z' as per Algo 15.\r\n\r\nSo, the random byte stream construction should be [d || z || m] so that randombytes are output in the order of d->z->m\r\n\r\nCurrently, it works for NIST Intermediate Vectors as the value of z and d are same for all KEM version. Incase, they are different the tests would fail.\r\n\r\nA simple switch of z and d at https://github.com/open-quantum-safe/liboqs/blob/main/tests/test_kem_vectors.sh#L26 should solve this IMO.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1853/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1853/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2024-07-23T12:35:59Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"40392028220","type":"IssuesEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1753","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1753/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1753/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1753/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1753","id":2234926073,"node_id":"I_kwDOA-eq3c6FNkP5","number":1753,"title":"Update CBOM to CycloneDX 1.6 specification","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"assignees":[{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2024-04-10T07:20:25Z","updated_at":"2024-07-23T14:41:32Z","closed_at":"2024-07-23T14:41:32Z","author_association":"MEMBER","active_lock_reason":null,"body":"The specification used for [CBOMs](https://github.com/open-quantum-safe/liboqs/blob/main/docs/cbom.json) has been upstreamed to CycloneDX 1.6:\r\nhttps://github.com/CycloneDX/specification/releases/tag/1.6\r\n\r\nThis issue is to update the CBOM in liboqs, and its generation script to the CycloneDX 1.6 specification.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1753/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1753/timeline","performed_via_github_app":null,"state_reason":"not_planned"}},"public":true,"created_at":"2024-07-23T14:41:32Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"40392410660","type":"IssuesEvent","actor":{"id":39264796,"login":"SWilson4","display_login":"SWilson4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","avatar_url":"https://avatars.githubusercontent.com/u/39264796?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1847","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1847/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1847/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1847/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1847","id":2417292438,"node_id":"I_kwDOA-eq3c6QFPSW","number":1847,"title":"Running `cmake -LA` changes library configuration","user":{"login":"SWilson4","id":39264796,"node_id":"MDQ6VXNlcjM5MjY0Nzk2","avatar_url":"https://avatars.githubusercontent.com/u/39264796?v=4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","html_url":"https://github.com/SWilson4","followers_url":"https://api.github.com/users/SWilson4/followers","following_url":"https://api.github.com/users/SWilson4/following{/other_user}","gists_url":"https://api.github.com/users/SWilson4/gists{/gist_id}","starred_url":"https://api.github.com/users/SWilson4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SWilson4/subscriptions","organizations_url":"https://api.github.com/users/SWilson4/orgs","repos_url":"https://api.github.com/users/SWilson4/repos","events_url":"https://api.github.com/users/SWilson4/events{/privacy}","received_events_url":"https://api.github.com/users/SWilson4/received_events","type":"User","site_admin":false},"labels":[{"id":423520874,"node_id":"MDU6TGFiZWw0MjM1MjA4NzQ=","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/bug","name":"bug","color":"ee0701","default":true,"description":"Something isn't working; high priority to fix"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2024-07-18T19:59:48Z","updated_at":"2024-07-23T14:51:40Z","closed_at":"2024-07-23T14:51:40Z","author_association":"MEMBER","active_lock_reason":null,"body":"**Describe the bug**\r\nIf `cmake -LA ..` is run between the library configuration (`cmake -GNinja <config options> ..`) and build (`ninja`) commands, the library configuration may be changed.\r\n\r\n**To Reproduce**\r\nFrom the `liboqs` directory:\r\n```sh\r\nrm -rf build && mkdir build && cd build\r\ncmake -GNinja -DOQS_MINIMAL_BUILD=\"KEM_kyber_512;SIG_dilithium_2\" -DCMAKE_BUILD_TYPE=Debug ..\r\nninja\r\ngdb -ex \"b pqcrystals_dilithium2_avx2_keypair\" -ex r --args ./tests/test_sig Dilithium2\r\n```\r\n\r\n![avx2_enabled](https://github.com/user-attachments/assets/c0d800c7-9ff6-4a60-bda9-13f1ab376f6f)\r\n\r\nAs expected, the breakpoint is hit: the AVX2 code is enabled in the build.\r\n\r\nHere is the exact same command sequence with `cmake -LA ..` added between config and build:\r\n```sh\r\nrm -rf build && mkdir build && cd build\r\ncmake -GNinja -DOQS_MINIMAL_BUILD=\"KEM_kyber_512;SIG_dilithium_2\" -DCMAKE_BUILD_TYPE=Debug ..\r\ncmake -LA ..\r\nninja\r\ngdb -ex \"b pqcrystals_dilithium2_avx2_keypair\" -ex r --args ./tests/test_sig Dilithium2\r\n```\r\n\r\n![avx2_disabled](https://github.com/user-attachments/assets/0ad3c11e-e6ee-4560-803f-edf72ac9df5a)\r\n\r\nThe breakpoint cannot be set: the AVX2 code is disabled. Also note that the number of targets built is greater in the first case (127) than in the second (101).\r\n\r\n**Expected behavior**\r\nThe `cmake -LA ..` call should have no side effects.\r\n\r\n**Screenshots**\r\nSee above\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Ubuntu 22.04\r\n - OpenSSL version: 3.0.2\r\n - Compiler version used: GCC 11.4.0\r\n - Build variables used: see above\r\n - liboqs version: `main`, at commit 5670edf59fa7a910654b9171229b7dc1ea7ece4c\r\n\r\n**Additional context**\r\nWe use this pattern [basically everywhere](https://github.com/open-quantum-safe/liboqs/blob/4cc88845e8bb66dca20cd61ff88c2162f38c3230/.github/workflows/unix.yml#L147) in CI to print config variables, so the bug's impact could have been huge. Thankfully, it looks like there were no failures hidden by the bug. [This branch](https://github.com/open-quantum-safe/liboqs/tree/sw-cmake-la) removes all occurrences of `cmake -LA ..` from CI, and everything passes. Based on some [older](https://github.com/open-quantum-safe/liboqs/pull/1618) [investigation](https://github.com/open-quantum-safe/liboqs/issues/1666), I think we can infer that the weekly tests are unaffected as well.\r\n\r\nI believe that the issue lies in our filtering logic when an option like `OQS_MINIMAL_BUILD` or `OQS_ALGS_ENABLED` is set. I'll investigate further.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1847/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1847/timeline","performed_via_github_app":null,"state_reason":"completed"}},"public":true,"created_at":"2024-07-23T14:51:41Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"40395743378","type":"IssuesEvent","actor":{"id":1358071,"login":"maroueneboubakri","display_login":"maroueneboubakri","gravatar_id":"","url":"https://api.github.com/users/maroueneboubakri","avatar_url":"https://avatars.githubusercontent.com/u/1358071?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/453","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/453/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/453/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/453/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/453","id":2425624059,"node_id":"I_kwDOE_A9l86QlBX7","number":453,"title":"> Example of adding more hybrid algorithms","user":{"login":"maroueneboubakri","id":1358071,"node_id":"MDQ6VXNlcjEzNTgwNzE=","avatar_url":"https://avatars.githubusercontent.com/u/1358071?v=4","gravatar_id":"","url":"https://api.github.com/users/maroueneboubakri","html_url":"https://github.com/maroueneboubakri","followers_url":"https://api.github.com/users/maroueneboubakri/followers","following_url":"https://api.github.com/users/maroueneboubakri/following{/other_user}","gists_url":"https://api.github.com/users/maroueneboubakri/gists{/gist_id}","starred_url":"https://api.github.com/users/maroueneboubakri/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/maroueneboubakri/subscriptions","organizations_url":"https://api.github.com/users/maroueneboubakri/orgs","repos_url":"https://api.github.com/users/maroueneboubakri/repos","events_url":"https://api.github.com/users/maroueneboubakri/events{/privacy}","received_events_url":"https://api.github.com/users/maroueneboubakri/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-07-23T16:29:47Z","updated_at":"2024-07-23T16:29:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"> is there any change to make this combination through the template generator \r\n\r\nYes, this should work -- but please note that this would be a hybrid, not a composite (edit/add: Please check the README at the link above to see the differences). If you're _really_ after a Composite, I'd suggest touching base with @feventura who contributed that code).\r\n\r\n_Originally posted by @baentsch in https://github.com/open-quantum-safe/oqs-provider/issues/426#issuecomment-2161108300_\r\n            \r\nWhen I try to add for example rsa4096_dilithium3 or rsa3072_dilithium3 or pss4096_dilithium3 to generate.yaml, and I create a key/certificate the generated classic key is always rsa2048, while for p521_dilithium3 or p256_dilithium3 it generates always p384 for classic part. \r\n\r\nIs there anything besides this or the approach itself is not good and simply can't add those combinations ?\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/453/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/453/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2024-07-23T16:29:48Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
