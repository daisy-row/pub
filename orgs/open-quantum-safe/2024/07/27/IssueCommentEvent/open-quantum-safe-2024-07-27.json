{"id":"40513722111","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/163","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/163/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/163/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/163/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/163","id":2432667033,"node_id":"I_kwDOBsoLV86Q_42Z","number":163,"title":"Update supported algorithms","user":{"login":"geedo0","id":7552310,"node_id":"MDQ6VXNlcjc1NTIzMTA=","avatar_url":"https://avatars.githubusercontent.com/u/7552310?v=4","gravatar_id":"","url":"https://api.github.com/users/geedo0","html_url":"https://github.com/geedo0","followers_url":"https://api.github.com/users/geedo0/followers","following_url":"https://api.github.com/users/geedo0/following{/other_user}","gists_url":"https://api.github.com/users/geedo0/gists{/gist_id}","starred_url":"https://api.github.com/users/geedo0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geedo0/subscriptions","organizations_url":"https://api.github.com/users/geedo0/orgs","repos_url":"https://api.github.com/users/geedo0/repos","events_url":"https://api.github.com/users/geedo0/events{/privacy}","received_events_url":"https://api.github.com/users/geedo0/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2024-07-26T17:35:30Z","updated_at":"2024-07-27T08:25:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The supported algorithms [here](https://github.com/open-quantum-safe/openssh?tab=readme-ov-file#supported-algorithms) no longer align with the supported algorithms in liboqs [here](https://github.com/open-quantum-safe/liboqs?tab=readme-ov-file#supported-algorithms). We need to update the algorithms supported in the OpenSSH OQS fork back in line.\r\n\r\nI went through the two lists by hand to identify all the mismatches since the last time these algorithms were updated. I can use some help from the maintainers as to how these newer algorithms should be brought into OpenSSH. Some specific questions off the top of my head:\r\n- If they should be brought in at all.\r\n- How they should be named/renamed.\r\n- Hybrid/Hash pairing for the algorithms.\r\n\r\nListing of algorithms that exist in liboqs, but not in OpenSSH and some initial notes/thoughts:\r\n- [BIKE Round-4](https://github.com/open-quantum-safe/liboqs/commit/a1bdce98949a228269abcd65727d1093706ba13c)\r\n  * Adds a new parameter set `BIKE-L5`.\r\n  * Existing KEX names are qualified with `r3` and need to be updated.\r\n- [ML-KEM and ML-DSA IPD](https://github.com/open-quantum-safe/liboqs/commit/60adf53107885b3e4ff71864683c472bc561ff89)\r\n  * Forthcoming NIST standards for Kyber/Dilithium.\r\n  * Follow conventions set by the pre-NIST implementation?\r\n  * Some names/pairings are proposed [here](https://datatracker.ietf.org/doc/draft-kampanakis-curdle-ssh-pq-ke/)\r\n  * The security levels in the draft RFC do not align on the security levels which is the convention followed by the OQS library\r\n  * The draft RFC uses x25519, need to figure out how to wire that up.\r\n  * The IPD version exists in OQS and an alias without the IPD qualifier is provided.\r\n- [sntrup761](https://github.com/open-quantum-safe/liboqs/pull/1328)\r\n  * This would allow interop with upstream OpenSSH\r\n  * Also would conflict with upstream OpenSSH implementation\r\n  * Upstream name `sntrup761x25519-sha512@openssh.com`\r\n- [Falcon PADDED format](https://github.com/open-quantum-safe/liboqs/commit/7e5dbaf2e88e2c374e0cd290195567c182031284)\r\n  * Existing KEX uses the COMPRESSED format.\r\n- [MAYO](https://github.com/open-quantum-safe/liboqs/commit/4cc88845e8bb66dca20cd61ff88c2162f38c3230)\r\n  * New signature algorithm\r\n- XMSS and LMS\r\n  * Stateful algorithms not suitable for SSH signatures.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/163/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/163/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/2254051219","html_url":"https://github.com/open-quantum-safe/openssh/issues/163#issuecomment-2254051219","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/163","id":2254051219,"node_id":"IC_kwDOBsoLV86GWheT","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2024-07-27T08:25:32Z","updated_at":"2024-07-27T08:25:32Z","author_association":"MEMBER","body":"At the time when `oqs-openssh` and `oqs-openssl` were equally well supported by OQS, their code-generator scripts were closely in sync, thus creating a very similar user \"config experience\".\r\n\r\nAnd that's what I'd suggest trying to achieve again. If you could subscribe to this goal, @geedo0 , please check out the [oqsprovider code generator config file](https://github.com/open-quantum-safe/oqs-provider/blob/main/oqs-template/generate.yml): It documents \"user-level\" algorithm names, incl. hybrid and composite ones, incl. the \"co-related\" classic algs' strengths. If you don't like to work with .yml, [this file](https://github.com/open-quantum-safe/oqs-provider/blob/main/ALGORITHMS.md) is generated from it for better readability.\r\n\r\nAs per your specific per-algorithm questions, my suggestions would thus be as follows:\r\n- Bike, Mayo, Falcon, ML-KEM/DSA: Use oqsprovider config as-is (i.e., add new \"openssh\" alg monikers; in the case of ML-*, `oqsprovider` promises to shield its users from any NIST last-minute changes in that the name will persist, but the algorithm logic will adapt to any changes in spec. In other words, mlkem/mldsa can be requested by users and currently will be implemented by the -ipd code and in the future by a possibly different, finally standardized, code. )\r\n- sntrup761: That's a challenge -- but its use in `openssh` is actually the only reason why `liboqs` still supports it. My personal preference would be to see what it takes to achieve interop with the version `openssh` anyway supports (e.g., by way of creating an \"oqssntrup761x25519\" hybrid and running that against what \"baseline\" `openssh` has built-in). If this were possible, we should pause and talk: Personally, I'd then completely drop \"sntrup761\" from OQS for good. If this were not possible, well, we also need to talk and understand what's the problem then. Personally, I'd most likely suggest checking whether that variant would interop with the \"oqs-opensshv8\" version -- and if so, keep it. If not, drop it (why keep something that cannot talk with anything else?).\r\n- XMSS/LMS: Unusable","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/2254051219/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-07-27T08:25:34Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"40517132012","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1426","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1426/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1426/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1426/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1426","id":1652281414,"node_id":"I_kwDOA-eq3c5ie9BG","number":1426,"title":"OQS_USE_SHA3_OPENSSL=ON makes running tests significantly slower","user":{"login":"beldmit","id":13785747,"node_id":"MDQ6VXNlcjEzNzg1NzQ3","avatar_url":"https://avatars.githubusercontent.com/u/13785747?v=4","gravatar_id":"","url":"https://api.github.com/users/beldmit","html_url":"https://github.com/beldmit","followers_url":"https://api.github.com/users/beldmit/followers","following_url":"https://api.github.com/users/beldmit/following{/other_user}","gists_url":"https://api.github.com/users/beldmit/gists{/gist_id}","starred_url":"https://api.github.com/users/beldmit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/beldmit/subscriptions","organizations_url":"https://api.github.com/users/beldmit/orgs","repos_url":"https://api.github.com/users/beldmit/repos","events_url":"https://api.github.com/users/beldmit/events{/privacy}","received_events_url":"https://api.github.com/users/beldmit/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2023-04-03T15:19:15Z","updated_at":"2024-07-27T15:06:18Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Describe the bug**\r\nI build liboqs-0.8.0-dev with and without OQS_USE_SHA3_OPENSSL=ON. With OQS_USE_SHA3_OPENSSL=ON I see 9 minutes for running tests and without - just 2 min. Fedora 37, OpenSSL 3.0.x\r\n\r\n**To Reproduce**\r\ncmake -GNinja -DBUILD_SHARED_LIBS=ON -DOQS_ALGS_ENABLED=STD -DOQS_USE_SHA3_OPENSSL=ON -DCMAKE_BUILD_TYPE=Debug -DOQS_USE_AVX2_INSTRUCTIONS=OFF -DOQS_USE_AVX512_INSTRUCTIONS=OFF\r\n\r\nmake\r\ntime make test \r\n\r\nRepeat the same without  -DOQS_USE_SHA3_OPENSSL=ON\r\n\r\n(I do it as a part of RPM build, so pure difference should be in the testing)\r\n \r\n**Expected behavior**\r\nMore or less equal time.\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Fedora 37\r\n - OpenSSL version: 3.0.8\r\n - Compiler version used: gcc (GCC) 12.2.1 20221121\r\n - Build variables used: -DBUILD_SHARED_LIBS=ON -DOQS_ALGS_ENABLED=STD -DOQS_USE_SHA3_OPENSSL=ON -DCMAKE_BUILD_TYPE=Debug -DOQS_USE_AVX2_INSTRUCTIONS=OFF -DOQS_USE_AVX512_INSTRUCTIONS=OFF\r\n - liboqs version: main branch\r\n\r\n**Additional context**\r\nWe want to avoid multiple implementations of low-level algorithms (AES, SHA2, SHA3) in Fedora and want to heavily rely on OpenSSL implementation. We would like to narrow down the problem - is it the performance of low-level primitives or, say, digest fetching from openssl, or smth else.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1426/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1426/timeline","performed_via_github_app":null,"state_reason":"reopened"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/2254173696","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1426#issuecomment-2254173696","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1426","id":2254173696,"node_id":"IC_kwDOA-eq3c6GW_YA","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2024-07-27T15:06:17Z","updated_at":"2024-07-27T15:06:17Z","author_association":"MEMBER","body":"@dstebila Can you remind me about the reason for closing this issue? When doing some spot checks before a possible 0.11.0 I noticed the problem still exists: Activating OpenSSL SHA3 slows down `liboqs` substantially (running \"non-streaming\" `openssl v3.0.2` for example). Or is the \"resolution\" the documentation that `liboqs` [prioritizes performance over security](https://github.com/open-quantum-safe/liboqs/blob/main/CONFIGURE.md#oqs_use_openssl)?\r\n\r\n> These default choices have been made to optimize the default performance of all algorithms. Changing them implies performance penalties.\r\n\r\n@beldmit How are you dealing with this these days?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/2254173696/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-07-27T15:06:19Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
