{"id":"35377383996","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1654","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1654/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1654/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1654/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1654","id":2070604770,"node_id":"PR_kwDOA-eq3c5je_JE","number":1654,"title":"Run oqs-provider release tests in CI on release candidate branches","user":{"login":"SWilson4","id":39264796,"node_id":"MDQ6VXNlcjM5MjY0Nzk2","avatar_url":"https://avatars.githubusercontent.com/u/39264796?v=4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","html_url":"https://github.com/SWilson4","followers_url":"https://api.github.com/users/SWilson4/followers","following_url":"https://api.github.com/users/SWilson4/following{/other_user}","gists_url":"https://api.github.com/users/SWilson4/gists{/gist_id}","starred_url":"https://api.github.com/users/SWilson4/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SWilson4/subscriptions","organizations_url":"https://api.github.com/users/SWilson4/orgs","repos_url":"https://api.github.com/users/SWilson4/repos","events_url":"https://api.github.com/users/SWilson4/events{/privacy}","received_events_url":"https://api.github.com/users/SWilson4/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2024-01-08T14:44:08Z","updated_at":"2024-02-03T22:44:01Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1654","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1654","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1654.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1654.patch","merged_at":null},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\nEDIT 2023-02-01: This now simply adds a trigger for functionality proposed in https://github.com/open-quantum-safe/oqs-provider/pull/345. It will function when somebody with the appropriate permissions (presumably @dstebila?) adds an `oqsbot` (classic) personal access token with `repo` and `workflow` permissions as an Actions secret with the variable name `OQSBOT_GITHUB_ACTIONS`. We already have one of these in use in CircleCI.\r\n\r\n### Previous description (prior to 2023-02-01)\r\n\r\nCurrently, our [release process](https://github.com/open-quantum-safe/liboqs/wiki/Release-process) requires that the `oqs-provider` release tests be run manually for `liboqs` release candidate branches. This PR automates this process in CI, setting them to run automatically on pull requests for any branch whose name has the prefix `dev-`. This prefix is up for discussion; I used `dev-` because it's what we used for the latest release, and because using `rc-` would cause issues if we ever get a PR from somebody named, say, Ray Charles.\r\n\r\nThe full release tests complete in about 50 minutes in CI—see [https://github.com/open-quantum-safe/liboqs/actions/runs/7426702581](https://github.com/open-quantum-safe/liboqs/actions/runs/7426702581)—which I think is not too bad. Note that although the linked workflow says it uses a \"minimal set\" of algorithm combinations, it actually does run all combinations; I just didn't update the workflow documentation before pushing. The full set of tests should run again on this PR as a proof of concept; I'll revert to running them only on release candidate PRs once that workflow completes.\r\n\r\nThe CI workflow is based on the [`release-test.sh` script in the `oqs-provider` repo](https://github.com/open-quantum-safe/oqs-provider/blob/eb80076d1683121db35fabf8c1b0c6f9125c1b6d/scripts/release-test.sh). I didn't call the script directly since some aspects (checking out a new temporary branch then resetting back to main, cloning liboqs, etc) were either unnecessary in the CI setting or better handled by a built-in action.\r\n\r\nDiscussion points:\r\n- What prefix do we want to use for release candidates?\r\n- Is there a way to ensure that this script stays in sync with `oqs-provider` release testing requirements?\r\n- For @baentsch specifically: what version of OpenSSL should we be checking against here? I defaulted to `master` as the [release test documentation](https://github.com/open-quantum-safe/oqs-provider/blob/eb80076d1683121db35fabf8c1b0c6f9125c1b6d/scripts/release-test.sh#L33) said to use the \"latest\" version.\r\n- Do we want to also automate some of the other release testing? We could, for example, also run the full constant time tests as part of this workflow.\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\nFixes #1647 (assuming that `oqs-provider` is the only downstream for which we want automated release testing).\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [no] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [no] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in fully supported downstream projects dependent on these, i.e., [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) and [OQS-OpenSSH](https://github.com/open-quantum-safe/openssh) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1654/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1654/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1925475111","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1654#issuecomment-1925475111","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1654","id":1925475111,"node_id":"IC_kwDOA-eq3c5yxGsn","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2024-02-03T22:44:00Z","updated_at":"2024-02-03T22:44:00Z","author_association":"MEMBER","body":"> EDIT 2023-02-01: This now simply adds a trigger for functionality proposed in https://github.com/open-quantum-safe/oqs-provider/pull/345. It will function when somebody with the appropriate permissions (presumably @dstebila?) adds an oqsbot (classic) personal access token with repo and workflow permissions as an Actions secret with the variable name OQSBOT_GITHUB_ACTIONS. We already have one of these in use in CircleCI.\r\n\r\n@SWilson4 I see that there was an update to the `OQSBOT_GITHUB_ACTIONS` secret in the OQS organization settings about 16 hours ago, so I'm not sure if this request has already been solved.  If not, we can meet on Monday to fix this, I'm around most of the day.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1925475111/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-02-03T22:44:01Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"35377430700","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":215630242,"name":"open-quantum-safe/liboqs-go","url":"https://api.github.com/repos/open-quantum-safe/liboqs-go"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/34","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/34/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/34/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/34/events","html_url":"https://github.com/open-quantum-safe/liboqs-go/issues/34","id":2033947059,"node_id":"I_kwDODNpBos55O5Gz","number":34,"title":"How to use x509 Certificate Signer on golang","user":{"login":"ShubhamTatvamasi","id":14152150,"node_id":"MDQ6VXNlcjE0MTUyMTUw","avatar_url":"https://avatars.githubusercontent.com/u/14152150?v=4","gravatar_id":"","url":"https://api.github.com/users/ShubhamTatvamasi","html_url":"https://github.com/ShubhamTatvamasi","followers_url":"https://api.github.com/users/ShubhamTatvamasi/followers","following_url":"https://api.github.com/users/ShubhamTatvamasi/following{/other_user}","gists_url":"https://api.github.com/users/ShubhamTatvamasi/gists{/gist_id}","starred_url":"https://api.github.com/users/ShubhamTatvamasi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ShubhamTatvamasi/subscriptions","organizations_url":"https://api.github.com/users/ShubhamTatvamasi/orgs","repos_url":"https://api.github.com/users/ShubhamTatvamasi/repos","events_url":"https://api.github.com/users/ShubhamTatvamasi/events{/privacy}","received_events_url":"https://api.github.com/users/ShubhamTatvamasi/received_events","type":"User","site_admin":false},"labels":[{"id":1620813322,"node_id":"MDU6TGFiZWwxNjIwODEzMzIy","url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/labels/question","name":"question","color":"d876e3","default":true,"description":"Further information is requested"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2023-12-09T16:36:31Z","updated_at":"2024-02-03T22:50:45Z","closed_at":"2024-02-03T22:50:45Z","author_association":"NONE","active_lock_reason":null,"body":"Hi, is there any way to use my code with custom signer from OQS library?\r\n\r\nI am getting the following error:\r\n```\r\nError creating certificate: x509: certificate private key does not implement crypto.Signer\r\n```\r\n\r\nHere is my code:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"crypto/rand\"\r\n\t\"crypto/x509\"\r\n\t\"crypto/x509/pkix\"\r\n\t\"encoding/pem\"\r\n\t\"fmt\"\r\n\t\"math/big\"\r\n\t\"os\"\r\n\t\"time\"\r\n\r\n\t\"github.com/open-quantum-safe/liboqs-go/oqs\"\r\n)\r\n\r\nfunc generateDilithium2KeyPair() ([]byte, []byte, error) {\r\n\t// Initialize liboqs\r\n\tquantumKeys := oqs.Signature{}\r\n\tdefer quantumKeys.Clean()\r\n\r\n\t// Initialize liboqs-go\r\n\terr := quantumKeys.Init(\"Dilithium2\", nil)\r\n\tif err != nil {\r\n\t\treturn nil, nil, fmt.Errorf(\"Error initializing liboqs-go: %v\", err)\r\n\t}\r\n\r\n\t// Generate key pair\r\n\tpublicKey, err := quantumKeys.GenerateKeyPair()\r\n\tif err != nil {\r\n\t\treturn nil, nil, fmt.Errorf(\"Error generating key pair: %v\", err)\r\n\t}\r\n\r\n\t// Export private key\r\n\tprivateKey := quantumKeys.ExportSecretKey()\r\n\r\n\treturn publicKey, privateKey, nil\r\n}\r\n\r\nfunc generateCertificate(publicKey []byte, privateKey []byte) ([]byte, error) {\r\n\r\n\t// Create a self-signed certificate\r\n\ttemplate := x509.Certificate{\r\n\t\tSerialNumber:          big.NewInt(1),\r\n\t\tSubject:               pkix.Name{CommonName: \"Dilithium Cert\"},\r\n\t\tNotBefore:             time.Now(),                           // Valid from the start\r\n\t\tNotAfter:              time.Now().Add(365 * 24 * time.Hour), // Valid for 1 year\r\n\t\tKeyUsage:              x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,\r\n\t\tExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},\r\n\t\tBasicConstraintsValid: true,\r\n\t}\r\n\r\n\tfmt.Println(\"Getting error at this step.\")\r\n\tcertDER, err := x509.CreateCertificate(rand.Reader, &template, &template, publicKey, privateKey)\r\n\tif err != nil {\r\n\t\treturn nil, fmt.Errorf(\"Error creating certificate: %v\", err)\r\n\t}\r\n\r\n\treturn certDER, nil\r\n}\r\n\r\nfunc main() {\r\n\t// Step 1: Generate Dilithium2 Key Pair\r\n\tpublicKey, privateKey, err := generateDilithium2KeyPair()\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t\treturn\r\n\t}\r\n\r\n\t// Step 2: Generate X.509 Certificate\r\n\tcertDER, err := generateCertificate(publicKey, privateKey)\r\n\tif err != nil {\r\n\t\tfmt.Println(err)\r\n\t\treturn\r\n\t}\r\n\r\n\t// Step 3: Save Certificate to a file\r\n\tcertFile, err := os.Create(\"example.crt\")\r\n\tif err != nil {\r\n\t\tfmt.Println(\"Error creating certificate file:\", err)\r\n\t\treturn\r\n\t}\r\n\tdefer certFile.Close()\r\n\r\n\tpem.Encode(certFile, &pem.Block{Type: \"CERTIFICATE\", Bytes: certDER})\r\n\r\n\tfmt.Println(\"Certificate generated successfully.\")\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/34/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/34/timeline","performed_via_github_app":null,"state_reason":"completed"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/comments/1925476782","html_url":"https://github.com/open-quantum-safe/liboqs-go/issues/34#issuecomment-1925476782","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/34","id":1925476782,"node_id":"IC_kwDODNpBos5yxHGu","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2024-02-03T22:50:45Z","updated_at":"2024-02-03T22:50:45Z","author_association":"MEMBER","body":"Sorry for the slow reply here. In case it's still relevant to know, this issue would be out of scope of what liboqs-go achieves. liboqs-go exposes the post-quantum KEM and signature algorithms from liboqs as basic functions in Go, but does not try to add those algorithms to various cryptographic protocols implemented within Go, such as X.509 or TLS.  One would have to dive into the Go X.509 code to figure out how to add these extra algorithms, including providing all the relevant X.509 algorithm identifiers, which the barebones liboqs-go wrapper does not do.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/comments/1925476782/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-02-03T22:50:46Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
