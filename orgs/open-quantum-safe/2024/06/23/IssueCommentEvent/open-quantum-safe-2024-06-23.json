{"id":"39539870709","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1761","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1761/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1761/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1761/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1761","id":2257602107,"node_id":"I_kwDOA-eq3c6GkEY7","number":1761,"title":"Valgrind Massif Tool Breaks During Verify Operation of Falcon Algorithms on Raspberry Pi","user":{"login":"crt26","id":63823484,"node_id":"MDQ6VXNlcjYzODIzNDg0","avatar_url":"https://avatars.githubusercontent.com/u/63823484?v=4","gravatar_id":"","url":"https://api.github.com/users/crt26","html_url":"https://github.com/crt26","followers_url":"https://api.github.com/users/crt26/followers","following_url":"https://api.github.com/users/crt26/following{/other_user}","gists_url":"https://api.github.com/users/crt26/gists{/gist_id}","starred_url":"https://api.github.com/users/crt26/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/crt26/subscriptions","organizations_url":"https://api.github.com/users/crt26/orgs","repos_url":"https://api.github.com/users/crt26/repos","events_url":"https://api.github.com/users/crt26/events{/privacy}","received_events_url":"https://api.github.com/users/crt26/received_events","type":"User","site_admin":false},"labels":[{"id":423520884,"node_id":"MDU6TGFiZWw0MjM1MjA4ODQ=","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/wontfix","name":"wontfix","color":"ffffff","default":true,"description":"This will not be worked on"}],"state":"open","locked":false,"assignee":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"assignees":[{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false}],"milestone":null,"comments":5,"created_at":"2024-04-22T23:01:53Z","updated_at":"2024-06-23T16:27:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## Issue Description\r\n\r\nWhen using the Valgrind memory profiler (**version - 3.19.0**) with the Massif tool to gain information on the maxHeap and maxStack for an algorithm/operation combination, any Falcon algorithm variation with the verify operation will cause a break in Valgrind and ***produces the error below***. \r\n\r\n**Main Error:**\r\n```\r\nvex: priv/host_arm64_defs.c:2829 (genSpill_ARM64): Assertion `offsetB < 4096' failed.\r\nvex storage: T total 140151576 bytes allocated\r\nvex storage: P total 0 bytes allocated\r\n\r\nvalgrind: the 'impossible' happened:\r\n   LibVEX called failure_exit().\r\n```\r\n\r\nThe functions related to the issues according to the [Valgrind Outputs](#valgrind-with-massif-tool-error-full) are:\r\n\r\n- PQCLEAN_FALCON512_AARCH64_is_short*\r\n- do_verify \r\n- OQS_SIG_verify\r\n\r\n*This comes from the [example output given](#valgrind-with-massif-tool-error-full), in the [verbose output files](#verbose-outputs) the functions with issues for the other Falcon variations are detailed.\r\n\r\nThis issue is persistent across Raspberry Pi 4 and 5 models and various build configurations. When using the test_sig_mem script by itself, the verification completes without issue. This is also the case when using the Valgrind profiler by itself without Massif. Furthermore, the issue is the same regardless if the ARM PMU is enabled or disabled.\r\n\r\n### Standard test_sig_mem Verify Output\r\n\r\n**Command:**\r\n```\r\n./test_sig_mem Falcon-512 2\r\n```\r\n\r\n**Output**\r\n```\r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-6.6.20+rpt-rpi-2712 - ARM PMU options enabled\r\nCompiler:         gcc (12.2.0)\r\nCompile options:  [-march=armv8-a+crypto;-Wa,--noexecstack;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.10.1-dev\r\nGit commit:       6b4e692b8083f391d181087f500b3389ffb007d8 (+ local modifications)\r\nOpenSSL enabled:  Yes (OpenSSL 3.2.1 30 Jan 2024)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  OQS_SPEED_USE_ARM_PMU OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=Release\r\nCPU exts active:  AES SHA2 NEON\r\nverification passes as expected\r\n```\r\n\r\n### Valgrind Output without Massif\r\n**Command:**\r\n```\r\nvalgrind ./test_sig_mem Falcon-512 2\r\n```\r\n\r\n**Output:**\r\n```\r\n==352773== Memcheck, a memory error detector\r\n==352773== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.\r\n==352773== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info\r\n==352773== Command: ./test_sig_mem Falcon-512 2\r\n==352773==\r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-6.6.20+rpt-rpi-2712 - ARM PMU options enabled\r\nCompiler:         gcc (12.2.0)\r\nCompile options:  [-march=armv8-a+crypto;-Wa,--noexecstack;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.10.1-dev\r\nGit commit:       6b4e692b8083f391d181087f500b3389ffb007d8 (+ local modifications)\r\nOpenSSL enabled:  Yes (OpenSSL 3.2.1 30 Jan 2024)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  OQS_SPEED_USE_ARM_PMU OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=Release\r\nCPU exts active:  AES SHA2 NEON\r\nverification passes as expected\r\n==352773==\r\n==352773== HEAP SUMMARY:\r\n==352773==     in use at exit: 0 bytes in 0 blocks\r\n==352773==   total heap usage: 15 allocs, 15 frees, 22,622 bytes allocated\r\n==352773==\r\n==352773== All heap blocks were freed -- no leaks are possible\r\n==352773==\r\n==352773== For lists of detected and suppressed errors, rerun with: -s\r\n==352773== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\r\n```\r\n\r\n### Valgrind with Massif Tool Error Full\r\n**Command:**\r\n```\r\nvalgrind --tool=massif --stacks=yes ./test_sig_mem Falcon-512 2\r\n```\r\n\r\n**Output:**\r\n```\r\n==352334== Massif, a heap profiler\r\n==352334== Copyright (C) 2003-2017, and GNU GPL'd, by Nicholas Nethercote\r\n==352334== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info\r\n==352334== Command: ./test_sig_mem Falcon-512 2\r\n==352334==\r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-6.6.20+rpt-rpi-2712 - ARM PMU options enabled\r\nCompiler:         gcc (12.2.0)\r\nCompile options:  [-march=armv8-a+crypto;-Wa,--noexecstack;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.10.1-dev\r\nGit commit:       6b4e692b8083f391d181087f500b3389ffb007d8 (+ local modifications)\r\nOpenSSL enabled:  Yes (OpenSSL 3.2.1 30 Jan 2024)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  OQS_SPEED_USE_ARM_PMU OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=Release\r\nCPU exts active:  AES SHA2 NEON\r\n\r\nvex: priv/host_arm64_defs.c:2829 (genSpill_ARM64): Assertion `offsetB < 4096' failed.\r\nvex storage: T total 140151576 bytes allocated\r\nvex storage: P total 0 bytes allocated\r\n\r\nvalgrind: the 'impossible' happened:\r\n   LibVEX called failure_exit().\r\n\r\nhost stacktrace:\r\n==352334==    at 0x58009114: show_sched_status_wrk (m_libcassert.c:406)\r\n==352334==    by 0x58009263: report_and_quit (m_libcassert.c:477)\r\n==352334==    by 0x5800949B: panic (m_libcassert.c:553)\r\n==352334==    by 0x5800949B: vgPlain_core_panic_at (m_libcassert.c:558)\r\n==352334==    by 0x580094BF: vgPlain_core_panic (m_libcassert.c:563)\r\n==352334==    by 0x5808277B: failure_exit (m_translate.c:761)\r\n==352334==    by 0x580EDD27: vex_assert_fail (main_util.c:245)\r\n==352334==    by 0x5814C973: genSpill_ARM64 (host_arm64_defs.c:2829)\r\n==352334==    by 0x581435DB: spill_vreg (host_generic_reg_alloc3.c:338)\r\n==352334==    by 0x58144B3F: doRegisterAllocation_v3 (host_generic_reg_alloc3.c:1280)\r\n==352334==    by 0x580EC843: libvex_BackEnd (main_main.c:1133)\r\n==352334==    by 0x580EC843: LibVEX_Translate (main_main.c:1236)\r\n==352334==    by 0x58084F6F: vgPlain_translate (m_translate.c:1831)\r\n==352334==    by 0x5805664B: handle_chain_me (scheduler.c:1169)\r\n==352334==    by 0x58059227: vgPlain_scheduler (scheduler.c:1514)\r\n==352334==    by 0x580A861F: thread_wrapper (syswrap-linux.c:101)\r\n==352334==    by 0x580A861F: run_a_thread_NORETURN (syswrap-linux.c:154)\r\n==352334==    by 0xFFFFFFFFFFFFFFFF: ???\r\n\r\nsched status:\r\n  running_tid=1\r\n\r\nThread 1: status = VgTs_Runnable (lwpid 352334)\r\n==352334==    at 0x18ADC8: PQCLEAN_FALCON512_AARCH64_is_short (in /home/cuserp3/work/pqc-evaluation-tools/lib/liboqs/build/tests/test_sig_mem)\r\n==352334==    by 0x131F1F: do_verify (in /home/cuserp3/work/pqc-evaluation-tools/lib/liboqs/build/tests/test_sig_mem)\r\n==352334==    by 0x124217: OQS_SIG_verify (in /home/cuserp3/work/pqc-evaluation-tools/lib/liboqs/build/tests/test_sig_mem)\r\n==352334==    by 0x1231AB: main (in /home/cuserp3/work/pqc-evaluation-tools/lib/liboqs/build/tests/test_sig_mem)\r\nclient stack range: [0x1FFF000000 0x1FFF003FFF] client SP: 0x1FFF002040\r\nvalgrind stack range: [0x1002C18000 0x1002D17FFF] top usage: 19776 of 1048576\r\n```\r\n\r\n### Verbose Outputs\r\nAn output of the issue with the verbose flag alongside outputs for each affected Falcon variation can be found in the following text files:\r\n- [valgrind-massif-verbose.txt](https://github.com/open-quantum-safe/liboqs/files/15069215/valgrind-massif-verbose.txt)\r\n- [valgrind-falcon-outputs.txt](https://github.com/open-quantum-safe/liboqs/files/15069217/valgrind-falcon-outputs.txt)\r\n\r\n## Build Configurations\r\nThe error is persistent across various setups using differing build flags:\r\n\r\n### Default Setup\r\n**Build Commands:**\r\n```\r\n cmake -GNinja ..\r\n ninja && sudo ninja install\r\n ```\r\n\r\n **Configuration Details:**\r\n```\r\nTarget platform:  aarch64-Linux-6.6.20+rpt-rpi-2712 - ARM PMU options enabled\r\nCompiler:         gcc (12.2.0)\r\nCompile options:  [-march=armv8-a+crypto;-Wa,--noexecstack;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.10.1-dev\r\nGit commit:       7b6d9f3326295fc80ea0c9026f3dd9d57f8436de\r\nOpenSSL enabled:  Yes (OpenSSL 3.0.11 19 Sep 2023)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  OQS_SPEED_USE_ARM_PMU OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=Release\r\nCPU exts active:  AES SHA2 NEON\r\n```\r\n\r\n### Custom Setup\r\n**Build Commands (Contained within the script, but all paths variables have been verified):**\r\n```\r\ncmake -GNinja  -S \"$liboqs_source/\" -B \"$liboqs_path/build\" \\\r\n-DCMAKE_INSTALL_PREFIX=\"$liboqs_path\" \\\r\n-DOQS_SPEED_USE_ARM_PMU=ON \\\r\n-DOQS_USE_OPENSSL=ON \\\r\n-DOPENSSL_ROOT_DIR=\"$open_ssl_path\"\r\n\r\nninja && sudo ninja install\r\n```\r\n\r\n**Configuration Details:**\r\n```\r\nTarget platform:  aarch64-Linux-6.6.20+rpt-rpi-2712 - ARM PMU options enabled\r\nCompiler:         gcc (12.2.0)\r\nCompile options:  [-march=armv8-a+crypto;-Wa,--noexecstack;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.10.1-dev\r\nGit commit:       6b4e692b8083f391d181087f500b3389ffb007d8 (+ local modifications)\r\nOpenSSL enabled:  Yes (OpenSSL 3.2.1 30 Jan 2024)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  OQS_SPEED_USE_ARM_PMU OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=Release\r\nCPU exts active:  AES SHA2 NEON\r\n```\r\n\r\n## Expected behaviour\r\nThe setup and configurations detailed in this bug report were also tested on a **Debian 12 x86 machine**, and the issue was not present. The environment that this setup, when executed on a Debian 12 x86 system, gives the following outputs:\r\n\r\n**Valgrind with Massif Output**\r\n```\r\n==55823== Massif, a heap profiler\r\n==55823== Copyright (C) 2003-2017, and GNU GPL'd, by Nicholas Nethercote\r\n==55823== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info\r\n==55823== Command: ./test_sig_mem Falcon-512 2\r\n==55823==\r\nConfiguration info\r\n==================\r\nTarget platform:  x86_64-Linux-6.1.0-20-amd64\r\nCompiler:         gcc (12.2.0)\r\nCompile options:  [-Wa,--noexecstack;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.10.1-dev\r\nGit commit:       6b4e692b8083f391d181087f500b3389ffb007d8\r\nOpenSSL enabled:  Yes (OpenSSL 3.2.1 30 Jan 2024)\r\nAES:              NI\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=Release\r\nCPU exts active:  AES AVX AVX2 BMI1 BMI2 PCLMULQDQ POPCNT SSE SSE2 SSE3\r\nverification\r\n```\r\n\r\n**Massif File after Passing to ms_print:**\r\n[x86-ms_print.txt](https://github.com/open-quantum-safe/liboqs/files/15069226/x86-ms_print.txt)\r\n\r\n\r\n*Build details for the x86 machine are detailed below*\r\n\r\n## Environment Details\r\nThe issue was tested on both Raspberry Pi 4 and 5 models with the following details:\r\n\r\n### Pi-4:\r\n- OS - Raspbian OS Lite 64bit (Debian 11 Bullseye)\r\n- Kernel Version - 6.1.21-v8+\r\n- Architecture - aarch64 \r\n- OpenSSL Version - OpenSSL 1.1.1w (Default Configuration) and OpenSSL 3.2.1 (Custom Configuration)\r\n- Compiler - gcc (10.2.1)\r\n- Build Variables - [See Above](#build-configurations)\r\n- Liboqs Version - 0.10.0\r\n\r\n### Pi-5:\r\n- OS - Raspbian OS Lite 64bit (Debian 12 Bookworm)\r\n- Kernel Version - 6.6.20+rpt-rpi-2712\r\n- Architecture - aarch64\r\n- OpenSSL Version - OpenSSL 3.0.11 (Default Configuration) and OpenSSL 3.2.1 (Custom Configuration)\r\n- Compiler - gcc (12.2.0)\r\n- Build Variables - [See Above](#build-configurations)\r\n- Liboqs Version - 0.10.0\r\n\r\n### Debian x86 Machine used to Verify Issue:\r\n- OS - Debian GNU/Linux 12 (bookworm)\r\n- Kernel Version - 6.1.0-20-amd64\r\n- Architecture - x86_64\r\n- OpenSSL Version - OpenSSL 3.2.1 (Custom Configuration)\r\n- Compiler - gcc (12.2.0)\r\n- Liboqs Version - 0.10.0\r\n\r\n\r\n**Debian x86 Build Commands**\r\n```\r\ncmake -GNinja  -S \"$liboqs_source/\" -B \"$liboqs_path/build\" \\\r\n-DCMAKE_INSTALL_PREFIX=\"$liboqs_path\" \\\r\n-DOQS_USE_OPENSSL=ON \\\r\n-DOPENSSL_ROOT_DIR=\"$open_ssl_path\"\r\n```\r\n\r\n\r\n## Additional context\r\nI would be happy to provide any additional information or outputs for this issue and, if necessary, the current developing branch for the repository where this environment is set up and run. \r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1761/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1761/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/2185121654","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1761#issuecomment-2185121654","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1761","id":2185121654,"node_id":"IC_kwDOA-eq3c6CPk92","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2024-06-23T16:27:31Z","updated_at":"2024-06-23T16:27:31Z","author_association":"MEMBER","body":"> I mark this issue as `won't fix` due to the bug is from external tool.\r\n\r\n@cothan Thanks for looking into this -- I'm just not sure I understand: Are you saying this is a bug in `valgrind` and not in the ARM-optimized Falcon code? What makes you think so? Can you reproduce the bug with non-Falcon code? If so, would it be worth while reporting this to the maintainers of `valgrind`?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/2185121654/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-23T16:27:32Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"39540362237","type":"IssueCommentEvent","actor":{"id":9219016,"login":"cothan","display_login":"cothan","gravatar_id":"","url":"https://api.github.com/users/cothan","avatar_url":"https://avatars.githubusercontent.com/u/9219016?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1761","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1761/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1761/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1761/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1761","id":2257602107,"node_id":"I_kwDOA-eq3c6GkEY7","number":1761,"title":"Valgrind Massif Tool Breaks During Verify Operation of Falcon Algorithms on Raspberry Pi","user":{"login":"crt26","id":63823484,"node_id":"MDQ6VXNlcjYzODIzNDg0","avatar_url":"https://avatars.githubusercontent.com/u/63823484?v=4","gravatar_id":"","url":"https://api.github.com/users/crt26","html_url":"https://github.com/crt26","followers_url":"https://api.github.com/users/crt26/followers","following_url":"https://api.github.com/users/crt26/following{/other_user}","gists_url":"https://api.github.com/users/crt26/gists{/gist_id}","starred_url":"https://api.github.com/users/crt26/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/crt26/subscriptions","organizations_url":"https://api.github.com/users/crt26/orgs","repos_url":"https://api.github.com/users/crt26/repos","events_url":"https://api.github.com/users/crt26/events{/privacy}","received_events_url":"https://api.github.com/users/crt26/received_events","type":"User","site_admin":false},"labels":[{"id":423520884,"node_id":"MDU6TGFiZWw0MjM1MjA4ODQ=","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/wontfix","name":"wontfix","color":"ffffff","default":true,"description":"This will not be worked on"}],"state":"open","locked":false,"assignee":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"assignees":[{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false}],"milestone":null,"comments":6,"created_at":"2024-04-22T23:01:53Z","updated_at":"2024-06-23T17:16:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## Issue Description\r\n\r\nWhen using the Valgrind memory profiler (**version - 3.19.0**) with the Massif tool to gain information on the maxHeap and maxStack for an algorithm/operation combination, any Falcon algorithm variation with the verify operation will cause a break in Valgrind and ***produces the error below***. \r\n\r\n**Main Error:**\r\n```\r\nvex: priv/host_arm64_defs.c:2829 (genSpill_ARM64): Assertion `offsetB < 4096' failed.\r\nvex storage: T total 140151576 bytes allocated\r\nvex storage: P total 0 bytes allocated\r\n\r\nvalgrind: the 'impossible' happened:\r\n   LibVEX called failure_exit().\r\n```\r\n\r\nThe functions related to the issues according to the [Valgrind Outputs](#valgrind-with-massif-tool-error-full) are:\r\n\r\n- PQCLEAN_FALCON512_AARCH64_is_short*\r\n- do_verify \r\n- OQS_SIG_verify\r\n\r\n*This comes from the [example output given](#valgrind-with-massif-tool-error-full), in the [verbose output files](#verbose-outputs) the functions with issues for the other Falcon variations are detailed.\r\n\r\nThis issue is persistent across Raspberry Pi 4 and 5 models and various build configurations. When using the test_sig_mem script by itself, the verification completes without issue. This is also the case when using the Valgrind profiler by itself without Massif. Furthermore, the issue is the same regardless if the ARM PMU is enabled or disabled.\r\n\r\n### Standard test_sig_mem Verify Output\r\n\r\n**Command:**\r\n```\r\n./test_sig_mem Falcon-512 2\r\n```\r\n\r\n**Output**\r\n```\r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-6.6.20+rpt-rpi-2712 - ARM PMU options enabled\r\nCompiler:         gcc (12.2.0)\r\nCompile options:  [-march=armv8-a+crypto;-Wa,--noexecstack;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.10.1-dev\r\nGit commit:       6b4e692b8083f391d181087f500b3389ffb007d8 (+ local modifications)\r\nOpenSSL enabled:  Yes (OpenSSL 3.2.1 30 Jan 2024)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  OQS_SPEED_USE_ARM_PMU OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=Release\r\nCPU exts active:  AES SHA2 NEON\r\nverification passes as expected\r\n```\r\n\r\n### Valgrind Output without Massif\r\n**Command:**\r\n```\r\nvalgrind ./test_sig_mem Falcon-512 2\r\n```\r\n\r\n**Output:**\r\n```\r\n==352773== Memcheck, a memory error detector\r\n==352773== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.\r\n==352773== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info\r\n==352773== Command: ./test_sig_mem Falcon-512 2\r\n==352773==\r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-6.6.20+rpt-rpi-2712 - ARM PMU options enabled\r\nCompiler:         gcc (12.2.0)\r\nCompile options:  [-march=armv8-a+crypto;-Wa,--noexecstack;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.10.1-dev\r\nGit commit:       6b4e692b8083f391d181087f500b3389ffb007d8 (+ local modifications)\r\nOpenSSL enabled:  Yes (OpenSSL 3.2.1 30 Jan 2024)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  OQS_SPEED_USE_ARM_PMU OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=Release\r\nCPU exts active:  AES SHA2 NEON\r\nverification passes as expected\r\n==352773==\r\n==352773== HEAP SUMMARY:\r\n==352773==     in use at exit: 0 bytes in 0 blocks\r\n==352773==   total heap usage: 15 allocs, 15 frees, 22,622 bytes allocated\r\n==352773==\r\n==352773== All heap blocks were freed -- no leaks are possible\r\n==352773==\r\n==352773== For lists of detected and suppressed errors, rerun with: -s\r\n==352773== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\r\n```\r\n\r\n### Valgrind with Massif Tool Error Full\r\n**Command:**\r\n```\r\nvalgrind --tool=massif --stacks=yes ./test_sig_mem Falcon-512 2\r\n```\r\n\r\n**Output:**\r\n```\r\n==352334== Massif, a heap profiler\r\n==352334== Copyright (C) 2003-2017, and GNU GPL'd, by Nicholas Nethercote\r\n==352334== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info\r\n==352334== Command: ./test_sig_mem Falcon-512 2\r\n==352334==\r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-6.6.20+rpt-rpi-2712 - ARM PMU options enabled\r\nCompiler:         gcc (12.2.0)\r\nCompile options:  [-march=armv8-a+crypto;-Wa,--noexecstack;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.10.1-dev\r\nGit commit:       6b4e692b8083f391d181087f500b3389ffb007d8 (+ local modifications)\r\nOpenSSL enabled:  Yes (OpenSSL 3.2.1 30 Jan 2024)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  OQS_SPEED_USE_ARM_PMU OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=Release\r\nCPU exts active:  AES SHA2 NEON\r\n\r\nvex: priv/host_arm64_defs.c:2829 (genSpill_ARM64): Assertion `offsetB < 4096' failed.\r\nvex storage: T total 140151576 bytes allocated\r\nvex storage: P total 0 bytes allocated\r\n\r\nvalgrind: the 'impossible' happened:\r\n   LibVEX called failure_exit().\r\n\r\nhost stacktrace:\r\n==352334==    at 0x58009114: show_sched_status_wrk (m_libcassert.c:406)\r\n==352334==    by 0x58009263: report_and_quit (m_libcassert.c:477)\r\n==352334==    by 0x5800949B: panic (m_libcassert.c:553)\r\n==352334==    by 0x5800949B: vgPlain_core_panic_at (m_libcassert.c:558)\r\n==352334==    by 0x580094BF: vgPlain_core_panic (m_libcassert.c:563)\r\n==352334==    by 0x5808277B: failure_exit (m_translate.c:761)\r\n==352334==    by 0x580EDD27: vex_assert_fail (main_util.c:245)\r\n==352334==    by 0x5814C973: genSpill_ARM64 (host_arm64_defs.c:2829)\r\n==352334==    by 0x581435DB: spill_vreg (host_generic_reg_alloc3.c:338)\r\n==352334==    by 0x58144B3F: doRegisterAllocation_v3 (host_generic_reg_alloc3.c:1280)\r\n==352334==    by 0x580EC843: libvex_BackEnd (main_main.c:1133)\r\n==352334==    by 0x580EC843: LibVEX_Translate (main_main.c:1236)\r\n==352334==    by 0x58084F6F: vgPlain_translate (m_translate.c:1831)\r\n==352334==    by 0x5805664B: handle_chain_me (scheduler.c:1169)\r\n==352334==    by 0x58059227: vgPlain_scheduler (scheduler.c:1514)\r\n==352334==    by 0x580A861F: thread_wrapper (syswrap-linux.c:101)\r\n==352334==    by 0x580A861F: run_a_thread_NORETURN (syswrap-linux.c:154)\r\n==352334==    by 0xFFFFFFFFFFFFFFFF: ???\r\n\r\nsched status:\r\n  running_tid=1\r\n\r\nThread 1: status = VgTs_Runnable (lwpid 352334)\r\n==352334==    at 0x18ADC8: PQCLEAN_FALCON512_AARCH64_is_short (in /home/cuserp3/work/pqc-evaluation-tools/lib/liboqs/build/tests/test_sig_mem)\r\n==352334==    by 0x131F1F: do_verify (in /home/cuserp3/work/pqc-evaluation-tools/lib/liboqs/build/tests/test_sig_mem)\r\n==352334==    by 0x124217: OQS_SIG_verify (in /home/cuserp3/work/pqc-evaluation-tools/lib/liboqs/build/tests/test_sig_mem)\r\n==352334==    by 0x1231AB: main (in /home/cuserp3/work/pqc-evaluation-tools/lib/liboqs/build/tests/test_sig_mem)\r\nclient stack range: [0x1FFF000000 0x1FFF003FFF] client SP: 0x1FFF002040\r\nvalgrind stack range: [0x1002C18000 0x1002D17FFF] top usage: 19776 of 1048576\r\n```\r\n\r\n### Verbose Outputs\r\nAn output of the issue with the verbose flag alongside outputs for each affected Falcon variation can be found in the following text files:\r\n- [valgrind-massif-verbose.txt](https://github.com/open-quantum-safe/liboqs/files/15069215/valgrind-massif-verbose.txt)\r\n- [valgrind-falcon-outputs.txt](https://github.com/open-quantum-safe/liboqs/files/15069217/valgrind-falcon-outputs.txt)\r\n\r\n## Build Configurations\r\nThe error is persistent across various setups using differing build flags:\r\n\r\n### Default Setup\r\n**Build Commands:**\r\n```\r\n cmake -GNinja ..\r\n ninja && sudo ninja install\r\n ```\r\n\r\n **Configuration Details:**\r\n```\r\nTarget platform:  aarch64-Linux-6.6.20+rpt-rpi-2712 - ARM PMU options enabled\r\nCompiler:         gcc (12.2.0)\r\nCompile options:  [-march=armv8-a+crypto;-Wa,--noexecstack;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.10.1-dev\r\nGit commit:       7b6d9f3326295fc80ea0c9026f3dd9d57f8436de\r\nOpenSSL enabled:  Yes (OpenSSL 3.0.11 19 Sep 2023)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  OQS_SPEED_USE_ARM_PMU OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=Release\r\nCPU exts active:  AES SHA2 NEON\r\n```\r\n\r\n### Custom Setup\r\n**Build Commands (Contained within the script, but all paths variables have been verified):**\r\n```\r\ncmake -GNinja  -S \"$liboqs_source/\" -B \"$liboqs_path/build\" \\\r\n-DCMAKE_INSTALL_PREFIX=\"$liboqs_path\" \\\r\n-DOQS_SPEED_USE_ARM_PMU=ON \\\r\n-DOQS_USE_OPENSSL=ON \\\r\n-DOPENSSL_ROOT_DIR=\"$open_ssl_path\"\r\n\r\nninja && sudo ninja install\r\n```\r\n\r\n**Configuration Details:**\r\n```\r\nTarget platform:  aarch64-Linux-6.6.20+rpt-rpi-2712 - ARM PMU options enabled\r\nCompiler:         gcc (12.2.0)\r\nCompile options:  [-march=armv8-a+crypto;-Wa,--noexecstack;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.10.1-dev\r\nGit commit:       6b4e692b8083f391d181087f500b3389ffb007d8 (+ local modifications)\r\nOpenSSL enabled:  Yes (OpenSSL 3.2.1 30 Jan 2024)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  OQS_SPEED_USE_ARM_PMU OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=Release\r\nCPU exts active:  AES SHA2 NEON\r\n```\r\n\r\n## Expected behaviour\r\nThe setup and configurations detailed in this bug report were also tested on a **Debian 12 x86 machine**, and the issue was not present. The environment that this setup, when executed on a Debian 12 x86 system, gives the following outputs:\r\n\r\n**Valgrind with Massif Output**\r\n```\r\n==55823== Massif, a heap profiler\r\n==55823== Copyright (C) 2003-2017, and GNU GPL'd, by Nicholas Nethercote\r\n==55823== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info\r\n==55823== Command: ./test_sig_mem Falcon-512 2\r\n==55823==\r\nConfiguration info\r\n==================\r\nTarget platform:  x86_64-Linux-6.1.0-20-amd64\r\nCompiler:         gcc (12.2.0)\r\nCompile options:  [-Wa,--noexecstack;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.10.1-dev\r\nGit commit:       6b4e692b8083f391d181087f500b3389ffb007d8\r\nOpenSSL enabled:  Yes (OpenSSL 3.2.1 30 Jan 2024)\r\nAES:              NI\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=Release\r\nCPU exts active:  AES AVX AVX2 BMI1 BMI2 PCLMULQDQ POPCNT SSE SSE2 SSE3\r\nverification\r\n```\r\n\r\n**Massif File after Passing to ms_print:**\r\n[x86-ms_print.txt](https://github.com/open-quantum-safe/liboqs/files/15069226/x86-ms_print.txt)\r\n\r\n\r\n*Build details for the x86 machine are detailed below*\r\n\r\n## Environment Details\r\nThe issue was tested on both Raspberry Pi 4 and 5 models with the following details:\r\n\r\n### Pi-4:\r\n- OS - Raspbian OS Lite 64bit (Debian 11 Bullseye)\r\n- Kernel Version - 6.1.21-v8+\r\n- Architecture - aarch64 \r\n- OpenSSL Version - OpenSSL 1.1.1w (Default Configuration) and OpenSSL 3.2.1 (Custom Configuration)\r\n- Compiler - gcc (10.2.1)\r\n- Build Variables - [See Above](#build-configurations)\r\n- Liboqs Version - 0.10.0\r\n\r\n### Pi-5:\r\n- OS - Raspbian OS Lite 64bit (Debian 12 Bookworm)\r\n- Kernel Version - 6.6.20+rpt-rpi-2712\r\n- Architecture - aarch64\r\n- OpenSSL Version - OpenSSL 3.0.11 (Default Configuration) and OpenSSL 3.2.1 (Custom Configuration)\r\n- Compiler - gcc (12.2.0)\r\n- Build Variables - [See Above](#build-configurations)\r\n- Liboqs Version - 0.10.0\r\n\r\n### Debian x86 Machine used to Verify Issue:\r\n- OS - Debian GNU/Linux 12 (bookworm)\r\n- Kernel Version - 6.1.0-20-amd64\r\n- Architecture - x86_64\r\n- OpenSSL Version - OpenSSL 3.2.1 (Custom Configuration)\r\n- Compiler - gcc (12.2.0)\r\n- Liboqs Version - 0.10.0\r\n\r\n\r\n**Debian x86 Build Commands**\r\n```\r\ncmake -GNinja  -S \"$liboqs_source/\" -B \"$liboqs_path/build\" \\\r\n-DCMAKE_INSTALL_PREFIX=\"$liboqs_path\" \\\r\n-DOQS_USE_OPENSSL=ON \\\r\n-DOPENSSL_ROOT_DIR=\"$open_ssl_path\"\r\n```\r\n\r\n\r\n## Additional context\r\nI would be happy to provide any additional information or outputs for this issue and, if necessary, the current developing branch for the repository where this environment is set up and run. \r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1761/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1761/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/2185167609","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1761#issuecomment-2185167609","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1761","id":2185167609,"node_id":"IC_kwDOA-eq3c6CPwL5","user":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"created_at":"2024-06-23T17:16:04Z","updated_at":"2024-06-23T17:16:04Z","author_association":"COLLABORATOR","body":"Hi @baentsch , \r\n\r\nI won't dare to say the bug is in Valgrind itself, the bug is in [`massif`](https://valgrind.org/docs/manual/ms-manual.html) tool. \r\n\r\nHere is the run with pure Valgrind: \r\n\r\n```\r\ncothan@pi5 ~/W/l/b/tests (main) [1]> valgrind  ./test_sig_mem Falcon-1024 2\r\n==81716== Memcheck, a memory error detector\r\n==81716== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.\r\n==81716== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info\r\n==81716== Command: ./test_sig_mem Falcon-1024 2\r\n==81716==\r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-6.6.31+rpt-rpi-2712\r\nCompiler:         gcc (12.2.0)\r\nCompile options:  [-march=armv8-a+crypto;-Wa,--noexecstack;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]\r\nOQS version:      0.10.2-dev\r\nGit commit:       e3f05cbfba4552067e2c0de524c1049a864c5f2d\r\nOpenSSL enabled:  Yes (OpenSSL 3.0.11 19 Sep 2023)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=RelWithDebInfo\r\nCPU exts active:  AES SHA2 NEON\r\n================================================================================\r\nExecuting verify for SIGALG Falcon-1024\r\n================================================================================\r\nverification passes as expected\r\n==81716==\r\n==81716== HEAP SUMMARY:\r\n==81716==     in use at exit: 0 bytes in 0 blocks\r\n==81716==   total heap usage: 15 allocs, 15 frees, 25,252 bytes allocated\r\n==81716==\r\n==81716== All heap blocks were freed -- no leaks are possible\r\n==81716==\r\n==81716== For lists of detected and suppressed errors, rerun with: -s\r\n==81716== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\r\n```\r\n\r\nAnd here is the run with Valgrind and `massif`. \r\n\r\n```\r\ncothan@pi5 ~/W/l/b/tests (main)> valgrind --tool=massif --stacks=yes ./test_sig_mem Falcon-1024 2\r\n\r\n==81727== Massif, a heap profiler\r\n==81727== Copyright (C) 2003-2017, and GNU GPL'd, by Nicholas Nethercote\r\n==81727== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info\r\n==81727== Command: ./test_sig_mem Falcon-1024 2\r\n==81727==\r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-6.6.31+rpt-rpi-2712\r\nCompiler:         gcc (12.2.0)\r\nCompile options:  [-march=armv8-a+crypto;-Wa,--noexecstack;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]\r\nOQS version:      0.10.2-dev\r\nGit commit:       e3f05cbfba4552067e2c0de524c1049a864c5f2d\r\nOpenSSL enabled:  Yes (OpenSSL 3.0.11 19 Sep 2023)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=RelWithDebInfo\r\nCPU exts active:  AES SHA2 NEON\r\n================================================================================\r\nExecuting verify for SIGALG Falcon-1024\r\n================================================================================\r\n\r\nvex: priv/host_arm64_defs.c:2829 (genSpill_ARM64): Assertion `offsetB < 4096' failed.\r\nvex storage: T total 139470880 bytes allocated\r\nvex storage: P total 0 bytes allocated\r\n\r\nvalgrind: the 'impossible' happened:\r\n   LibVEX called failure_exit().\r\n\r\nhost stacktrace:\r\n==81727==    at 0x58009114: show_sched_status_wrk (m_libcassert.c:406)\r\n==81727==    by 0x58009263: report_and_quit (m_libcassert.c:477)\r\n==81727==    by 0x5800949B: panic (m_libcassert.c:553)\r\n==81727==    by 0x5800949B: vgPlain_core_panic_at (m_libcassert.c:558)\r\n==81727==    by 0x580094BF: vgPlain_core_panic (m_libcassert.c:563)\r\n==81727==    by 0x5808277B: failure_exit (m_translate.c:761)\r\n==81727==    by 0x580EDD27: vex_assert_fail (main_util.c:245)\r\n==81727==    by 0x5814C973: genSpill_ARM64 (host_arm64_defs.c:2829)\r\n==81727==    by 0x581435DB: spill_vreg (host_generic_reg_alloc3.c:338)\r\n==81727==    by 0x58144B3F: doRegisterAllocation_v3 (host_generic_reg_alloc3.c:1280)\r\n==81727==    by 0x580EC843: libvex_BackEnd (main_main.c:1133)\r\n==81727==    by 0x580EC843: LibVEX_Translate (main_main.c:1236)\r\n==81727==    by 0x58084F6F: vgPlain_translate (m_translate.c:1831)\r\n==81727==    by 0x5805928F: handle_tt_miss (scheduler.c:1141)\r\n==81727==    by 0x5805928F: vgPlain_scheduler (scheduler.c:1503)\r\n==81727==    by 0x580A861F: thread_wrapper (syswrap-linux.c:101)\r\n==81727==    by 0x580A861F: run_a_thread_NORETURN (syswrap-linux.c:154)\r\n==81727==    by 0xFFFFFFFFFFFFFFFF: ???\r\n\r\nsched status:\r\n  running_tid=1\r\n\r\nThread 1: status = VgTs_Runnable (lwpid 81727)\r\n==81727==    at 0x13402C: PQCLEAN_FALCON1024_AARCH64_verify_raw (vrfy.c:54)\r\n==81727==    by 0x1323EB: do_verify (pqclean.c:279)\r\n==81727==    by 0x12419F: OQS_SIG_verify (sig.c:445)\r\n==81727==    by 0x12319F: sig_test_correctness (test_sig_mem.c:129)\r\n==81727==    by 0x12319F: main (test_sig_mem.c:196)\r\nclient stack range: [0x1FFF000000 0x1FFF003FFF] client SP: 0x1FFF000F70\r\nvalgrind stack range: [0x1002F88000 0x1003087FFF] top usage: 19776 of 1048576\r\n\r\n\r\nNote: see also the FAQ in the source distribution.\r\nIt contains workarounds to several common problems.\r\nIn particular, if Valgrind aborted or crashed after\r\nidentifying problems in your program, there's a good chance\r\nthat fixing those problems will prevent Valgrind aborting or\r\ncrashing, especially if it happened in m_mallocfree.c.\r\n\r\nIf that doesn't help, please report this bug to: www.valgrind.org\r\n\r\nIn the bug report, send all the above text, the valgrind\r\nversion, and what OS and version you are using.  Thanks.\r\n\r\n```\r\n\r\nI think the bug is definitely in the `massif` tool. ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/2185167609/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-23T17:16:05Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"39540403038","type":"IssueCommentEvent","actor":{"id":9219016,"login":"cothan","display_login":"cothan","gravatar_id":"","url":"https://api.github.com/users/cothan","avatar_url":"https://avatars.githubusercontent.com/u/9219016?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1819","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1819/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1819/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1819/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1819","id":2341881934,"node_id":"PR_kwDOA-eq3c5x31z0","number":1819,"title":"Add XMSS-SHAKE256_{10, 16, 20}_256 parameters","user":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2024-06-08T21:58:22Z","updated_at":"2024-06-23T17:19:10Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1819","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1819","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1819.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1819.patch","merged_at":null},"body":"Signed-off-by: Duc Tri Nguyen <dnguye69@gmu.edu>\r\n\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\nBase on #1818. Please review #1818 first. \r\n\r\n- Add additional XMSS-SHAKE256{10, 16, 20}_256 parameters to meet NIST SP 800 208.\r\n- Add emoji to Table parameters sig_stfl_xmss.h, I hope it's helpful and save developer time.\r\n - Add KATs.\r\n - Add tests.\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Any PR adding a new feature is expected to contain a test; the test should be part of CI testing, preferably within the \".github/workflows\" directory tree. Please add an explanation to the PR if/when (why) this cannot be done. -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the list of algorithms available -- either adding, removing, or renaming? Does this PR otherwise change an API? (If so, PRs in fully supported downstream projects dependent on these, i.e., [oqs-provider](https://github.com/open-quantum-safe/oqs-provider) will also need to be ready for review and merge by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n\r\nThe XMSS parameter  table looks like this:\r\n\r\n```\r\n\r\n/*\r\n * | Algorithms                    | oid  | sk (b) | pk (b) | sig (b) | n  | RFC8391 | NIST SP 800-208 | CNSA 2.0 |\r\n * |-------------------------------|------|--------|--------|---------|----| ------- | --------------- | -------- |\r\n * | XMSS-SHA2_10_256              | 0x01 |  1373  |   64   |  2500   | 32 |    ✅   |       ✅        |    ✅    |\r\n * | XMSS-SHA2_16_256              | 0x02 |  2093  |   64   |  2692   | 32 |    ✅   |       ✅        |    ✅    |\r\n * | XMSS-SHA2_20_256              | 0x03 |  2573  |   64   |  2820   | 32 |    ✅   |       ✅        |    ✅    |\r\n *\r\n * | XMSS-SHAKE_10_256             | 0x07 |  1373  |   64   |  2500   | 32 |    ✅   |       ❌        |    ❌    |\r\n * | XMSS-SHAKE_16_256             | 0x08 |  2093  |   64   |  2692   | 32 |    ✅   |       ❌        |    ❌    |\r\n * | XMSS-SHAKE_20_256             | 0x09 |  2573  |   64   |  2820   | 32 |    ✅   |       ❌        |    ❌    |\r\n *\r\n * | XMSS-SHA2_10_512              | 0x04 |  2653  |  128   |  9092   | 64 |    ✅   |       ❌        |    ❌    |\r\n * | XMSS-SHA2_16_512              | 0x05 |  4045  |  128   |  9476   | 64 |    ✅   |       ❌        |    ❌    |\r\n * | XMSS-SHA2_20_512              | 0x06 |  4973  |  128   |  9732   | 64 |    ✅   |       ❌        |    ❌    |\r\n *\r\n * | XMSS-SHAKE_10_512             | 0x0a |  2653  |  128   |  9092   | 64 |    ✅   |       ❌        |    ❌    |\r\n * | XMSS-SHAKE_16_512             | 0x0b |  4045  |  128   |  9476   | 64 |    ✅   |       ❌        |    ❌    |\r\n * | XMSS-SHAKE_20_512             | 0x0c |  4973  |  128   |  9732   | 64 |    ✅   |       ❌        |    ❌    |\r\n *\r\n * | XMSS-SHA2_10_192              | 0x0d |  1053  |   48   |  1492   | 24 |    ❌   |       ✅        |    ✅    |\r\n * | XMSS-SHA2_16_192              | 0x0e |  1605  |   48   |  1636   | 24 |    ❌   |       ✅        |    ✅    |\r\n * | XMSS-SHA2_20_192              | 0x0f |  1973  |   48   |  1732   | 24 |    ❌   |       ✅        |    ✅    |\r\n *\r\n * | XMSS-SHAKE256_10_256          | 0x10 |  1373  |   64   |  2500   | 32 |    ❌   |       ✅        |    ✅    |\r\n * | XMSS-SHAKE256_16_256          | 0x11 |  2093  |   64   |  2692   | 32 |    ❌   |       ✅        |    ✅    |\r\n * | XMSS-SHAKE256_20_256          | 0x12 |  2573  |   64   |  2820   | 32 |    ❌   |       ✅        |    ✅    |\r\n *\r\n * | XMSS-SHAKE256_10_192          | 0x13 |  1053  |   48   |  1492   | 24 |    ❌   |       ✅        |    ✅    |\r\n * | XMSS-SHAKE256_16_192          | 0x14 |  1605  |   48   |  1636   | 24 |    ❌   |       ✅        |    ✅    |\r\n * | XMSS-SHAKE256_20_192          | 0x15 |  1973  |   48   |  1732   | 24 |    ❌   |       ✅        |    ✅    |\r\n *\r\n * | XMSSMT-SHA2_20/2_256          | 0x01 |  5998  |   64   |  4963   | 32 |    ✅   |       ✅        |    ❌    |\r\n * | XMSSMT-SHA2_20/4_256          | 0x02 | 10938  |   64   |  9251   | 32 |    ✅   |       ✅        |    ❌    |\r\n * | XMSSMT-SHA2_40/2_256          | 0x03 |  9600  |   64   |  5605   | 32 |    ✅   |       ✅        |    ❌    |\r\n * | XMSSMT-SHA2_40/4_256          | 0x04 | 15252  |   64   |  9893   | 32 |    ✅   |       ✅        |    ❌    |\r\n * | XMSSMT-SHA2_40/8_256          | 0x05 | 24516  |   64   | 18469   | 32 |    ✅   |       ✅        |    ❌    |\r\n * | XMSSMT-SHA2_60/3_256          | 0x06 | 16629  |   64   |  8392   | 32 |    ✅   |       ✅        |    ❌    |\r\n * | XMSSMT-SHA2_60/6_256          | 0x07 | 24507  |   64   | 14824   | 32 |    ✅   |       ✅        |    ❌    |\r\n * | XMSSMT-SHA2_60/12_256         | 0x08 | 38095  |   64   | 27688   | 32 |    ✅   |       ✅        |    ❌    |\r\n *\r\n * | XMSSMT-SHAKE_20/2_256         | 0x11 |  5998  |   64   |  4963   | 32 |    ✅   |       ❌        |    ❌    |\r\n * | XMSSMT-SHAKE_20/4_256         | 0x12 | 10938  |   64   |  9251   | 32 |    ✅   |       ❌        |    ❌    |\r\n * | XMSSMT-SHAKE_40/2_256         | 0x13 |  9600  |   64   |  5605   | 32 |    ✅   |       ❌        |    ❌    |\r\n * | XMSSMT-SHAKE_40/4_256         | 0x14 | 15252  |   64   |  9893   | 32 |    ✅   |       ❌        |    ❌    |\r\n * | XMSSMT-SHAKE_40/8_256         | 0x15 | 24516  |   64   | 18469   | 32 |    ✅   |       ❌        |    ❌    |\r\n * | XMSSMT-SHAKE_60/3_256         | 0x16 | 16629  |   64   |  8392   | 32 |    ✅   |       ❌        |    ❌    |\r\n * | XMSSMT-SHAKE_60/6_256         | 0x17 | 24507  |   64   | 14824   | 32 |    ✅   |       ❌        |    ❌    |\r\n * | XMSSMT-SHAKE_60/12_256        | 0x18 | 38095  |   64   | 27688   | 32 |    ✅   |       ❌        |    ❌    |\r\n */\r\n ```\r\n\r\nThis table reflects what are in the RFC8391, NIST SP 800-208 and CNSA 2.0. \r\nI believe jotting this down is helpful.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1819/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1819/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/2185171249","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1819#issuecomment-2185171249","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1819","id":2185171249,"node_id":"IC_kwDOA-eq3c6CPxEx","user":{"login":"cothan","id":9219016,"node_id":"MDQ6VXNlcjkyMTkwMTY=","avatar_url":"https://avatars.githubusercontent.com/u/9219016?v=4","gravatar_id":"","url":"https://api.github.com/users/cothan","html_url":"https://github.com/cothan","followers_url":"https://api.github.com/users/cothan/followers","following_url":"https://api.github.com/users/cothan/following{/other_user}","gists_url":"https://api.github.com/users/cothan/gists{/gist_id}","starred_url":"https://api.github.com/users/cothan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cothan/subscriptions","organizations_url":"https://api.github.com/users/cothan/orgs","repos_url":"https://api.github.com/users/cothan/repos","events_url":"https://api.github.com/users/cothan/events{/privacy}","received_events_url":"https://api.github.com/users/cothan/received_events","type":"User","site_admin":false},"created_at":"2024-06-23T17:19:08Z","updated_at":"2024-06-23T17:19:08Z","author_association":"COLLABORATOR","body":"Hi @ashman-p , can you take a look at the PR? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/2185171249/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2024-06-23T17:19:10Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
