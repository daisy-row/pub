{"id":"37186742506","type":"IssuesEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":746904584,"name":"open-quantum-safe/tsc","url":"https://api.github.com/repos/open-quantum-safe/tsc"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/tsc/issues/12","repository_url":"https://api.github.com/repos/open-quantum-safe/tsc","labels_url":"https://api.github.com/repos/open-quantum-safe/tsc/issues/12/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/tsc/issues/12/comments","events_url":"https://api.github.com/repos/open-quantum-safe/tsc/issues/12/events","html_url":"https://github.com/open-quantum-safe/tsc/issues/12","id":2226776752,"node_id":"I_kwDOLITcCM6Eueqw","number":12,"title":"Create a voting procedure for the OQS TSC","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"assignees":[{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2024-04-05T01:12:07Z","updated_at":"2024-04-05T01:12:08Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"An action item from our March 2024 TSC meeting was to create a voting procedure for the TSC.\r\n\r\nThe voting procedure we come up with will need to respect the [OQS Technical Charter](https://github.com/open-quantum-safe/tsc/blob/main/charter/charter-2024-01-03.pdf) as well as the ideas reflected in the [liboqs and oqs-provider governance documents](https://github.com/open-quantum-safe/liboqs/blob/main/GOVERNANCE.md); those two documents currently disagree on a few matters (e.g., what constitutes quorum for electronic votes), in which case the Charter would prevail unless we amend it.  Additionally, the TSC operates according to Robert's Rules of Order, which provides several mechanisms for voting.\r\n\r\nAs I see it, we will have two types of things to vote on: general matters, and matters involving people (elections, additions/removals from TSC).  I make this distinction as Robert's Rules provides the option for elections to be done using either public or secret ballot.\r\n\r\nFor voting on general matters, my proposal would be:\r\n- Motions can be proposed either at a meeting or electronically on Github by opening a clearly labeled issue/pull request in the TSC repository.  \r\n- Motions can be voted on either at a meeting or electronically on Github. The Charter lays out the quorum/passing requirements for such votes (at a meeting: quorum is â‰¥50% of TSC voting members, passed by a majority vote of those in attendance; electronically: passed by a majority vote of TSC voting members). We can use built-in Github mechanisms for voting (thumbs up/thumbs down), or there are dedicated Github-based voting mechanisms like [gitvote](https://github.com/cncf/gitvote).\r\n\r\nFor voting on matters involving people (e.g., elections), the TSC should decide whether we want those types of votes to be done using public or secret ballot.  If public ballot, then we could just use the same procedure as for normal matters.  If secret ballot, then we should identify an online voting mechanism we want to use, such as [Helios voting](https://vote.heliosvoting.org/) which the IACR uses for its electronic elections.\r\n\r\nAs we will have the option of voting on things both in meetings and electronically, we'll have to figure out which we actually prefer to do.  I think this will depend on how our TSC meeting culture develops -- do most people show up, do we have enough time in advance to think and enough time in meetings to discuss and make a well-informed vote during the meeting, or do we want the extra time that comes from being able to reflect and vote afterwards, albeit at the cost of potentially moving slower. I think I'd wait a few months to see how our meetings develop.\r\n\r\n@open-quantum-safe/tsc and others, please feel free to discuss here in advance of our next meeting.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/tsc/issues/12/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/tsc/issues/12/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2024-04-05T01:12:09Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"37193073925","type":"IssuesEvent","actor":{"id":147778033,"login":"smcmahonibm","display_login":"smcmahonibm","gravatar_id":"","url":"https://api.github.com/users/smcmahonibm","avatar_url":"https://avatars.githubusercontent.com/u/147778033?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1749","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1749/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1749/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1749/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1749","id":2227238516,"node_id":"I_kwDOA-eq3c6EwPZ0","number":1749,"title":"Windows build with -D","user":{"login":"smcmahonibm","id":147778033,"node_id":"U_kgDOCM7p8Q","avatar_url":"https://avatars.githubusercontent.com/u/147778033?v=4","gravatar_id":"","url":"https://api.github.com/users/smcmahonibm","html_url":"https://github.com/smcmahonibm","followers_url":"https://api.github.com/users/smcmahonibm/followers","following_url":"https://api.github.com/users/smcmahonibm/following{/other_user}","gists_url":"https://api.github.com/users/smcmahonibm/gists{/gist_id}","starred_url":"https://api.github.com/users/smcmahonibm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/smcmahonibm/subscriptions","organizations_url":"https://api.github.com/users/smcmahonibm/orgs","repos_url":"https://api.github.com/users/smcmahonibm/repos","events_url":"https://api.github.com/users/smcmahonibm/events{/privacy}","received_events_url":"https://api.github.com/users/smcmahonibm/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-04-05T07:09:36Z","updated_at":"2024-04-05T07:09:36Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nBuilding on Windows with shared lib (.dll) setting \"-DBUILD_SHARED_LIBS=ON\" fails to build kat_kem and kat_sig.\r\nEither ninja or MSBuild or MSVC project files all get same error.\r\n\r\n**To Reproduce**\r\nclone liboqs main branch\r\n> mkdir build\r\n> cd build\r\n> cmake -GNinja -DBUILD_SHARED_LIBS=ON ..\r\n> ninja\r\n...\r\n... fails to link kat_kem.exe and kat_sig.exe\r\n(see screenshot below)\r\n\r\n**Expected behavior**\r\nkat_kem.exe and kat_sig.exe should build OK.\r\nThe oqs.dll and all other .exe build OK.\r\nThose test build OK with static lib only build - i.e. no \"-DBUILD_SHARED_LIBS=ON\".\r\n\r\n**Screenshots**\r\nninja console output:\r\n```\r\n[659/671] Linking C executable tests\\kat_kem.exe\r\nFAILED: tests/kat_kem.exe\r\ncmd.exe /C \"cd . && \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Common7\\IDE\\CommonExtensions\\Microsoft\\CMake\\CMake\\bin\\cmake.exe\" -E vs_link_exe --intdir=tests\\CMakeFiles\\kat_kem.dir --rc=C:\\PROGRA~2\\WI3CF2~1\\10\\bin\\100226~1.0\\x64\\rc.exe --mt=C:\\PROGRA~2\\WI3CF2~1\\10\\bin\\100226~1.0\\x64\\mt.exe --manifests  -- C:\\PROGRA~1\\MIB055~1\\2022\\PROFES~1\\VC\\Tools\\MSVC\\1436~1.325\\bin\\Hostx64\\x64\\link.exe /nologo tests\\CMakeFiles\\kat_kem.dir\\kat_kem.c.obj tests\\CMakeFiles\\kat_kem.dir\\test_helpers.c.obj  /out:tests\\kat_kem.exe /implib:tests\\kat_kem.lib /pdb:tests\\kat_kem.pdb /version:0.0 /machine:x64 /debug /INCREMENTAL /subsystem:console   /STACK:8192000  lib\\oqs.lib  lib\\oqs-internal.lib  kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib && cd .\"\r\nLINK Pass 1: command \"C:\\PROGRA~1\\MIB055~1\\2022\\PROFES~1\\VC\\Tools\\MSVC\\1436~1.325\\bin\\Hostx64\\x64\\link.exe /nologo tests\\CMakeFiles\\kat_kem.dir\\kat_kem.c.obj tests\\CMakeFiles\\kat_kem.dir\\test_helpers.c.obj /out:tests\\kat_kem.exe /implib:tests\\kat_kem.lib /pdb:tests\\kat_kem.pdb /version:0.0 /machine:x64 /debug /INCREMENTAL /subsystem:console /STACK:8192000 lib\\oqs.lib lib\\oqs-internal.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:tests\\CMakeFiles\\kat_kem.dir/intermediate.manifest tests\\CMakeFiles\\kat_kem.dir/manifest.res\" failed (exit code 1169) with the following output:\r\noqs-internal.lib(common.c.obj) : error LNK2005: OQS_CPU_has_extension already defined in oqs.lib(oqs.dll)\r\noqs-internal.lib(common.c.obj) : error LNK2005: OQS_init already defined in oqs.lib(oqs.dll)\r\noqs-internal.lib(common.c.obj) : error LNK2005: OQS_destroy already defined in oqs.lib(oqs.dll)\r\noqs-internal.lib(common.c.obj) : error LNK2005: OQS_MEM_secure_free already defined in oqs.lib(oqs.dll)\r\noqs-internal.lib(common.c.obj) : error LNK2005: OQS_MEM_insecure_free already defined in oqs.lib(oqs.dll)\r\n   Creating library tests\\kat_kem.lib and object tests\\kat_kem.exp\r\ntests\\kat_kem.exe : fatal error LNK1169: one or more multiply defined symbols found\r\n```\r\nLooks like some APIs (OQS_CPU_has_extension ...) in both oqs.dll and import library oqs.lib and also in a static lib oqs-internal.lib. Both include common.c.obj. The static lib build probably just links to the first one found. I tried removing oqs-internal.lib or just common.obj but then get other errors.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Windows 11\r\n - OpenSSL version n/a\r\n - Compiler version used : Microsoft (R) C/C++ Optimizing Compiler Version 19.36.32538 for x64\r\n - Build variables used: -DBUILD_SHARED_LIBS=ON\r\n - liboqs version:  main branch\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1749/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1749/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2024-04-05T07:09:37Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"37205343133","type":"IssuesEvent","actor":{"id":39264796,"login":"SWilson4","display_login":"SWilson4","gravatar_id":"","url":"https://api.github.com/users/SWilson4","avatar_url":"https://avatars.githubusercontent.com/u/39264796?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1748","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1748/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1748/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1748/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1748","id":2226522881,"node_id":"I_kwDOA-eq3c6EtgsB","number":1748,"title":"LibOQS CMake Failes in Kali Linux Environments","user":{"login":"wpj3799","id":60491197,"node_id":"MDQ6VXNlcjYwNDkxMTk3","avatar_url":"https://avatars.githubusercontent.com/u/60491197?v=4","gravatar_id":"","url":"https://api.github.com/users/wpj3799","html_url":"https://github.com/wpj3799","followers_url":"https://api.github.com/users/wpj3799/followers","following_url":"https://api.github.com/users/wpj3799/following{/other_user}","gists_url":"https://api.github.com/users/wpj3799/gists{/gist_id}","starred_url":"https://api.github.com/users/wpj3799/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wpj3799/subscriptions","organizations_url":"https://api.github.com/users/wpj3799/orgs","repos_url":"https://api.github.com/users/wpj3799/repos","events_url":"https://api.github.com/users/wpj3799/events{/privacy}","received_events_url":"https://api.github.com/users/wpj3799/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2024-04-04T21:10:51Z","updated_at":"2024-04-05T13:51:16Z","closed_at":"2024-04-05T13:51:16Z","author_association":"NONE","active_lock_reason":null,"body":"CMake of liboqs fails on Kali Linux VM images and Kali Linux WSL\r\n\r\nOn a clean image I ran:\r\n1) sudo apt install astyle cmake gcc ninja-build libssl-dev python3-pytest python3-pytest-xdist unzip xsltproc doxygen graphviz python3-yaml valgrind libgmp3-dev git libssl-dev\r\n2) git clone https://github.com/open-quantum-safe/liboqs.git\r\n3) cd liboqs\r\n4) cmake -GNinja -DOQS_USE_OPENSSL=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr\r\n\r\nIt throws this error which I don't understand since it finds the library v3.1.5?:\r\nCMake Warning:\r\n  No source or binary directory provided.  Both will be assumed to be the\r\n  same as the current working directory, but note that this warning will\r\n  become a fatal error in future CMake releases.\r\n\r\n-- The C compiler identification is GNU 13.2.0\r\n-- The ASM compiler identification is GNU\r\n-- Found assembler: /usr/bin/cc\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Check for working C compiler: /usr/bin/cc - skipped\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Performing Test CC_SUPPORTS_WA_NOEXECSTACK\r\n-- Performing Test CC_SUPPORTS_WA_NOEXECSTACK - Success\r\n-- Performing Test LD_SUPPORTS_WL_Z_NOEXECSTACK\r\n-- Performing Test LD_SUPPORTS_WL_Z_NOEXECSTACK - Success\r\n-- Performing Test CMAKE_HAVE_LIBC_PTHREAD\r\n-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success\r\n-- Found Threads: TRUE\r\n-- Alg enablement unchanged\r\nCMake Error at /usr/share/cmake-3.28/Modules/FindPackageHandleStandardArgs.cmake:230 (message):\r\n  Could NOT find OpenSSL, try to set the path to OpenSSL root folder in the\r\n  system variable OPENSSL_ROOT_DIR (missing: OPENSSL_CRYPTO_LIBRARY) (found\r\n  suitable version \"3.1.5\", minimum required is \"1.1.1\")\r\nCall Stack (most recent call first):\r\n  /usr/share/cmake-3.28/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE)\r\n  /usr/share/cmake-3.28/Modules/FindOpenSSL.cmake:668 (find_package_handle_standard_args)\r\n  CMakeLists.txt:135 (find_package)\r\n\r\nEnvironment:\r\n - WSL: Linux 4.4.0-19041-Microsoft #3996-Microsoft x86_64 GNU/Linux\r\n - Kali VM: Linux 6.6.9-amd64 Kali 6.6.9-1kali1 x86_64 GNU/Linux\r\n - liboqs main branch\r\n - which make -> /urs/bin/cmake\r\n - cmake v.3.28.3\r\n\r\nNot sure if this is a bug or a Kali issue but, any help would be appreciated.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1748/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1748/timeline","performed_via_github_app":null,"state_reason":"completed"}},"public":true,"created_at":"2024-04-05T13:51:17Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"37206366403","type":"IssuesEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1599","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1599/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1599/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1599/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1599","id":1971866457,"node_id":"I_kwDOA-eq3c51iEtZ","number":1599,"title":"Make low-level crypto algorithms implementation switchable","user":{"login":"ueno","id":47549,"node_id":"MDQ6VXNlcjQ3NTQ5","avatar_url":"https://avatars.githubusercontent.com/u/47549?v=4","gravatar_id":"","url":"https://api.github.com/users/ueno","html_url":"https://github.com/ueno","followers_url":"https://api.github.com/users/ueno/followers","following_url":"https://api.github.com/users/ueno/following{/other_user}","gists_url":"https://api.github.com/users/ueno/gists{/gist_id}","starred_url":"https://api.github.com/users/ueno/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ueno/subscriptions","organizations_url":"https://api.github.com/users/ueno/orgs","repos_url":"https://api.github.com/users/ueno/repos","events_url":"https://api.github.com/users/ueno/events{/privacy}","received_events_url":"https://api.github.com/users/ueno/received_events","type":"User","site_admin":false},"labels":[{"id":423520878,"node_id":"MDU6TGFiZWw0MjM1MjA4Nzg=","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":"New feature or request"},{"id":1168141259,"node_id":"MDU6TGFiZWwxMTY4MTQxMjU5","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/help%20wanted","name":"help wanted","color":"008672","default":true,"description":"Asking for support from non-core team"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2023-11-01T07:40:45Z","updated_at":"2024-04-05T14:20:18Z","closed_at":"2024-04-05T14:20:18Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Currently liboqs uses OpenSSL as the default backend for low-level support algorithms, such as AES and SHA3 if the `OQS_USE_OPENSSL` build flag is `ON`; otherwise it will use the bundled implementation of those algorithms. While integrating liboqs in GnuTLS, we found neither of them optimal: it is not desirable to bring in OpenSSL as a dependency[1], while we also don't want to have the same algorithms implemented in multiple places. Therefore I would suggest providing a way to make those algorithm implementation pluggable at either compile time or runtime.\r\n\r\nMore concretely, what I have in mind is something along the following lines:\r\n\r\n* liboqs could provide a build option `OQS_COMMON_CRYPTO`, which takes a combo value, either `OPENSSL`, `DEFAULT`, or `NONE`. `OQS_COMMON_CRYPTO=OPENSSL` is the same as what `OQS_USE_OPENSSL=ON` currently does, `DEFAULT` is equivalent to `OQS_USE_OPENSSL=OFF`, and `NONE` means only a stub implementation (all functions return error) is compiled in\r\n* Consumer applications (such as oqs-provider) could register implementation of those algorithms in their favorite libraries at runtime, maybe through a new API, say `OQS_AES_register_implementation`, `OQS_SHA3_register_implementation`, etc.\r\n* To make the previous step easier, maybe liboqs could provide the default implementation as a static helper library (e.g., `liboqs_openssl.a`, `liboqs_default.a`)\r\n\r\nThis is similar to the approach taken by tpm2-tss[2].\r\n\r\n1. https://gitlab.com/gnutls/gnutls/-/merge_requests/1786#note_1611785601\r\n2. https://github.com/tpm2-software/tpm2-tss/pull/2365","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1599/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1599/timeline","performed_via_github_app":null,"state_reason":"completed"}},"public":true,"created_at":"2024-04-05T14:20:19Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
