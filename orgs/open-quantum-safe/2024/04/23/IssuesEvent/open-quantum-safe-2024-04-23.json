{"id":"37723656647","type":"IssuesEvent","actor":{"id":7292002,"login":"planetf1","display_login":"planetf1","gravatar_id":"","url":"https://api.github.com/users/planetf1","avatar_url":"https://avatars.githubusercontent.com/u/7292002?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1764","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1764/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1764/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1764/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1764","id":2258429900,"node_id":"I_kwDOA-eq3c6GnOfM","number":1764,"title":"Refresh ci-debian-buster container image used for build","user":{"login":"planetf1","id":7292002,"node_id":"MDQ6VXNlcjcyOTIwMDI=","avatar_url":"https://avatars.githubusercontent.com/u/7292002?v=4","gravatar_id":"","url":"https://api.github.com/users/planetf1","html_url":"https://github.com/planetf1","followers_url":"https://api.github.com/users/planetf1/followers","following_url":"https://api.github.com/users/planetf1/following{/other_user}","gists_url":"https://api.github.com/users/planetf1/gists{/gist_id}","starred_url":"https://api.github.com/users/planetf1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/planetf1/subscriptions","organizations_url":"https://api.github.com/users/planetf1/orgs","repos_url":"https://api.github.com/users/planetf1/repos","events_url":"https://api.github.com/users/planetf1/events{/privacy}","received_events_url":"https://api.github.com/users/planetf1/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-04-23T09:47:26Z","updated_at":"2024-04-23T09:47:26Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Followon from #1702\r\n\r\nThe openquantumsafe/ci-debian-custer-amd64:latest image is used as part of our ci process\r\n\r\nWhen working on the above PR I noticed we weren't pinning the version spec of this image (though the tooling did not detect this).\r\n\r\nI inspected the image with a [scan on quay.io](https://quay.io/repository/planetf1/ci-debian-buster-amd64/manifest/sha256:b44ec894a0071432ca993aac617e2e503d03984f2079eee48a98a136fe0f0dbc?tab=vulnerabilities)\r\n\r\nThis is used for testing/verification, rather than supplying images for consumers, but it looks as if it could do with being updated - any images/sw used for tests could be compromised to hide an injected vulnerability.\r\n\r\nThe current image has quite old java (1.11.0), and also older versions of qemu and other tools. [See list](https://quay.io/repository/planetf1/ci-debian-buster-amd64/manifest/sha256:b44ec894a0071432ca993aac617e2e503d03984f2079eee48a98a136fe0f0dbc?tab=packages)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1764/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1764/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2024-04-23T09:47:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"37723850505","type":"IssuesEvent","actor":{"id":7292002,"login":"planetf1","display_login":"planetf1","gravatar_id":"","url":"https://api.github.com/users/planetf1","avatar_url":"https://avatars.githubusercontent.com/u/7292002?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1765","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1765/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1765/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1765/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1765","id":2258441318,"node_id":"I_kwDOA-eq3c6GnRRm","number":1765,"title":"Automated dependency checks/updates","user":{"login":"planetf1","id":7292002,"node_id":"MDQ6VXNlcjcyOTIwMDI=","avatar_url":"https://avatars.githubusercontent.com/u/7292002?v=4","gravatar_id":"","url":"https://api.github.com/users/planetf1","html_url":"https://github.com/planetf1","followers_url":"https://api.github.com/users/planetf1/followers","following_url":"https://api.github.com/users/planetf1/following{/other_user}","gists_url":"https://api.github.com/users/planetf1/gists{/gist_id}","starred_url":"https://api.github.com/users/planetf1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/planetf1/subscriptions","organizations_url":"https://api.github.com/users/planetf1/orgs","repos_url":"https://api.github.com/users/planetf1/repos","events_url":"https://api.github.com/users/planetf1/events{/privacy}","received_events_url":"https://api.github.com/users/planetf1/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-04-23T09:52:14Z","updated_at":"2024-04-23T09:52:14Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Followon from #1708 \r\n\r\nThe above PR pins dependencies for github actions, python dependencies, and potentially Dockerfiles\r\n\r\nWhilst this ensures builds are reproducible, and reduces the likelihood of malicious code injection, it also means automatic in-version updates of dependencies (like 3.1.1 -> 3.1.2 for example) would not be picked up.\r\n\r\nTools such as [dependabot](https://docs.github.com/en/code-security/getting-started/dependabot-quickstart-guide) can scan dependencies and make recommendations through PRs. These can be per-dependency, or aggregated.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1765/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1765/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2024-04-23T09:52:16Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"37743802733","type":"IssuesEvent","actor":{"id":6541356,"login":"Martyrshot","display_login":"Martyrshot","gravatar_id":"","url":"https://api.github.com/users/Martyrshot","avatar_url":"https://avatars.githubusercontent.com/u/6541356?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1766","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1766/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1766/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1766/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1766","id":2259546121,"node_id":"I_kwDOA-eq3c6GrfAJ","number":1766,"title":"Overhauling OQS_MEM functions","user":{"login":"Martyrshot","id":6541356,"node_id":"MDQ6VXNlcjY1NDEzNTY=","avatar_url":"https://avatars.githubusercontent.com/u/6541356?v=4","gravatar_id":"","url":"https://api.github.com/users/Martyrshot","html_url":"https://github.com/Martyrshot","followers_url":"https://api.github.com/users/Martyrshot/followers","following_url":"https://api.github.com/users/Martyrshot/following{/other_user}","gists_url":"https://api.github.com/users/Martyrshot/gists{/gist_id}","starred_url":"https://api.github.com/users/Martyrshot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Martyrshot/subscriptions","organizations_url":"https://api.github.com/users/Martyrshot/orgs","repos_url":"https://api.github.com/users/Martyrshot/repos","events_url":"https://api.github.com/users/Martyrshot/events{/privacy}","received_events_url":"https://api.github.com/users/Martyrshot/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2024-04-23T18:44:35Z","updated_at":"2024-04-23T18:44:35Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"As part of the sig-stateful review I had a few thoughts on how we handle our `OQS_MEM` functions.\r\n\r\n# Update OQS_MEM_*_free functions to take double pointers\r\nFirstly, our `OQS_MEM_*_free` set of functions currently takes a single pointer:\r\n```\r\nOQS_API void OQS_MEM_insecure_free(void *ptr)\r\nOQS_API void OQS_MEM_secure_free(void *ptr, size_t len)\r\n```\r\n\r\nThis follows the c standard library's convention which is nice! However, this makes double frees possible and hard to identify.\r\n\r\nIf we update the `free` functions to use a double pointer, then we can set the pointer to point to `NULL` before the function exists. \r\n```\r\nOQS_API void OQS_MEM_insecure_free(void **ptr)\r\nOQS_API void OQS_MEM_secure_free(void **ptr, size_t len)\r\n```\r\n\r\nThere are two scenarios this helps:\r\n\r\n_Debugging_\r\n\r\n```\r\nOQS_MEM_insecure_free(&my_cool_ptr);\r\n\r\n... some operations later ...\r\n\r\n// This line will segfault instead of double freeing, making the actual bug easier to find.\r\nOQS_MEM_INSECURE_free(&my_cool_ptr);\r\n```\r\n\r\n_Conditional freeing_\r\n\r\n```\r\nOQS_MEM_insecure_free(&my_cool_ptr);\r\n\r\n... some operations later ...\r\n\r\nif (my_cool_ptr != NULL) {\r\n    OQS_MEM_insecure_free(&my_cool_ptr);\r\n}\r\n```\r\n\r\nBy taking a double pointer we make it harder for users of `OQS_MEM_*` to do something incorrectly.\r\n\r\n# Add OQS_MEM wrapper for malloc\r\n\r\nCurrently, as silly as it seems, `ISC_MEM_*_free`ing a chunk of memory allocated by `malloc` feels wrong. In other c projects I work in memory that is freed by their provided `free` functions must have come from their own `malloc/alloc` functions. This is because they may be providing a custom allocator under the hood. Although OQS doesn't do anything like this, I think that adding a `malloc` wrapper under the OQS name space would be beneficial for two reasons:\r\n\r\n1) It makes it obvious that a chunk of memory can be freed with our OQS_MEM_*_free functions\r\n2) It gives us the flexibility in the future to add custom memory management should we decide this is needed\r\n\r\nFor now, the macros below would work, but in the future we could define an actual function that checks for null etc.\r\n```\r\n#define OQS_MEM_malloc(ptr, sz) ptr = malloc(sz)\r\n```\r\n\r\nWhat do you think?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1766/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1766/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2024-04-23T18:44:36Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
