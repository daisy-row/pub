{"id":"36187003826","type":"PushEvent","actor":{"id":74706004,"login":"pi-314159","display_login":"pi-314159","gravatar_id":"","url":"https://api.github.com/users/pi-314159","avatar_url":"https://avatars.githubusercontent.com/u/74706004?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"repository_id":179335992,"push_id":17357317856,"size":293,"distinct_size":293,"ref":"refs/heads/master","head":"6de623d229e3705779fa05f3145f7c9619872c4a","before":"8d99c122d2e5e3152de31a37ccda260b78f55d5c","commits":[{"sha":"7fb818fbbff4209d24bbc784b53fa558998b918c","author":{"email":"bbe@google.com","name":"Bob Beck"},"message":"Sync pki to chromium 5934e28579cddeae3d9ae5b5974f8aae31f200dd\n\nThis brings in pem_unittest.cc which belongs in here now with\nthe pem stuff.\n\nChange-Id: I04bb16692d31e2aa9de2c146785684c05543b1a7\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63645\nCommit-Queue: Bob Beck <bbe@google.com>\nReviewed-by: David Benjamin <davidben@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>\nAuto-Submit: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/7fb818fbbff4209d24bbc784b53fa558998b918c"},{"sha":"c38dc29860a72540eb2c4fdb8a8bfb27ef94ddf3","author":{"email":"bbe@google.com","name":"Bob Beck"},"message":"Make the pki private headers available to gn\n\nSo the chrome build can be slightly less oopy\n\nBug: chromium:1322914\n\nChange-Id: I0967ba67f8e43e8b996bc246c516b9ffe50bc708\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63665\nAuto-Submit: Bob Beck <bbe@google.com>\nCommit-Queue: Bob Beck <bbe@google.com>\nReviewed-by: David Benjamin <davidben@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/c38dc29860a72540eb2c4fdb8a8bfb27ef94ddf3"},{"sha":"672813c21e7f25d1e5c3475e97779d683ce1ec42","author":{"email":"agl@google.com","name":"Adam Langley"},"message":"Teach delocate about a new directive that Clang is using.\n\nThe latest Clang will generate `.hword`.\n\nChange-Id: Ibdb0356049725c758c20f23fc3c9b60a75c28751\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63646\nReviewed-by: David Benjamin <davidben@google.com>\nAuto-Submit: Adam Langley <agl@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/672813c21e7f25d1e5c3475e97779d683ce1ec42"},{"sha":"ec87e1a7672044cbd7d484f2478cd618a7f1f81a","author":{"email":"agl@google.com","name":"Adam Langley"},"message":"Add a note about the list in target.h\n\nWe get this question a fair amount so it's probably worth putting a\nnotice in the file.\n\nChange-Id: If14ae76878e5b4085d1fbe2f946d0b1b8060e606\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63647\nAuto-Submit: Adam Langley <agl@google.com>\nCommit-Queue: Adam Langley <agl@google.com>\nReviewed-by: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/ec87e1a7672044cbd7d484f2478cd618a7f1f81a"},{"sha":"c4b17383691c2abd83560398275f0dfd139bdcba","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Add missing include for waitpid\n\nwaitpid is defined in <sys/wait.h>. Reportedly FreeBSD cares about this.\n\nFixed: 664\nChange-Id: I05be6aa50f97dec3ef7098480b8207cffc73e7a2\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63705\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>\nCommit-Queue: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/c4b17383691c2abd83560398275f0dfd139bdcba"},{"sha":"3309ca66385ecb0c37f1ac1be9f88712e25aa8ec","author":{"email":"victortan@google.com","name":"Victor Tan"},"message":"Add ALPS codepoint supports for split handshake\n\nThis change adds ALPS codepoint supports on split handshake.\nserialize_features sends list of codepoints, handshaker will serialize\nthe codepoint when calling SSL_serialize_handback, and send the chosen\ncodepoint to the server, server can apply the codepoint when\nSSL_apply_handback.\n\nChange-Id: Id7bc985c4b9847b7c337595f1bc23b2af93d96e7\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63265\nReviewed-by: David Benjamin <davidben@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/3309ca66385ecb0c37f1ac1be9f88712e25aa8ec"},{"sha":"a96e7377fcfbdb34989d76e2a5e7c4052e568a6b","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Skip ForkDetect tests on iOS\n\niOS cannot actually fork. Since they have pthread_atfork, we set that up\nanyway just in case, but since fork will just fail, we should skip the\ntests.\n\nChange-Id: I05f34e13fae84f65f950cd0d71e238ed0366b98e\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63765\nCommit-Queue: Adam Langley <agl@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/a96e7377fcfbdb34989d76e2a5e7c4052e568a6b"},{"sha":"2a33faebe1827956e7fca8cbb15e2ca79b292d9c","author":{"email":"andreser@google.com","name":"Andres Erbsen"},"message":"do not call memcpy directly in curve25519_64_adx.h\n\nChange-Id: I7837e600cb5f22aab38cb332de6f579d3cd62a67\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63745\nReviewed-by: David Benjamin <davidben@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/2a33faebe1827956e7fca8cbb15e2ca79b292d9c"},{"sha":"d2a2913cf8b5913c77570b5b8d734547b3eabaf9","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Update Go dependencies\n\nMostly to get things to stop complaining about the old copy of x/net,\nthough we don't use the HTTP/2 package.\n\nChange-Id: Iab93b5d8639c38370457d0a626a362f47c2e01e2\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63766\nCommit-Queue: Adam Langley <agl@google.com>\nReviewed-by: Adam Langley <agl@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/d2a2913cf8b5913c77570b5b8d734547b3eabaf9"},{"sha":"f714cb2935906a2f085c3b89d7e206af94627b56","author":{"email":"kste@google.com","name":"Stefan Koelbl"},"message":"Add basic C implementation of SPHINCS+-SHA2-128s.\n\nThe implementation is based on the current round 3 specification with\nthe modifications to FORS indices generation suggest on the mailing\nlist. The implementation passes test vectors and uses the default SHA256 implementation of BoringSSL.\n\nChange-Id: Iab2dbaf5f692d490577dc940d9f3e298a72e9193\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/60965\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: Adam Langley <agl@google.com>\nReviewed-by: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/f714cb2935906a2f085c3b89d7e206af94627b56"},{"sha":"478b28ab12f2001a03261624261fd041f5439706","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Fix delocate build rules with make\n\n$CMAKE_ASM_FLAGS does not do variable expansion in CMake, only\n${CMAKE_ASM_FLAGS}. As a result, we got the string \"$CMAKE_ASM_FLAGS\"\ninto the Makefile. That seems to then get interpreted as\n${C}MAKE_ASM_FLAGS. I'm not sure why things worked in Ninja, but I\nsuspect there is some underlying escaping bug in CMake somewhere.\n\nChange-Id: Ibc365282a449ea48f8bcfc194faf62c93e29b6d6\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63805\nCommit-Queue: Adam Langley <agl@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/478b28ab12f2001a03261624261fd041f5439706"},{"sha":"0bb026eee4ba651793129edaf3f886e4874535a4","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Tighten the limit in ASN1_STRING_set further\n\nThe actual maximum allowed for this function is INT_MAX - 1. However,\nelsewhere we bound parsers to INT_MAX / 2, to guard against overflows\nelsewhere in crypto/asn1.\n\nAs parsing code is rewritten with CBS, it will naturally handle size_t.\nRather than manually pepper bounds checks in all the functions, we can\ncatch it at ASN1_STRING_set time. (Whether we'll still need this hack by\nthe end, I'm not sure, but let's keep it for now.)\n\nBug: 547\nChange-Id: Ia24c9d77d198ba1b5200825a347ca91850f470a2\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63526\nAuto-Submit: David Benjamin <davidben@google.com>\nReviewed-by: Bob Beck <bbe@google.com>\nCommit-Queue: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/0bb026eee4ba651793129edaf3f886e4874535a4"},{"sha":"361647e91289853a17ec1b77459c8e891ad06002","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Test EVP_CTRL_AEAD_SET_IV_FIXED and friends\n\nThe AES-GCM EVP_CIPHER has a bunch of machinery for internally managing\na fixed/counter IV split. OpenSSH uses these APIs, so test it.\n\n(OpenSSH barely uses this. It only ever passes -1 as a length to\nEVP_CTRL_AEAD_SET_IV_FIXED, and then uses EVP_CTRL_GCM_IV_GEN to\ninternally increment a counter. But may as well just test the whole\nthing, at least until we decide to remove it.)\n\nChange-Id: I688616c586208d27a431836c81d3412799d830bd\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63825\nCommit-Queue: Bob Beck <bbe@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>\nReviewed-by: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/361647e91289853a17ec1b77459c8e891ad06002"},{"sha":"a1263228b8b21d9c9e8d959c0b027da0690c188c","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Remove unnecessary length check before OPENSSL_memcpy\n\nOPENSSL_memcpy already internally checks for empty lengths.\n\nChange-Id: I0015758fd5410e036b532ae727341ae0c0edbdbf\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63826\nReviewed-by: Bob Beck <bbe@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/a1263228b8b21d9c9e8d959c0b027da0690c188c"},{"sha":"ad57528d2c978543106f9b115bd0eb658f3ebdd2","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Simplify AES-GCM counter increment\n\nChange-Id: Ib46d58de31a2c3edd8bcc0652f2f5f03ca4caf1a\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63827\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/ad57528d2c978543106f9b115bd0eb658f3ebdd2"},{"sha":"c5a99415cc722455451175869580b5080acf0924","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Limit the SHA_CTX workaround to C\n\nAnonymous unions are now standard in C, as of C11, but not in C++.\nEnabling sufficiently strict warnings in GCC and Clang flag this.\n\nI considered whether we should just remove this and go back to the\nOpenSSL formulation, but we actually rely on this being an array when\ncalling sha1_block_data_order. Upstream types these as taking pointers\nto the context, which would work, but taking a pointer to the state is a\nbit more accurate. (The assembly function should not touch the buffering\ninside the context.)\n\nThis anonymous union does mean wpa_supplicant's behavior is slightly\nquestionable from a strict aliasing perspective, but ah well.\nwpa_supplicant uses this to implement an old FIPS 186-2 PRF, which was\nbased on SHA-1's underlying permutation. Ideally we would either\nimplement this PRF for them, or have them use their own SHA-1\nimplementation. They've actually done the latter for OpenSSL 3.0, but\nit's a little silly to duplicate the code.\n\nstrongswan and go/another-fips-186-2-prf seems to do this too. I'm not\npositive what strongswan is doing. I've filed crbug.com/boringssl/667\nfor follow-up work.\n\nBug: 667\nFixed: 566\nChange-Id: Ife32cc8c278e0dbbd95401ccdd3bd62945e10cf2\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63967\nAuto-Submit: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/c5a99415cc722455451175869580b5080acf0924"},{"sha":"240b73adcdc175804712f26802c6d354ee9df9a0","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Const-correct and document trust/reject object APIs\n\nThis'll probably need another pass once we figure out what to do with\nX509_TRUST, but put it with the other aux functions.\n\nBug: 426\nChange-Id: I6ae2e45b94bace40307dd4dcc1c8702fc8baa8eb\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63925\nReviewed-by: Bob Beck <bbe@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>\nCommit-Queue: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/240b73adcdc175804712f26802c6d354ee9df9a0"},{"sha":"dd8ffe1db3bc83ba0c5b2ebba3dd9537c39bbcf8","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Document X509_REVOKED-related functions\n\nAlso move a few functions into the correct sections.\n\nBug: 426\nChange-Id: I81c4e65bd7f248251a2a85b9934abe500798532a\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63926\nCommit-Queue: David Benjamin <davidben@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>\nReviewed-by: Bob Beck <bbe@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/dd8ffe1db3bc83ba0c5b2ebba3dd9537c39bbcf8"},{"sha":"5d1c612a8b66fafabf759e47b36b6244dda8444c","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Expand and document RSA_PSS_PARAMS functions\n\nBug: 426\nChange-Id: I82820de3048af0d9280d37b89ebf98cb07c746d8\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63927\nReviewed-by: Bob Beck <bbe@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/5d1c612a8b66fafabf759e47b36b6244dda8444c"},{"sha":"827c7ddbc9a1e2eadf13c245ec436e511272d644","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Remove X509_CRL_diff\n\nUpdate-Note: Removed an unused function. This has no callers and is only\nuseful to create delta CRLs, which are similarly unused and being\nremoved.\n\nBug: 601\nChange-Id: I22abf36e723d19b9759bcabf28fddf7f2ffe7379\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/63928\nReviewed-by: Bob Beck <bbe@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>\nAuto-Submit: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/827c7ddbc9a1e2eadf13c245ec436e511272d644"}]},"public":true,"created_at":"2024-03-02T15:57:23Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
