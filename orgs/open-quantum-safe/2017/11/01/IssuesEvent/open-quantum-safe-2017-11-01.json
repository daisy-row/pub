{"id":"6793786958","type":"IssuesEvent","actor":{"id":33280104,"login":"ashutoshtekriwal","display_login":"ashutoshtekriwal","gravatar_id":"","url":"https://api.github.com/users/ashutoshtekriwal","avatar_url":"https://avatars.githubusercontent.com/u/33280104?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/13","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/13/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/13/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/13/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/13","id":270244484,"number":13,"title":"openssl client/server issue when using OQS cipher suite","user":{"login":"ashutoshtekriwal","id":33280104,"avatar_url":"https://avatars0.githubusercontent.com/u/33280104?v=4","gravatar_id":"","url":"https://api.github.com/users/ashutoshtekriwal","html_url":"https://github.com/ashutoshtekriwal","followers_url":"https://api.github.com/users/ashutoshtekriwal/followers","following_url":"https://api.github.com/users/ashutoshtekriwal/following{/other_user}","gists_url":"https://api.github.com/users/ashutoshtekriwal/gists{/gist_id}","starred_url":"https://api.github.com/users/ashutoshtekriwal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashutoshtekriwal/subscriptions","organizations_url":"https://api.github.com/users/ashutoshtekriwal/orgs","repos_url":"https://api.github.com/users/ashutoshtekriwal/repos","events_url":"https://api.github.com/users/ashutoshtekriwal/events{/privacy}","received_events_url":"https://api.github.com/users/ashutoshtekriwal/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2017-11-01T09:17:35Z","updated_at":"2017-11-01T09:17:35Z","closed_at":null,"author_association":"NONE","body":"I have created an client/server application to establish ssl session via certificates.\r\n\r\nClient.c\r\n###############\r\n#include <stdio.h>\r\n#include <errno.h>\r\n#include <unistd.h>\r\n#include <malloc.h>\r\n#include <string.h>\r\n#include <sys/socket.h>\r\n#include <resolv.h>\r\n#include <netdb.h>\r\n#include \"ssl.h\"\r\n#include \"err.h\"\r\n#include \"crypto.h\"\r\n#include \"apps.h\"\r\n#include \"ssl.h\"\r\n#include \"s_apps.h\"\r\n#define FAIL    -1\r\n\r\nint OpenConnection(const char *hostname, int port)\r\n{   int sd;\r\n    struct hostent *host;\r\n    struct sockaddr_in addr;\r\n\r\n    if ( (host = gethostbyname(hostname)) == NULL )\r\n    {\r\n        perror(hostname);\r\n        abort();\r\n    }\r\n    sd = socket(PF_INET, SOCK_STREAM, 0);\r\n    bzero(&addr, sizeof(addr));\r\n    addr.sin_family = AF_INET;\r\n    addr.sin_port = htons(port);\r\n    addr.sin_addr.s_addr = *(long*)(host->h_addr);\r\n    if ( connect(sd, (struct sockaddr*)&addr, sizeof(addr)) != 0 )\r\n    {\r\n        close(sd);\r\n        perror(hostname);\r\n        abort();\r\n    }\r\n    return sd;\r\n}\r\n\r\nSSL_CTX* InitCTX(void)\r\n{   SSL_METHOD *method;\r\n    SSL_CTX *ctx;\r\n\r\n    OpenSSL_add_all_algorithms();  /* Load cryptos, et.al. */\r\n    SSL_load_error_strings();   /* Bring in and register error messages */\r\n    method = SSLv3_client_method();  /* Create new client-method instance */\r\n    ctx = SSL_CTX_new(method);   /* Create new context */\r\n    if ( ctx == NULL )\r\n    {\r\n        ERR_print_errors_fp(stderr);\r\n        abort();\r\n    }\r\n    return ctx;\r\n}\r\n\r\nvoid ShowCerts(SSL* ssl)\r\n{   X509 *cert;\r\n    char *line;\r\n\r\n    cert = SSL_get_peer_certificate(ssl); /* get the server's certificate */\r\n    if ( cert != NULL )\r\n    {\r\n        printf(\"Server certificates:\\n\");\r\n        line = X509_NAME_oneline(X509_get_subject_name(cert), 0, 0);\r\n        printf(\"Subject: %s\\n\", line);\r\n        free(line);       /* free the malloc'ed string */\r\n        line = X509_NAME_oneline(X509_get_issuer_name(cert), 0, 0);\r\n        printf(\"Issuer: %s\\n\", line);\r\n        free(line);       /* free the malloc'ed string */\r\n        X509_free(cert);     /* free the malloc'ed certificate copy */\r\n    }\r\n    else\r\n        printf(\"No certificates.\\n\");\r\n}\r\n\r\nint main(int count, char *strings[])\r\n{   SSL_CTX *ctx;\r\n    int server,cipherset;\r\n    SSL *ssl;\r\n    char buf[1024];\r\n    int bytes;\r\n    char *hostname, *portnum;\r\n\r\n    if ( count != 3 )\r\n    {\r\n        printf(\"usage: %s <hostname> <portnum>\\n\", strings[0]);\r\n        exit(0);\r\n    }\r\n    SSL_library_init();\r\n    hostname=strings[1];\r\n    portnum=strings[2];\r\n\r\n    ctx = InitCTX();\r\n   _cipherset=SSL_CTX_set_cipher_list(ctx,\"OQSKEX-GENERIC\");\r\n    server = OpenConnection(hostname, atoi(portnum));\r\n    ssl = SSL_new(ctx);      /* create new SSL connection state */\r\n    SSL_set_fd(ssl, server);    /* attach the socket descriptor */\r\n    //cipherset=SSL_CTX_set_cipher_list(ctx,\"SSL_kOQSKEX_SIDH_CLN16\");  \r\n    if ( SSL_connect(ssl) == FAIL )   /* perform the connection */\r\n        ERR_print_errors_fp(stderr);\r\n    else\r\n    {   char *msg = \"Hello???\";\r\n\r\n        printf(\"Connected with %s encryption\\n\", SSL_get_cipher(ssl));\r\n        ShowCerts(ssl);        /* get any certs */\r\n        SSL_write(ssl, msg, strlen(msg));   /* encrypt & send message */\r\n        bytes = SSL_read(ssl, buf, sizeof(buf)); /* get reply & decrypt */\r\nbuf[bytes] = 0;\r\n        printf(\"Received: \\\"%s\\\"\\n\", buf);\r\n        SSL_free(ssl);        /* release connection state */\r\n    }\r\n    close(server);         /* close socket */\r\n    SSL_CTX_free(ctx);        /* release context */\r\n    return 0;\r\n}\r\n\r\nserver.c\r\n#########################\r\n#include <errno.h>\r\n#include <unistd.h>\r\n#include <malloc.h>\r\n#include <string.h>\r\n#include <arpa/inet.h>\r\n#include <sys/socket.h>\r\n#include <sys/types.h>\r\n#include <netinet/in.h>\r\n#include <resolv.h>\r\n#include \"openssl/ssl.h\"\r\n#include \"openssl/err.h\"\r\n \r\n#define FAIL    -1\r\n \r\nint OpenListener(int port)\r\n{   int sd;\r\n    struct sockaddr_in addr;\r\n \r\n    sd = socket(PF_INET, SOCK_STREAM, 0);\r\n    bzero(&addr, sizeof(addr));\r\n    addr.sin_family = AF_INET;\r\n    addr.sin_port = htons(port);\r\n    addr.sin_addr.s_addr = INADDR_ANY;\r\n    if ( bind(sd, (struct sockaddr*)&addr, sizeof(addr)) != 0 )\r\n    {\r\n        perror(\"can't bind port\");\r\n        abort();\r\n    }\r\n    if ( listen(sd, 10) != 0 )\r\n    {\r\n        perror(\"Can't configure listening port\");\r\n        abort();\r\n    }\r\n    return sd;\r\n}\r\n \r\nint isRoot()\r\n{\r\n    if (getuid() != 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else\r\n    {\r\n        return 1;\r\n    }\r\n \r\n}\r\nSSL_CTX* InitServerCTX(void)\r\n{   SSL_METHOD *method;\r\n    SSL_CTX *ctx;\r\n \r\n    OpenSSL_add_all_algorithms();  /* load & register all cryptos, etc. */\r\n    SSL_load_error_strings();   /* load all error messages */\r\n    method = SSLv3_server_method();  /* create new server-method instance */\r\n    ctx = SSL_CTX_new(method);   /* create new context from method */\r\n    if ( ctx == NULL )\r\n    {\r\n        ERR_print_errors_fp(stderr);\r\n        abort();\r\n    }\r\n    return ctx;\r\n}\r\n \r\nvoid LoadCertificates(SSL_CTX* ctx, char* CertFile, char* KeyFile)\r\n{\r\n    /* set the local certificate from CertFile */\r\n    if ( SSL_CTX_use_certificate_file(ctx, CertFile, SSL_FILETYPE_PEM) <= 0 )\r\n    {\r\n        ERR_print_errors_fp(stderr);\r\n        abort();\r\n    }\r\n    /* set the private key from KeyFile (may be the same as CertFile) */\r\n    if ( SSL_CTX_use_PrivateKey_file(ctx, KeyFile, SSL_FILETYPE_PEM) <= 0 )\r\n    {\r\n        ERR_print_errors_fp(stderr);\r\n        abort();\r\n    }\r\n    /* verify private key */\r\n    if ( !SSL_CTX_check_private_key(ctx) )\r\n    {\r\n        fprintf(stderr, \"Private key does not match the public certificate\\n\");\r\n        abort();\r\n    }\r\n}\r\n \r\nvoid ShowCerts(SSL* ssl)\r\n{   X509 *cert;\r\n    char *line;\r\n \r\n    cert = SSL_get_peer_certificate(ssl); /* Get certificates (if available) */\r\n    if ( cert != NULL )\r\n    {\r\n        printf(\"Server certificates:\\n\");\r\n        line = X509_NAME_oneline(X509_get_subject_name(cert), 0, 0);\r\n        printf(\"Subject: %s\\n\", line);\r\n        free(line);\r\n        line = X509_NAME_oneline(X509_get_issuer_name(cert), 0, 0);\r\n        printf(\"Issuer: %s\\n\", line);\r\n        free(line);\r\n        X509_free(cert);\r\n    }\r\n    else\r\n        printf(\"No certificates.\\n\");\r\n}\r\n \r\nvoid Servlet(SSL* ssl) /* Serve the connection -- threadable */\r\n{   char buf[1024];\r\n    char reply[1024];\r\n    int sd, bytes;\r\n    const char* HTMLecho=\"<html><body><pre>%s</pre></body></html>\\n\\n\";\r\n \r\n    if ( SSL_accept(ssl) == FAIL )     /* do SSL-protocol accept */\r\n        ERR_print_errors_fp(stderr);\r\n    else\r\n    {\r\n        ShowCerts(ssl);        /* get any certificates */\r\n        bytes = SSL_read(ssl, buf, sizeof(buf)); /* get request */\r\n        if ( bytes > 0 )\r\n        {\r\n            buf[bytes] = 0;\r\n            printf(\"Client msg: \\\"%s\\\"\\n\", buf);\r\n            sprintf(reply, HTMLecho, buf);   /* construct reply */\r\n            SSL_write(ssl, reply, strlen(reply)); /* send reply */\r\n        }\r\n        else\r\n            ERR_print_errors_fp(stderr);\r\n    }\r\n    sd = SSL_get_fd(ssl);       /* get socket connection */\r\n    SSL_free(ssl);         /* release SSL state */\r\n    close(sd);          /* close connection */\r\n}\r\n \r\nint main(int count, char *strings[])\r\n{   SSL_CTX *ctx;\r\n    int server;\r\n    char *portnum;\r\n \r\n    if(!isRoot())\r\n    {\r\n        printf(\"This program must be run as root/sudo user!!\");\r\n        exit(0);\r\n    }\r\n    if ( count != 2 )\r\n    {\r\n        printf(\"Usage: %s <portnum>\\n\", strings[0]);\r\n        exit(0);\r\n    }\r\n    SSL_library_init();\r\n \r\n    portnum = strings[1];\r\n    ctx = InitServerCTX();        /* initialize SSL */\r\n    LoadCertificates(ctx, \"mycert.pem\", \"mycert.pem\"); /* load certs */\r\n    server = OpenListener(atoi(portnum));    /* create server socket */\r\n    while (1)\r\n    {   struct sockaddr_in addr;\r\n        socklen_t len = sizeof(addr);\r\n        SSL *ssl;\r\n \r\n        int client = accept(server, (struct sockaddr*)&addr, &len);  /* accept connection as usual */\r\n        printf(\"Connection: %s:%d\\n\",inet_ntoa(addr.sin_addr), ntohs(addr.sin_port));\r\n        ssl = SSL_new(ctx);              /* get new SSL state with context */\r\n        SSL_set_fd(ssl, client);      /* set connection socket to SSL state */\r\n        Servlet(ssl);         /* service connection */\r\n    }\r\n    close(server);          /* close server socket */\r\n    SSL_CTX_free(ctx);         /* release context */\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#######\r\ncompilation command for server.c:gcc -Wall -o server server.c -L/usr/local/ssl/lib/ -lssl -lcrypto -loqs -ldl\r\ncompilation command for client.c:gcc -Wall -o client client.c -L/usr/local/ssl/lib/ -lssl -lcrypto -loqs -ldl\r\n(/usr/local/ssl/lib contain compiled libcrypto amd liboqs library).\r\nto run server code:./server <port-number>\r\nto run client code:./client <server-ip> <port-number>\r\n\r\ni am using set_cipher_list function to set QS cipher text but when i run client side code it is showing error\r\nERROR:140135386150560:error:140830B5:SSL routines:ssl3_client_hello:no ciphers available:s3_clnt.c:841:\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}},"public":true,"created_at":"2017-11-01T09:17:35Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
