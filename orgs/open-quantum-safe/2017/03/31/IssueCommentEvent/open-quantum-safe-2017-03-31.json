{"id":"5600989906","type":"IssueCommentEvent","actor":{"id":65081,"login":"jjl","display_login":"jjl","gravatar_id":"","url":"https://api.github.com/users/jjl","avatar_url":"https://avatars.githubusercontent.com/u/65081?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/115","id":217951867,"number":115,"title":"Just a couple of questions..","user":{"login":"Steppenwolfe65","id":8007343,"avatar_url":"https://avatars3.githubusercontent.com/u/8007343?v=3","gravatar_id":"","url":"https://api.github.com/users/Steppenwolfe65","html_url":"https://github.com/Steppenwolfe65","followers_url":"https://api.github.com/users/Steppenwolfe65/followers","following_url":"https://api.github.com/users/Steppenwolfe65/following{/other_user}","gists_url":"https://api.github.com/users/Steppenwolfe65/gists{/gist_id}","starred_url":"https://api.github.com/users/Steppenwolfe65/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Steppenwolfe65/subscriptions","organizations_url":"https://api.github.com/users/Steppenwolfe65/orgs","repos_url":"https://api.github.com/users/Steppenwolfe65/repos","events_url":"https://api.github.com/users/Steppenwolfe65/events{/privacy}","received_events_url":"https://api.github.com/users/Steppenwolfe65/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2017-03-29T17:35:52Z","updated_at":"2017-03-31T06:57:34Z","closed_at":null,"body":"Hi,\r\nI am currently writing a cryptography library in C++: https://github.com/Steppenwolfe65/CEX\r\nand I wonder if I can get your opinions on a couple of things.\r\nYou have collected a number of RingLWE implementations (thanks for that), but do you have a preference for one implementation over another? \r\nAre there functions or features of these implementations that you would like to see combined in an ideal implementation? The library I am writing is targeting application developers, so multi-threading and SIMD parallelization are high priority, is one version better suited for this than the others? \r\nI think the most important criteria though is, do you feel one version is more secure than the others, this includes upwardly flexible parameter sets, and the application of attack vector counter-measures like constant time functions.\r\nI looked at Supersingular Isogeny a few years ago, but could only find the one 'cython' implementation on git.. it's an interesting idea, and could be made quite fast, but I wonder if it has had enough study. The same goes for the McBits version of McEliece.. but again, I would be really interested to know what you think about this..\r\nAnyways, thanks so much for all this great work, it is certain to make my job a lot easier.\r\n\r\nRegards,\r\nJohn\r\n\r\n"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/290632788","html_url":"https://github.com/open-quantum-safe/liboqs/issues/115#issuecomment-290632788","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115","id":290632788,"user":{"login":"jjl","id":65081,"avatar_url":"https://avatars2.githubusercontent.com/u/65081?v=3","gravatar_id":"","url":"https://api.github.com/users/jjl","html_url":"https://github.com/jjl","followers_url":"https://api.github.com/users/jjl/followers","following_url":"https://api.github.com/users/jjl/following{/other_user}","gists_url":"https://api.github.com/users/jjl/gists{/gist_id}","starred_url":"https://api.github.com/users/jjl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jjl/subscriptions","organizations_url":"https://api.github.com/users/jjl/orgs","repos_url":"https://api.github.com/users/jjl/repos","events_url":"https://api.github.com/users/jjl/events{/privacy}","received_events_url":"https://api.github.com/users/jjl/received_events","type":"User","site_admin":false},"created_at":"2017-03-31T06:57:34Z","updated_at":"2017-03-31T06:57:34Z","body":"@Steppenwolfe65 i'm not a member of the project, but here's my opinion as another c++ library developer targeting applications:\r\n\r\n- MSRLN16 seems to be the best performing RLWE algo (on x86-64 at least), also the newest and builds on previous work.\r\n- supersingular isogeny is *slow*. I've seen some recent papers claiming improvements, but I haven't reviewed them yet (and even with the claimed 2.9x performance improvement, they're still slow...)\r\n- Since you seem to be wanting options, you should consider an LWE algorithm (such as frodo) just in case we discover that ideal lattices have properties that make RLWE less secure than previously thought.\r\n\r\nHope that's helpful."}},"public":true,"created_at":"2017-03-31T06:57:34Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"5603535929","type":"IssueCommentEvent","actor":{"id":8007343,"login":"Steppenwolfe65","display_login":"Steppenwolfe65","gravatar_id":"","url":"https://api.github.com/users/Steppenwolfe65","avatar_url":"https://avatars.githubusercontent.com/u/8007343?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/115","id":217951867,"number":115,"title":"Just a couple of questions..","user":{"login":"Steppenwolfe65","id":8007343,"avatar_url":"https://avatars3.githubusercontent.com/u/8007343?v=3","gravatar_id":"","url":"https://api.github.com/users/Steppenwolfe65","html_url":"https://github.com/Steppenwolfe65","followers_url":"https://api.github.com/users/Steppenwolfe65/followers","following_url":"https://api.github.com/users/Steppenwolfe65/following{/other_user}","gists_url":"https://api.github.com/users/Steppenwolfe65/gists{/gist_id}","starred_url":"https://api.github.com/users/Steppenwolfe65/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Steppenwolfe65/subscriptions","organizations_url":"https://api.github.com/users/Steppenwolfe65/orgs","repos_url":"https://api.github.com/users/Steppenwolfe65/repos","events_url":"https://api.github.com/users/Steppenwolfe65/events{/privacy}","received_events_url":"https://api.github.com/users/Steppenwolfe65/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-03-29T17:35:52Z","updated_at":"2017-03-31T14:31:11Z","closed_at":null,"body":"Hi,\r\nI am currently writing a cryptography library in C++: https://github.com/Steppenwolfe65/CEX\r\nand I wonder if I can get your opinions on a couple of things.\r\nYou have collected a number of RingLWE implementations (thanks for that), but do you have a preference for one implementation over another? \r\nAre there functions or features of these implementations that you would like to see combined in an ideal implementation? The library I am writing is targeting application developers, so multi-threading and SIMD parallelization are high priority, is one version better suited for this than the others? \r\nI think the most important criteria though is, do you feel one version is more secure than the others, this includes upwardly flexible parameter sets, and the application of attack vector counter-measures like constant time functions.\r\nI looked at Supersingular Isogeny a few years ago, but could only find the one 'cython' implementation on git.. it's an interesting idea, and could be made quite fast, but I wonder if it has had enough study. The same goes for the McBits version of McEliece.. but again, I would be really interested to know what you think about this..\r\nAnyways, thanks so much for all this great work, it is certain to make my job a lot easier.\r\n\r\nRegards,\r\nJohn\r\n\r\n"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/290728154","html_url":"https://github.com/open-quantum-safe/liboqs/issues/115#issuecomment-290728154","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115","id":290728154,"user":{"login":"Steppenwolfe65","id":8007343,"avatar_url":"https://avatars3.githubusercontent.com/u/8007343?v=3","gravatar_id":"","url":"https://api.github.com/users/Steppenwolfe65","html_url":"https://github.com/Steppenwolfe65","followers_url":"https://api.github.com/users/Steppenwolfe65/followers","following_url":"https://api.github.com/users/Steppenwolfe65/following{/other_user}","gists_url":"https://api.github.com/users/Steppenwolfe65/gists{/gist_id}","starred_url":"https://api.github.com/users/Steppenwolfe65/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Steppenwolfe65/subscriptions","organizations_url":"https://api.github.com/users/Steppenwolfe65/orgs","repos_url":"https://api.github.com/users/Steppenwolfe65/repos","events_url":"https://api.github.com/users/Steppenwolfe65/events{/privacy}","received_events_url":"https://api.github.com/users/Steppenwolfe65/received_events","type":"User","site_admin":false},"created_at":"2017-03-31T14:31:11Z","updated_at":"2017-03-31T14:31:11Z","body":"@jjl Just from a brief review of the codes yesterday, I see a number of spots where performance can be enhanced. The fft's might be parallelized, the key generation can be multi-threaded, but perhaps most significantly, adding a fast rng (I have a pipelined and parallelized CTR generator that outputs AES-256 NI at less than 3 cycles per byte, or about 10GB p/s across 8 cores on my desktop). \r\nMy thinking now is to just grab the best bits from each implementation and make my own, I would also like to expand the parameter sets, so I'll borrow from this project: https://github.com/vscrypto/ringlwe\r\nI'll look at Frodo, next week I plan to review all the papers before I begin writing.\r\nI looked at supersingular isogeny a while back, and remember noting that some of the functions might also be pipelined, I'll review the latest papers, but I'm not sure how much time I want to put into it right now, same for NTRU.\r\n"}},"public":true,"created_at":"2017-03-31T14:31:11Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"5603603482","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/115","id":217951867,"number":115,"title":"Just a couple of questions..","user":{"login":"Steppenwolfe65","id":8007343,"avatar_url":"https://avatars3.githubusercontent.com/u/8007343?v=3","gravatar_id":"","url":"https://api.github.com/users/Steppenwolfe65","html_url":"https://github.com/Steppenwolfe65","followers_url":"https://api.github.com/users/Steppenwolfe65/followers","following_url":"https://api.github.com/users/Steppenwolfe65/following{/other_user}","gists_url":"https://api.github.com/users/Steppenwolfe65/gists{/gist_id}","starred_url":"https://api.github.com/users/Steppenwolfe65/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Steppenwolfe65/subscriptions","organizations_url":"https://api.github.com/users/Steppenwolfe65/orgs","repos_url":"https://api.github.com/users/Steppenwolfe65/repos","events_url":"https://api.github.com/users/Steppenwolfe65/events{/privacy}","received_events_url":"https://api.github.com/users/Steppenwolfe65/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-03-29T17:35:52Z","updated_at":"2017-03-31T14:40:06Z","closed_at":null,"body":"Hi,\r\nI am currently writing a cryptography library in C++: https://github.com/Steppenwolfe65/CEX\r\nand I wonder if I can get your opinions on a couple of things.\r\nYou have collected a number of RingLWE implementations (thanks for that), but do you have a preference for one implementation over another? \r\nAre there functions or features of these implementations that you would like to see combined in an ideal implementation? The library I am writing is targeting application developers, so multi-threading and SIMD parallelization are high priority, is one version better suited for this than the others? \r\nI think the most important criteria though is, do you feel one version is more secure than the others, this includes upwardly flexible parameter sets, and the application of attack vector counter-measures like constant time functions.\r\nI looked at Supersingular Isogeny a few years ago, but could only find the one 'cython' implementation on git.. it's an interesting idea, and could be made quite fast, but I wonder if it has had enough study. The same goes for the McBits version of McEliece.. but again, I would be really interested to know what you think about this..\r\nAnyways, thanks so much for all this great work, it is certain to make my job a lot easier.\r\n\r\nRegards,\r\nJohn\r\n\r\n"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/290730609","html_url":"https://github.com/open-quantum-safe/liboqs/issues/115#issuecomment-290730609","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115","id":290730609,"user":{"login":"dstebila","id":8843219,"avatar_url":"https://avatars3.githubusercontent.com/u/8843219?v=3","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2017-03-31T14:40:06Z","updated_at":"2017-03-31T14:40:06Z","body":"Hi Steppenwolfe64 and jjl, \r\n\r\nCertainly there are places where performance can be improved.  Some of the original implementations have assembly/SIMD optimizations that we haven't compiled in yet to our build, but we do want to do that.  \r\n\r\nParallelizing FFT or key generation obviously improves runtime of a single execution, but for a server serving many clients it wouldn't generally improve throughput, so it's up to you which is more important.  \r\n\r\nRing-LWE and LWE should be quite amenable to vectorization.\r\n\r\nIf you have a faster AES implementation, we'd love to be able to use it.  :)\r\n\r\nAs for a preference of which algorithm/implementation, I don't have a preference at the moment, and I'm waiting to see how the NIST PQ crypto project goes.\r\n\r\nDouglas"}},"public":true,"created_at":"2017-03-31T14:40:06Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"5604092521","type":"IssueCommentEvent","actor":{"id":8007343,"login":"Steppenwolfe65","display_login":"Steppenwolfe65","gravatar_id":"","url":"https://api.github.com/users/Steppenwolfe65","avatar_url":"https://avatars.githubusercontent.com/u/8007343?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/115","id":217951867,"number":115,"title":"Just a couple of questions..","user":{"login":"Steppenwolfe65","id":8007343,"avatar_url":"https://avatars3.githubusercontent.com/u/8007343?v=3","gravatar_id":"","url":"https://api.github.com/users/Steppenwolfe65","html_url":"https://github.com/Steppenwolfe65","followers_url":"https://api.github.com/users/Steppenwolfe65/followers","following_url":"https://api.github.com/users/Steppenwolfe65/following{/other_user}","gists_url":"https://api.github.com/users/Steppenwolfe65/gists{/gist_id}","starred_url":"https://api.github.com/users/Steppenwolfe65/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Steppenwolfe65/subscriptions","organizations_url":"https://api.github.com/users/Steppenwolfe65/orgs","repos_url":"https://api.github.com/users/Steppenwolfe65/repos","events_url":"https://api.github.com/users/Steppenwolfe65/events{/privacy}","received_events_url":"https://api.github.com/users/Steppenwolfe65/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2017-03-29T17:35:52Z","updated_at":"2017-03-31T15:46:48Z","closed_at":null,"body":"Hi,\r\nI am currently writing a cryptography library in C++: https://github.com/Steppenwolfe65/CEX\r\nand I wonder if I can get your opinions on a couple of things.\r\nYou have collected a number of RingLWE implementations (thanks for that), but do you have a preference for one implementation over another? \r\nAre there functions or features of these implementations that you would like to see combined in an ideal implementation? The library I am writing is targeting application developers, so multi-threading and SIMD parallelization are high priority, is one version better suited for this than the others? \r\nI think the most important criteria though is, do you feel one version is more secure than the others, this includes upwardly flexible parameter sets, and the application of attack vector counter-measures like constant time functions.\r\nI looked at Supersingular Isogeny a few years ago, but could only find the one 'cython' implementation on git.. it's an interesting idea, and could be made quite fast, but I wonder if it has had enough study. The same goes for the McBits version of McEliece.. but again, I would be really interested to know what you think about this..\r\nAnyways, thanks so much for all this great work, it is certain to make my job a lot easier.\r\n\r\nRegards,\r\nJohn\r\n\r\n"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/290749804","html_url":"https://github.com/open-quantum-safe/liboqs/issues/115#issuecomment-290749804","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/115","id":290749804,"user":{"login":"Steppenwolfe65","id":8007343,"avatar_url":"https://avatars3.githubusercontent.com/u/8007343?v=3","gravatar_id":"","url":"https://api.github.com/users/Steppenwolfe65","html_url":"https://github.com/Steppenwolfe65","followers_url":"https://api.github.com/users/Steppenwolfe65/followers","following_url":"https://api.github.com/users/Steppenwolfe65/following{/other_user}","gists_url":"https://api.github.com/users/Steppenwolfe65/gists{/gist_id}","starred_url":"https://api.github.com/users/Steppenwolfe65/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Steppenwolfe65/subscriptions","organizations_url":"https://api.github.com/users/Steppenwolfe65/orgs","repos_url":"https://api.github.com/users/Steppenwolfe65/repos","events_url":"https://api.github.com/users/Steppenwolfe65/events{/privacy}","received_events_url":"https://api.github.com/users/Steppenwolfe65/received_events","type":"User","site_admin":false},"created_at":"2017-03-31T15:46:48Z","updated_at":"2017-03-31T15:46:48Z","body":"@dstebila and @jjl \r\n\r\nHi Douglas,\r\nI'm kind of glad you didn't add simd/asm yet, makes it a lot easier to follow the logic.. nice job cleaning up and consolidating these codes btw.\r\n\r\nAll parallelization in my library is optional, and can be tuned and turned on/off via a parallel options class, the same will hold true for the asymmetric ciphers and signature schemes.\r\nThere is a high degree of automation in what I am writing, as it targets application developers directly (so simd scale [128/256] multi-threading and fallbacks are all chosen automatically at runtime based on system capabilities).\r\n\r\nThe AES-NI implementation is here:\r\nhttps://github.com/Steppenwolfe65/CEX/blob/master/CEX/AHX.cpp\r\nand the Generator is here:\r\nhttps://github.com/Steppenwolfe65/CEX/blob/master/CEX/CMG.cpp\r\n\r\nThe AES-NI implementation uses an optional HKDF Expand generator to power the key schedule using any one of the implemented digests (Skein, Keccak, Blake2, or SHA-2), and in extended mode can process up to 38 rounds.\r\n\r\nThe generator has predictive and backtracking resistance using one of the implemented TRNGs, (native, CPU jitter, entropy collector, or RDRAND/RDSEED).\r\nSo.. quite a few dependencies, but if you want help boiling down an implementation that you can use in this project, I'd be glad to help. Note though, that at this time, this is a windows library...\r\nThere's an introduction to CEX paper that lists the current capabilities as well.\r\n\r\nJohn"}},"public":true,"created_at":"2017-03-31T15:46:48Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
