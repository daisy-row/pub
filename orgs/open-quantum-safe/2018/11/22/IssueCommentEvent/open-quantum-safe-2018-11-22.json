{"id":"8631472556","type":"IssueCommentEvent","actor":{"id":974662,"login":"thomwiggers","display_login":"thomwiggers","gravatar_id":"","url":"https://api.github.com/users/thomwiggers","avatar_url":"https://avatars.githubusercontent.com/u/974662?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/59","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/59/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/59/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/59/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/59","id":379168343,"node_id":"MDU6SXNzdWUzNzkxNjgzNDM=","number":59,"title":"Figure out how to integrate KEMs into EVP layer","user":{"login":"thomwiggers","id":974662,"node_id":"MDQ6VXNlcjk3NDY2Mg==","avatar_url":"https://avatars1.githubusercontent.com/u/974662?v=4","gravatar_id":"","url":"https://api.github.com/users/thomwiggers","html_url":"https://github.com/thomwiggers","followers_url":"https://api.github.com/users/thomwiggers/followers","following_url":"https://api.github.com/users/thomwiggers/following{/other_user}","gists_url":"https://api.github.com/users/thomwiggers/gists{/gist_id}","starred_url":"https://api.github.com/users/thomwiggers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thomwiggers/subscriptions","organizations_url":"https://api.github.com/users/thomwiggers/orgs","repos_url":"https://api.github.com/users/thomwiggers/repos","events_url":"https://api.github.com/users/thomwiggers/events{/privacy}","received_events_url":"https://api.github.com/users/thomwiggers/received_events","type":"User","site_admin":false},"labels":[{"id":1135734043,"node_id":"MDU6TGFiZWwxMTM1NzM0MDQz","url":"https://api.github.com/repos/open-quantum-safe/openssl/labels/OpenSSL-111","name":"OpenSSL-111","color":"c918c0","default":false},{"id":431027941,"node_id":"MDU6TGFiZWw0MzEwMjc5NDE=","url":"https://api.github.com/repos/open-quantum-safe/openssl/labels/enhancement","name":"enhancement","color":"84b6eb","default":true}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2018-11-09T13:47:32Z","updated_at":"2018-11-22T07:49:45Z","closed_at":null,"author_association":"NONE","body":"For much easier use, KEMs should probably be integrated in the EVP framework. I did some experiments, and I now do have a [certified Kyber 512 public key](https://gist.github.com/thomwiggers/403a42d32ca5f1d90e2a7c506f54ac09). \r\n\r\nThis should then be useful to consider OPTLS-like setups.\r\n\r\nThe challenge of course is `EVP_PKEY_derive` being almost but not quite suitable for this task. I have not tackled this problem yet, but it may be possible to slightly extend the API to obtain a ciphertext instead of the public key. That seems the main challenge, I think it should be possible to override the `derive` function such that it conditionally encapsulates or decapsulates:\r\n\r\n```\r\n\r\nstatic int pkey_oqs_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen) {\r\n    OQS_KEY *oqs_key = (OQS_KEY*) ctx->pkey->pkey.ptr;\r\n    OQS_KEY *oqs_peer = (OQS_KEY*) ctx->peerkey->pkey.ptr;\r\n\r\n    *keylen = oqs_size(ctx->pkey);\r\n    if (key == NULL) {\r\n        return 1;\r\n    }\r\n    if (oqs_peer->ciphertext) {\r\n        if (OQS_KEM_decaps(oqs_key->k, key, oqs_peer->ciphertext, oqs_key->privkey) == OQS_SUCCESS) {\r\n            return 1;\r\n        }\r\n    } else {\r\n        oqs_peer->ciphertext = OPENSSL_malloc(*keylen);\r\n        if (OQS_KEM_encaps(oqs_key->k, key, oqs_peer->ciphertext, oqs_peer->pubkey) == OQS_SUCCESS) {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n```\r\n\r\nObviously, that does mean that the users of the EVP API need to do some detection \"is this method a KEM\" and obtain and/or set the ciphertext if needed.\r\n\r\n"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/440941766","html_url":"https://github.com/open-quantum-safe/openssl/issues/59#issuecomment-440941766","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/59","id":440941766,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MDk0MTc2Ng==","user":{"login":"thomwiggers","id":974662,"node_id":"MDQ6VXNlcjk3NDY2Mg==","avatar_url":"https://avatars1.githubusercontent.com/u/974662?v=4","gravatar_id":"","url":"https://api.github.com/users/thomwiggers","html_url":"https://github.com/thomwiggers","followers_url":"https://api.github.com/users/thomwiggers/followers","following_url":"https://api.github.com/users/thomwiggers/following{/other_user}","gists_url":"https://api.github.com/users/thomwiggers/gists{/gist_id}","starred_url":"https://api.github.com/users/thomwiggers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thomwiggers/subscriptions","organizations_url":"https://api.github.com/users/thomwiggers/orgs","repos_url":"https://api.github.com/users/thomwiggers/repos","events_url":"https://api.github.com/users/thomwiggers/events{/privacy}","received_events_url":"https://api.github.com/users/thomwiggers/received_events","type":"User","site_admin":false},"created_at":"2018-11-22T07:49:45Z","updated_at":"2018-11-22T07:49:45Z","author_association":"NONE","body":"I've not yet had time to check how and to what extent things will burst into flames when I first run it, but that is one of the things that I was hoping to pick up today. The plan is to have the client encapsulate to the public key that's in the certificate, and then do HMAC instead of a signature (like OPTLS).\r\n\r\n\"A mechanism to generate X.509 keys\" turned out to be easier than I'd first thought: I basically implemented the same API that DH supports (`crypto/dh/ameth.c`) for KEMs and then I could create a certificate request in much [the same way you'd do that for DH parameters][1].\r\n\r\nThe certificate I linked in the first post in this issue has an RSA signature, which is of course silly in a post-quantum setting, but it illustrates that it is possible. The idea we had was that if *anyone* were to be somewhat trustworthy in keeping state, it would be CAs with HSMs, so we could for example have them issue e.g. XMSS-signed certificates to keep the signature size small. Anyone deploying these certificates should be doing authentication with symmetric primitives.¹\r\n\r\n[1]: https://security.stackexchange.com/questions/44251/openssl-generate-different-types-of-self-signed-certificate\r\n\r\n\r\n¹) OpenSSH has experimental XMSS support, and I should write down my rant some time why that is a bad idea: for one, we just spent decades of teaching people to back up keys – so they'll back up it including the statefile and then end up reusing states...."}},"public":true,"created_at":"2018-11-22T07:49:45Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"8631495593","type":"IssueCommentEvent","actor":{"id":974662,"login":"thomwiggers","display_login":"thomwiggers","gravatar_id":"","url":"https://api.github.com/users/thomwiggers","avatar_url":"https://avatars.githubusercontent.com/u/974662?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/61","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/61/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/61/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/61/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/61","id":381024988,"node_id":"MDExOlB1bGxSZXF1ZXN0MjMxMDg3NTc3","number":61,"title":"Use OpenSSL error schemes","user":{"login":"thomwiggers","id":974662,"node_id":"MDQ6VXNlcjk3NDY2Mg==","avatar_url":"https://avatars1.githubusercontent.com/u/974662?v=4","gravatar_id":"","url":"https://api.github.com/users/thomwiggers","html_url":"https://github.com/thomwiggers","followers_url":"https://api.github.com/users/thomwiggers/followers","following_url":"https://api.github.com/users/thomwiggers/following{/other_user}","gists_url":"https://api.github.com/users/thomwiggers/gists{/gist_id}","starred_url":"https://api.github.com/users/thomwiggers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thomwiggers/subscriptions","organizations_url":"https://api.github.com/users/thomwiggers/orgs","repos_url":"https://api.github.com/users/thomwiggers/repos","events_url":"https://api.github.com/users/thomwiggers/events{/privacy}","received_events_url":"https://api.github.com/users/thomwiggers/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-11-15T06:56:18Z","updated_at":"2018-11-22T07:55:23Z","closed_at":null,"author_association":"NONE","pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/61","html_url":"https://github.com/open-quantum-safe/openssl/pull/61","diff_url":"https://github.com/open-quantum-safe/openssl/pull/61.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/61.patch"},"body":"The OpenSSL error handling works as follows:\r\n\r\n* Per module (e.g. `crypto/ec`) a namespace is made (`ECerr`)\r\n* In that namespace, all `ECerr` calls are scraped\r\n* The location parameter should be `EC_F_<functionname>`\r\n* The reason should be `ERR_R_reason`.\r\n* Then you run `make errors`: this scrapes the above out of the places\r\nwhere they are used and puts them into the appropriate headerfiles.\r\n\r\nI've turned `OQSerr` back into `ECerr`, because otherwise `make errors`\r\nwas broken. I've also added some reasons other than `ERR_R_FATAL`.\r\n"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/440942912","html_url":"https://github.com/open-quantum-safe/openssl/pull/61#issuecomment-440942912","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/61","id":440942912,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MDk0MjkxMg==","user":{"login":"thomwiggers","id":974662,"node_id":"MDQ6VXNlcjk3NDY2Mg==","avatar_url":"https://avatars1.githubusercontent.com/u/974662?v=4","gravatar_id":"","url":"https://api.github.com/users/thomwiggers","html_url":"https://github.com/thomwiggers","followers_url":"https://api.github.com/users/thomwiggers/followers","following_url":"https://api.github.com/users/thomwiggers/following{/other_user}","gists_url":"https://api.github.com/users/thomwiggers/gists{/gist_id}","starred_url":"https://api.github.com/users/thomwiggers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thomwiggers/subscriptions","organizations_url":"https://api.github.com/users/thomwiggers/orgs","repos_url":"https://api.github.com/users/thomwiggers/repos","events_url":"https://api.github.com/users/thomwiggers/events{/privacy}","received_events_url":"https://api.github.com/users/thomwiggers/received_events","type":"User","site_admin":false},"created_at":"2018-11-22T07:55:23Z","updated_at":"2018-11-22T07:55:23Z","author_association":"NONE","body":"Yeah, I wasn't able to figure out how to get that to work. There's some file where you need to add these namespaces, but it seemed to be quite tied to the subdirectories. I'm also not sure if you're allowed to use e.g. `DHerr` in the `crypto/ec` folder..."}},"public":true,"created_at":"2018-11-22T07:55:23Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"8635039955","type":"IssueCommentEvent","actor":{"id":16247285,"login":"christianpaquin","display_login":"christianpaquin","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","avatar_url":"https://avatars.githubusercontent.com/u/16247285?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/62","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/62/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/62/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/62/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/62","id":381381004,"node_id":"MDExOlB1bGxSZXF1ZXN0MjMxMzY3MjQ5","number":62,"title":"Enable hybrid auth in TLS 1.3","user":{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars0.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-11-15T23:19:23Z","updated_at":"2018-11-22T19:55:56Z","closed_at":null,"author_association":"NONE","pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/62","html_url":"https://github.com/open-quantum-safe/openssl/pull/62","diff_url":"https://github.com/open-quantum-safe/openssl/pull/62.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/62.patch"},"body":"Enable hybrid auth in TLS 1.3 by defining naive hybrid schemes (parallel signatures; concatenated serialization of artifacts), combining p256/rsa3072 with L1 schemes, and p384 with L3 schemes.\r\n\r\n<!--\r\nThank you for your pull request. Please review these requirements:\r\n\r\nContributors guide: https://github.com/openssl/openssl/blob/master/CONTRIBUTING\r\n\r\nOther than that, provide a description above this comment if there isn't one already\r\n\r\nIf this fixes a github issue, make sure to have a line saying 'Fixes #XXXX' (without quotes) in the commit message.\r\n-->\r\n"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/441111739","html_url":"https://github.com/open-quantum-safe/openssl/pull/62#issuecomment-441111739","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/62","id":441111739,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MTExMTczOQ==","user":{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars0.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false},"created_at":"2018-11-22T19:55:56Z","updated_at":"2018-11-22T19:55:56Z","author_association":"NONE","body":"No I have not; the new sig schemes to test are: `p256_picnicL1FS`, `rsa3072_picnicL1FS`, `p256_qteslaI`, `rsa3072_qteslaI`, `p384_qteslaIIIsize`, and `p384_qteslaIIIspeed`"}},"public":true,"created_at":"2018-11-22T19:55:57Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
