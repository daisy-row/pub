{"id":"19191660156","type":"IssueCommentEvent","actor":{"id":60771953,"login":"SONGJINGYO","display_login":"SONGJINGYO","gravatar_id":"","url":"https://api.github.com/users/SONGJINGYO","avatar_url":"https://avatars.githubusercontent.com/u/60771953?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/341","id":1066969735,"node_id":"I_kwDOA_fpb84_mKqH","number":341,"title":"How to build OQS OpenSSL on ARM Processor (Apple M1 Chip)","user":{"login":"SONGJINGYO","id":60771953,"node_id":"MDQ6VXNlcjYwNzcxOTUz","avatar_url":"https://avatars.githubusercontent.com/u/60771953?v=4","gravatar_id":"","url":"https://api.github.com/users/SONGJINGYO","html_url":"https://github.com/SONGJINGYO","followers_url":"https://api.github.com/users/SONGJINGYO/followers","following_url":"https://api.github.com/users/SONGJINGYO/following{/other_user}","gists_url":"https://api.github.com/users/SONGJINGYO/gists{/gist_id}","starred_url":"https://api.github.com/users/SONGJINGYO/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SONGJINGYO/subscriptions","organizations_url":"https://api.github.com/users/SONGJINGYO/orgs","repos_url":"https://api.github.com/users/SONGJINGYO/repos","events_url":"https://api.github.com/users/SONGJINGYO/events{/privacy}","received_events_url":"https://api.github.com/users/SONGJINGYO/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-11-30T09:03:30Z","updated_at":"2021-12-06T01:50:53Z","closed_at":"2021-11-30T14:28:57Z","author_association":"NONE","active_lock_reason":null,"body":"I understood OQS OpenSSL library as the source code to build TLS 1.3 using PQC Cryptography. This Github presented how to build the OQS OpenSSL library in Mac, Linux, and Windows environments. Where Mac is a Mac with an Intel chip (x86). However, the build method for Mac with Apple-M1 chip is not provided, so I would like to ask if you can know how to build it. Thanks for reading this long article.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/986367468","html_url":"https://github.com/open-quantum-safe/openssl/issues/341#issuecomment-986367468","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341","id":986367468,"node_id":"IC_kwDOA_fpb846ysXs","user":{"login":"SONGJINGYO","id":60771953,"node_id":"MDQ6VXNlcjYwNzcxOTUz","avatar_url":"https://avatars.githubusercontent.com/u/60771953?v=4","gravatar_id":"","url":"https://api.github.com/users/SONGJINGYO","html_url":"https://github.com/SONGJINGYO","followers_url":"https://api.github.com/users/SONGJINGYO/followers","following_url":"https://api.github.com/users/SONGJINGYO/following{/other_user}","gists_url":"https://api.github.com/users/SONGJINGYO/gists{/gist_id}","starred_url":"https://api.github.com/users/SONGJINGYO/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SONGJINGYO/subscriptions","organizations_url":"https://api.github.com/users/SONGJINGYO/orgs","repos_url":"https://api.github.com/users/SONGJINGYO/repos","events_url":"https://api.github.com/users/SONGJINGYO/events{/privacy}","received_events_url":"https://api.github.com/users/SONGJINGYO/received_events","type":"User","site_admin":false},"created_at":"2021-12-06T01:50:53Z","updated_at":"2021-12-06T01:50:53Z","author_association":"NONE","body":"\r\nThank you for your reply. I want to build OQS OpenSSL on an ARMv8-based (64-bit) Ubuntu Linux environment in addition to Mac books with Apple M1 chip. So, I performed it according to the build method in Ubuntu Linux environment suggested on github (Step 0 - Step 2). Step 0 - 1 were completed without build error. In Step2, I tried to build by replacing the ./Configure no-shared linux-x86_64 -lm command with the ./Configure no-shared linux-aarch64 -lm command considering the ARMv8-based Ubuntu Linux environment, but the following error occurred. Is there a specific command to solve the error in Step 2 in ARMv8-based Ubuntu Linux environment? Thanks for reading this long post.\r\n\r\n![Screenshot from 2021-12-06 10-34-42](https://user-images.githubusercontent.com/60771953/144773937-f2602906-c3a4-48d5-9336-3f1d3d6a7111.png)\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/986367468/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2021-12-06T01:50:53Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"19193583386","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/341","id":1066969735,"node_id":"I_kwDOA_fpb84_mKqH","number":341,"title":"How to build OQS OpenSSL on ARM Processor (Apple M1 Chip)","user":{"login":"SONGJINGYO","id":60771953,"node_id":"MDQ6VXNlcjYwNzcxOTUz","avatar_url":"https://avatars.githubusercontent.com/u/60771953?v=4","gravatar_id":"","url":"https://api.github.com/users/SONGJINGYO","html_url":"https://github.com/SONGJINGYO","followers_url":"https://api.github.com/users/SONGJINGYO/followers","following_url":"https://api.github.com/users/SONGJINGYO/following{/other_user}","gists_url":"https://api.github.com/users/SONGJINGYO/gists{/gist_id}","starred_url":"https://api.github.com/users/SONGJINGYO/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SONGJINGYO/subscriptions","organizations_url":"https://api.github.com/users/SONGJINGYO/orgs","repos_url":"https://api.github.com/users/SONGJINGYO/repos","events_url":"https://api.github.com/users/SONGJINGYO/events{/privacy}","received_events_url":"https://api.github.com/users/SONGJINGYO/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-11-30T09:03:30Z","updated_at":"2021-12-06T05:52:49Z","closed_at":"2021-11-30T14:28:57Z","author_association":"NONE","active_lock_reason":null,"body":"I understood OQS OpenSSL library as the source code to build TLS 1.3 using PQC Cryptography. This Github presented how to build the OQS OpenSSL library in Mac, Linux, and Windows environments. Where Mac is a Mac with an Intel chip (x86). However, the build method for Mac with Apple-M1 chip is not provided, so I would like to ask if you can know how to build it. Thanks for reading this long article.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/986460888","html_url":"https://github.com/open-quantum-safe/openssl/issues/341#issuecomment-986460888","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341","id":986460888,"node_id":"IC_kwDOA_fpb846zDLY","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-12-06T05:52:49Z","updated_at":"2021-12-06T05:52:49Z","author_association":"MEMBER","body":"> Is there a specific command to solve the error in Step 2 in ARMv8-based Ubuntu Linux environment?\r\n\r\nIn one word: No. In more words --and please pardon me for the bluntness of those-- but did you read the error message at all? Your machine ran out of disk space.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/986460888/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2021-12-06T05:52:49Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"19193910827","type":"IssueCommentEvent","actor":{"id":60771953,"login":"SONGJINGYO","display_login":"SONGJINGYO","gravatar_id":"","url":"https://api.github.com/users/SONGJINGYO","avatar_url":"https://avatars.githubusercontent.com/u/60771953?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/341","id":1066969735,"node_id":"I_kwDOA_fpb84_mKqH","number":341,"title":"How to build OQS OpenSSL on ARM Processor (Apple M1 Chip)","user":{"login":"SONGJINGYO","id":60771953,"node_id":"MDQ6VXNlcjYwNzcxOTUz","avatar_url":"https://avatars.githubusercontent.com/u/60771953?v=4","gravatar_id":"","url":"https://api.github.com/users/SONGJINGYO","html_url":"https://github.com/SONGJINGYO","followers_url":"https://api.github.com/users/SONGJINGYO/followers","following_url":"https://api.github.com/users/SONGJINGYO/following{/other_user}","gists_url":"https://api.github.com/users/SONGJINGYO/gists{/gist_id}","starred_url":"https://api.github.com/users/SONGJINGYO/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SONGJINGYO/subscriptions","organizations_url":"https://api.github.com/users/SONGJINGYO/orgs","repos_url":"https://api.github.com/users/SONGJINGYO/repos","events_url":"https://api.github.com/users/SONGJINGYO/events{/privacy}","received_events_url":"https://api.github.com/users/SONGJINGYO/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-11-30T09:03:30Z","updated_at":"2021-12-06T06:26:16Z","closed_at":"2021-11-30T14:28:57Z","author_association":"NONE","active_lock_reason":null,"body":"I understood OQS OpenSSL library as the source code to build TLS 1.3 using PQC Cryptography. This Github presented how to build the OQS OpenSSL library in Mac, Linux, and Windows environments. Where Mac is a Mac with an Intel chip (x86). However, the build method for Mac with Apple-M1 chip is not provided, so I would like to ask if you can know how to build it. Thanks for reading this long article.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/986477329","html_url":"https://github.com/open-quantum-safe/openssl/issues/341#issuecomment-986477329","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/341","id":986477329,"node_id":"IC_kwDOA_fpb846zHMR","user":{"login":"SONGJINGYO","id":60771953,"node_id":"MDQ6VXNlcjYwNzcxOTUz","avatar_url":"https://avatars.githubusercontent.com/u/60771953?v=4","gravatar_id":"","url":"https://api.github.com/users/SONGJINGYO","html_url":"https://github.com/SONGJINGYO","followers_url":"https://api.github.com/users/SONGJINGYO/followers","following_url":"https://api.github.com/users/SONGJINGYO/following{/other_user}","gists_url":"https://api.github.com/users/SONGJINGYO/gists{/gist_id}","starred_url":"https://api.github.com/users/SONGJINGYO/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SONGJINGYO/subscriptions","organizations_url":"https://api.github.com/users/SONGJINGYO/orgs","repos_url":"https://api.github.com/users/SONGJINGYO/repos","events_url":"https://api.github.com/users/SONGJINGYO/events{/privacy}","received_events_url":"https://api.github.com/users/SONGJINGYO/received_events","type":"User","site_admin":false},"created_at":"2021-12-06T06:26:16Z","updated_at":"2021-12-06T06:26:16Z","author_association":"NONE","body":"I'm really sorry. thank you for the reply.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/986477329/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2021-12-06T06:26:16Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"19194688146","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141","id":1069021651,"node_id":"PR_kwDOA-eq3c4vR-4L","number":1141,"title":"Enabling use of ARM PMU for benchmarking when compiler flag is enabled","user":{"login":"tedeaton","id":7863838,"node_id":"MDQ6VXNlcjc4NjM4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/7863838?v=4","gravatar_id":"","url":"https://api.github.com/users/tedeaton","html_url":"https://github.com/tedeaton","followers_url":"https://api.github.com/users/tedeaton/followers","following_url":"https://api.github.com/users/tedeaton/following{/other_user}","gists_url":"https://api.github.com/users/tedeaton/gists{/gist_id}","starred_url":"https://api.github.com/users/tedeaton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tedeaton/subscriptions","organizations_url":"https://api.github.com/users/tedeaton/orgs","repos_url":"https://api.github.com/users/tedeaton/repos","events_url":"https://api.github.com/users/tedeaton/events{/privacy}","received_events_url":"https://api.github.com/users/tedeaton/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-12-02T01:07:57Z","updated_at":"2021-12-06T07:38:48Z","closed_at":"2021-12-02T18:28:29Z","author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1141","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1141.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1141.patch","merged_at":"2021-12-02T18:28:29Z"},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\nThis pull request enables the use of ARMv8's performance monitoring unit (PMU) in the benchmarking script to allow for a more precise cycle count on that architecture when possible. It is enabled by the OQS_SPEED_USE_ARM_PMU compiler flag. Note that loading a kernel module (such as https://github.com/mupq/pqax#enable-access-to-performance-counters ) is required to access the PMU from user mode.\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the the list of algorithms available -- either adding, removing, or renaming?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986513414","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141#issuecomment-986513414","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141","id":986513414,"node_id":"IC_kwDOA-eq3c46zQAG","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-12-06T07:38:48Z","updated_at":"2021-12-06T07:38:48Z","author_association":"MEMBER","body":"> @tedeaton Can I ask in which OS environment you did this?\r\n\r\nAnswering my own question: aarch64-Ubuntu20 on AWS installs `enable_ccr` just fine. \r\n\r\nWhen running the resultant code then, some questions come up: Before asking them below, can I ask you to check whether these figures are as you'd expect them? The first run is with `OQS_SPEED_USE_ARM_PMU=ON`, the second without.\r\n\r\n```\r\nubuntu@ip-172-31-17-142:~/liboqs/build$ ./tests/speed_kem Kyber512\r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-5.11.0-1022-aws\r\nCompiler:         gcc (10.3.0)\r\nCompile options:  [-mcpu=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.0\r\nGit commit:       b5cbb0d71a6f87f70198c986d85114beec1cb5ab\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1f  31 Mar 2020)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nCPU exts compile-time:  AES SHA2 NEON\r\n\r\nSpeed test\r\n==========\r\nStarted at 2021-12-06 06:50:26\r\nOperation                      | Iterations | Total time (s) | Time (us): mean | pop. stdev | CPU cycles: mean          | pop. stdev\r\n------------------------------ | ----------:| --------------:| ---------------:| ----------:| -------------------------:| ----------:\r\nKyber512                       |            |                |                 |            |                           |           \r\nkeygen                         |     133108 |          3.000 |          22.538 |      5.628 |                     32581 |      24735\r\nencaps                         |     115278 |          3.000 |          26.024 |      0.854 |                     32648 |      29978\r\ndecaps                         |     129473 |          3.000 |          23.171 |      0.645 |                     32752 |      26171\r\nEnded at 2021-12-06 06:50:35\r\nubuntu@ip-172-31-17-142:~/liboqs/build$ ../build-nopmu-gcc10/tests/speed_kem Kyber512\r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-5.11.0-1022-aws\r\nCompiler:         gcc (10.3.0)\r\nCompile options:  [-mcpu=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.0\r\nGit commit:       b5cbb0d71a6f87f70198c986d85114beec1cb5ab\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1f  31 Mar 2020)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nCPU exts compile-time:  AES SHA2 NEON\r\n\r\nSpeed test\r\n==========\r\nStarted at 2021-12-06 06:50:54\r\nOperation                      | Iterations | Total time (s) | Time (us): mean | pop. stdev | High-prec time (ns): mean | pop. stdev\r\n------------------------------ | ----------:| --------------:| ---------------:| ----------:| -------------------------:| ----------:\r\nKyber512                       |            |                |                 |            |                           |           \r\nkeygen                         |     144331 |          3.000 |          20.786 |      0.781 |                     20719 |        644\r\nencaps                         |     123267 |          3.000 |          24.338 |      0.773 |                     24272 |        662\r\ndecaps                         |     139472 |          3.000 |          21.510 |      0.655 |                     21446 |        445\r\nEnded at 2021-12-06 06:51:03\r\n```\r\n\r\nQuestions: \r\n\r\n1) Why does the runtime drop (nearly 10%) with `OQS_SPEED_USE_ARM_PMU=ON`? Does PMU read-out have such a large overhead?\r\n2) Would it be sensible to change our simple \"speed\" (iterations/runtime) display in https://openquantumsafe.org/benchmarking/visualization/speed_kem.html to showing the cycle-counts instead (now that we finally have it for both x64 and aarch64)? This possibly depending on the answer to the question above...\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986513414/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2021-12-06T07:38:48Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"19200299956","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141","id":1069021651,"node_id":"PR_kwDOA-eq3c4vR-4L","number":1141,"title":"Enabling use of ARM PMU for benchmarking when compiler flag is enabled","user":{"login":"tedeaton","id":7863838,"node_id":"MDQ6VXNlcjc4NjM4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/7863838?v=4","gravatar_id":"","url":"https://api.github.com/users/tedeaton","html_url":"https://github.com/tedeaton","followers_url":"https://api.github.com/users/tedeaton/followers","following_url":"https://api.github.com/users/tedeaton/following{/other_user}","gists_url":"https://api.github.com/users/tedeaton/gists{/gist_id}","starred_url":"https://api.github.com/users/tedeaton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tedeaton/subscriptions","organizations_url":"https://api.github.com/users/tedeaton/orgs","repos_url":"https://api.github.com/users/tedeaton/repos","events_url":"https://api.github.com/users/tedeaton/events{/privacy}","received_events_url":"https://api.github.com/users/tedeaton/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-12-02T01:07:57Z","updated_at":"2021-12-06T13:40:27Z","closed_at":"2021-12-02T18:28:29Z","author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1141","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1141.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1141.patch","merged_at":"2021-12-02T18:28:29Z"},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\nThis pull request enables the use of ARMv8's performance monitoring unit (PMU) in the benchmarking script to allow for a more precise cycle count on that architecture when possible. It is enabled by the OQS_SPEED_USE_ARM_PMU compiler flag. Note that loading a kernel module (such as https://github.com/mupq/pqax#enable-access-to-performance-counters ) is required to access the PMU from user mode.\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the the list of algorithms available -- either adding, removing, or renaming?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986787122","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141#issuecomment-986787122","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141","id":986787122,"node_id":"IC_kwDOA-eq3c460S0y","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-12-06T13:40:27Z","updated_at":"2021-12-06T13:40:27Z","author_association":"MEMBER","body":"And another very weird run result (Ubuntu-ARM64 on AWS) probably warranting the answer \"No\" to my second question above:\r\n\r\n```\r\nubuntu@ip-172-31-17-142:~/liboqs/build$ ./tests/speed_kem Kyber512\r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-5.11.0-1022-aws\r\nCompiler:         gcc (10.3.0)\r\nCompile options:  [-mcpu=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.0\r\nGit commit:       b5cbb0d71a6f87f70198c986d85114beec1cb5ab\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1f  31 Mar 2020)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nCPU exts compile-time:  AES SHA2 NEON\r\n\r\nSpeed test\r\n==========\r\nStarted at 2021-12-06 13:37:30\r\nOperation                      | Iterations | Total time (s) | Time (us): mean | pop. stdev | CPU cycles: mean          | pop. stdev\r\n------------------------------ | ----------:| --------------:| ---------------:| ----------:| -------------------------:| ----------:\r\nKyber512                       |            |                |                 |            |                           |           \r\nkeygen                         |     132182 |          3.000 |          22.696 |     13.299 |                     27137 |      25555\r\nencaps                         |     114048 |          3.000 |          26.305 |      1.103 |                     18426 |      27465\r\ndecaps                         |     125402 |          3.000 |          23.923 |     18.013 |           147100876138328 | 52091367556182272\r\nEnded at 2021-12-06 13:37:39\r\n```","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986787122/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2021-12-06T13:40:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"19200703983","type":"IssueCommentEvent","actor":{"id":7863838,"login":"tedeaton","display_login":"tedeaton","gravatar_id":"","url":"https://api.github.com/users/tedeaton","avatar_url":"https://avatars.githubusercontent.com/u/7863838?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141","id":1069021651,"node_id":"PR_kwDOA-eq3c4vR-4L","number":1141,"title":"Enabling use of ARM PMU for benchmarking when compiler flag is enabled","user":{"login":"tedeaton","id":7863838,"node_id":"MDQ6VXNlcjc4NjM4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/7863838?v=4","gravatar_id":"","url":"https://api.github.com/users/tedeaton","html_url":"https://github.com/tedeaton","followers_url":"https://api.github.com/users/tedeaton/followers","following_url":"https://api.github.com/users/tedeaton/following{/other_user}","gists_url":"https://api.github.com/users/tedeaton/gists{/gist_id}","starred_url":"https://api.github.com/users/tedeaton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tedeaton/subscriptions","organizations_url":"https://api.github.com/users/tedeaton/orgs","repos_url":"https://api.github.com/users/tedeaton/repos","events_url":"https://api.github.com/users/tedeaton/events{/privacy}","received_events_url":"https://api.github.com/users/tedeaton/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-12-02T01:07:57Z","updated_at":"2021-12-06T14:03:44Z","closed_at":"2021-12-02T18:28:29Z","author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1141","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1141.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1141.patch","merged_at":"2021-12-02T18:28:29Z"},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\nThis pull request enables the use of ARMv8's performance monitoring unit (PMU) in the benchmarking script to allow for a more precise cycle count on that architecture when possible. It is enabled by the OQS_SPEED_USE_ARM_PMU compiler flag. Note that loading a kernel module (such as https://github.com/mupq/pqax#enable-access-to-performance-counters ) is required to access the PMU from user mode.\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the the list of algorithms available -- either adding, removing, or renaming?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986805043","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141#issuecomment-986805043","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141","id":986805043,"node_id":"IC_kwDOA-eq3c460XMz","user":{"login":"tedeaton","id":7863838,"node_id":"MDQ6VXNlcjc4NjM4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/7863838?v=4","gravatar_id":"","url":"https://api.github.com/users/tedeaton","html_url":"https://github.com/tedeaton","followers_url":"https://api.github.com/users/tedeaton/followers","following_url":"https://api.github.com/users/tedeaton/following{/other_user}","gists_url":"https://api.github.com/users/tedeaton/gists{/gist_id}","starred_url":"https://api.github.com/users/tedeaton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tedeaton/subscriptions","organizations_url":"https://api.github.com/users/tedeaton/orgs","repos_url":"https://api.github.com/users/tedeaton/repos","events_url":"https://api.github.com/users/tedeaton/events{/privacy}","received_events_url":"https://api.github.com/users/tedeaton/received_events","type":"User","site_admin":false},"created_at":"2021-12-06T14:03:44Z","updated_at":"2021-12-06T14:03:44Z","author_association":"COLLABORATOR","body":"> Why does the runtime drop (nearly 10%) with OQS_SPEED_USE_ARM_PMU=ON? Does PMU read-out have such a large overhead?\r\n\r\nI'm not entirely sure. This was the reason we originally started investigating benchmarking on ARM, because we were noticing strange overhead on AES. It's possible(?) that the use of `clock_gettime` has more overhead than using the PMU, causing the difference.\r\n\r\n> And another very weird run result (Ubuntu-ARM64 on AWS)\r\n\r\nInteresting. I notice that `log_2( 147100876138328 * 125402)` is approximately equal to 64. I suspect that in one of the executions the PMU overflowed and reset, causing the cycle count to be 2^64. for that one execution. I should have checked for overflow, that's a mistake on my part. But hopefully it should be an easy fix, I'll check it out today.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986805043/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2021-12-06T14:03:44Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"19201351961","type":"IssueCommentEvent","actor":{"id":7863838,"login":"tedeaton","display_login":"tedeaton","gravatar_id":"","url":"https://api.github.com/users/tedeaton","avatar_url":"https://avatars.githubusercontent.com/u/7863838?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141","id":1069021651,"node_id":"PR_kwDOA-eq3c4vR-4L","number":1141,"title":"Enabling use of ARM PMU for benchmarking when compiler flag is enabled","user":{"login":"tedeaton","id":7863838,"node_id":"MDQ6VXNlcjc4NjM4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/7863838?v=4","gravatar_id":"","url":"https://api.github.com/users/tedeaton","html_url":"https://github.com/tedeaton","followers_url":"https://api.github.com/users/tedeaton/followers","following_url":"https://api.github.com/users/tedeaton/following{/other_user}","gists_url":"https://api.github.com/users/tedeaton/gists{/gist_id}","starred_url":"https://api.github.com/users/tedeaton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tedeaton/subscriptions","organizations_url":"https://api.github.com/users/tedeaton/orgs","repos_url":"https://api.github.com/users/tedeaton/repos","events_url":"https://api.github.com/users/tedeaton/events{/privacy}","received_events_url":"https://api.github.com/users/tedeaton/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-12-02T01:07:57Z","updated_at":"2021-12-06T14:37:42Z","closed_at":"2021-12-02T18:28:29Z","author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1141","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1141.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1141.patch","merged_at":"2021-12-02T18:28:29Z"},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\nThis pull request enables the use of ARMv8's performance monitoring unit (PMU) in the benchmarking script to allow for a more precise cycle count on that architecture when possible. It is enabled by the OQS_SPEED_USE_ARM_PMU compiler flag. Note that loading a kernel module (such as https://github.com/mupq/pqax#enable-access-to-performance-counters ) is required to access the PMU from user mode.\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the the list of algorithms available -- either adding, removing, or renaming?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986835727","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141#issuecomment-986835727","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141","id":986835727,"node_id":"IC_kwDOA-eq3c460esP","user":{"login":"tedeaton","id":7863838,"node_id":"MDQ6VXNlcjc4NjM4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/7863838?v=4","gravatar_id":"","url":"https://api.github.com/users/tedeaton","html_url":"https://github.com/tedeaton","followers_url":"https://api.github.com/users/tedeaton/followers","following_url":"https://api.github.com/users/tedeaton/following{/other_user}","gists_url":"https://api.github.com/users/tedeaton/gists{/gist_id}","starred_url":"https://api.github.com/users/tedeaton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tedeaton/subscriptions","organizations_url":"https://api.github.com/users/tedeaton/orgs","repos_url":"https://api.github.com/users/tedeaton/repos","events_url":"https://api.github.com/users/tedeaton/events{/privacy}","received_events_url":"https://api.github.com/users/tedeaton/received_events","type":"User","site_admin":false},"created_at":"2021-12-06T14:37:42Z","updated_at":"2021-12-06T14:37:42Z","author_association":"COLLABORATOR","body":"Ah, my apologies, I misread your previous outputs. Yes, that is very strange, and I have no theories why the time is increasing. Since the only difference is reading off the PMU vs. using `clock_gettime`  I suppose the only reasonable explanation is that there's some overhead reading the PMU.\r\n\r\nThe PMU should still give a more accurate comparison though (as long as I can fix that bug). For example, when benchmarking AES we were seeing a less than 2x improvement in clock time for C vs. intrinsics, but over 20x improvement on cycle counts (which was what was expected).","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986835727/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2021-12-06T14:37:42Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"19202341823","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141","id":1069021651,"node_id":"PR_kwDOA-eq3c4vR-4L","number":1141,"title":"Enabling use of ARM PMU for benchmarking when compiler flag is enabled","user":{"login":"tedeaton","id":7863838,"node_id":"MDQ6VXNlcjc4NjM4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/7863838?v=4","gravatar_id":"","url":"https://api.github.com/users/tedeaton","html_url":"https://github.com/tedeaton","followers_url":"https://api.github.com/users/tedeaton/followers","following_url":"https://api.github.com/users/tedeaton/following{/other_user}","gists_url":"https://api.github.com/users/tedeaton/gists{/gist_id}","starred_url":"https://api.github.com/users/tedeaton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tedeaton/subscriptions","organizations_url":"https://api.github.com/users/tedeaton/orgs","repos_url":"https://api.github.com/users/tedeaton/repos","events_url":"https://api.github.com/users/tedeaton/events{/privacy}","received_events_url":"https://api.github.com/users/tedeaton/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2021-12-02T01:07:57Z","updated_at":"2021-12-06T15:28:17Z","closed_at":"2021-12-02T18:28:29Z","author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1141","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1141.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1141.patch","merged_at":"2021-12-02T18:28:29Z"},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\nThis pull request enables the use of ARMv8's performance monitoring unit (PMU) in the benchmarking script to allow for a more precise cycle count on that architecture when possible. It is enabled by the OQS_SPEED_USE_ARM_PMU compiler flag. Note that loading a kernel module (such as https://github.com/mupq/pqax#enable-access-to-performance-counters ) is required to access the PMU from user mode.\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the the list of algorithms available -- either adding, removing, or renaming?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986883642","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141#issuecomment-986883642","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141","id":986883642,"node_id":"IC_kwDOA-eq3c460qY6","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-12-06T15:28:17Z","updated_at":"2021-12-06T15:28:17Z","author_association":"MEMBER","body":"> when benchmarking AES we were seeing a less than 2x improvement in clock time for C vs. intrinsics, but over 20x improvement on cycle counts (which was what was expected).\r\n\r\nYikes. That's _a lot_. Which configurations did you compare to each other to get these differentials? If  cycle count improves 20x how can clock time (regardless of measurement mechanism -- even a watch should do if done 1M times :) only improve 2x? Or is my assumption flawed that there's always the same & fixed number of cycles in a given clock period? Is the optimized code (and architecture) 10x parallelized? But even then, one should see 20x more iterations in the same test execution period if the cycle count drops 20x, no?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986883642/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2021-12-06T15:28:17Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"19202470693","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141","id":1069021651,"node_id":"PR_kwDOA-eq3c4vR-4L","number":1141,"title":"Enabling use of ARM PMU for benchmarking when compiler flag is enabled","user":{"login":"tedeaton","id":7863838,"node_id":"MDQ6VXNlcjc4NjM4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/7863838?v=4","gravatar_id":"","url":"https://api.github.com/users/tedeaton","html_url":"https://github.com/tedeaton","followers_url":"https://api.github.com/users/tedeaton/followers","following_url":"https://api.github.com/users/tedeaton/following{/other_user}","gists_url":"https://api.github.com/users/tedeaton/gists{/gist_id}","starred_url":"https://api.github.com/users/tedeaton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tedeaton/subscriptions","organizations_url":"https://api.github.com/users/tedeaton/orgs","repos_url":"https://api.github.com/users/tedeaton/repos","events_url":"https://api.github.com/users/tedeaton/events{/privacy}","received_events_url":"https://api.github.com/users/tedeaton/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2021-12-02T01:07:57Z","updated_at":"2021-12-06T15:35:27Z","closed_at":"2021-12-02T18:28:29Z","author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1141","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1141.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1141.patch","merged_at":"2021-12-02T18:28:29Z"},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\nThis pull request enables the use of ARMv8's performance monitoring unit (PMU) in the benchmarking script to allow for a more precise cycle count on that architecture when possible. It is enabled by the OQS_SPEED_USE_ARM_PMU compiler flag. Note that loading a kernel module (such as https://github.com/mupq/pqax#enable-access-to-performance-counters ) is required to access the PMU from user mode.\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the the list of algorithms available -- either adding, removing, or renaming?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986889913","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141#issuecomment-986889913","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141","id":986889913,"node_id":"IC_kwDOA-eq3c460r65","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2021-12-06T15:35:27Z","updated_at":"2021-12-06T15:35:27Z","author_association":"MEMBER","body":"This sounds like a low-resolution clock versus a high-resolution cycle counter.  The way the [timing code](https://github.com/open-quantum-safe/liboqs/blob/main/tests/ds_benchmark.h) works is that it starts and stops the timer before each iteration.  With a low-resolution clock and many iterations, it would probably be better to start and stop the clock once at the beginning/end, which should minimize overhead and over many iterations the time observed with the low-resolution clock should approach that of the high-resolution cycle counter.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986889913/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2021-12-06T15:35:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"19203032405","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1145","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1145/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1145/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1145/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1145","id":1072180507,"node_id":"I_kwDOA-eq3c4_6C0b","number":1145,"title":"Documenting build flags in test/speed config output","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-12-06T13:55:40Z","updated_at":"2021-12-06T16:05:27Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"When looking at a test config output, not all [build options](https://github.com/open-quantum-safe/liboqs/wiki/Customizing-liboqs) can be seen and some have to be (but can be) inferred. This issue to ask whether all OQS_ build options should be explicitly output by https://github.com/open-quantum-safe/liboqs/blob/main/tests/system_info.c:\r\n\r\n```\r\n./tests/speed_kem Kyber512\r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-5.11.0-1022-aws\r\nCompiler:         gcc (10.3.0)\r\nCompile options:  [-mcpu=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.0\r\nGit commit:       b5cbb0d71a6f87f70198c986d85114beec1cb5ab\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1f  31 Mar 2020)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nCPU exts compile-time:  AES SHA2 NEON\r\n```\r\n\r\ndoesn't show whether OQS_SPEED_USE_ARM_PMU had been set. \r\n\r\nAs a practical riddle along these lines: Who can explain/tell the performance difference in (terms of) configs between these two runs of `speed_kem`?\r\n```\r\n$ \r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-5.11.0-1022-aws\r\nCompiler:         gcc (10.2.1)\r\nCompile options:  [-mcpu=cortex-a72;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.0\r\nGit commit:       b5cbb0d71a6f87f70198c986d85114beec1cb5ab\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1k  25 Mar 2021)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nCPU exts compile-time:  NEON\r\n\r\nSpeed test\r\n==========\r\nStarted at 2021-12-06 13:47:34\r\nOperation                      | Iterations | Total time (s) | Time (us): mean | pop. stdev | CPU cycles: mean          | pop. stdev\r\n------------------------------ | ----------:| --------------:| ---------------:| ----------:| -------------------------:| ----------:\r\nKyber512                       |            |                |                 |            |                           |           \r\nkeygen                         |     131591 |          3.000 |          22.798 |     22.217 |                     13164 |      21927\r\nencaps                         |     113083 |          3.000 |          26.529 |      1.250 |                     37924 |      29535\r\ndecaps                         |     129931 |          3.000 |          23.089 |      0.815 |                     31669 |      26208\r\nEnded at 2021-12-06 13:47:43\r\n\r\n\r\n$ \r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-5.11.0-1022-aws\r\nCompiler:         gcc (10.2.1)\r\nCompile options:  [-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.0\r\nGit commit:       b5cbb0d71a6f87f70198c986d85114beec1cb5ab\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1k  25 Mar 2021)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nCPU exts active:  AES SHA2 NEON\r\nSpeed test\r\n==========\r\nStarted at 2021-12-06 13:48:19\r\nOperation                      | Iterations | Total time (s) | Time (us): mean | pop. stdev | CPU cycles: mean          | pop. stdev\r\n------------------------------ | ----------:| --------------:| ---------------:| ----------:| -------------------------:| ----------:\r\nKyber512                       |            |                |                 |            |                           |           \r\nkeygen                         |      63667 |          3.000 |          47.121 |     18.503 |                     63673 |      52375\r\nencaps                         |      51177 |          3.000 |          58.621 |      3.699 |                     83904 |      65434\r\ndecaps                         |      43890 |          3.000 |          68.353 |      3.427 |                     97736 |      78182\r\nEnded at 2021-12-06 13:48:28\r\n```\r\n\r\n??? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1145/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1145/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986916764","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1145#issuecomment-986916764","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1145","id":986916764,"node_id":"IC_kwDOA-eq3c460yec","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2021-12-06T16:05:27Z","updated_at":"2021-12-06T16:05:27Z","author_association":"MEMBER","body":"> When looking at a test config output, not all [build options](https://github.com/open-quantum-safe/liboqs/wiki/Customizing-liboqs) can be seen and some have to be (but can be) inferred. This issue to ask whether all OQS_ build options should be explicitly output by https://github.com/open-quantum-safe/liboqs/blob/main/tests/system_info.c:\r\n\r\nIt seems like that would be worthwhile to avoid ambiguity / confusion.\r\n\r\n> As a practical riddle along these lines: Who can explain/tell the performance difference in (terms of) configs between these two runs of `speed_kem`?\r\n> \r\n> ```\r\n> $ \r\n> Configuration info\r\n> ==================\r\n> Target platform:  aarch64-Linux-5.11.0-1022-aws\r\n> Compiler:         gcc (10.2.1)\r\n> Compile options:  [-mcpu=cortex-a72;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\n> OQS version:      0.7.0\r\n> Git commit:       b5cbb0d71a6f87f70198c986d85114beec1cb5ab\r\n> OpenSSL enabled:  Yes (OpenSSL 1.1.1k  25 Mar 2021)\r\n> AES:              OpenSSL\r\n> SHA-2:            OpenSSL\r\n> SHA-3:            C\r\n> CPU exts compile-time:  NEON\r\n> \r\n> Speed test\r\n> ==========\r\n> Started at 2021-12-06 13:47:34\r\n> Operation                      | Iterations | Total time (s) | Time (us): mean | pop. stdev | CPU cycles: mean          | pop. stdev\r\n> ------------------------------ | ----------:| --------------:| ---------------:| ----------:| -------------------------:| ----------:\r\n> Kyber512                       |            |                |                 |            |                           |           \r\n> keygen                         |     131591 |          3.000 |          22.798 |     22.217 |                     13164 |      21927\r\n> encaps                         |     113083 |          3.000 |          26.529 |      1.250 |                     37924 |      29535\r\n> decaps                         |     129931 |          3.000 |          23.089 |      0.815 |                     31669 |      26208\r\n> Ended at 2021-12-06 13:47:43\r\n> \r\n> \r\n> $ \r\n> Configuration info\r\n> ==================\r\n> Target platform:  aarch64-Linux-5.11.0-1022-aws\r\n> Compiler:         gcc (10.2.1)\r\n> Compile options:  [-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\n> OQS version:      0.7.0\r\n> Git commit:       b5cbb0d71a6f87f70198c986d85114beec1cb5ab\r\n> OpenSSL enabled:  Yes (OpenSSL 1.1.1k  25 Mar 2021)\r\n> AES:              OpenSSL\r\n> SHA-2:            OpenSSL\r\n> SHA-3:            C\r\n> CPU exts active:  AES SHA2 NEON\r\n> Speed test\r\n> ==========\r\n> Started at 2021-12-06 13:48:19\r\n> Operation                      | Iterations | Total time (s) | Time (us): mean | pop. stdev | CPU cycles: mean          | pop. stdev\r\n> ------------------------------ | ----------:| --------------:| ---------------:| ----------:| -------------------------:| ----------:\r\n> Kyber512                       |            |                |                 |            |                           |           \r\n> keygen                         |      63667 |          3.000 |          47.121 |     18.503 |                     63673 |      52375\r\n> encaps                         |      51177 |          3.000 |          58.621 |      3.699 |                     83904 |      65434\r\n> decaps                         |      43890 |          3.000 |          68.353 |      3.427 |                     97736 |      78182\r\n> Ended at 2021-12-06 13:48:28\r\n> ```\r\n> \r\n> ???\r\n\r\nI see that AES and SHA2 extensions are active on the latter, which \\*checks notes\\* makes things slower?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986916764/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2021-12-06T16:05:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"19203749827","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141","id":1069021651,"node_id":"PR_kwDOA-eq3c4vR-4L","number":1141,"title":"Enabling use of ARM PMU for benchmarking when compiler flag is enabled","user":{"login":"tedeaton","id":7863838,"node_id":"MDQ6VXNlcjc4NjM4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/7863838?v=4","gravatar_id":"","url":"https://api.github.com/users/tedeaton","html_url":"https://github.com/tedeaton","followers_url":"https://api.github.com/users/tedeaton/followers","following_url":"https://api.github.com/users/tedeaton/following{/other_user}","gists_url":"https://api.github.com/users/tedeaton/gists{/gist_id}","starred_url":"https://api.github.com/users/tedeaton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tedeaton/subscriptions","organizations_url":"https://api.github.com/users/tedeaton/orgs","repos_url":"https://api.github.com/users/tedeaton/repos","events_url":"https://api.github.com/users/tedeaton/events{/privacy}","received_events_url":"https://api.github.com/users/tedeaton/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2021-12-02T01:07:57Z","updated_at":"2021-12-06T16:44:40Z","closed_at":"2021-12-02T18:28:29Z","author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1141","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1141.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1141.patch","merged_at":"2021-12-02T18:28:29Z"},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\nThis pull request enables the use of ARMv8's performance monitoring unit (PMU) in the benchmarking script to allow for a more precise cycle count on that architecture when possible. It is enabled by the OQS_SPEED_USE_ARM_PMU compiler flag. Note that loading a kernel module (such as https://github.com/mupq/pqax#enable-access-to-performance-counters ) is required to access the PMU from user mode.\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the the list of algorithms available -- either adding, removing, or renaming?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986953396","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1141#issuecomment-986953396","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1141","id":986953396,"node_id":"IC_kwDOA-eq3c4607a0","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-12-06T16:44:40Z","updated_at":"2021-12-06T16:44:40Z","author_association":"MEMBER","body":"Thanks for the explanation, @dstebila. I should have read the code earlier, sorry. In my mind, a test timed to run for 3 secs would be started to run in the tightest possible loop, never again looking at counters (or timers) until a (timer/interrupt) occurs in order to not unduly influence the results with counter/timer-checking code. This indeed isn't the case with ds_benchmark. \r\n\r\nWould it be worth while considering changing the code to my understanding (at least in the case when there's no high-precision cycle counter available)? Or is there a reason speaking against using a (CPU-)timer interrupt? Something like the following \"pseudo\"code:\r\n\r\n```\r\nstatic int done = 0;\r\n\r\nstatic void handler(int sig, siginfo_t *si, void *uc)\r\n{\r\n   done = 1;\r\n}\r\n\r\n// main test code\r\n    timer_t timerid;\r\n    struct sigevent sev;\r\n    struct itimerspec its;\r\n    long long freq_nanosecs = 3000000000;\r\n    sigset_t mask;\r\n    struct sigaction sa;\r\n\r\n    sa.sa_flags = SA_SIGINFO;\r\n    sa.sa_sigaction = handler;\r\n    sigemptyset(&sa.sa_mask);\r\n    if (sigaction(SIGRTMIN, &sa, NULL) == -1)\r\n        errExit(\"sigaction\");\r\n\r\n    sev.sigev_notify = SIGEV_SIGNAL;\r\n    sev.sigev_signo = SIGRTMIN;\r\n    sev.sigev_value.sival_ptr = &timerid;\r\n    if (timer_create(CLOCK_REALTIME, &sev, &timerid) == -1)\r\n        errExit(\"timer_create\");\r\n    \r\n    its.it_value.tv_sec = freq_nanosecs / 1000000000;\r\n    its.it_value.tv_nsec = freq_nanosecs % 1000000000;\r\n    its.it_interval.tv_sec = its.it_value.tv_sec;\r\n    its.it_interval.tv_nsec = its.it_value.tv_nsec;\r\n\r\n    if (timer_settime(timerid, 0, &its, NULL) == -1)\r\n         errExit(\"timer_settime\");\r\n\r\n    while(!done) tstcnt++; //do the real op-under-test here\r\n\r\n    printf(\"Cnt = %d\\n\", tstcnt);\r\n```\r\n\r\nAdmittedly more convoluted than ds_benchmark -- and less portable. But arguably more accurate, no? \r\n\r\nFrom a portability perspective, is it better to rely on timer interrupts or specific CPU features (that possibly even need to be activated) for cycle counting to work correctly? Maybe something to discuss in the context of https://github.com/open-quantum-safe/profiling/discussions/67 ?\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986953396/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2021-12-06T16:44:40Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"19203926403","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1145","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1145/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1145/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1145/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1145","id":1072180507,"node_id":"I_kwDOA-eq3c4_6C0b","number":1145,"title":"Documenting build flags in test/speed config output","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-12-06T13:55:40Z","updated_at":"2021-12-06T16:54:50Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"When looking at a test config output, not all [build options](https://github.com/open-quantum-safe/liboqs/wiki/Customizing-liboqs) can be seen and some have to be (but can be) inferred. This issue to ask whether all OQS_ build options should be explicitly output by https://github.com/open-quantum-safe/liboqs/blob/main/tests/system_info.c:\r\n\r\n```\r\n./tests/speed_kem Kyber512\r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-5.11.0-1022-aws\r\nCompiler:         gcc (10.3.0)\r\nCompile options:  [-mcpu=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.0\r\nGit commit:       b5cbb0d71a6f87f70198c986d85114beec1cb5ab\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1f  31 Mar 2020)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nCPU exts compile-time:  AES SHA2 NEON\r\n```\r\n\r\ndoesn't show whether OQS_SPEED_USE_ARM_PMU had been set. \r\n\r\nAs a practical riddle along these lines: Who can explain/tell the performance difference in (terms of) configs between these two runs of `speed_kem`?\r\n```\r\n$ \r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-5.11.0-1022-aws\r\nCompiler:         gcc (10.2.1)\r\nCompile options:  [-mcpu=cortex-a72;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.0\r\nGit commit:       b5cbb0d71a6f87f70198c986d85114beec1cb5ab\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1k  25 Mar 2021)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nCPU exts compile-time:  NEON\r\n\r\nSpeed test\r\n==========\r\nStarted at 2021-12-06 13:47:34\r\nOperation                      | Iterations | Total time (s) | Time (us): mean | pop. stdev | CPU cycles: mean          | pop. stdev\r\n------------------------------ | ----------:| --------------:| ---------------:| ----------:| -------------------------:| ----------:\r\nKyber512                       |            |                |                 |            |                           |           \r\nkeygen                         |     131591 |          3.000 |          22.798 |     22.217 |                     13164 |      21927\r\nencaps                         |     113083 |          3.000 |          26.529 |      1.250 |                     37924 |      29535\r\ndecaps                         |     129931 |          3.000 |          23.089 |      0.815 |                     31669 |      26208\r\nEnded at 2021-12-06 13:47:43\r\n\r\n\r\n$ \r\nConfiguration info\r\n==================\r\nTarget platform:  aarch64-Linux-5.11.0-1022-aws\r\nCompiler:         gcc (10.2.1)\r\nCompile options:  [-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.0\r\nGit commit:       b5cbb0d71a6f87f70198c986d85114beec1cb5ab\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1k  25 Mar 2021)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nCPU exts active:  AES SHA2 NEON\r\nSpeed test\r\n==========\r\nStarted at 2021-12-06 13:48:19\r\nOperation                      | Iterations | Total time (s) | Time (us): mean | pop. stdev | CPU cycles: mean          | pop. stdev\r\n------------------------------ | ----------:| --------------:| ---------------:| ----------:| -------------------------:| ----------:\r\nKyber512                       |            |                |                 |            |                           |           \r\nkeygen                         |      63667 |          3.000 |          47.121 |     18.503 |                     63673 |      52375\r\nencaps                         |      51177 |          3.000 |          58.621 |      3.699 |                     83904 |      65434\r\ndecaps                         |      43890 |          3.000 |          68.353 |      3.427 |                     97736 |      78182\r\nEnded at 2021-12-06 13:48:28\r\n```\r\n\r\n??? ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1145/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1145/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986962041","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1145#issuecomment-986962041","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1145","id":986962041,"node_id":"IC_kwDOA-eq3c4609h5","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-12-06T16:54:49Z","updated_at":"2021-12-06T16:54:49Z","author_association":"MEMBER","body":"> It seems like that would be worthwhile to avoid ambiguity / confusion.\r\n\r\nWorking on it.\r\n\r\n> I see that AES and SHA2 extensions are active on the latter, which *checks notes* makes things slower?\r\n\r\nWeird, AES and SHA2 extensions present that make things slower?!? Shouldn't stuff with extensions available be _faster_? We might at least want to phrase the output differently....\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/986962041/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2021-12-06T16:54:50Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
