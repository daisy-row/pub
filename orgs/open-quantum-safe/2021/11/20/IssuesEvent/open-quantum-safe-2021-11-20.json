{"id":"18980571019","type":"IssuesEvent","actor":{"id":39408723,"login":"jhocce","display_login":"jhocce","gravatar_id":"","url":"https://api.github.com/users/jhocce","avatar_url":"https://avatars.githubusercontent.com/u/39408723?"},"repo":{"id":162497174,"name":"open-quantum-safe/liboqs-python","url":"https://api.github.com/repos/open-quantum-safe/liboqs-python"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-python/issues/41","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs-python","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs-python/issues/41/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs-python/issues/41/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs-python/issues/41/events","html_url":"https://github.com/open-quantum-safe/liboqs-python/issues/41","id":1059221487,"node_id":"I_kwDOCa-Cls4_Im_v","number":41,"title":"api-based services with Libqs for testing","user":{"login":"jhocce","id":39408723,"node_id":"MDQ6VXNlcjM5NDA4NzIz","avatar_url":"https://avatars.githubusercontent.com/u/39408723?v=4","gravatar_id":"","url":"https://api.github.com/users/jhocce","html_url":"https://github.com/jhocce","followers_url":"https://api.github.com/users/jhocce/followers","following_url":"https://api.github.com/users/jhocce/following{/other_user}","gists_url":"https://api.github.com/users/jhocce/gists{/gist_id}","starred_url":"https://api.github.com/users/jhocce/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jhocce/subscriptions","organizations_url":"https://api.github.com/users/jhocce/orgs","repos_url":"https://api.github.com/users/jhocce/repos","events_url":"https://api.github.com/users/jhocce/events{/privacy}","received_events_url":"https://api.github.com/users/jhocce/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-11-20T20:16:30Z","updated_at":"2021-11-20T20:16:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello!! I had the following problem at the time of de-encapsulating the key using the methods described in the documentation, creating 2 API services with Django Rest Framework, one to create public_key, ciphertext and another to de-encapsulate using these variables, the problem comes in that at the time of using These variables do not get the client's secret, the result is a different value despite having public_key and correct ciphertext, isn't it okay to do this separately? What am I doing wrong???\r\n\r\n post data: I have used \"binascii.hexlify / binascii.unhexlify\" to send and receive these strings to the frontend","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-python/issues/41/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs-python/issues/41/timeline","performed_via_github_app":null}},"public":true,"created_at":"2021-11-20T20:16:30Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
