{"id":"18990797502","type":"IssuesEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1132","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1132/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1132/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1132/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1132","id":1059762670,"node_id":"I_kwDOA-eq3c4_KrHu","number":1132,"title":"Constant time checks running too long","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-11-22T06:58:05Z","updated_at":"2021-11-22T06:58:05Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"After the addition of new algorithms, the weekly constant time tests are running too long again and [thus fail](https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/1869/workflows/40be8f05-6226-4ec6-8c79-828050b5578b/jobs/16119)\r\n\r\nI'd suggest to eliminate another algorithm subset from these weekly runs, namely the \"Classic-McEliece-6*\" set: This still tests McEliece sufficiently, but should shave off substantial test time.\r\n\r\nAlternative proposals welcome.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1132/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1132/timeline","performed_via_github_app":null}},"public":true,"created_at":"2021-11-22T06:58:05Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"18997464296","type":"IssuesEvent","actor":{"id":39408723,"login":"jhocce","display_login":"jhocce","gravatar_id":"","url":"https://api.github.com/users/jhocce","avatar_url":"https://avatars.githubusercontent.com/u/39408723?"},"repo":{"id":162497174,"name":"open-quantum-safe/liboqs-python","url":"https://api.github.com/repos/open-quantum-safe/liboqs-python"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-python/issues/41","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs-python","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs-python/issues/41/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs-python/issues/41/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs-python/issues/41/events","html_url":"https://github.com/open-quantum-safe/liboqs-python/issues/41","id":1059221487,"node_id":"I_kwDOCa-Cls4_Im_v","number":41,"title":"api-based services with Libqs for testing","user":{"login":"jhocce","id":39408723,"node_id":"MDQ6VXNlcjM5NDA4NzIz","avatar_url":"https://avatars.githubusercontent.com/u/39408723?v=4","gravatar_id":"","url":"https://api.github.com/users/jhocce","html_url":"https://github.com/jhocce","followers_url":"https://api.github.com/users/jhocce/followers","following_url":"https://api.github.com/users/jhocce/following{/other_user}","gists_url":"https://api.github.com/users/jhocce/gists{/gist_id}","starred_url":"https://api.github.com/users/jhocce/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jhocce/subscriptions","organizations_url":"https://api.github.com/users/jhocce/orgs","repos_url":"https://api.github.com/users/jhocce/repos","events_url":"https://api.github.com/users/jhocce/events{/privacy}","received_events_url":"https://api.github.com/users/jhocce/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-11-20T20:16:30Z","updated_at":"2021-11-22T14:07:29Z","closed_at":"2021-11-22T14:07:29Z","author_association":"NONE","active_lock_reason":null,"body":"Hello!! I had the following problem at the time of de-encapsulating the key using the methods described in the documentation, creating 2 API services with Django Rest Framework, one to create public_key, ciphertext and another to de-encapsulate using these variables, the problem comes in that at the time of using These variables do not get the client's secret, the result is a different value despite having public_key and correct ciphertext, isn't it okay to do this separately? What am I doing wrong???\r\n\r\n post data: I have used \"binascii.hexlify / binascii.unhexlify\" to send and receive these strings to the frontend","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-python/issues/41/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs-python/issues/41/timeline","performed_via_github_app":null}},"public":true,"created_at":"2021-11-22T14:07:29Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"18997988198","type":"IssuesEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1129","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1129/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1129/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1129/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1129","id":1058693044,"node_id":"I_kwDOA-eq3c4_Gl-0","number":1129,"title":"CR+LF line endings in some of files","user":{"login":"merkys","id":10404021,"node_id":"MDQ6VXNlcjEwNDA0MDIx","avatar_url":"https://avatars.githubusercontent.com/u/10404021?v=4","gravatar_id":"","url":"https://api.github.com/users/merkys","html_url":"https://github.com/merkys","followers_url":"https://api.github.com/users/merkys/followers","following_url":"https://api.github.com/users/merkys/following{/other_user}","gists_url":"https://api.github.com/users/merkys/gists{/gist_id}","starred_url":"https://api.github.com/users/merkys/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merkys/subscriptions","organizations_url":"https://api.github.com/users/merkys/orgs","repos_url":"https://api.github.com/users/merkys/repos","events_url":"https://api.github.com/users/merkys/events{/privacy}","received_events_url":"https://api.github.com/users/merkys/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-11-19T16:11:21Z","updated_at":"2021-11-22T14:35:07Z","closed_at":"2021-11-22T14:35:07Z","author_association":"NONE","active_lock_reason":null,"body":"I have noticed that `appveyor.yml` and `src/kem/sike/external/P751/AMD64/fp_x64_asm.S` have CR+LF (`\\r\\n`) line endings. While this is a very minute issue, some of tools employed in Debian packaging have minor problems with it (I should probably find a way to deal with them too). But if there is no difference, maybe the same newline convention could be used throughout the project? If this could not be done for `appveyor.yml` due to usage in Windows, maybe then line endings could be unified throughout all `*asm.S` files?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1129/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1129/timeline","performed_via_github_app":null}},"public":true,"created_at":"2021-11-22T14:35:08Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"18998068552","type":"IssuesEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1132","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1132/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1132/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1132/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1132","id":1059762670,"node_id":"I_kwDOA-eq3c4_KrHu","number":1132,"title":"Constant time checks running too long","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-11-22T06:58:05Z","updated_at":"2021-11-22T14:39:31Z","closed_at":"2021-11-22T14:39:31Z","author_association":"MEMBER","active_lock_reason":null,"body":"After the addition of new algorithms, the weekly constant time tests are running too long again and [thus fail](https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/1869/workflows/40be8f05-6226-4ec6-8c79-828050b5578b/jobs/16119)\r\n\r\nI'd suggest to eliminate another algorithm subset from these weekly runs, namely the \"Classic-McEliece-6*\" set: This still tests McEliece sufficiently, but should shave off substantial test time.\r\n\r\nAlternative proposals welcome.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1132/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1132/timeline","performed_via_github_app":null}},"public":true,"created_at":"2021-11-22T14:39:31Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
