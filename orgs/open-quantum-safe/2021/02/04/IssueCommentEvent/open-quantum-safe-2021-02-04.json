{"id":"15061069256","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/275","id":800941831,"node_id":"MDU6SXNzdWU4MDA5NDE4MzE=","number":275,"title":"Unable to find quantum based ciphersuite in openssl","user":{"login":"iamsoze","id":66254213,"node_id":"MDQ6VXNlcjY2MjU0MjEz","avatar_url":"https://avatars.githubusercontent.com/u/66254213?v=4","gravatar_id":"","url":"https://api.github.com/users/iamsoze","html_url":"https://github.com/iamsoze","followers_url":"https://api.github.com/users/iamsoze/followers","following_url":"https://api.github.com/users/iamsoze/following{/other_user}","gists_url":"https://api.github.com/users/iamsoze/gists{/gist_id}","starred_url":"https://api.github.com/users/iamsoze/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iamsoze/subscriptions","organizations_url":"https://api.github.com/users/iamsoze/orgs","repos_url":"https://api.github.com/users/iamsoze/repos","events_url":"https://api.github.com/users/iamsoze/events{/privacy}","received_events_url":"https://api.github.com/users/iamsoze/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-02-04T05:21:22Z","updated_at":"2021-02-04T05:41:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have compiled [OQS-Openssl_1_1_1](https://github.com/open-quantum-safe/openssl) for Linux x86. I have followed the compilation steps as described (first liboqs and then openssl). The compilation was successful but when I run `apps/openssl ciphers` I can't see any ciphersuite with quantum algorithms. \r\n\r\n**==> apps/openssl ciphers**\r\n\r\n`TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:RSA-PSK-AES256-GCM-SHA384:DHE-PSK-AES256-GCM-SHA384:RSA-PSK-CHACHA20-POLY1305:DHE-PSK-CHACHA20-POLY1305:ECDHE-PSK-CHACHA20-POLY1305:AES256-GCM-SHA384:PSK-AES256-GCM-SHA384:PSK-CHACHA20-POLY1305:RSA-PSK-AES128-GCM-SHA256:DHE-PSK-AES128-GCM-SHA256:AES128-GCM-SHA256:PSK-AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:ECDHE-PSK-AES256-CBC-SHA384:ECDHE-PSK-AES256-CBC-SHA:SRP-RSA-AES-256-CBC-SHA:SRP-AES-256-CBC-SHA:RSA-PSK-AES256-CBC-SHA384:DHE-PSK-AES256-CBC-SHA384:RSA-PSK-AES256-CBC-SHA:DHE-PSK-AES256-CBC-SHA:AES256-SHA:PSK-AES256-CBC-SHA384:PSK-AES256-CBC-SHA:ECDHE-PSK-AES128-CBC-SHA256:ECDHE-PSK-AES128-CBC-SHA:SRP-RSA-AES-128-CBC-SHA:SRP-AES-128-CBC-SHA:RSA-PSK-AES128-CBC-SHA256:DHE-PSK-AES128-CBC-SHA256:RSA-PSK-AES128-CBC-SHA:DHE-PSK-AES128-CBC-SHA:AES128-SHA:PSK-AES128-CBC-SHA256:PSK-AES128-CBC-SHA`\r\n\r\nI am using this openssl to compile a SIP server ([Asterisk](https://www.asterisk.org/)). I would like to add support of quantum based ciphersuites in it. Can you please advice on how to do this?\r\n\r\nThank you.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/773045724","html_url":"https://github.com/open-quantum-safe/openssl/issues/275#issuecomment-773045724","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275","id":773045724,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzA0NTcyNA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T05:41:55Z","updated_at":"2021-02-04T05:41:55Z","author_association":"MEMBER","body":"The most practical way for me to learn about the way how quantum-safe algorithms are integrated into OQS-OpenSSL was by following the [Running](https://github.com/open-quantum-safe/openssl#running) section in the readme: You can see that it is done by way of specifying the algorithms as TLS1.3 groups (`-groups` or `-curves` option) when considering the quantum-safe key exchange mechanisms (not as ciphers). For the background on how things have been done, check out [this](https://github.com/open-quantum-safe/openssl/wiki/Integrating-PQC-into-TLS-1.3). Completed integrations are available in `oqs-demos` where you can see how to specify quantum-safe algorithms, e.g, [here](https://github.com/open-quantum-safe/oqs-demos/blob/main/httpd/USAGE.md#slightly-more-advanced-usage-options). A \"trick\" to see all OQS algs available in a compiled OQS-OpenSSL is to run `openssl speed test`: As such algorithm is unknown, the command will return the OQSKEM and OQSSIG algs available for use (as KEMs and SIGs, respectively).","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T05:41:55Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15061432413","type":"IssueCommentEvent","actor":{"id":66254213,"login":"iamsoze","display_login":"iamsoze","gravatar_id":"","url":"https://api.github.com/users/iamsoze","avatar_url":"https://avatars.githubusercontent.com/u/66254213?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/275","id":800941831,"node_id":"MDU6SXNzdWU4MDA5NDE4MzE=","number":275,"title":"Unable to find quantum based ciphersuite in openssl","user":{"login":"iamsoze","id":66254213,"node_id":"MDQ6VXNlcjY2MjU0MjEz","avatar_url":"https://avatars.githubusercontent.com/u/66254213?v=4","gravatar_id":"","url":"https://api.github.com/users/iamsoze","html_url":"https://github.com/iamsoze","followers_url":"https://api.github.com/users/iamsoze/followers","following_url":"https://api.github.com/users/iamsoze/following{/other_user}","gists_url":"https://api.github.com/users/iamsoze/gists{/gist_id}","starred_url":"https://api.github.com/users/iamsoze/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iamsoze/subscriptions","organizations_url":"https://api.github.com/users/iamsoze/orgs","repos_url":"https://api.github.com/users/iamsoze/repos","events_url":"https://api.github.com/users/iamsoze/events{/privacy}","received_events_url":"https://api.github.com/users/iamsoze/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-04T05:21:22Z","updated_at":"2021-02-04T06:27:46Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have compiled [OQS-Openssl_1_1_1](https://github.com/open-quantum-safe/openssl) for Linux x86. I have followed the compilation steps as described (first liboqs and then openssl). The compilation was successful but when I run `apps/openssl ciphers` I can't see any ciphersuite with quantum algorithms. \r\n\r\n**==> apps/openssl ciphers**\r\n\r\n`TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:RSA-PSK-AES256-GCM-SHA384:DHE-PSK-AES256-GCM-SHA384:RSA-PSK-CHACHA20-POLY1305:DHE-PSK-CHACHA20-POLY1305:ECDHE-PSK-CHACHA20-POLY1305:AES256-GCM-SHA384:PSK-AES256-GCM-SHA384:PSK-CHACHA20-POLY1305:RSA-PSK-AES128-GCM-SHA256:DHE-PSK-AES128-GCM-SHA256:AES128-GCM-SHA256:PSK-AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:ECDHE-PSK-AES256-CBC-SHA384:ECDHE-PSK-AES256-CBC-SHA:SRP-RSA-AES-256-CBC-SHA:SRP-AES-256-CBC-SHA:RSA-PSK-AES256-CBC-SHA384:DHE-PSK-AES256-CBC-SHA384:RSA-PSK-AES256-CBC-SHA:DHE-PSK-AES256-CBC-SHA:AES256-SHA:PSK-AES256-CBC-SHA384:PSK-AES256-CBC-SHA:ECDHE-PSK-AES128-CBC-SHA256:ECDHE-PSK-AES128-CBC-SHA:SRP-RSA-AES-128-CBC-SHA:SRP-AES-128-CBC-SHA:RSA-PSK-AES128-CBC-SHA256:DHE-PSK-AES128-CBC-SHA256:RSA-PSK-AES128-CBC-SHA:DHE-PSK-AES128-CBC-SHA:AES128-SHA:PSK-AES128-CBC-SHA256:PSK-AES128-CBC-SHA`\r\n\r\nI am using this openssl to compile a SIP server ([Asterisk](https://www.asterisk.org/)). I would like to add support of quantum based ciphersuites in it. Can you please advice on how to do this?\r\n\r\nThank you.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/773065550","html_url":"https://github.com/open-quantum-safe/openssl/issues/275#issuecomment-773065550","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275","id":773065550,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzA2NTU1MA==","user":{"login":"iamsoze","id":66254213,"node_id":"MDQ6VXNlcjY2MjU0MjEz","avatar_url":"https://avatars.githubusercontent.com/u/66254213?v=4","gravatar_id":"","url":"https://api.github.com/users/iamsoze","html_url":"https://github.com/iamsoze","followers_url":"https://api.github.com/users/iamsoze/followers","following_url":"https://api.github.com/users/iamsoze/following{/other_user}","gists_url":"https://api.github.com/users/iamsoze/gists{/gist_id}","starred_url":"https://api.github.com/users/iamsoze/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iamsoze/subscriptions","organizations_url":"https://api.github.com/users/iamsoze/orgs","repos_url":"https://api.github.com/users/iamsoze/repos","events_url":"https://api.github.com/users/iamsoze/events{/privacy}","received_events_url":"https://api.github.com/users/iamsoze/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T06:27:46Z","updated_at":"2021-02-04T06:27:46Z","author_association":"NONE","body":"> The most practical way for me to learn about the way how quantum-safe algorithms are integrated into OQS-OpenSSL was by following the [Running](https://github.com/open-quantum-safe/openssl#running) section in the readme: You can see that it is done by way of specifying the algorithms as TLS1.3 groups (`-groups` or `-curves` option) when considering the quantum-safe key exchange mechanisms (not as ciphers). For the background on how things have been done, check out [this](https://github.com/open-quantum-safe/openssl/wiki/Integrating-PQC-into-TLS-1.3). Completed integrations are available in `oqs-demos` where you can see how to specify quantum-safe algorithms, e.g, [here](https://github.com/open-quantum-safe/oqs-demos/blob/main/httpd/USAGE.md#slightly-more-advanced-usage-options). A \"trick\" to see all OQS algs available in a compiled OQS-OpenSSL is to run `openssl speed test`: As such algorithm is unknown, the command will return the OQSKEM and OQSSIG algs available for use (as KEMs and SIGs, respectively).\r\n\r\nI have gone through the [Running](https://github.com/open-quantum-safe/openssl#running) section in the readme and also ran TLS demo on two separate machines (server & client) to acknowledge the support of quantum-safe algorithms in oqs-openssl. \r\n\r\nI have compiled a SIP server **(Asterisk)** with oqs-openssl support enabled in it. And this server do not provide any way of specifying KEX algorithms (`-groups` or `-curves`). This server only requires the ciphersuite to settle on encryption in a TLS handshake. When I run this sever and try to list available ciphersuites, I only get the [standard ciphersuites](https://github.com/open-quantum-safe/openssl/issues/275#issue-800941831). I am trying to add the quantum-safe key exchange based ciphersuites as well. \r\n\r\nI found that in the previous release (OQS-OPENSSL_1_0_2) there was a way to list [Qalgorithms based ciphersuites](https://github.com/open-quantum-safe/openssl/tree/OQS-OpenSSL_1_0_2-stable#supported-key-exchange-methods). I compiled this branch and was able to see the OQS based ciphers. However, my SIP server crashes and throws seg fault when I try to run it with OQS-OPENSSL_1_0_2. Therefore, I would like to stick with OQS-OPENSSL_1_1_1. I am looking for a way to list the OQS-based ciphers in 1.1.1 version.\r\n\r\n\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T06:27:46Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15061475062","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","id":800165604,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY2Njk2MTc2","number":891,"title":"Sync upstream with copy_from_upstram / pqcrystals pull","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-02-03T09:56:41Z","updated_at":"2021-02-04T06:32:48Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/891","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/891.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/891.patch"},"body":"This PR is to show the changes after copy_from_upstream with #880.\r\n\r\nIt will also be an alternative to #890.\r\n\r\nWith this configuration, it is pulling the latest Kyber round 3 and Dilithium round 3 from pqcrystals-upstream.\r\n\r\nThe updates can be reproduced like this:\r\n\r\n```\r\n$ ./copy_from_upstream copy\r\n```\r\n\r\nTo verify that the synced version matches with upstream versions:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 151 match with upstream, 0 differ\r\n-----\r\n```\r\n\r\nNote that this PR might have to be rebased after #880 is merged.\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n\r\nChanges to Dilithium Round 3 KAT. Adds Dilithium Round 3 algorithms (2, 3, 5, 2-AES, 3-AES, 5-AES)\r\n\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773067929","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891#issuecomment-773067929","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","id":773067929,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzA2NzkyOQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T06:32:48Z","updated_at":"2021-02-04T06:32:48Z","author_association":"MEMBER","body":"> There seems to be an authentication issue with the address-sanitizer CI\r\n\r\nHmm -- according to [this](https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/1206/workflows/f9c33486-543c-45f7-a560-f045574092d2/jobs/12171/tests) address-sanitizer ran perfectly.\r\n\r\n> ps. Reading the comment here, docker might enforce rate limitations: d183ccd\r\n\r\nWell, two comments: 1) The reason we commented out the auth sections was the \"assumed assurance\" that there's no rate limitation for OQS as per this statement:\r\n\r\n> No pull rate restrictions will be applied to namespaces approved as non-commercial Open Source projects.\r\n\r\n(from https://www.docker.com/blog/what-you-need-to-know-about-upcoming-docker-hub-rate-limiting/)\r\n\r\nand 2) The error statement wasn't one listed in https://www.docker.com/increase-rate-limits (but \"Error response from daemon: unauthorized: authentication required\")\r\n\r\nBut as an incorrect implementation or wrong classification of our project (or simple alternative facts in press releases :) may be behind this I just re-ran the single failed job via SSH (`alpine-noopenssl`) and everything passed. The weird thing also is that only `alpine-noopenssl` failed while it's basically identical twin `alpine` passed. As I don't have permission to select \"Re-Run job\" [here](https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/1206/workflows/f9c33486-543c-45f7-a560-f045574092d2/jobs/12162) I just triggered full CI re-run. If this fails again, we may indeed have to revert https://github.com/open-quantum-safe/liboqs/commit/d183ccda6698a246ddf4e517d6afcd716afbbcf6 . The quickest way to check this would be for you to simply remove the comment marks in front of the auth statements in `.circleci/config.yml`.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T06:32:48Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15061557588","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/275","id":800941831,"node_id":"MDU6SXNzdWU4MDA5NDE4MzE=","number":275,"title":"Unable to find quantum based ciphersuite in openssl","user":{"login":"iamsoze","id":66254213,"node_id":"MDQ6VXNlcjY2MjU0MjEz","avatar_url":"https://avatars.githubusercontent.com/u/66254213?v=4","gravatar_id":"","url":"https://api.github.com/users/iamsoze","html_url":"https://github.com/iamsoze","followers_url":"https://api.github.com/users/iamsoze/followers","following_url":"https://api.github.com/users/iamsoze/following{/other_user}","gists_url":"https://api.github.com/users/iamsoze/gists{/gist_id}","starred_url":"https://api.github.com/users/iamsoze/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iamsoze/subscriptions","organizations_url":"https://api.github.com/users/iamsoze/orgs","repos_url":"https://api.github.com/users/iamsoze/repos","events_url":"https://api.github.com/users/iamsoze/events{/privacy}","received_events_url":"https://api.github.com/users/iamsoze/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-02-04T05:21:22Z","updated_at":"2021-02-04T06:42:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have compiled [OQS-Openssl_1_1_1](https://github.com/open-quantum-safe/openssl) for Linux x86. I have followed the compilation steps as described (first liboqs and then openssl). The compilation was successful but when I run `apps/openssl ciphers` I can't see any ciphersuite with quantum algorithms. \r\n\r\n**==> apps/openssl ciphers**\r\n\r\n`TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:RSA-PSK-AES256-GCM-SHA384:DHE-PSK-AES256-GCM-SHA384:RSA-PSK-CHACHA20-POLY1305:DHE-PSK-CHACHA20-POLY1305:ECDHE-PSK-CHACHA20-POLY1305:AES256-GCM-SHA384:PSK-AES256-GCM-SHA384:PSK-CHACHA20-POLY1305:RSA-PSK-AES128-GCM-SHA256:DHE-PSK-AES128-GCM-SHA256:AES128-GCM-SHA256:PSK-AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:ECDHE-PSK-AES256-CBC-SHA384:ECDHE-PSK-AES256-CBC-SHA:SRP-RSA-AES-256-CBC-SHA:SRP-AES-256-CBC-SHA:RSA-PSK-AES256-CBC-SHA384:DHE-PSK-AES256-CBC-SHA384:RSA-PSK-AES256-CBC-SHA:DHE-PSK-AES256-CBC-SHA:AES256-SHA:PSK-AES256-CBC-SHA384:PSK-AES256-CBC-SHA:ECDHE-PSK-AES128-CBC-SHA256:ECDHE-PSK-AES128-CBC-SHA:SRP-RSA-AES-128-CBC-SHA:SRP-AES-128-CBC-SHA:RSA-PSK-AES128-CBC-SHA256:DHE-PSK-AES128-CBC-SHA256:RSA-PSK-AES128-CBC-SHA:DHE-PSK-AES128-CBC-SHA:AES128-SHA:PSK-AES128-CBC-SHA256:PSK-AES128-CBC-SHA`\r\n\r\nI am using this openssl to compile a SIP server ([Asterisk](https://www.asterisk.org/)). I would like to add support of quantum based ciphersuites in it. Can you please advice on how to do this?\r\n\r\nThank you.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/773072606","html_url":"https://github.com/open-quantum-safe/openssl/issues/275#issuecomment-773072606","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/275","id":773072606,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzA3MjYwNg==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T06:42:39Z","updated_at":"2021-02-04T06:42:39Z","author_association":"MEMBER","body":"> Therefore, I would like to stick with OQS-OPENSSL_1_1_1.\r\n\r\nIndeed that is very advisable as we also have ceased to support 1.0.2 (as did the upstream).\r\n\r\n>  this server do not provide any way of specifying KEX algorithms\r\n\r\nThis indeed is unfortunate but quite \"usual\" as groups are a reasonably new concept (TLS1.3). We also had to introduce options (for setting these) into some programs to enable KEX/KEM selection, e.g., https://github.com/curl/curl/pull/5892\r\n\r\nThus, I'm afraid you'd have to dig into the code of Asterisk to find a way to call the OpenSSL method `SSL_CTX_set1_curves_list` to set/activate an OQS algorithm.\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T06:42:40Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15061682936","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/890","id":799671515,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY2Mjc5MzE0","number":890,"title":"Pull round 3 Dilithium from PQClean","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-02-02T20:45:44Z","updated_at":"2021-02-04T06:57:14Z","closed_at":"2021-02-03T20:39:05Z","author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/890","html_url":"https://github.com/open-quantum-safe/liboqs/pull/890","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/890.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/890.patch"},"body":"This PR copies round 3 Dilithium from PQClean. An alternative is to wait for #883 to land and copy Dilithium directly from upstream. It's not clear to me how close #883 is to completion, hence this PR.\r\n\r\n> Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n\r\nYes, there are significant changes between round 2 and round 3 Dilithium.\r\n\r\n> Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\nYes, it removes dilithium4, adds dilithium5, and adds the \"_aes\" variants of dilithium2, dilithium3, and dilithium5.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773079729","html_url":"https://github.com/open-quantum-safe/liboqs/pull/890#issuecomment-773079729","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890","id":773079729,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzA3OTcyOQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T06:57:14Z","updated_at":"2021-02-04T06:57:14Z","author_association":"MEMBER","body":"> I think we should extend copy_from_upstream with a patching mechanism, and deal with the common code issue.\r\n\r\nFully agree. Documented in #894 \r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T06:57:14Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15061908734","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/4","id":798751248,"node_id":"MDU6SXNzdWU3OTg3NTEyNDg=","number":4,"title":"OpenSSL copyright?","user":{"login":"levitte","id":698918,"node_id":"MDQ6VXNlcjY5ODkxOA==","avatar_url":"https://avatars.githubusercontent.com/u/698918?v=4","gravatar_id":"","url":"https://api.github.com/users/levitte","html_url":"https://github.com/levitte","followers_url":"https://api.github.com/users/levitte/followers","following_url":"https://api.github.com/users/levitte/following{/other_user}","gists_url":"https://api.github.com/users/levitte/gists{/gist_id}","starred_url":"https://api.github.com/users/levitte/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/levitte/subscriptions","organizations_url":"https://api.github.com/users/levitte/orgs","repos_url":"https://api.github.com/users/levitte/repos","events_url":"https://api.github.com/users/levitte/events{/privacy}","received_events_url":"https://api.github.com/users/levitte/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-02-01T22:14:23Z","updated_at":"2021-02-04T07:21:09Z","closed_at":"2021-02-03T10:58:52Z","author_association":"NONE","active_lock_reason":null,"body":"There are a number of files in [oqsprov/](https://github.com/open-quantum-safe/oqs-provider/tree/main/oqsprov) that have the OpenSSL copyright boilerplate, which gives copyright to the OpenSSL Authors, which I understand is historical, since this was previously a patchset for OpenSSL proper.\r\n\r\nI don't think that's something you want at this point, and I can't see anything wrong with simply removing that boilerplate.  What you still have in there that could remind anyone of the built-in OpenSSL providers, it's mostly bread-and-butter lines that are only vaguely similar.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/773092115","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/4#issuecomment-773092115","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4","id":773092115,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzA5MjExNQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T07:21:08Z","updated_at":"2021-02-04T07:21:08Z","author_association":"MEMBER","body":"> You missed a spot \r\n\r\nThanks for the catch. And it was more than one. Lesson: No change too small to not botch it :-( Hopefully #5 gets this right. I won't bother you to review it (but won't stop you :-)","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T07:21:09Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15062032654","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-04T07:33:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773098436","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-773098436","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":773098436,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzA5ODQzNg==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T07:33:47Z","updated_at":"2021-02-04T07:33:47Z","author_association":"MEMBER","body":"> or we need a mechanism for overriding the choice made based on CPU features\r\n\r\nIf I understand the problem right, there is such mechanism: Just (un)set [OQS_PORTABLE_BUILD](https://github.com/open-quantum-safe/liboqs/wiki/Customizing-liboqs#oqs_portable_build) when building for that test. Also you may want to run with [OQS_USE_CPU_EXTENSIONS](https://github.com/open-quantum-safe/liboqs/wiki/Customizing-liboqs#oqs_use_cpu_extensions) OFF to test ref code.\r\n\r\n> Some of the schemes (Classic McEliece, Rainbow, and SPHINCS, but maybe others) take a fairly long time to run in valgrind.\r\n\r\nThis seems like a bigger practical issue. What about moving this test out of CI and into our nightly [profiling](https://github.com/open-quantum-safe/profiling) test runs instead? a) we already have both -ref and -cpuext builds there and b) lots of time that CCI may not grant such \"long-runners\". ","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T07:33:47Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15062377455","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","id":800165604,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY2Njk2MTc2","number":891,"title":"Sync upstream with copy_from_upstram / pqcrystals pull","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-02-03T09:56:41Z","updated_at":"2021-02-04T08:07:13Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/891","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/891.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/891.patch"},"body":"This PR is to show the changes after copy_from_upstream with #880.\r\n\r\nIt will also be an alternative to #890.\r\n\r\nWith this configuration, it is pulling the latest Kyber round 3 and Dilithium round 3 from pqcrystals-upstream.\r\n\r\nThe updates can be reproduced like this:\r\n\r\n```\r\n$ ./copy_from_upstream copy\r\n```\r\n\r\nTo verify that the synced version matches with upstream versions:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 151 match with upstream, 0 differ\r\n-----\r\n```\r\n\r\nNote that this PR might have to be rebased after #880 is merged.\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n\r\nChanges to Dilithium Round 3 KAT. Adds Dilithium Round 3 algorithms (2, 3, 5, 2-AES, 3-AES, 5-AES)\r\n\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773115303","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891#issuecomment-773115303","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","id":773115303,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzExNTMwMw==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T08:07:13Z","updated_at":"2021-02-04T08:07:13Z","author_association":"CONTRIBUTOR","body":"> but maybe I just got lost in the sea of files :-/ Can you please comment (as to whether this is intentional) before I continue with review?\r\n\r\nThis is correct, it's intentional that it's still pointing to the bhess repo. I'm basically awaiting two PRs to merge it to upstream. The merges basically update the yml-files. I thought that it might make sense to add the option to have liboqs-local versions of the yml-files.\r\nWe can as well hold off merging here until the PR is merged.\r\n\r\n> The quickest way to check this would be for you to simply remove the comment marks in front of the auth statements in `.circleci/config.yml`\r\n\r\nOk I will do that.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T08:07:13Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15062643795","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","id":800165604,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY2Njk2MTc2","number":891,"title":"Sync upstream with copy_from_upstram / pqcrystals pull","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-02-03T09:56:41Z","updated_at":"2021-02-04T08:30:20Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/891","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/891.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/891.patch"},"body":"This PR is to show the changes after copy_from_upstream with #880.\r\n\r\nIt will also be an alternative to #890.\r\n\r\nWith this configuration, it is pulling the latest Kyber round 3 and Dilithium round 3 from pqcrystals-upstream.\r\n\r\nThe updates can be reproduced like this:\r\n\r\n```\r\n$ ./copy_from_upstream copy\r\n```\r\n\r\nTo verify that the synced version matches with upstream versions:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 151 match with upstream, 0 differ\r\n-----\r\n```\r\n\r\nNote that this PR might have to be rebased after #880 is merged.\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n\r\nChanges to Dilithium Round 3 KAT. Adds Dilithium Round 3 algorithms (2, 3, 5, 2-AES, 3-AES, 5-AES)\r\n\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773128239","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891#issuecomment-773128239","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","id":773128239,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzEyODIzOQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T08:30:20Z","updated_at":"2021-02-04T08:30:20Z","author_association":"MEMBER","body":"> Yesterday there were a few pipelines running in parallel when it failed.\r\n\r\nYes, I have the gut feeling that was the issue (too many CCI jobs in different PRs running at the same time). Already the re-run I initiated manually earlier also passed: https://github.com/open-quantum-safe/liboqs/pull/891/checks?check_run_id=1828548012","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T08:30:20Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15062679307","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","id":800165604,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY2Njk2MTc2","number":891,"title":"Sync upstream with copy_from_upstram / pqcrystals pull","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-02-03T09:56:41Z","updated_at":"2021-02-04T08:33:24Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/891","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/891.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/891.patch"},"body":"This PR is to show the changes after copy_from_upstream with #880.\r\n\r\nIt will also be an alternative to #890.\r\n\r\nWith this configuration, it is pulling the latest Kyber round 3 and Dilithium round 3 from pqcrystals-upstream.\r\n\r\nThe updates can be reproduced like this:\r\n\r\n```\r\n$ ./copy_from_upstream copy\r\n```\r\n\r\nTo verify that the synced version matches with upstream versions:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 151 match with upstream, 0 differ\r\n-----\r\n```\r\n\r\nNote that this PR might have to be rebased after #880 is merged.\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n\r\nChanges to Dilithium Round 3 KAT. Adds Dilithium Round 3 algorithms (2, 3, 5, 2-AES, 3-AES, 5-AES)\r\n\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773129946","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891#issuecomment-773129946","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","id":773129946,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzEyOTk0Ng==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T08:33:24Z","updated_at":"2021-02-04T08:33:24Z","author_association":"MEMBER","body":"> We can as well hold off merging here until the PR is merged.\r\n\r\nThat would save us another PR round (going from `bhess` to `pqcrystals`) and in my eyes thus would be preferential -- assuming that doesn't delay things too much.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T08:33:24Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15063905494","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/880","id":791911850,"node_id":"MDU6SXNzdWU3OTE5MTE4NTA=","number":880,"title":"Update copy_from_pqclean","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"assignees":[{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false}],"milestone":null,"comments":6,"created_at":"2021-01-22T11:02:42Z","updated_at":"2021-02-04T10:06:37Z","closed_at":"2021-02-04T10:06:37Z","author_association":"MEMBER","active_lock_reason":null,"body":"I'd support this proposal from Basil Hess and solicit further feedback to the below from @dstebila , @xvzcf : \r\n\r\n> Using kyber-upstream is now indeed a simple task thanks to what you already prepared.\r\n> I really like the copy_from_pqclean mechanism. The META.yml definitions are obviously a pqclean-\"invention\", but they are a nice way to make an easy path for integrating also other implementations/libraries. Perhaps it could be renamed to copy_from_upstream.\r\n> \r\n> I'm slightly updating the script with the following features. Please let me know if anything doesn't make sense here:\r\n>\r\n>- Adding support to checkout the upstream code from a git-repository: copy_from_pqclean.yml will contain a section \"upstreams\" with several git-repos (pqclean, pqcrystals-kyber, pqcrystals-dilithium, etc...), and the git-commit hash that will be used. This will replace the PQCLEAN_DIR env. variable. Instead, the git repo location will be used (this can be a github-url, a local path on the filesystem, etc.).\r\n> - Adding a \"verify\" switch to the script: The goal is to be able to prove that the code used in liboqs origins from an upstream location with a specific commit. This will basically repeat the copy_from_pqclean process, hash of the code that is checked out, and compare it with the code in the liboqs src-directory. For someone using liboqs it should be useful to be able to reproduce and verify from where the crypto code origins.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773189005","html_url":"https://github.com/open-quantum-safe/liboqs/issues/880#issuecomment-773189005","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880","id":773189005,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzE4OTAwNQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T10:06:37Z","updated_at":"2021-02-04T10:06:37Z","author_association":"MEMBER","body":"Closed via #883 ","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T10:06:37Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15064385274","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2","id":798109377,"node_id":"MDU6SXNzdWU3OTgxMDkzNzc=","number":2,"title":"Implement encoder/decoder","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-01T08:33:55Z","updated_at":"2021-02-04T10:41:28Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"As per https://www.openssl.org/docs/manmaster/man7/provider-encoder.html","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/773210605","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2#issuecomment-773210605","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","id":773210605,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzIxMDYwNQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T10:41:28Z","updated_at":"2021-02-04T10:41:28Z","author_association":"MEMBER","body":"The more I look into this, the more I'm confused. Sample questions (I guess to @levitte @mattcaswell @romen if you'd have time):\r\n1) How to best test new code? Testing a new encoder against a new decoder looks a bit \"incestuous\". Or would a simple \"roundtrip\" like this already be reasonable: `OSSL_ENCODER_fetch` -> `OSSL_ENCODER_to_bio` (s_membuf) + `OSSL_DECODER_fetch`/`OSSL_DECODER_from_bio`?\r\n2) Which output types have/need to be supported to use this beyond \"internal testing\"? Only \"DER\"? Or also \"PEM\"? \"text\"? Others? \r\n3) Which way to exercise this encoder/decoder \"for real\"? What I'd _like_ to do is create OQS keys via `openssl` commands and then store/retrieve them into/from PEM files (and finally use them, e.g., for CMS-style signing). First issue: How to facilitate that? `openssl genpkey` for example doesn't seem to work:\r\n```\r\n> LD_LIBRARY_PATH=.local/lib .local/bin/openssl list -signature-algorithms -provider-path _build/oqsprov  -provider oqsprovider\r\n  oqs_sig_default @ oqsprovider\r\n  dilithium2 @ oqsprovider\r\n  dilithium3 @ oqsprovider\r\n  dilithium4 @ oqsprovider\r\n  falcon512 @ oqsprovider\r\n  falcon1024 @ oqsprovider\r\n  picnicl1full @ oqsprovider\r\n  picnic3l1 @ oqsprovider\r\n  rainbowIclassic @ oqsprovider\r\n  rainbowVclassic @ oqsprovider\r\n  sphincsharaka128frobust @ oqsprovider\r\n  sphincssha256128frobust @ oqsprovider\r\n  sphincsshake256128frobust @ oqsprovider\r\n> LD_LIBRARY_PATH=.local/lib .local/bin/openssl genpkey -algorithm dilithium2 -provider-path _build/oqsprov  -provider oqsprovider\r\nError initializing dilithium2 context\r\nC0B14AE0007F0000:error:0308010C:digital envelope routines:inner_evp_generic_fetch:unsupported:crypto/evp/evp_fetch.c:331:Global default library context, Algorithm (dilithium2 : 0), Properties (<null>)\r\n\r\n```\r\n-> How and where does the \"global default lib context\" as per the error message come into play again? I'd have thought my explicit command line has switched it off (?)\r\n\r\nOr did I already at first try run into a corner as per the below? \r\n \r\n> Keys have support, at least in principle. There are corners where we haven't quite fulfilled that yet, but provider backed are meant to be possible to use (almost) everywhere, and transparently.\r\n\r\n(from https://github.com/open-quantum-safe/openssl/issues/243#issuecomment-769766179)\r\n\r\n-> Should I rather open issues/questions for this in the main OpenSSL issues tracking system?\r\n\r\nThanks in advance for any feedback/input as per the questions above!\r\n\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T10:41:28Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15064448394","type":"IssueCommentEvent","actor":{"id":338418,"login":"romen","display_login":"romen","gravatar_id":"","url":"https://api.github.com/users/romen","avatar_url":"https://avatars.githubusercontent.com/u/338418?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2","id":798109377,"node_id":"MDU6SXNzdWU3OTgxMDkzNzc=","number":2,"title":"Implement encoder/decoder","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-01T08:33:55Z","updated_at":"2021-02-04T10:46:12Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"As per https://www.openssl.org/docs/manmaster/man7/provider-encoder.html","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/773213404","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2#issuecomment-773213404","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","id":773213404,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzIxMzQwNA==","user":{"login":"romen","id":338418,"node_id":"MDQ6VXNlcjMzODQxOA==","avatar_url":"https://avatars.githubusercontent.com/u/338418?v=4","gravatar_id":"","url":"https://api.github.com/users/romen","html_url":"https://github.com/romen","followers_url":"https://api.github.com/users/romen/followers","following_url":"https://api.github.com/users/romen/following{/other_user}","gists_url":"https://api.github.com/users/romen/gists{/gist_id}","starred_url":"https://api.github.com/users/romen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/romen/subscriptions","organizations_url":"https://api.github.com/users/romen/orgs","repos_url":"https://api.github.com/users/romen/repos","events_url":"https://api.github.com/users/romen/events{/privacy}","received_events_url":"https://api.github.com/users/romen/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T10:46:12Z","updated_at":"2021-02-04T10:46:12Z","author_association":"NONE","body":"Quickly commenting on the second issue: does it go away if the provider argument comes before the algorithm selection (or if the provider is loaded via conf file)? ","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T10:46:13Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15064503351","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/887","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/887/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/887/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/887/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/887","id":798691769,"node_id":"MDU6SXNzdWU3OTg2OTE3Njk=","number":887,"title":"Update BIKE code","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-01T20:41:12Z","updated_at":"2021-02-04T10:50:19Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"We're currently shipping BIKE 3.2, the latest version is 4.1 (10/08/2020). https://bikesuite.org/\r\n\r\nThis is a good target for copy_from_upstream #883, since BIKE is not in PQClean.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773215778","html_url":"https://github.com/open-quantum-safe/liboqs/issues/887#issuecomment-773215778","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/887","id":773215778,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzIxNTc3OA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T10:50:19Z","updated_at":"2021-02-04T10:50:19Z","author_association":"MEMBER","body":"#883 has landed (thanks @bhess) and really looks like a nice way to automatically include _any_ upstream code now (initial doc [here](https://github.com/open-quantum-safe/liboqs/wiki/Contributing-guide#automated-inclusion)).","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T10:50:19Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15064557266","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/884","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/884/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/884/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/884/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/884","id":795758217,"node_id":"MDU6SXNzdWU3OTU3NTgyMTc=","number":884,"title":"Contributing guide update","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-01-28T07:45:47Z","updated_at":"2021-02-04T10:54:29Z","closed_at":"2021-02-04T10:54:29Z","author_association":"MEMBER","active_lock_reason":null,"body":"This is to foster a discussion on updates to [Contributing wiki](https://github.com/open-quantum-safe/liboqs/wiki/Contributing-guide)\r\n\r\n> The code must build on Linux, macOS, and Windows.\r\n\r\nThis is not true for all algorithms, right? Suggested rephrase:\r\n\r\n> The code must build at least on Linux (x86_64). Optimizations and other operating systems supported may be supported and must be suitably registered for each algorithm in https://github.com/open-quantum-safe/liboqs/blob/main/.CMake/alg_support.cmake\r\n\r\nAlso this statement isn't quite correct for all algorithms: \r\n\r\n> Source code must be formatted in accordance with our formatting requirements (make prettyprint).\r\n\r\nIssues: a) We're not using `make` any more and b) this only applies to OQS core code, not the actual algorithms. So I suggest to introduce a new section \"Common code\" and move the above statement there changed as follows:\r\n\r\n> Source code contributed to OQS core code must be formatted in accordance with our formatting requirements. Non-OQS core code is any code not originally created in this repository but only imported manually or automatically, such as specific quantum-safe algorithms. Adherence to our formatting requirements is successfully tested by executing `./tests/run_astyle.sh` in the liboqs project root folder without \"Formatting\" statements returned. Passing this test is a prerequisite for successful CI.\r\n\r\nThe `Automated inclusion` section needs to be re-written once #883 is landed.\r\n\r\nRegarding [Testing](https://github.com/open-quantum-safe/liboqs/wiki/Contributing-guide#testing):\r\n\r\nWhat about changing that heading to \"Continuous Integration Testing (CI)\" ?\r\n\r\nIssues: We are not testing Centos 7 any more, so we need to drop the statement. \r\n\r\nRegarding Ubuntu: Would it be time to upgrade to a more recent LTS than 18.04? Canonical main stream is 20.04. -> I'd suggest to agree a time frame for this update.\r\n\r\nDo we further want to posit\r\n\r\n> Normal pull requests (PRs) must have all CI tests pass. Non-standard PRs must explain the reasons for breaking CI as well as a plan how to get CI to work again.\r\n\r\nIf so, we further face the issue that only core team members can actually trigger full CI. So should the further demand passing all CI tests locally be explicitly stated? Not really sure what to recommend here, so leaving a recommendation away at this time.\r\n\r\nNext steps: Please comment below with changes, additions, etc. so we can agree in a next meeting how to close out this issue.\r\n\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773218295","html_url":"https://github.com/open-quantum-safe/liboqs/issues/884#issuecomment-773218295","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/884","id":773218295,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzIxODI5NQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T10:54:29Z","updated_at":"2021-02-04T10:54:29Z","author_association":"MEMBER","body":"Closing this issue as first cut at such wording is now available after #883 merged: https://github.com/open-quantum-safe/liboqs/wiki/Contributing-guide#automated-inclusion Further explanation/documentation, e.g., to aid using this for #882 and/or #887, of course would be welcome -- tagging @bhess as last action on this issue).","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T10:54:29Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15064881052","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","id":800165604,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY2Njk2MTc2","number":891,"title":"Sync upstream with copy_from_upstram / pqcrystals pull","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-02-03T09:56:41Z","updated_at":"2021-02-04T11:19:50Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/891","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/891.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/891.patch"},"body":"This PR is to show the changes after copy_from_upstream with #880.\r\n\r\nIt will also be an alternative to #890.\r\n\r\nWith this configuration, it is pulling the latest Kyber round 3 and Dilithium round 3 from pqcrystals-upstream.\r\n\r\nThe updates can be reproduced like this:\r\n\r\n```\r\n$ ./copy_from_upstream copy\r\n```\r\n\r\nTo verify that the synced version matches with upstream versions:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 151 match with upstream, 0 differ\r\n-----\r\n```\r\n\r\nNote that this PR might have to be rebased after #880 is merged.\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n\r\nChanges to Dilithium Round 3 KAT. Adds Dilithium Round 3 algorithms (2, 3, 5, 2-AES, 3-AES, 5-AES)\r\n\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773233192","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891#issuecomment-773233192","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","id":773233192,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzIzMzE5Mg==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T11:19:50Z","updated_at":"2021-02-04T11:19:50Z","author_association":"CONTRIBUTOR","body":"The PRs to pqcrystals have now been merged and copy_from_upstream now points directly to pqcrystals:\r\nhttps://github.com/open-quantum-safe/liboqs/pull/891/commits/2d6c1ce2c46075646a29473c5dc2818ec3efb449#diff-47bff58854d31ecb37c570e43c7539b0fa5588896d49a457d355655fa8b96f16R13-R23\r\n\r\nI echo @jschanck's comment in #890. The currently included AES and fips202 code is indeed redundant. As mentioned in #849 and #890, the handling of common code and imports will have to be further improved. One approach will be to apply patches in copy_from_upstream. Patches could also potentially be avoided by adding shim-api (e.g. for the pqcrystals-namespace) in `src/common`.\r\n\r\nAside from this redundancy, I don't see a functional limitation from this PR right now.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T11:19:51Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15065388633","type":"IssueCommentEvent","actor":{"id":7422273,"login":"mattcaswell","display_login":"mattcaswell","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","avatar_url":"https://avatars.githubusercontent.com/u/7422273?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2","id":798109377,"node_id":"MDU6SXNzdWU3OTgxMDkzNzc=","number":2,"title":"Implement encoder/decoder","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-01T08:33:55Z","updated_at":"2021-02-04T12:00:50Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"As per https://www.openssl.org/docs/manmaster/man7/provider-encoder.html","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/773255735","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2#issuecomment-773255735","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","id":773255735,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzI1NTczNQ==","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T12:00:50Z","updated_at":"2021-02-04T12:00:50Z","author_association":"NONE","body":"> How to best test new code? Testing a new encoder against a new decoder looks a bit \"incestuous\". Or would a simple \"roundtrip\" like this already be reasonable: OSSL_ENCODER_fetch -> OSSL_ENCODER_to_bio (s_membuf) + OSSL_DECODER_fetch/OSSL_DECODER_from_bio?\r\n\r\nThis seems like a reasonable approach - with the addition that you should ideally check that the thing you have decoded has the same values in it as the thing you encoded. You might take some inspiration from test/endecode_test.c.\r\n\r\nObviously this will only test that you can serialize a key to a file and deserialize it again. What it won't do is test that you got the encoding correct according to standards. The only real way to do that is to do some kind of interoperability testing with other implementations (if there are any).\r\n\r\n> Which output types have/need to be supported to use this beyond \"internal testing\"? Only \"DER\"? Or also \"PEM\"? \"text\"? Others?\r\n\r\nFor decoding there is a generic pem-to-der decoder. So you only need to implement the der-to-key decoder. The implementation should be able to chain the two together and give you pem-to-key \"for free\".\r\n\r\nI believe the current encoder implementation doesn't have this same flexibility and so you need to support both pem and der. I think this is probably one of those \"rough\" corners and I think @levitte wanted to harmonise the way encoders work with the way decoders work a bit more. Perhaps @levitte can comment here?\r\n\r\nWrt \"text\", that's only relevant for encoding. The command line apps use the text encoders to be able to display details about keys to the user with the various \"-text\" command line options (e.g. \"openssl pkey -text\"). So if you want end users to be able to examine the details of keys you'll need a text encoder.\r\n\r\n> LD_LIBRARY_PATH=.local/lib .local/bin/openssl genpkey -algorithm dilithium2 -provider-path _build/oqsprov  -provider oqsprovider\r\nError initializing dilithium2 context\r\n\r\nHmmm. This looks like it should work. Probably raise this as an issue in our tracker so someone takes a look at it.\r\n\r\n> How and where does the \"global default lib context\" as per the error message come into play again? I'd have thought my explicit command line has switched it off (?)\r\n\r\nNo - your command line just loads providers. It doesn't say anything about which lib ctx is used. Its perfectly possible (and normal) to load providers into the global default lib ctx, and this is what the command line apps generally do - so nothing unusual there.\r\n\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T12:00:51Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15067076604","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2","id":798109377,"node_id":"MDU6SXNzdWU3OTgxMDkzNzc=","number":2,"title":"Implement encoder/decoder","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-02-01T08:33:55Z","updated_at":"2021-02-04T14:06:10Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"As per https://www.openssl.org/docs/manmaster/man7/provider-encoder.html","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/773325811","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2#issuecomment-773325811","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","id":773325811,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzMyNTgxMQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T14:06:10Z","updated_at":"2021-02-04T14:06:10Z","author_association":"MEMBER","body":"> Quickly commenting on the third issue: does it go away if the provider argument comes before the algorithm selection (or if the provider is loaded via conf file)?\r\n\r\nExcellent question. The answer points to a real bug in the code:\r\n\r\n> LD_LIBRARY_PATH=.local/lib .local/bin/openssl genpkey -provider-path _build/oqsprov  -provider oqsprovider -algorithm dilithium4\r\n\r\nnever returns but sends my CPU load to 100%..... Will open an issue.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T14:06:10Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15067722824","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","id":800165604,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY2Njk2MTc2","number":891,"title":"Sync upstream with copy_from_upstram / pqcrystals pull","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-02-03T09:56:41Z","updated_at":"2021-02-04T14:47:39Z","closed_at":"2021-02-04T14:46:45Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/891","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/891.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/891.patch"},"body":"This PR is to show the changes after copy_from_upstream with #880.\r\n\r\nIt will also be an alternative to #890.\r\n\r\nWith this configuration, it is pulling the latest Kyber round 3 and Dilithium round 3 from pqcrystals-upstream.\r\n\r\nThe updates can be reproduced like this:\r\n\r\n```\r\n$ ./copy_from_upstream copy\r\n```\r\n\r\nTo verify that the synced version matches with upstream versions:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 151 match with upstream, 0 differ\r\n-----\r\n```\r\n\r\nNote that this PR might have to be rebased after #880 is merged.\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n\r\nChanges to Dilithium Round 3 KAT. Adds Dilithium Round 3 algorithms (2, 3, 5, 2-AES, 3-AES, 5-AES)\r\n\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773364425","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891#issuecomment-773364425","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","id":773364425,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzM2NDQyNQ==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T14:47:39Z","updated_at":"2021-02-04T14:47:39Z","author_association":"CONTRIBUTOR","body":"Thanks a lot for the review!","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T14:47:39Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15068126517","type":"IssueCommentEvent","actor":{"id":698918,"login":"levitte","display_login":"levitte","gravatar_id":"","url":"https://api.github.com/users/levitte","avatar_url":"https://avatars.githubusercontent.com/u/698918?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/4","id":798751248,"node_id":"MDU6SXNzdWU3OTg3NTEyNDg=","number":4,"title":"OpenSSL copyright?","user":{"login":"levitte","id":698918,"node_id":"MDQ6VXNlcjY5ODkxOA==","avatar_url":"https://avatars.githubusercontent.com/u/698918?v=4","gravatar_id":"","url":"https://api.github.com/users/levitte","html_url":"https://github.com/levitte","followers_url":"https://api.github.com/users/levitte/followers","following_url":"https://api.github.com/users/levitte/following{/other_user}","gists_url":"https://api.github.com/users/levitte/gists{/gist_id}","starred_url":"https://api.github.com/users/levitte/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/levitte/subscriptions","organizations_url":"https://api.github.com/users/levitte/orgs","repos_url":"https://api.github.com/users/levitte/repos","events_url":"https://api.github.com/users/levitte/events{/privacy}","received_events_url":"https://api.github.com/users/levitte/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-02-01T22:14:23Z","updated_at":"2021-02-04T15:12:26Z","closed_at":"2021-02-03T10:58:52Z","author_association":"NONE","active_lock_reason":null,"body":"There are a number of files in [oqsprov/](https://github.com/open-quantum-safe/oqs-provider/tree/main/oqsprov) that have the OpenSSL copyright boilerplate, which gives copyright to the OpenSSL Authors, which I understand is historical, since this was previously a patchset for OpenSSL proper.\r\n\r\nI don't think that's something you want at this point, and I can't see anything wrong with simply removing that boilerplate.  What you still have in there that could remind anyone of the built-in OpenSSL providers, it's mostly bread-and-butter lines that are only vaguely similar.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/773381727","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/4#issuecomment-773381727","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4","id":773381727,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzM4MTcyNw==","user":{"login":"levitte","id":698918,"node_id":"MDQ6VXNlcjY5ODkxOA==","avatar_url":"https://avatars.githubusercontent.com/u/698918?v=4","gravatar_id":"","url":"https://api.github.com/users/levitte","html_url":"https://github.com/levitte","followers_url":"https://api.github.com/users/levitte/followers","following_url":"https://api.github.com/users/levitte/following{/other_user}","gists_url":"https://api.github.com/users/levitte/gists{/gist_id}","starred_url":"https://api.github.com/users/levitte/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/levitte/subscriptions","organizations_url":"https://api.github.com/users/levitte/orgs","repos_url":"https://api.github.com/users/levitte/repos","events_url":"https://api.github.com/users/levitte/events{/privacy}","received_events_url":"https://api.github.com/users/levitte/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T15:12:26Z","updated_at":"2021-02-04T15:12:26Z","author_association":"NONE","body":"[ahem] I might look over your virtual shoulder a little now and then.  Just the fact that others are *already* playing with external provider is *exciting*","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T15:12:26Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15068174427","type":"IssueCommentEvent","actor":{"id":698918,"login":"levitte","display_login":"levitte","gravatar_id":"","url":"https://api.github.com/users/levitte","avatar_url":"https://avatars.githubusercontent.com/u/698918?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2","id":798109377,"node_id":"MDU6SXNzdWU3OTgxMDkzNzc=","number":2,"title":"Implement encoder/decoder","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-02-01T08:33:55Z","updated_at":"2021-02-04T15:15:11Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"As per https://www.openssl.org/docs/manmaster/man7/provider-encoder.html","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/773383797","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2#issuecomment-773383797","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","id":773383797,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzM4Mzc5Nw==","user":{"login":"levitte","id":698918,"node_id":"MDQ6VXNlcjY5ODkxOA==","avatar_url":"https://avatars.githubusercontent.com/u/698918?v=4","gravatar_id":"","url":"https://api.github.com/users/levitte","html_url":"https://github.com/levitte","followers_url":"https://api.github.com/users/levitte/followers","following_url":"https://api.github.com/users/levitte/following{/other_user}","gists_url":"https://api.github.com/users/levitte/gists{/gist_id}","starred_url":"https://api.github.com/users/levitte/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/levitte/subscriptions","organizations_url":"https://api.github.com/users/levitte/orgs","repos_url":"https://api.github.com/users/levitte/repos","events_url":"https://api.github.com/users/levitte/events{/privacy}","received_events_url":"https://api.github.com/users/levitte/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T15:15:11Z","updated_at":"2021-02-04T15:15:11Z","author_association":"NONE","body":"For testing, I would actually check the result against files that you have generated with your 1.1.1 port of OQS.  Basically, build up a set of test vectors and use that as a reference for \"getting it right\".","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T15:15:11Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15068205550","type":"IssueCommentEvent","actor":{"id":698918,"login":"levitte","display_login":"levitte","gravatar_id":"","url":"https://api.github.com/users/levitte","avatar_url":"https://avatars.githubusercontent.com/u/698918?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2","id":798109377,"node_id":"MDU6SXNzdWU3OTgxMDkzNzc=","number":2,"title":"Implement encoder/decoder","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-02-01T08:33:55Z","updated_at":"2021-02-04T15:17:00Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"As per https://www.openssl.org/docs/manmaster/man7/provider-encoder.html","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/773385165","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2#issuecomment-773385165","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","id":773385165,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzM4NTE2NQ==","user":{"login":"levitte","id":698918,"node_id":"MDQ6VXNlcjY5ODkxOA==","avatar_url":"https://avatars.githubusercontent.com/u/698918?v=4","gravatar_id":"","url":"https://api.github.com/users/levitte","html_url":"https://github.com/levitte","followers_url":"https://api.github.com/users/levitte/followers","following_url":"https://api.github.com/users/levitte/following{/other_user}","gists_url":"https://api.github.com/users/levitte/gists{/gist_id}","starred_url":"https://api.github.com/users/levitte/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/levitte/subscriptions","organizations_url":"https://api.github.com/users/levitte/orgs","repos_url":"https://api.github.com/users/levitte/repos","events_url":"https://api.github.com/users/levitte/events{/privacy}","received_events_url":"https://api.github.com/users/levitte/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T15:17:00Z","updated_at":"2021-02-04T15:17:00Z","author_association":"NONE","body":"> I believe the current encoder implementation doesn't have this same flexibility and so you need to support both pem and der. I think this is probably one of those \"rough\" corners and I think @levitte wanted to harmonise the way encoders work with the way decoders work a bit more. Perhaps @levitte can comment here?\r\n\r\nYes, that's more or less it.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T15:17:00Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15069022684","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895","id":801374003,"node_id":"MDU6SXNzdWU4MDEzNzQwMDM=","number":895,"title":"Infinite loop if call to OpenSSL function RAND_bytes() fails","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-02-04T15:11:28Z","updated_at":"2021-02-04T16:07:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The function `OQS_randombytes_openssl` will call RAND_bytes() in an infinite loop if it fails:\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/bd4d09da75e217a439e1f7790d7a064208c39d08/src/common/rand/rand.c#L114-L122\r\n\r\nThis is probably not the right behaviour. In some circumstances (for example if the DRBG has failed to seed) this call will never succeed no matter how many times you call it. This is the cause of the hang found here:\r\n\r\nhttps://github.com/openssl/openssl/issues/14069","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773421174","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895#issuecomment-773421174","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","id":773421174,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzQyMTE3NA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T16:07:26Z","updated_at":"2021-02-04T16:07:26Z","author_association":"MEMBER","body":"Thanks very much for the investigation and bug report. This is really fascinating a) that it could elude us for so long and b) that it now happens reproducibly... Let's start digging....","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T16:07:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15069238102","type":"IssueCommentEvent","actor":{"id":7422273,"login":"mattcaswell","display_login":"mattcaswell","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","avatar_url":"https://avatars.githubusercontent.com/u/7422273?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895","id":801374003,"node_id":"MDU6SXNzdWU4MDEzNzQwMDM=","number":895,"title":"Infinite loop if call to OpenSSL function RAND_bytes() fails","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-04T15:11:28Z","updated_at":"2021-02-04T16:21:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The function `OQS_randombytes_openssl` will call RAND_bytes() in an infinite loop if it fails:\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/bd4d09da75e217a439e1f7790d7a064208c39d08/src/common/rand/rand.c#L114-L122\r\n\r\nThis is probably not the right behaviour. In some circumstances (for example if the DRBG has failed to seed) this call will never succeed no matter how many times you call it. This is the cause of the hang found here:\r\n\r\nhttps://github.com/openssl/openssl/issues/14069","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773431002","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895#issuecomment-773431002","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","id":773431002,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzQzMTAwMg==","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T16:21:05Z","updated_at":"2021-02-04T16:21:05Z","author_association":"NONE","body":"It's mainly because the changes in 3.0 make it that much easier to end up with a situation such that RAND_bytes() can return 0. Just don't load any providers with DRBGs in them and it will happen. In 1.1.1 that doesn't happen. However RAND_bytes() can still fail for other reasons even in 1.1.1 - but it happens much more rarely.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T16:21:05Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15069260023","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895","id":801374003,"node_id":"MDU6SXNzdWU4MDEzNzQwMDM=","number":895,"title":"Infinite loop if call to OpenSSL function RAND_bytes() fails","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-04T15:11:28Z","updated_at":"2021-02-04T16:22:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The function `OQS_randombytes_openssl` will call RAND_bytes() in an infinite loop if it fails:\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/bd4d09da75e217a439e1f7790d7a064208c39d08/src/common/rand/rand.c#L114-L122\r\n\r\nThis is probably not the right behaviour. In some circumstances (for example if the DRBG has failed to seed) this call will never succeed no matter how many times you call it. This is the cause of the hang found here:\r\n\r\nhttps://github.com/openssl/openssl/issues/14069","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773432022","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895#issuecomment-773432022","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","id":773432022,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzQzMjAyMg==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T16:22:30Z","updated_at":"2021-02-04T16:22:30Z","author_association":"MEMBER","body":"After some quick code archaeology, I guess the weird (void-returning) design of the OQS `randombytes` function traces back to [NIST APIs](https://csrc.nist.gov/CSRC/media/Projects/Post-Quantum-Cryptography/documents/example-files/api-notes.pdf), right @dstebila ? Now, as I guess it's a bit late in the game to change this API (used like this by all PQC submissions) how shall we fix this? The only idea I'd have right now is to hard-stop & exit (maybe even with error message :) when RAND_bytes() fails.\r\n\r\nUnless other proposals I are made'll address this issue in such way then.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T16:22:30Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15069263987","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-04T16:22:45Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773432211","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-773432211","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":773432211,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzQzMjIxMQ==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T16:22:45Z","updated_at":"2021-02-04T16:22:45Z","author_association":"NONE","body":"> > or we need a mechanism for overriding the choice made based on CPU features\r\n> \r\n> If I understand the problem right, there is such mechanism: Just (un)set [OQS_PORTABLE_BUILD](https://github.com/open-quantum-safe/liboqs/wiki/Customizing-liboqs#oqs_portable_build) when building for that test. Also you may want to run with [OQS_USE_CPU_EXTENSIONS](https://github.com/open-quantum-safe/liboqs/wiki/Customizing-liboqs#oqs_use_cpu_extensions) OFF to test ref code.\r\n\r\nThanks, that will probably be sufficient for now.\r\n\r\n> > Some of the schemes (Classic McEliece, Rainbow, and SPHINCS, but maybe others) take a fairly long time to run in valgrind.\r\n> \r\n> This seems like a bigger practical issue. What about moving this test out of CI and into our nightly [profiling](https://github.com/open-quantum-safe/profiling) test runs instead? a) we already have both -ref and -cpuext builds there and b) lots of time that CCI may not grant such \"long-runners\".\r\n\r\nI'm submitting another run with a longer timeout. It seems that python.subprocess uses *wallclock* time instead of cpu time. The jobs that are timing out do not take so long on my machine, so I think they're just getting sent to the background for too long on circleci. If this doesn't work then we can revisit.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T16:22:46Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15069404797","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895","id":801374003,"node_id":"MDU6SXNzdWU4MDEzNzQwMDM=","number":895,"title":"Infinite loop if call to OpenSSL function RAND_bytes() fails","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-02-04T15:11:28Z","updated_at":"2021-02-04T16:31:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The function `OQS_randombytes_openssl` will call RAND_bytes() in an infinite loop if it fails:\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/bd4d09da75e217a439e1f7790d7a064208c39d08/src/common/rand/rand.c#L114-L122\r\n\r\nThis is probably not the right behaviour. In some circumstances (for example if the DRBG has failed to seed) this call will never succeed no matter how many times you call it. This is the cause of the hang found here:\r\n\r\nhttps://github.com/openssl/openssl/issues/14069","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773438459","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895#issuecomment-773438459","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","id":773438459,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzQzODQ1OQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T16:31:49Z","updated_at":"2021-02-04T16:31:49Z","author_association":"MEMBER","body":"> Just don't load any providers with DRBGs in them and it will happen.\r\n\r\nI'm not sure I fully understand: Would we have to implement our own DRBG in `oqsprovider` for this not to happen (as per [provider-rand](https://www.openssl.org/docs/manmaster/man7/provider-rand.html)) _or_ load the default provider?\r\n\r\nAnyway, it indeed doesn't happen if the default provider is spec'd, too:\r\n\r\n```\r\n> LD_LIBRARY_PATH=.local/lib .local/bin/openssl genpkey -provider-path _build/oqsprov  -provider oqsprovider -provider default -algorithm dilithium2 \r\nError writing key\r\nC0E1E912E07F0000:error:04800073:PEM routines:do_pk8pkey:error converting private key:crypto/pem/pem_pk8.c:126:\r\n0x5617d58cec70:   0:OQSX_KEY\r\n```\r\n\r\nGoodness: This apparently would trigger provider encoder code (if it were properly working...), so now I see a good way forward on https://github.com/open-quantum-safe/oqs-provider/issues/2: Thanks again!","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T16:31:50Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15069524948","type":"IssueCommentEvent","actor":{"id":7422273,"login":"mattcaswell","display_login":"mattcaswell","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","avatar_url":"https://avatars.githubusercontent.com/u/7422273?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895","id":801374003,"node_id":"MDU6SXNzdWU4MDEzNzQwMDM=","number":895,"title":"Infinite loop if call to OpenSSL function RAND_bytes() fails","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-02-04T15:11:28Z","updated_at":"2021-02-04T16:39:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The function `OQS_randombytes_openssl` will call RAND_bytes() in an infinite loop if it fails:\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/bd4d09da75e217a439e1f7790d7a064208c39d08/src/common/rand/rand.c#L114-L122\r\n\r\nThis is probably not the right behaviour. In some circumstances (for example if the DRBG has failed to seed) this call will never succeed no matter how many times you call it. This is the cause of the hang found here:\r\n\r\nhttps://github.com/openssl/openssl/issues/14069","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773443976","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895#issuecomment-773443976","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","id":773443976,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzQ0Mzk3Ng==","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T16:39:44Z","updated_at":"2021-02-04T16:39:44Z","author_association":"NONE","body":"> I'm not sure I fully understand: Would we have to implement our own DRBG in oqsprovider for this not to happen (as per provider-rand) or load the default provider?\r\n\r\nThere needs to be a DRBG available in one of the loaded providers in order for you to be able to get random bytes. I think by default it will try to fetch the DRBG called \"DRBG-CTR\" unless you override it. We offer two providers that have that DRBG in it: default and fips. Therefore you must have one of those loaded to have random data. As an alternative you *could* provide your own DRBG - but unless you've got a real need of it I suggest you don't.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T16:39:44Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15069670254","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895","id":801374003,"node_id":"MDU6SXNzdWU4MDEzNzQwMDM=","number":895,"title":"Infinite loop if call to OpenSSL function RAND_bytes() fails","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-02-04T15:11:28Z","updated_at":"2021-02-04T16:49:11Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The function `OQS_randombytes_openssl` will call RAND_bytes() in an infinite loop if it fails:\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/bd4d09da75e217a439e1f7790d7a064208c39d08/src/common/rand/rand.c#L114-L122\r\n\r\nThis is probably not the right behaviour. In some circumstances (for example if the DRBG has failed to seed) this call will never succeed no matter how many times you call it. This is the cause of the hang found here:\r\n\r\nhttps://github.com/openssl/openssl/issues/14069","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773450805","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895#issuecomment-773450805","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","id":773450805,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzQ1MDgwNQ==","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T16:49:11Z","updated_at":"2021-02-04T16:49:11Z","author_association":"MEMBER","body":"> After some quick code archaeology, I guess the weird (void-returning) design of the OQS `randombytes` function traces back to [NIST APIs](https://csrc.nist.gov/CSRC/media/Projects/Post-Quantum-Cryptography/documents/example-files/api-notes.pdf), right @dstebila ? Now, as I guess it's a bit late in the game to change this API (used like this by all PQC submissions) how shall we fix this? \r\n\r\nYes, that's the reason for the API design here.  \r\n\r\nI haven't followed your full discussion above.  Certainly we want to use the OpenSSL DRBG rather than our own, unless absolutely necessary.  Also certainly we don't want to fail to a case where the function returns without having successfully obtained random bytes.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T16:49:11Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15069785349","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895","id":801374003,"node_id":"MDU6SXNzdWU4MDEzNzQwMDM=","number":895,"title":"Infinite loop if call to OpenSSL function RAND_bytes() fails","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-02-04T15:11:28Z","updated_at":"2021-02-04T16:56:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The function `OQS_randombytes_openssl` will call RAND_bytes() in an infinite loop if it fails:\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/bd4d09da75e217a439e1f7790d7a064208c39d08/src/common/rand/rand.c#L114-L122\r\n\r\nThis is probably not the right behaviour. In some circumstances (for example if the DRBG has failed to seed) this call will never succeed no matter how many times you call it. This is the cause of the hang found here:\r\n\r\nhttps://github.com/openssl/openssl/issues/14069","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773456713","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895#issuecomment-773456713","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","id":773456713,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzQ1NjcxMw==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T16:56:59Z","updated_at":"2021-02-04T16:56:59Z","author_association":"MEMBER","body":">  Certainly we want to use the OpenSSL DRBG rather than our own, unless absolutely necessary.\r\n\r\nFully agree. This means users of `oqsprovider` must know that they have to load `default` provider, too. Will add documentation.\r\n\r\n> Also certainly we don't want to fail to a case where the function returns without having successfully obtained random bytes.\r\n\r\nIf I understand this right, the only way to deal with this is with the above-proposed \"hard exit\" if `RAND_bytes()` fails. Will implement that then.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T16:56:59Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15071537492","type":"IssueCommentEvent","actor":{"id":16247285,"login":"christianpaquin","display_login":"christianpaquin","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","avatar_url":"https://avatars.githubusercontent.com/u/16247285?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895","id":801374003,"node_id":"MDU6SXNzdWU4MDEzNzQwMDM=","number":895,"title":"Infinite loop if call to OpenSSL function RAND_bytes() fails","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-02-04T15:11:28Z","updated_at":"2021-02-04T19:10:12Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The function `OQS_randombytes_openssl` will call RAND_bytes() in an infinite loop if it fails:\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/bd4d09da75e217a439e1f7790d7a064208c39d08/src/common/rand/rand.c#L114-L122\r\n\r\nThis is probably not the right behaviour. In some circumstances (for example if the DRBG has failed to seed) this call will never succeed no matter how many times you call it. This is the cause of the hang found here:\r\n\r\nhttps://github.com/openssl/openssl/issues/14069","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773539805","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895#issuecomment-773539805","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","id":773539805,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzUzOTgwNQ==","user":{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false},"created_at":"2021-02-04T19:10:12Z","updated_at":"2021-02-04T19:10:12Z","author_association":"CONTRIBUTOR","body":"> Now, as I guess it's a bit late in the game to change this API (used like this by all PQC submissions) how shall we fix this? The only idea I'd have right now is to hard-stop & exit (maybe even with error message :) when RAND_bytes() fails.\r\n\r\nIt's too late to change this in NIST's API, but we could change it in OQS, no? We would need to go touch all calls from our algs to handle (propagate) the error, or are you suggesting @baentsch to fail & exit in the rand function directly? It seems the proper behavior is application specific, so propagating the randomness error as a OQS return value would be better, IMO.\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-02-04T19:10:12Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
