{"id":"15146491715","type":"IssuesEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/907","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/907/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/907/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/907/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/907","id":806144183,"node_id":"MDU6SXNzdWU4MDYxNDQxODM=","number":907,"title":"(Re-)define CI process flow","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-02-11T07:23:01Z","updated_at":"2021-02-11T07:23:01Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"This issue is to discuss, formulate and agree, initially the need for and eventually the CI strategy going forward (and then implement it).\r\n\r\nAs already discussed, there are different types of (CI) tests:\r\n- quick sanity checks (such as styletest)\r\n- baseline build tests (with different build-options)\r\n- quick cross platform tests\r\n- deeper tests validating all algorithms are operating OK\r\n- long-running tests like address-sanitizer or timecop\r\n\r\nBased on this a strawman proposal:\r\n- Classify all tests we have into one of these categories: must pass 1) during PR, 2) for audit, 3) for main merge, 4) for release\r\n- Build out the pipeline accordingly, maybe using github actions using dedicated compute resources for 2+4 \r\n- Tests passing for 3 should also trigger downstream integration tests\r\n- 1,2,3 would be prerequisite for 4 but 4 could mandate additional tests (we may not even have yet).\r\n- 1 should have a (normal average) time-to-completion target time of 15 minutes; 2 can be arbitrary long if it's gating nothing but 4; 3 should deliver pass/fail within 1 hour. \r\n- Tests for 2 surely would not have to run cross-platform (though it might be nice)\r\n\r\nRationale: We should be able to make progress resolving issues (at their respective level of complexity: Simple ones should be CI'd&closed fast; downstream problems detected within reasonable time (but automatically); \"deep\" algorithm problems should be unearthed and resolved in a separate time frame).\r\n\r\nAlternative proposals welcome. Proposals for classifying the tests as well as how to implement them, too.\r\n\r\n@dstebila @xvzcf @jschanck @christianpaquin (any one else not party to the conversation up to now as well, of course) please click \"+1\" if you agree we should tackle this problem and if you have more time, additional feedback/suggestions would be great.\r\n\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-02-11T07:23:01Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15152995521","type":"IssuesEvent","actor":{"id":974662,"login":"thomwiggers","display_login":"thomwiggers","gravatar_id":"","url":"https://api.github.com/users/thomwiggers","avatar_url":"https://avatars.githubusercontent.com/u/974662?"},"repo":{"id":252143304,"name":"open-quantum-safe/liboqs-rust","url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/24","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/24/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/24/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/24/events","html_url":"https://github.com/open-quantum-safe/liboqs-rust/issues/24","id":806548104,"node_id":"MDU6SXNzdWU4MDY1NDgxMDQ=","number":24,"title":"Should PublicKey etc structs be scheme-specific","user":{"login":"thomwiggers","id":974662,"node_id":"MDQ6VXNlcjk3NDY2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/974662?v=4","gravatar_id":"","url":"https://api.github.com/users/thomwiggers","html_url":"https://github.com/thomwiggers","followers_url":"https://api.github.com/users/thomwiggers/followers","following_url":"https://api.github.com/users/thomwiggers/following{/other_user}","gists_url":"https://api.github.com/users/thomwiggers/gists{/gist_id}","starred_url":"https://api.github.com/users/thomwiggers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thomwiggers/subscriptions","organizations_url":"https://api.github.com/users/thomwiggers/orgs","repos_url":"https://api.github.com/users/thomwiggers/repos","events_url":"https://api.github.com/users/thomwiggers/events{/privacy}","received_events_url":"https://api.github.com/users/thomwiggers/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-02-11T16:28:15Z","updated_at":"2021-02-11T16:28:15Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Currently, the PublicKey types etc are completely generic. It might make sense to move them into schemes, as their size restrictions etc could then be set up correctly. However, I think this might have some downsides because you're dealing with `?Sized` types","performed_via_github_app":null}},"public":true,"created_at":"2021-02-11T16:28:15Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15154188711","type":"IssuesEvent","actor":{"id":5923577,"login":"mouse07410","display_login":"mouse07410","gravatar_id":"","url":"https://api.github.com/users/mouse07410","avatar_url":"https://avatars.githubusercontent.com/u/5923577?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/279","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/279/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/279/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/279/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/279","id":806616346,"node_id":"MDU6SXNzdWU4MDY2MTYzNDY=","number":279,"title":"Cannot run tests?","user":{"login":"mouse07410","id":5923577,"node_id":"MDQ6VXNlcjU5MjM1Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/5923577?v=4","gravatar_id":"","url":"https://api.github.com/users/mouse07410","html_url":"https://github.com/mouse07410","followers_url":"https://api.github.com/users/mouse07410/followers","following_url":"https://api.github.com/users/mouse07410/following{/other_user}","gists_url":"https://api.github.com/users/mouse07410/gists{/gist_id}","starred_url":"https://api.github.com/users/mouse07410/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mouse07410/subscriptions","organizations_url":"https://api.github.com/users/mouse07410/orgs","repos_url":"https://api.github.com/users/mouse07410/repos","events_url":"https://api.github.com/users/mouse07410/events{/privacy}","received_events_url":"https://api.github.com/users/mouse07410/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-02-11T17:58:02Z","updated_at":"2021-02-11T17:58:02Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"MacOS 10.15.7, Xcode-12.4 (probably not relevant here, but...).\r\n\r\nInitially, I could not run tests because the make-script could not load dynamic library. *Problem with the upstream, unresolved.*\r\n\r\nChanging the build to producing static library, the tests can run - but some are skipped with this message:\r\n```\r\ntest_tlsextms needs the dynamic engine feature enabled\r\n```\r\n\r\nWhat's this \"dynamic engine feature\"? How do I enable it - just by removing `no-shared` from the `./Configuration ...` command?","performed_via_github_app":null}},"public":true,"created_at":"2021-02-11T17:58:02Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
