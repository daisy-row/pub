{"id":"15116229580","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-09T06:20:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/775700320","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-775700320","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":775700320,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NTcwMDMyMA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T06:20:05Z","updated_at":"2021-02-09T06:20:05Z","author_association":"MEMBER","body":"What's the plan with this PR now? The logic has already proven its value but it looks like it's clearly running for too long, e.g., to regularly allow CI to pass. What about the idea to remove this test from CI but mandate running it (locally) successfully before assigning a new release number? Adding a line item to do so to https://github.com/open-quantum-safe/liboqs/wiki/Release-process-(Under-construction) might be sufficient.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T06:20:05Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15116446751","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/899","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/899/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/899/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/899/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/899","id":804013240,"node_id":"MDU6SXNzdWU4MDQwMTMyNDA=","number":899,"title":"Missing CMake target_include_directory for Kyber768","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-02-08T22:14:14Z","updated_at":"2021-02-09T06:46:12Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Upstream Kyber768_META.yml is missing a \"common_dep: common_ref\" line, which results in  OQS_ENABLE_KEM_kyber_768 being omitted from this if statement: https://github.com/open-quantum-safe/liboqs/blob/1256e3ba99f344f52321deaf1e2606d481ffc4f1/src/kem/kyber/CMakeLists.txt#L8-L12\r\nIf you try to build liboqs with only Kyber768 (and none of the other Kyber parameter sets), the build will fail with undefined references. \r\n\r\nThis can be reproduced using my feat.minimal-build branch (jschanck/liboqs@4feed617).\r\n```sh\r\ncmake -GNinja -DOQS_MINIMAL_BUILD=ON -DOQS_KEM_DEFAULT=OQS_KEM_alg_kyber_768  ..\r\n```\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/775712295","html_url":"https://github.com/open-quantum-safe/liboqs/issues/899#issuecomment-775712295","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/899","id":775712295,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NTcxMjI5NQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T06:46:12Z","updated_at":"2021-02-09T06:46:12Z","author_association":"MEMBER","body":"Bug confirmed. Probably something for @bhess?\r\n\r\nSide note: \r\n\r\n> -DOQS_MINIMAL_BUILD=ON\r\n\r\nThis is a really nice new build switch: hope you intend to do a PR for this: Fast(er) build, (comparatively) small lib, (nearly) fully functioning. Nearly: `tests/example_kem|sig` fail due to \"alg hardcoding\" - logical as it's an example; but probably needs to be skipped in testing if this option is set.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T06:46:12Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15117422435","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/900","id":804317205,"node_id":"MDU6SXNzdWU4MDQzMTcyMDU=","number":900,"title":"Dilithium 3.1 update","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-09T08:11:16Z","updated_at":"2021-02-09T08:27:37Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Dilithium was recently updated to version 3.1. The new implementation needs to be pulled and the KAT need to be updated.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/775760921","html_url":"https://github.com/open-quantum-safe/liboqs/issues/900#issuecomment-775760921","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900","id":775760921,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NTc2MDkyMQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T08:27:37Z","updated_at":"2021-02-09T08:27:37Z","author_association":"MEMBER","body":"As it's still some effort (particularly when changing names) to push algorithm updates through all downstream projects, what about doing only one PR to resolve this _and_  #896 and #899? Further, does this upgrade entail an (openssl) OID update, too?","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T08:27:37Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15117721196","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/900","id":804317205,"node_id":"MDU6SXNzdWU4MDQzMTcyMDU=","number":900,"title":"Dilithium 3.1 update","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-09T08:11:16Z","updated_at":"2021-02-09T08:53:26Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Dilithium was recently updated to version 3.1. The new implementation needs to be pulled and the KAT need to be updated.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/775775354","html_url":"https://github.com/open-quantum-safe/liboqs/issues/900#issuecomment-775775354","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900","id":775775354,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NTc3NTM1NA==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T08:53:26Z","updated_at":"2021-02-09T08:53:26Z","author_association":"CONTRIBUTOR","body":"Agreed, will do a common PR with #896 and #899. There isn't a name change this time. I will check if it is safe to dedicate the current OID for Dilithium 3.1 or if it needs an update. The current OIDs were added just recently to oqs-openssl (before a new release), so it could still be fine to do the update without an OID change. What is your opinion on that?","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T08:53:26Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15117973766","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/900","id":804317205,"node_id":"MDU6SXNzdWU4MDQzMTcyMDU=","number":900,"title":"Dilithium 3.1 update","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-02-09T08:11:16Z","updated_at":"2021-02-09T09:14:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Dilithium was recently updated to version 3.1. The new implementation needs to be pulled and the KAT need to be updated.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/775787106","html_url":"https://github.com/open-quantum-safe/liboqs/issues/900#issuecomment-775787106","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900","id":775787106,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NTc4NzEwNg==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T09:14:04Z","updated_at":"2021-02-09T09:14:04Z","author_association":"MEMBER","body":"> What is your opinion on that?\r\n\r\nGiven those OIDs are in the \"OQS-public\" only since a few days, I don't see much of a problem retaining those (\"3.0\" ones). Also, as we didn't do a regular release anyone using this already clearly does at his own risk. There'd only be a (minimal) issue to OQS if those OIDs had been in use for longer in other, proprietary/in-house software and persistent artifacts (aka certs) had been created with them and there'd be people expecting interoperability with OQS. You know the maintainer of those OIDs and can determine the answer for this.\r\n\r\nWhat does make me wonder, though, is how likely it is that Dilithium 3.2, 3.3... appears soon, given it was less than a week between 3.0 was integrated and a 3.1 becomes available. Or in other words: Would it be sensible to wait resolving this issue a bit until this code settles?","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T09:14:05Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15118234762","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/900","id":804317205,"node_id":"MDU6SXNzdWU4MDQzMTcyMDU=","number":900,"title":"Dilithium 3.1 update","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-02-09T08:11:16Z","updated_at":"2021-02-09T09:35:08Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Dilithium was recently updated to version 3.1. The new implementation needs to be pulled and the KAT need to be updated.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/775799733","html_url":"https://github.com/open-quantum-safe/liboqs/issues/900#issuecomment-775799733","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900","id":775799733,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NTc5OTczMw==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T09:35:08Z","updated_at":"2021-02-09T09:35:08Z","author_association":"CONTRIBUTOR","body":"> Given those OIDs are in the \"OQS-public\" only since a few days, I don't see much of a problem retaining those (\"3.0\" ones). Also, as we didn't do a regular release anyone using this already clearly does at his own risk. There'd only be a (minimal) issue to OQS if those OIDs had been in use for longer in other, proprietary/in-house software and persistent artifacts (aka certs) had been created with them and there'd be people expecting interoperability with OQS. You know the maintainer of those OIDs and can determine the answer for this.\r\n\r\nThanks, this confirms my thought. I was mainly wondering about the openssl-side and if it is considered a rolling release or bound to a liboqs-release.\r\n\r\n> What does make me wonder, though, is how likely it is that Dilithium 3.2, 3.3... appears soon, given it was less than a week between 3.0 was integrated and a 3.1 becomes available. Or in other words: Would it be sensible to wait resolving this issue a bit until this code settles?\r\n\r\nNot likely, the short time between integration and 3.1 was more a coincidence. But I would suggest to resolve this issue until the upstream-code has been tagged.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T09:35:08Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15118465498","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/900","id":804317205,"node_id":"MDU6SXNzdWU4MDQzMTcyMDU=","number":900,"title":"Dilithium 3.1 update","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-02-09T08:11:16Z","updated_at":"2021-02-09T09:53:32Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Dilithium was recently updated to version 3.1. The new implementation needs to be pulled and the KAT need to be updated.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/775811188","html_url":"https://github.com/open-quantum-safe/liboqs/issues/900#issuecomment-775811188","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/900","id":775811188,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NTgxMTE4OA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T09:53:32Z","updated_at":"2021-02-09T09:53:32Z","author_association":"MEMBER","body":"> or bound to a liboqs-release\r\n\r\nOIDs would rather be bound to an OQS-OpenSSL release -- which in turn _is_ bound to a liboqs release. Thus, no-one _should_ rely on \"bleeding edge\" -- but you never know :) \r\n\r\n> But I would suggest to resolve this issue only after the upstream-code has been tagged.\r\n\r\nGood approach. Thanks.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T09:53:32Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15120970231","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/901","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/901/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/901/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/901/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/901","id":804519386,"node_id":"MDU6SXNzdWU4MDQ1MTkzODY=","number":901,"title":"Portability tests on ubuntu-focal CI","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-09T12:45:35Z","updated_at":"2021-02-09T13:18:10Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Portability tests are skipped on the new ubuntu-focal CI, for example here:\r\n\r\nhttps://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/1218/workflows/50fa1837-6443-4ad6-aac7-fa8fe6d1716f/jobs/12325/parallel-runs/0/steps/0-104\r\n\r\nThe likely cause is\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/1ead54fc9adb441b017d296ec5c01b1cb30dbbfe/tests/test_portability.py#L27\r\n\r\nWith python3 on Focal, the string \"Ubuntu\" is reported with `platform.version()` rather than `platform.platform()`","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/775928478","html_url":"https://github.com/open-quantum-safe/liboqs/issues/901#issuecomment-775928478","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/901","id":775928478,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NTkyODQ3OA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T13:18:10Z","updated_at":"2021-02-09T13:18:10Z","author_association":"MEMBER","body":"Good catch. Thanks!","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T13:18:10Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15124772538","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-09T17:43:57Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/776116851","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-776116851","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":776116851,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NjExNjg1MQ==","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T17:43:57Z","updated_at":"2021-02-09T17:43:57Z","author_association":"MEMBER","body":"Do the Valgrind tests actually take that much longer?  If there are a few degenerate algorithms for which it takes exceedingly long, then we could skip those but run the CI on the rest of them.  I recall that we have in the past observed weird behaviour when the CI runs pytest with many threads and some of them seem to never resolve, and if I read the output correctly it did spawn many threads, so perhaps we should try `--numprocesses=1` or some other small constant.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T17:43:57Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15125248619","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":16,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-09T18:21:39Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/776141852","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-776141852","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":776141852,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NjE0MTg1Mg==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T18:21:39Z","updated_at":"2021-02-09T18:21:39Z","author_association":"CONTRIBUTOR","body":"@dstebila Testing without valgrind takes about an hour. Testing with valgrind takes about 3 hours.\r\n\r\n@baentsch I don't think a policy of running the tests locally is sufficient. Ultimately these tests should run on several different platforms.\r\n\r\nCircleCI supports filtering jobs based on branch name. So I would recommend that we make a special \"audit\" branch which runs more expensive tests like test_constant_time. And we make it a policy that changes to cryptographic code gets merged to \"audit\" first and then to \"main\" only once it has passed the more extensive tests.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T18:21:39Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15125407935","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":17,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-09T18:34:36Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/776150138","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-776150138","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":776150138,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NjE1MDEzOA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T18:34:36Z","updated_at":"2021-02-09T18:34:36Z","author_association":"MEMBER","body":"> perhaps we should try --numprocesses=1 or some other small constant.\r\n\r\nGood idea -- worthwhile trying to see if that gets it through CI.\r\n\r\n> changes to cryptographic code gets merged to \"audit\" first and then to \"main\" only once it has passed the more extensive tests\r\n\r\nAlso a good thought -- begs the question, though, what constitutes \"cryptographic code\"? Any change in a subdirectory of `kem` and `sig`? Can one write a CI test policy in such way (only run this expensive test if code within specific directories changed)? Going this route for each more simple \"plumbing\"/adaptation/integration change feels \"too heavyweight\". \r\n\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T18:34:36Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15125412230","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":18,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-09T18:34:58Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/776150346","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-776150346","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":776150346,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NjE1MDM0Ng==","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T18:34:58Z","updated_at":"2021-02-09T18:34:58Z","author_association":"MEMBER","body":"> @dstebila Testing without valgrind takes about an hour. Testing with valgrind takes about 3 hours.\r\n\r\nAre there individual algorithms that take more than 30 minutes to run when under valgrind?  Because the specific failure in the CircleCI log is that it went 30 minutes without output, not that it exceeded the total runtime limit.\r\n\r\n> CircleCI supports filtering jobs based on branch name. So I would recommend that we make a special \"audit\" branch which runs more expensive tests like test_constant_time. And we make it a policy that changes to cryptographic code gets merged to \"audit\" first and then to \"main\" only once it has passed the more extensive tests.\r\n\r\nThere's always been an intention to move some of the CI for PQClean and OQS to one of @cryptojedi's big servers, but it hasn't happened because we've always been able to stretch with what CircleCI provides.  If we are getting beyond that, now might be the time to revisit.  ","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T18:34:59Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15125465527","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":19,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-09T18:39:26Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/776153176","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-776153176","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":776153176,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NjE1MzE3Ng==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T18:39:26Z","updated_at":"2021-02-09T18:39:26Z","author_association":"CONTRIBUTOR","body":"@dstebila The 30 minute timeout is a soft limit in CircleCI. I bumped it to an hour.\r\n\r\nI also pushed a proof of concept for only running test_constant_time when the branch name is 'audit'. I think we can skirt the question of 'what is cryptographic code' by leaving it up to the person reviewing a PR whether they want to send it off to the audit branch or not.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T18:39:26Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15125582004","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":20,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-09T18:49:14Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/776158993","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-776158993","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":776158993,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NjE1ODk5Mw==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T18:49:14Z","updated_at":"2021-02-09T18:49:14Z","author_association":"MEMBER","body":"> I also pushed a proof of concept for only running test_constant_time when the branch name is 'audit'. I think we can skirt the question of 'what is cryptographic code' by leaving it up to the person reviewing a PR whether they want to send it off to the audit branch or not.\r\n\r\nWhat about extending this a bit and running it on any branch that has the term \"audit\" _in_ its name? This way, the creator of the PR already has it in his hands to trigger \"the full monty\" (and the reviewer already gets to see the results -- or request it if he things this moniker is necessary)?","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T18:49:14Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15127239999","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":21,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-09T21:12:54Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/776247380","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-776247380","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":776247380,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NjI0NzM4MA==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-02-09T21:12:54Z","updated_at":"2021-02-09T21:12:54Z","author_association":"CONTRIBUTOR","body":"> What about extending this a bit and running it on any branch that has the term \"audit\" _in_ its name? This way, the creator of the PR already has it in his hands to trigger \"the full monty\" (and the reviewer already gets to see the results -- or request it if he thinks this moniker is necessary)?\r\n\r\nWe can definitely make it run on any liboqs branch whose name matches the regex /^audit/, but if the PR is from a forked repo (like this one) then the branch name appears as something like 'pull/881' to circleci.\r\n\r\nIf someone wants to make an open-quantum-safe:audit branch, then I (or maybe any maintainer?) can retarget this PR and we can try out this workflow.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-09T21:12:54Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
