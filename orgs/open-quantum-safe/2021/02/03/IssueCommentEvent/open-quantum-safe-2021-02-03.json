{"id":"15045875339","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/849","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/849/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/849/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/849/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/849","id":736688035,"node_id":"MDU6SXNzdWU3MzY2ODgwMzU=","number":849,"title":"Take stock of common code","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/11","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/11","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/11/labels","id":5734378,"node_id":"MDk6TWlsZXN0b25lNTczNDM3OA==","number":11,"title":"0.5.0 RC1","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":1,"closed_issues":6,"state":"open","created_at":"2020-08-05T00:29:37Z","updated_at":"2021-01-04T14:25:36Z","due_on":null,"closed_at":null},"comments":0,"created_at":"2020-11-05T07:33:05Z","updated_at":"2021-02-03T06:21:39Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Determine which common code is actually being used by (which) QSC algorithms and which common code may be missing (incremental SHA? Additional OpenSSL wrappers to be added?)\r\n\r\nGoal: Have a \"fall-back\" code base for environments where OpenSSL is not available. In general, though, rely on OpenSSL for performance and reliability of implementation as default \"common crypto\" provider (possibly make such statement in README somewhere?)","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772264987","html_url":"https://github.com/open-quantum-safe/liboqs/issues/849#issuecomment-772264987","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/849","id":772264987,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjI2NDk4Nw==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T06:21:39Z","updated_at":"2021-02-03T06:21:39Z","author_association":"MEMBER","body":"Looks like this issue is the last hold-up for releasing 0.5.0. Merging #873 will not close this as that PR's script is only giving an indication as to which algorithms use which common code. If I recollect our conversations right we discussed also the \"inverse\" (to also check which additional common code would be good to add to liboqs). For that we'd need to review each algorithm implementation for \"common code additions\" -- or alternatively ask algorithm providers what they're missing in terms of common code (analogous to [this discussion](https://github.com/open-quantum-safe/liboqs/pull/883#issuecomment-770879536)): Is my recollection and options to close correct? Additional thoughts? ","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T06:21:39Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15045915026","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/873","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/873/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/873/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/873/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/873","id":768545851,"node_id":"MDExOlB1bGxSZXF1ZXN0NTQwOTYxMjU2","number":873,"title":"Find common code","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-12-16T07:37:54Z","updated_at":"2021-02-03T06:26:17Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/873","html_url":"https://github.com/open-quantum-safe/liboqs/pull/873","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/873.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/873.patch"},"body":"Partial fix for #849 (edit)\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772267118","html_url":"https://github.com/open-quantum-safe/liboqs/pull/873#issuecomment-772267118","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/873","id":772267118,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjI2NzExOA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T06:26:17Z","updated_at":"2021-02-03T06:26:17Z","author_association":"MEMBER","body":"\"Ready for Review\" intentionally not clicked to avoid this PR closing #849 automatically before agreement as to what's needed to close it.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T06:26:17Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15047185568","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883","id":795115893,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYyNTE4MDgy","number":883,"title":"Update copy_from_pqclean / copy_from_upstream","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2021-01-27T13:47:24Z","updated_at":"2021-02-03T08:34:17Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/883","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/883.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/883.patch"},"body":"Updates copy_from_pqclean / copy_from_upstream (#880)\r\n\r\n* Renames copy_from_pqclean to copy_from_upstream.\r\n\r\n* Adds 'upstreams' field to copy_from_upstream.yml, allowing to specify upstream repositories, branches and commits.\r\n\r\n```\r\nupstreams:\r\n  -\r\n    name: pqclean\r\n    git_url: https://github.com/PQClean/PQClean.git\r\n    git_branch: master\r\n    git_commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n    kem_meta_path: 'crypto_kem/{pqclean_scheme}/META.yml'\r\n    sig_meta_path: 'crypto_sign/{pqclean_scheme}/META.yml'\r\n    kem_scheme_path: 'crypto_kem/{pqclean_scheme}'\r\n    sig_scheme_path: 'crypto_sign/{pqclean_scheme}'\r\n  -\r\n    name: pqcrystals-kyber\r\n    git_url: https://github.com/pq-crystals/kyber.git\r\n    git_branch: master\r\n    git_commit: 8c8d7da74ee92808eebb6128ca209fd5851f48dc\r\n    kem_meta_path: '{pretty_name_full}_META.yml'\r\n    kem_scheme_path: '.'\r\n  -\r\n    name: pqcrystals-dilithium\r\n    git_url: https://github.com/pq-crystals/dilithium.git\r\n    git_branch: master\r\n    git_commit: bda9689704262b53f0942efdda6340b922acb58b\r\n    sig_meta_path: '{pretty_name_full}_META.yml'\r\n    sig_scheme_path: '.'\r\n...\r\n```\r\n\r\n* Modifies \"copy\" command in copy_from_upstream: sources are pulled from specified git-repositories. Implementation folders in $LIBOQS_DIR/src will be prefixed with the upstream-name.\r\n\r\n* Adds \"verify\" command in copy_from_upstream: Implementations in $LIBOQS_DIR/src are compared with expected upstream versions. Implementations that differ from upstream will be hightlighted.\r\n\r\n* Prepares for copying pqclean, pqcrystals-kyber and pqcrystals-dilithium (Round 3 versions) from upstream.\r\n\r\nHow to use copy_from_upstream:\r\n\r\n```\r\n$ ./copy_from_upstream.py --help\r\nusage: copy_from_upstream.py [-h] [-v VERBOSITY] [-k] {copy,verify}\r\n\r\npositional arguments:\r\n  {copy,verify}\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -v VERBOSITY, --verbosity VERBOSITY\r\n  -k, --keep_data\r\n```\r\n\r\nAssumed that pqclean_saber_avx2 differs from upstream, the output will be as follows:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 150 match with upstream, 1 differ\r\n-----\r\nSchemes that differ from upstream:\r\nName: pqclean_saber_avx2, expected upstream: https://github.com/PQClean/PQClean.git - commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n-----\r\n```\r\n\r\nIf any verification failed, the script returns with an exit code (1).\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n-> This PR doesn't tick the two boxes above, but after running ./copy_from_upstream, the two boxes will be ticked because of new Dilithium Round 3 schemes.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772332370","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883#issuecomment-772332370","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883","id":772332370,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjMzMjM3MA==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T08:34:17Z","updated_at":"2021-02-03T08:34:17Z","author_association":"NONE","body":"Squashed the commits. In the current state, it is ready to pull from pqclean, pqcrystals-kyber and pqcrystals-dilithium.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T08:34:17Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15049056150","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/4","id":798751248,"node_id":"MDU6SXNzdWU3OTg3NTEyNDg=","number":4,"title":"OpenSSL copyright?","user":{"login":"levitte","id":698918,"node_id":"MDQ6VXNlcjY5ODkxOA==","avatar_url":"https://avatars.githubusercontent.com/u/698918?v=4","gravatar_id":"","url":"https://api.github.com/users/levitte","html_url":"https://github.com/levitte","followers_url":"https://api.github.com/users/levitte/followers","following_url":"https://api.github.com/users/levitte/following{/other_user}","gists_url":"https://api.github.com/users/levitte/gists{/gist_id}","starred_url":"https://api.github.com/users/levitte/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/levitte/subscriptions","organizations_url":"https://api.github.com/users/levitte/orgs","repos_url":"https://api.github.com/users/levitte/repos","events_url":"https://api.github.com/users/levitte/events{/privacy}","received_events_url":"https://api.github.com/users/levitte/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-02-01T22:14:23Z","updated_at":"2021-02-03T10:58:52Z","closed_at":"2021-02-03T10:58:52Z","author_association":"NONE","active_lock_reason":null,"body":"There are a number of files in [oqsprov/](https://github.com/open-quantum-safe/oqs-provider/tree/main/oqsprov) that have the OpenSSL copyright boilerplate, which gives copyright to the OpenSSL Authors, which I understand is historical, since this was previously a patchset for OpenSSL proper.\r\n\r\nI don't think that's something you want at this point, and I can't see anything wrong with simply removing that boilerplate.  What you still have in there that could remind anyone of the built-in OpenSSL providers, it's mostly bread-and-butter lines that are only vaguely similar.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/772421403","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/4#issuecomment-772421403","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4","id":772421403,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjQyMTQwMw==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T10:58:52Z","updated_at":"2021-02-03T10:58:52Z","author_association":"MEMBER","body":"Resolved with https://github.com/open-quantum-safe/oqs-provider/commit/d6223cb1984caeaba02cf8ff89108dad2cb37046","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T10:58:52Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15049265463","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/791","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/791/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/791/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/791/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/791","id":657670194,"node_id":"MDU6SXNzdWU2NTc2NzAxOTQ=","number":791,"title":"Undefined behaviour in KeccakP-1600-times4-SIMD256","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-07-15T21:25:39Z","updated_at":"2021-02-03T11:15:02Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"When enabling clang's UndefinedBehaviorSanitizer using the build sequence\r\n```\r\nmkdir build && cd build\r\ncmake -DCMAKE_C_COMPILER=clang-9 -DCMAKE_BUILD_TYPE=Debug -DUSE_SANITIZER=Undefined -GNinja ..\r\nninja\r\n```\r\nthere are several undefined behaviours in many algorithms, related to the KeccakP-1600-times4-SIMD256 operation.  I can't tell at this point whether the undefined behaviour is present in the Keccak code package or in how code in liboqs/implementations are calling it.  Here's an example:\r\n\r\n```\r\ntests/test_kem Kyber512\r\nConfiguration info\r\n==================\r\nTarget platform:  x86_64-Linux-4.19.76-linuxkit\r\nCompiler:         clang (9.0.0 (tags/RELEASE_900/final))\r\nOQS version:      0.3.1-dev\r\nGit commit:       53937db0c2c5e40afc50c4a8be2362379ca407de\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1  11 Sep 2018)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            OpenSSL\r\n\r\n================================================================================\r\nSample computation for KEM Kyber512\r\n================================================================================\r\n/usr/lib/llvm-9/lib/clang/9.0.0/include/avxintrin.h:3145:10: runtime error: load of misaligned address 0x000001220830 for type 'const __m256i' (vector of 4 'long long' values), which requires 32 byte alignment\r\n0x000001220830: note: pointer points here\r\n 00 00 00 00  07 00 01 02 03 04 05 06  0f 08 09 0a 0b 0c 0d 0e  17 10 11 12 13 14 15 16  1f 18 19 1a\r\n              ^ \r\nUndefinedBehaviorSanitizer:DEADLYSIGNAL\r\n==5033==ERROR: UndefinedBehaviorSanitizer: SEGV on unknown address 0x000000000000 (pc 0x000000bc2081 bp 0x7fa205e65fb0 sp 0x7fa205e1d640 T5034)\r\n==5033==The signal is caused by a READ memory access.\r\n==5033==Hint: address points to the zero page.\r\n    #0 0xbc2080 in KeccakP1600times4_PermuteAll_24rounds /root/liboqs/build/../src/common/sha3/keccak4x/KeccakP-1600-times4-SIMD256.c\r\n    #1 0xb80301 in keccak_squeezeblocks4x /root/liboqs/build/../src/kem/kyber/pqclean_kyber512_avx2/fips202x4.c:101:9\r\n    #2 0xb802ad in PQCLEAN_KYBER512_AVX2_shake128x4_squeezeblocks /root/liboqs/build/../src/kem/kyber/pqclean_kyber512_avx2/fips202x4.c:154:5\r\n    #3 0xa1c4aa in gen_matrix /root/liboqs/build/../src/kem/kyber/pqclean_kyber512_avx2/indcpa.c:149:5\r\n    #4 0xa1bbd9 in PQCLEAN_KYBER512_AVX2_indcpa_keypair /root/liboqs/build/../src/kem/kyber/pqclean_kyber512_avx2/indcpa.c:192:5\r\n    #5 0x67423f in PQCLEAN_KYBER512_AVX2_crypto_kem_keypair /root/liboqs/build/../src/kem/kyber/pqclean_kyber512_avx2/kem.c:22:5\r\n    #6 0x673209 in OQS_KEM_kyber_512_keypair /root/liboqs/build/../src/kem/kyber/kem_kyber_512.c:49:23\r\n    #7 0x42b961 in OQS_KEM_keypair /root/liboqs/build/../src/kem/kem.c:805:10\r\n    #8 0x424e9a in kem_test_correctness /root/liboqs/build/../tests/test_kem.c:78:7\r\n    #9 0x424115 in test_wrapper /root/liboqs/build/../tests/test_kem.c:151:11\r\n    #10 0x7fa2068866da in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76da)\r\n    #11 0x7fa205f8b88e in clone (/lib/x86_64-linux-gnu/libc.so.6+0x12188e)\r\n\r\nUndefinedBehaviorSanitizer can not provide additional info.\r\n==5033==ABORTING\r\n```\r\n\r\nI thought it might be due to the variable `state` in [indcpa.c/gen_matrix](https://github.com/open-quantum-safe/liboqs/blob/53937db0c2c5e40afc50c4a8be2362379ca407de/src/kem/kyber/pqclean_kyber512_avx2/indcpa.c#L141) being on the heap, so I tried allocating its contents using aligned\\_alloc, but to no avail.  I'm at a loss at how to proceed.  Any ideas? @thomwiggers @cryptojedi @baentsch ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772431186","html_url":"https://github.com/open-quantum-safe/liboqs/issues/791#issuecomment-772431186","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/791","id":772431186,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjQzMTE4Ng==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T11:15:01Z","updated_at":"2021-02-03T11:15:01Z","author_association":"NONE","body":"There is an upstream fix in Kyber for the keccak code that might have fixed the undefined behavior:\r\nhttps://github.com/pq-crystals/kyber/commit/844057468e69527bd15b17fbe03f4b61f9a22065\r\n\r\nI ran clang's UndefinedBehaviorSanitizer after #891 and it didn't lead to this behavior in Kyber anymore.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T11:15:02Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15049405252","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/890","id":799671515,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY2Mjc5MzE0","number":890,"title":"Pull round 3 Dilithium from PQClean","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-02T20:45:44Z","updated_at":"2021-02-03T11:26:51Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/890","html_url":"https://github.com/open-quantum-safe/liboqs/pull/890","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/890.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/890.patch"},"body":"This PR copies round 3 Dilithium from PQClean. An alternative is to wait for #883 to land and copy Dilithium directly from upstream. It's not clear to me how close #883 is to completion, hence this PR.\r\n\r\n> Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n\r\nYes, there are significant changes between round 2 and round 3 Dilithium.\r\n\r\n> Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\nYes, it removes dilithium4, adds dilithium5, and adds the \"_aes\" variants of dilithium2, dilithium3, and dilithium5.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772438245","html_url":"https://github.com/open-quantum-safe/liboqs/pull/890#issuecomment-772438245","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890","id":772438245,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjQzODI0NQ==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T11:26:51Z","updated_at":"2021-02-03T11:26:51Z","author_association":"NONE","body":"Looks good to me, and a good alternative to accelerate having Dilithium round 3 in.\r\n\r\nI believe #880 isn't far from completion though. There is also #891 to preview a version where #880 pulls Dilithium round 3 (and Kyber) from upstream.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T11:26:51Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15050453241","type":"IssueCommentEvent","actor":{"id":16247285,"login":"christianpaquin","display_login":"christianpaquin","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","avatar_url":"https://avatars.githubusercontent.com/u/16247285?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/849","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/849/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/849/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/849/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/849","id":736688035,"node_id":"MDU6SXNzdWU3MzY2ODgwMzU=","number":849,"title":"Take stock of common code","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/11","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/11","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/11/labels","id":5734378,"node_id":"MDk6TWlsZXN0b25lNTczNDM3OA==","number":11,"title":"0.5.0 RC1","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":1,"closed_issues":6,"state":"open","created_at":"2020-08-05T00:29:37Z","updated_at":"2021-01-04T14:25:36Z","due_on":null,"closed_at":null},"comments":2,"created_at":"2020-11-05T07:33:05Z","updated_at":"2021-02-03T12:53:52Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Determine which common code is actually being used by (which) QSC algorithms and which common code may be missing (incremental SHA? Additional OpenSSL wrappers to be added?)\r\n\r\nGoal: Have a \"fall-back\" code base for environments where OpenSSL is not available. In general, though, rely on OpenSSL for performance and reliability of implementation as default \"common crypto\" provider (possibly make such statement in README somewhere?)","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772485974","html_url":"https://github.com/open-quantum-safe/liboqs/issues/849#issuecomment-772485974","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/849","id":772485974,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjQ4NTk3NA==","user":{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T12:53:52Z","updated_at":"2021-02-03T12:53:52Z","author_association":"CONTRIBUTOR","body":"Do we want to wait for this for 0.5? I'm fine to deal with this in the next release?","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T12:53:52Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15050529969","type":"IssueCommentEvent","actor":{"id":16247285,"login":"christianpaquin","display_login":"christianpaquin","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","avatar_url":"https://avatars.githubusercontent.com/u/16247285?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888","id":798705397,"node_id":"MDU6SXNzdWU3OTg3MDUzOTc=","number":888,"title":"Expert review needed for SIKE constant time warnings","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-01T21:02:58Z","updated_at":"2021-02-03T12:59:56Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Automated tests have identified a few instances of potentially non-constant time behaviour in SIKE. The tests produce a lot of false positives, so there's a good chance that these are benign, but I'm not expert enough to evaluate them. Help appreciated!\r\n\r\n- Lines 590 and 993 of sidh_compressed.c invert an element of Fp^2 using a non-constant time binary gcd (fp2inv_mont_bingcd).\r\n- Line 654 of ec_isogeny.c leaks the number of leading zeros in the \"m\" input to Ladder. This function is called from validate_ciphertext on line 1434 of sidh_compressed.c.\r\n\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772489348","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888#issuecomment-772489348","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","id":772489348,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjQ4OTM0OA==","user":{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T12:59:56Z","updated_at":"2021-02-03T12:59:56Z","author_association":"CONTRIBUTOR","body":"I forwarded this to the SIKE library dev; waiting for review.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T12:59:57Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15050585453","type":"IssueCommentEvent","actor":{"id":16247285,"login":"christianpaquin","display_login":"christianpaquin","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","avatar_url":"https://avatars.githubusercontent.com/u/16247285?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/889","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/889/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/889/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/889/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/889","id":798735891,"node_id":"MDU6SXNzdWU3OTg3MzU4OTE=","number":889,"title":"Expert review needed for Picnic constant time warning","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-01T21:48:54Z","updated_at":"2021-02-03T13:04:12Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"In picnic3_simulate.c.i a return code is set by branching on the output of \"timingsafe_bcmp\".\r\n```c\r\n  if (timingsafe_bcmp(output, pubKey, params->output_size) != 0) {\r\n    ret = -1;\r\n  }\r\n  return ret;\r\n```\r\nThe name \"timingsafe_bcmp\" suggests to me that `ret` should be set using a constant time arithmetic expression instead, but I'd appreciate a review from someone familiar with the Picnic code.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772491973","html_url":"https://github.com/open-quantum-safe/liboqs/issues/889#issuecomment-772491973","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/889","id":772491973,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjQ5MTk3Mw==","user":{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T13:04:12Z","updated_at":"2021-02-03T13:04:12Z","author_association":"CONTRIBUTOR","body":"I forwarded this to the picnic devs; waiting for review.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T13:04:12Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15050728786","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888","id":798705397,"node_id":"MDU6SXNzdWU3OTg3MDUzOTc=","number":888,"title":"Expert review needed for SIKE constant time warnings","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-02-01T21:02:58Z","updated_at":"2021-02-03T13:15:37Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Automated tests have identified a few instances of potentially non-constant time behaviour in SIKE. The tests produce a lot of false positives, so there's a good chance that these are benign, but I'm not expert enough to evaluate them. Help appreciated!\r\n\r\n- Lines 590 and 993 of sidh_compressed.c invert an element of Fp^2 using a non-constant time binary gcd (fp2inv_mont_bingcd).\r\n- Line 654 of ec_isogeny.c leaks the number of leading zeros in the \"m\" input to Ladder. This function is called from validate_ciphertext on line 1434 of sidh_compressed.c.\r\n\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772498364","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888#issuecomment-772498364","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","id":772498364,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjQ5ODM2NA==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T13:15:37Z","updated_at":"2021-02-03T13:15:37Z","author_association":"NONE","body":"Thank you for the report!\r\n\r\n> * Lines 590 and 993 of sidh_compressed.c invert an element of Fp^2 using a non-constant time binary gcd (fp2inv_mont_bingcd).\r\n\r\nThis won't be an issue since the Fp^2 inversion is done on the public curve Montgomery coefficient.\r\n\r\n> * Line 654 of ec_isogeny.c leaks the number of leading zeros in the \"m\" input to Ladder. This function is called from validate_ciphertext on line 1434 of sidh_compressed.c.\r\n\r\nThis is currently in review with the SIKE team.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T13:15:37Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15052333017","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888","id":798705397,"node_id":"MDU6SXNzdWU3OTg3MDUzOTc=","number":888,"title":"Expert review needed for SIKE constant time warnings","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-02-01T21:02:58Z","updated_at":"2021-02-03T15:05:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Automated tests have identified a few instances of potentially non-constant time behaviour in SIKE. The tests produce a lot of false positives, so there's a good chance that these are benign, but I'm not expert enough to evaluate them. Help appreciated!\r\n\r\n- Lines 590 and 993 of sidh_compressed.c invert an element of Fp^2 using a non-constant time binary gcd (fp2inv_mont_bingcd).\r\n- Line 654 of ec_isogeny.c leaks the number of leading zeros in the \"m\" input to Ladder. This function is called from validate_ciphertext on line 1434 of sidh_compressed.c.\r\n\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772576837","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888#issuecomment-772576837","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","id":772576837,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjU3NjgzNw==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T15:05:22Z","updated_at":"2021-02-03T15:05:22Z","author_association":"NONE","body":"Thanks for taking a look.\r\n\r\n> > * Lines 590 and 993 of sidh_compressed.c invert an element of Fp^2 using a non-constant time binary gcd (fp2inv_mont_bingcd).\r\n> \r\n> This won't be an issue since the Fp^2 inversion is done on the public curve Montgomery coefficient.\r\n\r\nIt's ever so slightly more subtle, no? I agree that it's safe to perform non-constant time operations on the public curve Montgomery coefficient \"A\". The issue here is that just before Line 590 we have A presented as (A24 : C24). Line 590 computes 1/C24 in variable time, and it's not obvious to me that it is safe to leak C24.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T15:05:22Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15053539310","type":"IssueCommentEvent","actor":{"id":114613,"login":"sebastinas","display_login":"sebastinas","gravatar_id":"","url":"https://api.github.com/users/sebastinas","avatar_url":"https://avatars.githubusercontent.com/u/114613?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/889","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/889/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/889/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/889/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/889","id":798735891,"node_id":"MDU6SXNzdWU3OTg3MzU4OTE=","number":889,"title":"Expert review needed for Picnic constant time warning","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-02-01T21:48:54Z","updated_at":"2021-02-03T16:24:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"In picnic3_simulate.c.i a return code is set by branching on the output of \"timingsafe_bcmp\".\r\n```c\r\n  if (timingsafe_bcmp(output, pubKey, params->output_size) != 0) {\r\n    ret = -1;\r\n  }\r\n  return ret;\r\n```\r\nThe name \"timingsafe_bcmp\" suggests to me that `ret` should be set using a constant time arithmetic expression instead, but I'd appreciate a review from someone familiar with the Picnic code.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772636070","html_url":"https://github.com/open-quantum-safe/liboqs/issues/889#issuecomment-772636070","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/889","id":772636070,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjYzNjA3MA==","user":{"login":"sebastinas","id":114613,"node_id":"MDQ6VXNlcjExNDYxMw==","avatar_url":"https://avatars.githubusercontent.com/u/114613?v=4","gravatar_id":"","url":"https://api.github.com/users/sebastinas","html_url":"https://github.com/sebastinas","followers_url":"https://api.github.com/users/sebastinas/followers","following_url":"https://api.github.com/users/sebastinas/following{/other_user}","gists_url":"https://api.github.com/users/sebastinas/gists{/gist_id}","starred_url":"https://api.github.com/users/sebastinas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sebastinas/subscriptions","organizations_url":"https://api.github.com/users/sebastinas/orgs","repos_url":"https://api.github.com/users/sebastinas/repos","events_url":"https://api.github.com/users/sebastinas/events{/privacy}","received_events_url":"https://api.github.com/users/sebastinas/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T16:24:48Z","updated_at":"2021-02-03T16:24:48Z","author_association":"NONE","body":"This compare does not need to be constant time as it does not leak bits of the secret key. The if is there as a safeguard to ensure we do not break signing when working on the code and for debugging (see https://github.com/IAIK/Picnic/blob/master/picnic3_simulate.c.i#L44). I'll add a comment and some TIMECOP annotations for this part of the to make this clear.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T16:24:48Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15054063582","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/890","id":799671515,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY2Mjc5MzE0","number":890,"title":"Pull round 3 Dilithium from PQClean","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-02T20:45:44Z","updated_at":"2021-02-03T16:59:19Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/890","html_url":"https://github.com/open-quantum-safe/liboqs/pull/890","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/890.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/890.patch"},"body":"This PR copies round 3 Dilithium from PQClean. An alternative is to wait for #883 to land and copy Dilithium directly from upstream. It's not clear to me how close #883 is to completion, hence this PR.\r\n\r\n> Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n\r\nYes, there are significant changes between round 2 and round 3 Dilithium.\r\n\r\n> Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\nYes, it removes dilithium4, adds dilithium5, and adds the \"_aes\" variants of dilithium2, dilithium3, and dilithium5.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772662701","html_url":"https://github.com/open-quantum-safe/liboqs/pull/890#issuecomment-772662701","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890","id":772662701,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjY2MjcwMQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T16:59:19Z","updated_at":"2021-02-03T16:59:19Z","author_association":"MEMBER","body":"> I believe #880 isn't far from completion though. \r\n\r\nAs discussed, we're all agreed on this point. @jschanck Thus, we thank you very much for your work on this PR but prefer doing a direct \"highest upstream\" import in favour of a pull from PQClean/this PR. So, can we ask you to either close this PR or provide reasons why #890 should be prioritized over #880+#891?","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T16:59:20Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15054546005","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","id":800165604,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY2Njk2MTc2","number":891,"title":"Sync upstream with copy_from_upstram / pqcrystals pull","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-02-03T09:56:41Z","updated_at":"2021-02-03T17:34:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/891","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/891.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/891.patch"},"body":"This PR is to show the changes after copy_from_upstream with #880.\r\n\r\nIt will also be an alternative to #890.\r\n\r\nWith this configuration, it is pulling the latest Kyber round 3 and Dilithium round 3 from pqcrystals-upstream.\r\n\r\nThe updates can be reproduced like this:\r\n\r\n```\r\n$ ./copy_from_upstream copy\r\n```\r\n\r\nTo verify that the synced version matches with upstream versions:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 151 match with upstream, 0 differ\r\n-----\r\n```\r\n\r\nNote that this PR might have to be rebased after #880 is merged.\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n\r\nChanges to Dilithium Round 3 KAT. Adds Dilithium Round 3 algorithms (2, 3, 5, 2-AES, 3-AES, 5-AES)\r\n\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772688097","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891#issuecomment-772688097","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","id":772688097,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjY4ODA5Nw==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T17:34:26Z","updated_at":"2021-02-03T17:34:26Z","author_association":"NONE","body":"Thanks for the review. As discussed today, I've added a reminder to the output of #880 to manually update the .md files for now. The docs will be a candidate for further yml'izing and auto-generating later.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T17:34:26Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15054733933","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","id":800165604,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY2Njk2MTc2","number":891,"title":"Sync upstream with copy_from_upstram / pqcrystals pull","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-03T09:56:41Z","updated_at":"2021-02-03T17:49:10Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/891","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/891.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/891.patch"},"body":"This PR is to show the changes after copy_from_upstream with #880.\r\n\r\nIt will also be an alternative to #890.\r\n\r\nWith this configuration, it is pulling the latest Kyber round 3 and Dilithium round 3 from pqcrystals-upstream.\r\n\r\nThe updates can be reproduced like this:\r\n\r\n```\r\n$ ./copy_from_upstream copy\r\n```\r\n\r\nTo verify that the synced version matches with upstream versions:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 151 match with upstream, 0 differ\r\n-----\r\n```\r\n\r\nNote that this PR might have to be rebased after #880 is merged.\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n\r\nChanges to Dilithium Round 3 KAT. Adds Dilithium Round 3 algorithms (2, 3, 5, 2-AES, 3-AES, 5-AES)\r\n\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772698099","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891#issuecomment-772698099","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","id":772698099,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjY5ODA5OQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T17:49:10Z","updated_at":"2021-02-03T17:49:10Z","author_association":"MEMBER","body":"> The docs will be a candidate for further yml'izing and auto-generating later.\r\n\r\nAgreed. So next steps are then: You resolve conflicts created by the merge of #880 (out of curiosity: why did they happen in the first place?) and update this PR. When CI on the updated/re-based PR pass, I'll do my best to review again/approve tomorrow so we may also have landed this PR same time tomorrow (unless someone else gets around to looking at it quicker). I did create #893 to not forget about the documentation issue.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T17:49:10Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15054987519","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","id":800165604,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY2Njk2MTc2","number":891,"title":"Sync upstream with copy_from_upstram / pqcrystals pull","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-02-03T09:56:41Z","updated_at":"2021-02-03T18:09:52Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/891","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/891.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/891.patch"},"body":"This PR is to show the changes after copy_from_upstream with #880.\r\n\r\nIt will also be an alternative to #890.\r\n\r\nWith this configuration, it is pulling the latest Kyber round 3 and Dilithium round 3 from pqcrystals-upstream.\r\n\r\nThe updates can be reproduced like this:\r\n\r\n```\r\n$ ./copy_from_upstream copy\r\n```\r\n\r\nTo verify that the synced version matches with upstream versions:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 151 match with upstream, 0 differ\r\n-----\r\n```\r\n\r\nNote that this PR might have to be rebased after #880 is merged.\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n\r\nChanges to Dilithium Round 3 KAT. Adds Dilithium Round 3 algorithms (2, 3, 5, 2-AES, 3-AES, 5-AES)\r\n\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772711660","html_url":"https://github.com/open-quantum-safe/liboqs/pull/891#issuecomment-772711660","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/891","id":772711660,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjcxMTY2MA==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T18:09:52Z","updated_at":"2021-02-03T18:09:52Z","author_association":"CONTRIBUTOR","body":"This will be great. I now rebased this branch.\r\n\r\n> Agreed. So next steps are then: You resolve conflicts created by the merge of #880 (out of curiosity: why did they happen in the first place?) and update this PR.\r\n\r\nI am not sure about this. There seems to be an authentication issue with the address-sanitizer CI. It seems to occur in different independent branches, not only in mine:\r\n\r\nhttps://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/1205/workflows/11205cab-a8a2-4d01-85e3-b5cf91a577f8/jobs/12157\r\nhttps://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/1204/workflows/cfa94cc5-28f6-4ba3-b58f-4470cb598a14/jobs/12142","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T18:09:52Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15055485406","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-03T18:51:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772737439","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-772737439","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":772737439,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjczNzQzOQ==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T18:51:21Z","updated_at":"2021-02-03T18:51:21Z","author_association":"NONE","body":"Thanks for the help, Michael!\r\n\r\nI'm marking this as ready for review. There are some small outstanding issues, and some features that I would like to add, but this is useful as-is.\r\n\r\n#### Issues\r\n1. Some of the schemes (Classic McEliece, Rainbow, and SPHINCS, but maybe others) take a fairly long time to run in valgrind. I bumped the timeout from 8 minutes to 16 minutes in helpers.py, but this was not enough. My most recent commit bumps to 32 minutes, but hasn't run yet due to an authentication issue. I wonder whether this timeout is necessary at all. CircleCI probably enforces their own timeout.\r\n\r\n2. We should run all available implementations through the constant time tests. The reference implementations work fine on the linux_x64 machine, but we only end up testing avx2 implementations because of the run-time CPU feature detection. We either have to run on a set of machines that covers the set of available implementations, or we need a mechanism for overriding the choice made based on CPU features.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T18:51:22Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15056172470","type":"IssueCommentEvent","actor":{"id":698918,"login":"levitte","display_login":"levitte","gravatar_id":"","url":"https://api.github.com/users/levitte","avatar_url":"https://avatars.githubusercontent.com/u/698918?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/4","id":798751248,"node_id":"MDU6SXNzdWU3OTg3NTEyNDg=","number":4,"title":"OpenSSL copyright?","user":{"login":"levitte","id":698918,"node_id":"MDQ6VXNlcjY5ODkxOA==","avatar_url":"https://avatars.githubusercontent.com/u/698918?v=4","gravatar_id":"","url":"https://api.github.com/users/levitte","html_url":"https://github.com/levitte","followers_url":"https://api.github.com/users/levitte/followers","following_url":"https://api.github.com/users/levitte/following{/other_user}","gists_url":"https://api.github.com/users/levitte/gists{/gist_id}","starred_url":"https://api.github.com/users/levitte/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/levitte/subscriptions","organizations_url":"https://api.github.com/users/levitte/orgs","repos_url":"https://api.github.com/users/levitte/repos","events_url":"https://api.github.com/users/levitte/events{/privacy}","received_events_url":"https://api.github.com/users/levitte/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-02-01T22:14:23Z","updated_at":"2021-02-03T19:47:32Z","closed_at":"2021-02-03T10:58:52Z","author_association":"NONE","active_lock_reason":null,"body":"There are a number of files in [oqsprov/](https://github.com/open-quantum-safe/oqs-provider/tree/main/oqsprov) that have the OpenSSL copyright boilerplate, which gives copyright to the OpenSSL Authors, which I understand is historical, since this was previously a patchset for OpenSSL proper.\r\n\r\nI don't think that's something you want at this point, and I can't see anything wrong with simply removing that boilerplate.  What you still have in there that could remind anyone of the built-in OpenSSL providers, it's mostly bread-and-butter lines that are only vaguely similar.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/772775680","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/4#issuecomment-772775680","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/4","id":772775680,"node_id":"MDEyOklzc3VlQ29tbWVudDc3Mjc3NTY4MA==","user":{"login":"levitte","id":698918,"node_id":"MDQ6VXNlcjY5ODkxOA==","avatar_url":"https://avatars.githubusercontent.com/u/698918?v=4","gravatar_id":"","url":"https://api.github.com/users/levitte","html_url":"https://github.com/levitte","followers_url":"https://api.github.com/users/levitte/followers","following_url":"https://api.github.com/users/levitte/following{/other_user}","gists_url":"https://api.github.com/users/levitte/gists{/gist_id}","starred_url":"https://api.github.com/users/levitte/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/levitte/subscriptions","organizations_url":"https://api.github.com/users/levitte/orgs","repos_url":"https://api.github.com/users/levitte/repos","events_url":"https://api.github.com/users/levitte/events{/privacy}","received_events_url":"https://api.github.com/users/levitte/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T19:47:32Z","updated_at":"2021-02-03T19:47:32Z","author_association":"NONE","body":"You missed a spot :wink:\r\n\r\nhttps://github.com/open-quantum-safe/oqs-provider/blob/d6223cb1984caeaba02cf8ff89108dad2cb37046/test/oqs_test_groups.c#L17-L24","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T19:47:32Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15056755583","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/890","id":799671515,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY2Mjc5MzE0","number":890,"title":"Pull round 3 Dilithium from PQClean","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-02T20:45:44Z","updated_at":"2021-02-03T20:39:05Z","closed_at":"2021-02-03T20:39:05Z","author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/890","html_url":"https://github.com/open-quantum-safe/liboqs/pull/890","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/890.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/890.patch"},"body":"This PR copies round 3 Dilithium from PQClean. An alternative is to wait for #883 to land and copy Dilithium directly from upstream. It's not clear to me how close #883 is to completion, hence this PR.\r\n\r\n> Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n\r\nYes, there are significant changes between round 2 and round 3 Dilithium.\r\n\r\n> Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\nYes, it removes dilithium4, adds dilithium5, and adds the \"_aes\" variants of dilithium2, dilithium3, and dilithium5.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772807178","html_url":"https://github.com/open-quantum-safe/liboqs/pull/890#issuecomment-772807178","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/890","id":772807178,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjgwNzE3OA==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T20:39:05Z","updated_at":"2021-02-03T20:39:05Z","author_association":"NONE","body":"My preference is also for pulling from the \"highest upstream\", but in most cases (including kyber and dilithium) we need to patch the upstream code before it will hook into our common code.\r\n\r\n#891 imports redundant AES and fips202 code instead of doing this patching.\r\n\r\nPQClean does the patching for reference implementations, but imports redundant AES and fips202 for platform specific implementations.\r\n\r\nNeither is perfect.\r\n\r\nI think we should extend copy_from_upstream with a patching mechanism, and deal with the common code issue. But I have no objection to merging #891 in the meantime, so I'll close this PR.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T20:39:06Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15058562342","type":"IssueCommentEvent","actor":{"id":9383677,"login":"geovandro","display_login":"geovandro","gravatar_id":"","url":"https://api.github.com/users/geovandro","avatar_url":"https://avatars.githubusercontent.com/u/9383677?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888","id":798705397,"node_id":"MDU6SXNzdWU3OTg3MDUzOTc=","number":888,"title":"Expert review needed for SIKE constant time warnings","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-02-01T21:02:58Z","updated_at":"2021-02-03T23:43:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Automated tests have identified a few instances of potentially non-constant time behaviour in SIKE. The tests produce a lot of false positives, so there's a good chance that these are benign, but I'm not expert enough to evaluate them. Help appreciated!\r\n\r\n- Lines 590 and 993 of sidh_compressed.c invert an element of Fp^2 using a non-constant time binary gcd (fp2inv_mont_bingcd).\r\n- Line 654 of ec_isogeny.c leaks the number of leading zeros in the \"m\" input to Ladder. This function is called from validate_ciphertext on line 1434 of sidh_compressed.c.\r\n\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/772904938","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888#issuecomment-772904938","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","id":772904938,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MjkwNDkzOA==","user":{"login":"geovandro","id":9383677,"node_id":"MDQ6VXNlcjkzODM2Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/9383677?v=4","gravatar_id":"","url":"https://api.github.com/users/geovandro","html_url":"https://github.com/geovandro","followers_url":"https://api.github.com/users/geovandro/followers","following_url":"https://api.github.com/users/geovandro/following{/other_user}","gists_url":"https://api.github.com/users/geovandro/gists{/gist_id}","starred_url":"https://api.github.com/users/geovandro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geovandro/subscriptions","organizations_url":"https://api.github.com/users/geovandro/orgs","repos_url":"https://api.github.com/users/geovandro/repos","events_url":"https://api.github.com/users/geovandro/events{/privacy}","received_events_url":"https://api.github.com/users/geovandro/received_events","type":"User","site_admin":false},"created_at":"2021-02-03T23:43:20Z","updated_at":"2021-02-03T23:43:20Z","author_association":"NONE","body":"> Thanks for taking a look.\r\n> \r\n> > > * Lines 590 and 993 of sidh_compressed.c invert an element of Fp^2 using a non-constant time binary gcd (fp2inv_mont_bingcd).\r\n> > \r\n> > \r\n> > This won't be an issue since the Fp^2 inversion is done on the public curve Montgomery coefficient.\r\n> \r\n> It's ever so slightly more subtle, no? I agree that it's safe to perform non-constant time operations on the public curve Montgomery coefficient \"A\". The issue here is that just before Line 590 we have A presented as (A24 : C24). Line 590 computes 1/C24 in variable time, and it's not obvious to me that it is safe to leak C24.\r\n\r\nHi John, thanks again for the report. \r\nRegarding the above comment, the values in the projective representation [A24+:C24] \\equiv [A+2C:4C] (where a = A/C is the public Montgomery curve coefficient) are the actual output of the 2^e-isogeny computation algorithm as per SIKE specification (see Algs. 17 and 19 of https://sike.org/files/SIDH-spec.pdf), so no extra harm in leaking C24. What is happening at Line 590 is that we are already doing the job of converting from [A24+:C24] into its normalized form [a : 1] so that we can transmit the public coefficient in a shorter format.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-03T23:43:20Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
