{"id":"15015614400","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/243","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/243/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/243/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/243/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/243","id":716642968,"node_id":"MDU6SXNzdWU3MTY2NDI5Njg=","number":243,"title":"Start migrating to OpenSSL 3.0","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"assignees":[{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false}],"milestone":null,"comments":21,"created_at":"2020-10-07T15:40:06Z","updated_at":"2021-02-01T08:32:42Z","closed_at":"2021-02-01T08:32:42Z","author_association":"MEMBER","active_lock_reason":null,"body":"New APIs that we'll be able to make use of, including an EVP API for KEMs and forthcoming pluggable KEMs in TLS 1.3 (#233, https://github.com/openssl/openssl/pull/13018).","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/770673930","html_url":"https://github.com/open-quantum-safe/openssl/issues/243#issuecomment-770673930","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/243","id":770673930,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDY3MzkzMA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-01T08:32:42Z","updated_at":"2021-02-01T08:32:42Z","author_association":"MEMBER","body":"All work items as per the above complete with https://github.com/open-quantum-safe/oqs-provider/pull/1. \r\n\r\nFurther discussions regarding OQS-OpenSSL provider to occur in https://github.com/open-quantum-safe/oqs-provider/issues","performed_via_github_app":null}},"public":true,"created_at":"2021-02-01T08:32:42Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15017922590","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/884","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/884/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/884/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/884/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/884","id":795758217,"node_id":"MDU6SXNzdWU3OTU3NTgyMTc=","number":884,"title":"Contributing guide update","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-01-28T07:45:47Z","updated_at":"2021-02-01T11:30:12Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"This is to foster a discussion on updates to [Contributing wiki](https://github.com/open-quantum-safe/liboqs/wiki/Contributing-guide)\r\n\r\n> The code must build on Linux, macOS, and Windows.\r\n\r\nThis is not true for all algorithms, right? Suggested rephrase:\r\n\r\n> The code must build at least on Linux (x86_64). Optimizations and other operating systems supported may be supported and must be suitably registered for each algorithm in https://github.com/open-quantum-safe/liboqs/blob/main/.CMake/alg_support.cmake\r\n\r\nAlso this statement isn't quite correct for all algorithms: \r\n\r\n> Source code must be formatted in accordance with our formatting requirements (make prettyprint).\r\n\r\nIssues: a) We're not using `make` any more and b) this only applies to OQS core code, not the actual algorithms. So I suggest to introduce a new section \"Common code\" and move the above statement there changed as follows:\r\n\r\n> Source code contributed to OQS core code must be formatted in accordance with our formatting requirements. Non-OQS core code is any code not originally created in this repository but only imported manually or automatically, such as specific quantum-safe algorithms. Adherence to our formatting requirements is successfully tested by executing `./tests/run_astyle.sh` in the liboqs project root folder without \"Formatting\" statements returned. Passing this test is a prerequisite for successful CI.\r\n\r\nThe `Automated inclusion` section needs to be re-written once #883 is landed.\r\n\r\nRegarding [Testing](https://github.com/open-quantum-safe/liboqs/wiki/Contributing-guide#testing):\r\n\r\nWhat about changing that heading to \"Continuous Integration Testing (CI)\" ?\r\n\r\nIssues: We are not testing Centos 7 any more, so we need to drop the statement. \r\n\r\nRegarding Ubuntu: Would it be time to upgrade to a more recent LTS than 18.04? Canonical main stream is 20.04. -> I'd suggest to agree a time frame for this update.\r\n\r\nDo we further want to posit\r\n\r\n> Normal pull requests (PRs) must have all CI tests pass. Non-standard PRs must explain the reasons for breaking CI as well as a plan how to get CI to work again.\r\n\r\nIf so, we further face the issue that only core team members can actually trigger full CI. So should the further demand passing all CI tests locally be explicitly stated? Not really sure what to recommend here, so leaving a recommendation away at this time.\r\n\r\nNext steps: Please comment below with changes, additions, etc. so we can agree in a next meeting how to close out this issue.\r\n\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/770788032","html_url":"https://github.com/open-quantum-safe/liboqs/issues/884#issuecomment-770788032","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/884","id":770788032,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDc4ODAzMg==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-01T11:30:12Z","updated_at":"2021-02-01T11:30:12Z","author_association":"MEMBER","body":"Mostly implemented. Will close when new code import wording is available (after #883 is merged).","performed_via_github_app":null}},"public":true,"created_at":"2021-02-01T11:30:12Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15019858611","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883","id":795115893,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYyNTE4MDgy","number":883,"title":"Update copy_from_pqclean / copy_from_upstream","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-01-27T13:47:24Z","updated_at":"2021-02-01T14:03:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/883","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/883.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/883.patch"},"body":"Updates copy_from_pqclean / copy_from_upstream (#880)\r\n\r\n* Renames copy_from_pqclean to copy_from_upstream.\r\n\r\n* Adds 'upstreams' field to copy_from_upstream.yml, allowing to specify upstream repositories, branches and commits.\r\n\r\n```\r\nupstreams:\r\n  -\r\n    name: pqclean\r\n    git_url: https://github.com/PQClean/PQClean.git\r\n    git_branch: master\r\n    git_commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n    kem_meta_path: 'crypto_kem/{pqclean_scheme}/META.yml'\r\n    sig_meta_path: 'crypto_sign/{pqclean_scheme}/META.yml'\r\n    kem_scheme_path: 'crypto_kem/{pqclean_scheme}'\r\n    sig_scheme_path: 'crypto_sign/{pqclean_scheme}'\r\n  -\r\n    name: pqcrystals-kyber\r\n    git_url: https://github.com/pq-crystals/kyber.git\r\n    git_branch: master\r\n    git_commit: 8c8d7da74ee92808eebb6128ca209fd5851f48dc\r\n    kem_meta_path: '{pretty_name_full}_META.yml'\r\n    kem_scheme_path: '.'\r\n  -\r\n    name: pqcrystals-dilithium\r\n    git_url: https://github.com/pq-crystals/dilithium.git\r\n    git_branch: master\r\n    git_commit: bda9689704262b53f0942efdda6340b922acb58b\r\n    sig_meta_path: '{pretty_name_full}_META.yml'\r\n    sig_scheme_path: '.'\r\n...\r\n```\r\n\r\n* Modifies \"copy\" command in copy_from_upstream: sources are pulled from specified git-repositories. Implementation folders in $LIBOQS_DIR/src will be prefixed with the upstream-name.\r\n\r\n* Adds \"verify\" command in copy_from_upstream: Implementations in $LIBOQS_DIR/src are compared with expected upstream versions. Implementations that differ from upstream will be hightlighted.\r\n\r\n* Prepares for copying pqclean, pqcrystals-kyber and pqcrystals-dilithium (Round 3 versions) from upstream.\r\n\r\nHow to use copy_from_upstream:\r\n\r\n```\r\n$ ./copy_from_upstream.py --help\r\nusage: copy_from_upstream.py [-h] [-v VERBOSITY] [-k] {copy,verify}\r\n\r\npositional arguments:\r\n  {copy,verify}\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -v VERBOSITY, --verbosity VERBOSITY\r\n  -k, --keep_data\r\n```\r\n\r\nAssumed that pqclean_saber_avx2 differs from upstream, the output will be as follows:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 150 match with upstream, 1 differ\r\n-----\r\nSchemes that differ from upstream:\r\nName: pqclean_saber_avx2, expected upstream: https://github.com/PQClean/PQClean.git - commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n-----\r\n```\r\n\r\nIf any verification failed, the script returns with an exit code (1).\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n-> This PR doesn't tick the two boxes above, but after running ./copy_from_upstream, the two boxes will be ticked because of new Dilithium Round 3 schemes.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/770879536","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883#issuecomment-770879536","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883","id":770879536,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDg3OTUzNg==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-01T14:03:22Z","updated_at":"2021-02-01T14:03:22Z","author_association":"NONE","body":"I've pushed another commit that adds the possibility to declare common code used across implementations in an upstream location. This will avoid issues with duplicate symbols if the code is replicated for each implementation. It also reduces code duplication in the imported sources.\r\n\r\nI think that ideally, common code would be provided centrally by liboqs as shims. But I also see that can be beneficial for upstreams to define their own common code without having to change the liboqs core code (shims). So I see this as complementary to the code provided in `src/common`.\r\n\r\nAn example for pqcrystals-dilithium:\r\n\r\nThe upstream can define a .yml-file to define common code. This file is defined in a field `common_meta_path` in copy_from_upstream.yml. If there is no such field defined, the import behavior is the same as before:\r\n```\r\nupstreams:\r\n...\r\n  -\r\n    name: pqcrystals-dilithium\r\n...\r\n    common_meta_path: 'Common_META.yml'\r\n...\r\n```\r\n\r\nThe `Common_META.yml` can look as follows:\r\n\r\n```\r\ncommons:\r\n  - name: common_ref\r\n    folder_name: ref\r\n    sources: aes256ctr.c aes256ctr.h fips202.c fips202.h\r\n  - name: common_aes\r\n    folder_name: avx2\r\n    sources: aes256ctr.c aes256ctr.h\r\n    supported_platforms:\r\n      - architecture: x86_64\r\n        operating_systems:\r\n          - Darwin\r\n          - Linux\r\n        required_flags:\r\n          - aes\r\n          - sse2\r\n          - ssse3\r\n  - name: common_avx2\r\n    folder_name: avx2\r\n    sources: f1600x4.S fips202.c fips202.h fips202x4.c fips202x4.h\r\n    supported_platforms:\r\n      - architecture: x86_64\r\n        operating_systems:\r\n          - Darwin\r\n          - Linux\r\n        required_flags:\r\n          - avx2\r\n          - popcnt\r\n```\r\n\r\nThe implementation .yml can then define its dependencies:\r\n\r\n```\r\nname: Dilithium2-AES\r\n...\r\n  - name: avx2\r\n...\r\n    common_dep: common_avx2 common_aes\r\n...\r\n```\r\n\r\nIn this case, `copy_from_upstream` will copy common dependencies to `src/sig/dilithium/pqcrystals-dilithium_<name>` for `<name>` as defined in Common_META.yml.\r\n\r\nCMake definitions for the common code will be added to `src/sig/dilithium/CMakeLists.txt`:\r\n\r\n```\r\nif(OQS_ENABLE_SIG_dilithium_2_aes_avx2 OR OQS_ENABLE_SIG_dilithium_3_aes_avx2 OR OQS_ENABLE_SIG_dilithium_5_aes_avx2)\r\n    add_library(dilithium_common_aes OBJECT pqcrystals-dilithium_common_aes/aes256ctr.c)\r\n    target_include_directories(dilithium_common_aes PRIVATE ${CMAKE_CURRENT_LIST_DIR}/pqcrystals-dilithium_common_aes)\r\n    target_compile_options(dilithium_common_aes PRIVATE -maes -msse2 -mssse3)\r\n    set(_DILITHIUM_OBJS ${_DILITHIUM_OBJS} $<TARGET_OBJECTS:dilithium_common_aes>)\r\nendif()\r\n```\r\n\r\nThe if-guard ensures that the common code is only compiled if an implementation is selected that uses it.\r\n\r\nNote: for now the pqcrystals upstream-locations in copy_from_upstream.yml point to my fork. Running copy_from_upstream should be functional with this configuration, local circleci builds run fine with the imports.  I will open a PR to pqcrystals after feedback here.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-01T14:03:23Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15020467027","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":288761656,"name":"open-quantum-safe/profiling","url":"https://api.github.com/repos/open-quantum-safe/profiling"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37","repository_url":"https://api.github.com/repos/open-quantum-safe/profiling","labels_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37/comments","events_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37/events","html_url":"https://github.com/open-quantum-safe/profiling/pull/37","id":798057500,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY0OTM0OTIz","number":37,"title":"non-portable testing and result visualization","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-01T07:30:26Z","updated_at":"2021-02-01T14:44:55Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/pulls/37","html_url":"https://github.com/open-quantum-safe/profiling/pull/37","diff_url":"https://github.com/open-quantum-safe/profiling/pull/37.diff","patch_url":"https://github.com/open-quantum-safe/profiling/pull/37.patch"},"body":"Resolves #32 \r\n\r\nExample results available for review at https://test.openquantumsafe.org/noport/benchmark.html","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/comments/770908819","html_url":"https://github.com/open-quantum-safe/profiling/pull/37#issuecomment-770908819","issue_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37","id":770908819,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDkwODgxOQ==","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2021-02-01T14:44:55Z","updated_at":"2021-02-01T14:44:55Z","author_association":"MEMBER","body":"Interface looks good.  \r\n\r\nI noticed that the \"Enable legend\" checkbox doesn't take effect until changing to another dataset.\r\n\r\nThe seem mostly correct, though in some cases the non-portable is slightly slower than the portable build.  I wonder whether that's just noise or something meaningful.  Now that we have more CPU time available to us, do you think it's worth running the benchmarking code a bit longer to try to get more stability?","performed_via_github_app":null}},"public":true,"created_at":"2021-02-01T14:44:55Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15020659673","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883","id":795115893,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYyNTE4MDgy","number":883,"title":"Update copy_from_pqclean / copy_from_upstream","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2021-01-27T13:47:24Z","updated_at":"2021-02-01T14:57:43Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/883","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/883.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/883.patch"},"body":"Updates copy_from_pqclean / copy_from_upstream (#880)\r\n\r\n* Renames copy_from_pqclean to copy_from_upstream.\r\n\r\n* Adds 'upstreams' field to copy_from_upstream.yml, allowing to specify upstream repositories, branches and commits.\r\n\r\n```\r\nupstreams:\r\n  -\r\n    name: pqclean\r\n    git_url: https://github.com/PQClean/PQClean.git\r\n    git_branch: master\r\n    git_commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n    kem_meta_path: 'crypto_kem/{pqclean_scheme}/META.yml'\r\n    sig_meta_path: 'crypto_sign/{pqclean_scheme}/META.yml'\r\n    kem_scheme_path: 'crypto_kem/{pqclean_scheme}'\r\n    sig_scheme_path: 'crypto_sign/{pqclean_scheme}'\r\n  -\r\n    name: pqcrystals-kyber\r\n    git_url: https://github.com/pq-crystals/kyber.git\r\n    git_branch: master\r\n    git_commit: 8c8d7da74ee92808eebb6128ca209fd5851f48dc\r\n    kem_meta_path: '{pretty_name_full}_META.yml'\r\n    kem_scheme_path: '.'\r\n  -\r\n    name: pqcrystals-dilithium\r\n    git_url: https://github.com/pq-crystals/dilithium.git\r\n    git_branch: master\r\n    git_commit: bda9689704262b53f0942efdda6340b922acb58b\r\n    sig_meta_path: '{pretty_name_full}_META.yml'\r\n    sig_scheme_path: '.'\r\n...\r\n```\r\n\r\n* Modifies \"copy\" command in copy_from_upstream: sources are pulled from specified git-repositories. Implementation folders in $LIBOQS_DIR/src will be prefixed with the upstream-name.\r\n\r\n* Adds \"verify\" command in copy_from_upstream: Implementations in $LIBOQS_DIR/src are compared with expected upstream versions. Implementations that differ from upstream will be hightlighted.\r\n\r\n* Prepares for copying pqclean, pqcrystals-kyber and pqcrystals-dilithium (Round 3 versions) from upstream.\r\n\r\nHow to use copy_from_upstream:\r\n\r\n```\r\n$ ./copy_from_upstream.py --help\r\nusage: copy_from_upstream.py [-h] [-v VERBOSITY] [-k] {copy,verify}\r\n\r\npositional arguments:\r\n  {copy,verify}\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -v VERBOSITY, --verbosity VERBOSITY\r\n  -k, --keep_data\r\n```\r\n\r\nAssumed that pqclean_saber_avx2 differs from upstream, the output will be as follows:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 150 match with upstream, 1 differ\r\n-----\r\nSchemes that differ from upstream:\r\nName: pqclean_saber_avx2, expected upstream: https://github.com/PQClean/PQClean.git - commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n-----\r\n```\r\n\r\nIf any verification failed, the script returns with an exit code (1).\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n-> This PR doesn't tick the two boxes above, but after running ./copy_from_upstream, the two boxes will be ticked because of new Dilithium Round 3 schemes.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/770917888","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883#issuecomment-770917888","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883","id":770917888,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDkxNzg4OA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-01T14:57:43Z","updated_at":"2021-02-01T14:57:43Z","author_association":"MEMBER","body":"Upstream common code does make sense. It both allows code-sharing and (e.g., CPU feature) optimization to be done across several algorithms and further can help reduce the number of runtime portability guards. Using the same .yml definition mechanism also eases understanding and further re-use. \r\n\r\nIt would be ideal if the goal for such code would be to eventually be of interest to more QSC algorithms than one \"family\" (say pqcrystals); if you'd agree, I'd then suggest such common upstream code to follow both contributing standards: Those for [new algorithms](https://github.com/open-quantum-safe/liboqs/wiki/Contributing-guide#contributing-new-quantum-safe-algorithms) *and* those for [OQS common code](https://github.com/open-quantum-safe/liboqs/wiki/Contributing-guide#contributing-common-code). ","performed_via_github_app":null}},"public":true,"created_at":"2021-02-01T14:57:43Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15020794648","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":288761656,"name":"open-quantum-safe/profiling","url":"https://api.github.com/repos/open-quantum-safe/profiling"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37","repository_url":"https://api.github.com/repos/open-quantum-safe/profiling","labels_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37/comments","events_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37/events","html_url":"https://github.com/open-quantum-safe/profiling/pull/37","id":798057500,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY0OTM0OTIz","number":37,"title":"non-portable testing and result visualization","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-01T07:30:26Z","updated_at":"2021-02-01T15:06:27Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/pulls/37","html_url":"https://github.com/open-quantum-safe/profiling/pull/37","diff_url":"https://github.com/open-quantum-safe/profiling/pull/37.diff","patch_url":"https://github.com/open-quantum-safe/profiling/pull/37.patch"},"body":"Resolves #32 \r\n\r\nExample results available for review at https://test.openquantumsafe.org/noport/benchmark.html","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/comments/770923837","html_url":"https://github.com/open-quantum-safe/profiling/pull/37#issuecomment-770923837","issue_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37","id":770923837,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDkyMzgzNw==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-01T15:06:27Z","updated_at":"2021-02-01T15:06:27Z","author_association":"MEMBER","body":"> I noticed that the \"Enable legend\" checkbox doesn't take effect until changing to another dataset.\r\n\r\nIt also takes effect on the same data if one just presses \"Filter\" again. This is intentional to minimize the client-side execution effort, particularly if running with a large dataset of several months on low-powered clients.\r\n\r\n> in some cases the non-portable is slightly slower than the portable build [...] I wonder whether that's just noise or something meaningful.\r\n\r\nAs of now I think this has to do with the test runs having been manually executed -- and during daytime hours: These are runs on shared VMs and jitter then isn't entirely unexpected. For now I suggest we run this for a few nights and see whether the same \"artifacts\" then still appear. If so, running this for longer is easy :-)","performed_via_github_app":null}},"public":true,"created_at":"2021-02-01T15:06:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15020978073","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883","id":795115893,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYyNTE4MDgy","number":883,"title":"Update copy_from_pqclean / copy_from_upstream","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2021-01-27T13:47:24Z","updated_at":"2021-02-01T15:18:33Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/883","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/883.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/883.patch"},"body":"Updates copy_from_pqclean / copy_from_upstream (#880)\r\n\r\n* Renames copy_from_pqclean to copy_from_upstream.\r\n\r\n* Adds 'upstreams' field to copy_from_upstream.yml, allowing to specify upstream repositories, branches and commits.\r\n\r\n```\r\nupstreams:\r\n  -\r\n    name: pqclean\r\n    git_url: https://github.com/PQClean/PQClean.git\r\n    git_branch: master\r\n    git_commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n    kem_meta_path: 'crypto_kem/{pqclean_scheme}/META.yml'\r\n    sig_meta_path: 'crypto_sign/{pqclean_scheme}/META.yml'\r\n    kem_scheme_path: 'crypto_kem/{pqclean_scheme}'\r\n    sig_scheme_path: 'crypto_sign/{pqclean_scheme}'\r\n  -\r\n    name: pqcrystals-kyber\r\n    git_url: https://github.com/pq-crystals/kyber.git\r\n    git_branch: master\r\n    git_commit: 8c8d7da74ee92808eebb6128ca209fd5851f48dc\r\n    kem_meta_path: '{pretty_name_full}_META.yml'\r\n    kem_scheme_path: '.'\r\n  -\r\n    name: pqcrystals-dilithium\r\n    git_url: https://github.com/pq-crystals/dilithium.git\r\n    git_branch: master\r\n    git_commit: bda9689704262b53f0942efdda6340b922acb58b\r\n    sig_meta_path: '{pretty_name_full}_META.yml'\r\n    sig_scheme_path: '.'\r\n...\r\n```\r\n\r\n* Modifies \"copy\" command in copy_from_upstream: sources are pulled from specified git-repositories. Implementation folders in $LIBOQS_DIR/src will be prefixed with the upstream-name.\r\n\r\n* Adds \"verify\" command in copy_from_upstream: Implementations in $LIBOQS_DIR/src are compared with expected upstream versions. Implementations that differ from upstream will be hightlighted.\r\n\r\n* Prepares for copying pqclean, pqcrystals-kyber and pqcrystals-dilithium (Round 3 versions) from upstream.\r\n\r\nHow to use copy_from_upstream:\r\n\r\n```\r\n$ ./copy_from_upstream.py --help\r\nusage: copy_from_upstream.py [-h] [-v VERBOSITY] [-k] {copy,verify}\r\n\r\npositional arguments:\r\n  {copy,verify}\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -v VERBOSITY, --verbosity VERBOSITY\r\n  -k, --keep_data\r\n```\r\n\r\nAssumed that pqclean_saber_avx2 differs from upstream, the output will be as follows:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 150 match with upstream, 1 differ\r\n-----\r\nSchemes that differ from upstream:\r\nName: pqclean_saber_avx2, expected upstream: https://github.com/PQClean/PQClean.git - commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n-----\r\n```\r\n\r\nIf any verification failed, the script returns with an exit code (1).\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n-> This PR doesn't tick the two boxes above, but after running ./copy_from_upstream, the two boxes will be ticked because of new Dilithium Round 3 schemes.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/770933021","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883#issuecomment-770933021","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883","id":770933021,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDkzMzAyMQ==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-01T15:18:33Z","updated_at":"2021-02-01T15:18:33Z","author_association":"NONE","body":"I'm not sure if the \"OQS common code\" standards are easy to ensure with the automatic import, especially the code formatting rules.\r\n\r\nWould the following make sense? the OQS common code and new algorithms standards should apply to code contributed to `src/common`. For code automatically imported to `src/<family>/<algorithm>/<upstream-common-code-dir>`, only the \"new algorithms\" standards should apply.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-01T15:18:33Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15021071557","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883","id":795115893,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYyNTE4MDgy","number":883,"title":"Update copy_from_pqclean / copy_from_upstream","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2021-01-27T13:47:24Z","updated_at":"2021-02-01T15:24:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/883","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/883.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/883.patch"},"body":"Updates copy_from_pqclean / copy_from_upstream (#880)\r\n\r\n* Renames copy_from_pqclean to copy_from_upstream.\r\n\r\n* Adds 'upstreams' field to copy_from_upstream.yml, allowing to specify upstream repositories, branches and commits.\r\n\r\n```\r\nupstreams:\r\n  -\r\n    name: pqclean\r\n    git_url: https://github.com/PQClean/PQClean.git\r\n    git_branch: master\r\n    git_commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n    kem_meta_path: 'crypto_kem/{pqclean_scheme}/META.yml'\r\n    sig_meta_path: 'crypto_sign/{pqclean_scheme}/META.yml'\r\n    kem_scheme_path: 'crypto_kem/{pqclean_scheme}'\r\n    sig_scheme_path: 'crypto_sign/{pqclean_scheme}'\r\n  -\r\n    name: pqcrystals-kyber\r\n    git_url: https://github.com/pq-crystals/kyber.git\r\n    git_branch: master\r\n    git_commit: 8c8d7da74ee92808eebb6128ca209fd5851f48dc\r\n    kem_meta_path: '{pretty_name_full}_META.yml'\r\n    kem_scheme_path: '.'\r\n  -\r\n    name: pqcrystals-dilithium\r\n    git_url: https://github.com/pq-crystals/dilithium.git\r\n    git_branch: master\r\n    git_commit: bda9689704262b53f0942efdda6340b922acb58b\r\n    sig_meta_path: '{pretty_name_full}_META.yml'\r\n    sig_scheme_path: '.'\r\n...\r\n```\r\n\r\n* Modifies \"copy\" command in copy_from_upstream: sources are pulled from specified git-repositories. Implementation folders in $LIBOQS_DIR/src will be prefixed with the upstream-name.\r\n\r\n* Adds \"verify\" command in copy_from_upstream: Implementations in $LIBOQS_DIR/src are compared with expected upstream versions. Implementations that differ from upstream will be hightlighted.\r\n\r\n* Prepares for copying pqclean, pqcrystals-kyber and pqcrystals-dilithium (Round 3 versions) from upstream.\r\n\r\nHow to use copy_from_upstream:\r\n\r\n```\r\n$ ./copy_from_upstream.py --help\r\nusage: copy_from_upstream.py [-h] [-v VERBOSITY] [-k] {copy,verify}\r\n\r\npositional arguments:\r\n  {copy,verify}\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -v VERBOSITY, --verbosity VERBOSITY\r\n  -k, --keep_data\r\n```\r\n\r\nAssumed that pqclean_saber_avx2 differs from upstream, the output will be as follows:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 150 match with upstream, 1 differ\r\n-----\r\nSchemes that differ from upstream:\r\nName: pqclean_saber_avx2, expected upstream: https://github.com/PQClean/PQClean.git - commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n-----\r\n```\r\n\r\nIf any verification failed, the script returns with an exit code (1).\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n-> This PR doesn't tick the two boxes above, but after running ./copy_from_upstream, the two boxes will be ticked because of new Dilithium Round 3 schemes.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/770937473","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883#issuecomment-770937473","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883","id":770937473,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDkzNzQ3Mw==","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2021-02-01T15:24:32Z","updated_at":"2021-02-01T15:24:32Z","author_association":"MEMBER","body":"I'm a bit confused here. Are you talking about having different implementations of AES, SHA, ... in `src/common` that are pulled from upstream sources automatically?  Or are you talking about having implementations of AES, SHA, ... pulled into subdirectories of `src/<family>/...`?","performed_via_github_app":null}},"public":true,"created_at":"2021-02-01T15:24:33Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15021134007","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883","id":795115893,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYyNTE4MDgy","number":883,"title":"Update copy_from_pqclean / copy_from_upstream","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2021-01-27T13:47:24Z","updated_at":"2021-02-01T15:28:35Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/883","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/883.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/883.patch"},"body":"Updates copy_from_pqclean / copy_from_upstream (#880)\r\n\r\n* Renames copy_from_pqclean to copy_from_upstream.\r\n\r\n* Adds 'upstreams' field to copy_from_upstream.yml, allowing to specify upstream repositories, branches and commits.\r\n\r\n```\r\nupstreams:\r\n  -\r\n    name: pqclean\r\n    git_url: https://github.com/PQClean/PQClean.git\r\n    git_branch: master\r\n    git_commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n    kem_meta_path: 'crypto_kem/{pqclean_scheme}/META.yml'\r\n    sig_meta_path: 'crypto_sign/{pqclean_scheme}/META.yml'\r\n    kem_scheme_path: 'crypto_kem/{pqclean_scheme}'\r\n    sig_scheme_path: 'crypto_sign/{pqclean_scheme}'\r\n  -\r\n    name: pqcrystals-kyber\r\n    git_url: https://github.com/pq-crystals/kyber.git\r\n    git_branch: master\r\n    git_commit: 8c8d7da74ee92808eebb6128ca209fd5851f48dc\r\n    kem_meta_path: '{pretty_name_full}_META.yml'\r\n    kem_scheme_path: '.'\r\n  -\r\n    name: pqcrystals-dilithium\r\n    git_url: https://github.com/pq-crystals/dilithium.git\r\n    git_branch: master\r\n    git_commit: bda9689704262b53f0942efdda6340b922acb58b\r\n    sig_meta_path: '{pretty_name_full}_META.yml'\r\n    sig_scheme_path: '.'\r\n...\r\n```\r\n\r\n* Modifies \"copy\" command in copy_from_upstream: sources are pulled from specified git-repositories. Implementation folders in $LIBOQS_DIR/src will be prefixed with the upstream-name.\r\n\r\n* Adds \"verify\" command in copy_from_upstream: Implementations in $LIBOQS_DIR/src are compared with expected upstream versions. Implementations that differ from upstream will be hightlighted.\r\n\r\n* Prepares for copying pqclean, pqcrystals-kyber and pqcrystals-dilithium (Round 3 versions) from upstream.\r\n\r\nHow to use copy_from_upstream:\r\n\r\n```\r\n$ ./copy_from_upstream.py --help\r\nusage: copy_from_upstream.py [-h] [-v VERBOSITY] [-k] {copy,verify}\r\n\r\npositional arguments:\r\n  {copy,verify}\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -v VERBOSITY, --verbosity VERBOSITY\r\n  -k, --keep_data\r\n```\r\n\r\nAssumed that pqclean_saber_avx2 differs from upstream, the output will be as follows:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 150 match with upstream, 1 differ\r\n-----\r\nSchemes that differ from upstream:\r\nName: pqclean_saber_avx2, expected upstream: https://github.com/PQClean/PQClean.git - commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n-----\r\n```\r\n\r\nIf any verification failed, the script returns with an exit code (1).\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n-> This PR doesn't tick the two boxes above, but after running ./copy_from_upstream, the two boxes will be ticked because of new Dilithium Round 3 schemes.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/770940517","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883#issuecomment-770940517","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883","id":770940517,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDk0MDUxNw==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-01T15:28:35Z","updated_at":"2021-02-01T15:28:35Z","author_association":"MEMBER","body":"> Would the following make sense? the OQS common code and new algorithms standards should apply to code contributed to src/common. For code automatically imported to src/<family>/<algorithm>/<upstream-common-code-dir>, only the \"new algorithms\" standards should apply.\r\n\r\nThe current wording for common code (requirements) explicitly refers only to stuff in `src/common` and excludes code automatically added. The statements in my comment above were mere suggestions trying to help make \"family-common code\" become more attractive to wider audiences but in no way a request for that.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-01T15:28:36Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15021211022","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883","id":795115893,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYyNTE4MDgy","number":883,"title":"Update copy_from_pqclean / copy_from_upstream","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2021-01-27T13:47:24Z","updated_at":"2021-02-01T15:33:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/883","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/883.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/883.patch"},"body":"Updates copy_from_pqclean / copy_from_upstream (#880)\r\n\r\n* Renames copy_from_pqclean to copy_from_upstream.\r\n\r\n* Adds 'upstreams' field to copy_from_upstream.yml, allowing to specify upstream repositories, branches and commits.\r\n\r\n```\r\nupstreams:\r\n  -\r\n    name: pqclean\r\n    git_url: https://github.com/PQClean/PQClean.git\r\n    git_branch: master\r\n    git_commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n    kem_meta_path: 'crypto_kem/{pqclean_scheme}/META.yml'\r\n    sig_meta_path: 'crypto_sign/{pqclean_scheme}/META.yml'\r\n    kem_scheme_path: 'crypto_kem/{pqclean_scheme}'\r\n    sig_scheme_path: 'crypto_sign/{pqclean_scheme}'\r\n  -\r\n    name: pqcrystals-kyber\r\n    git_url: https://github.com/pq-crystals/kyber.git\r\n    git_branch: master\r\n    git_commit: 8c8d7da74ee92808eebb6128ca209fd5851f48dc\r\n    kem_meta_path: '{pretty_name_full}_META.yml'\r\n    kem_scheme_path: '.'\r\n  -\r\n    name: pqcrystals-dilithium\r\n    git_url: https://github.com/pq-crystals/dilithium.git\r\n    git_branch: master\r\n    git_commit: bda9689704262b53f0942efdda6340b922acb58b\r\n    sig_meta_path: '{pretty_name_full}_META.yml'\r\n    sig_scheme_path: '.'\r\n...\r\n```\r\n\r\n* Modifies \"copy\" command in copy_from_upstream: sources are pulled from specified git-repositories. Implementation folders in $LIBOQS_DIR/src will be prefixed with the upstream-name.\r\n\r\n* Adds \"verify\" command in copy_from_upstream: Implementations in $LIBOQS_DIR/src are compared with expected upstream versions. Implementations that differ from upstream will be hightlighted.\r\n\r\n* Prepares for copying pqclean, pqcrystals-kyber and pqcrystals-dilithium (Round 3 versions) from upstream.\r\n\r\nHow to use copy_from_upstream:\r\n\r\n```\r\n$ ./copy_from_upstream.py --help\r\nusage: copy_from_upstream.py [-h] [-v VERBOSITY] [-k] {copy,verify}\r\n\r\npositional arguments:\r\n  {copy,verify}\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -v VERBOSITY, --verbosity VERBOSITY\r\n  -k, --keep_data\r\n```\r\n\r\nAssumed that pqclean_saber_avx2 differs from upstream, the output will be as follows:\r\n\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 150 match with upstream, 1 differ\r\n-----\r\nSchemes that differ from upstream:\r\nName: pqclean_saber_avx2, expected upstream: https://github.com/PQClean/PQClean.git - commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n-----\r\n```\r\n\r\nIf any verification failed, the script returns with an exit code (1).\r\n\r\n* [x] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [x] Does this PR change the the list of algorithms available -- either adding or removing?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n-> This PR doesn't tick the two boxes above, but after running ./copy_from_upstream, the two boxes will be ticked because of new Dilithium Round 3 schemes.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/770944048","html_url":"https://github.com/open-quantum-safe/liboqs/pull/883#issuecomment-770944048","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/883","id":770944048,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDk0NDA0OA==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-01T15:33:40Z","updated_at":"2021-02-01T15:33:40Z","author_association":"NONE","body":"Sorry if there was a confusion. I only refer to common code pulled into subdirectories of `src/<family>/...`.\r\n@baentsch Then I fully agree.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-01T15:33:40Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15021261553","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":288761656,"name":"open-quantum-safe/profiling","url":"https://api.github.com/repos/open-quantum-safe/profiling"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37","repository_url":"https://api.github.com/repos/open-quantum-safe/profiling","labels_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37/comments","events_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37/events","html_url":"https://github.com/open-quantum-safe/profiling/pull/37","id":798057500,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY0OTM0OTIz","number":37,"title":"non-portable testing and result visualization","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-01T07:30:26Z","updated_at":"2021-02-01T15:37:03Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/pulls/37","html_url":"https://github.com/open-quantum-safe/profiling/pull/37","diff_url":"https://github.com/open-quantum-safe/profiling/pull/37.diff","patch_url":"https://github.com/open-quantum-safe/profiling/pull/37.patch"},"body":"Resolves #32 \r\n\r\nExample results available for review at https://test.openquantumsafe.org/noport/benchmark.html","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/comments/770946295","html_url":"https://github.com/open-quantum-safe/profiling/pull/37#issuecomment-770946295","issue_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37","id":770946295,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDk0NjI5NQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-01T15:37:03Z","updated_at":"2021-02-01T15:37:03Z","author_association":"MEMBER","body":"@dstebila Do you have time for review or shall I just go ahead and merge based on your feedback above? We'll then let automation do its wonders and show us tomorrow morning whether all wheels fit together and work as intended...","performed_via_github_app":null}},"public":true,"created_at":"2021-02-01T15:37:03Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15021347451","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":288761656,"name":"open-quantum-safe/profiling","url":"https://api.github.com/repos/open-quantum-safe/profiling"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37","repository_url":"https://api.github.com/repos/open-quantum-safe/profiling","labels_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37/comments","events_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37/events","html_url":"https://github.com/open-quantum-safe/profiling/pull/37","id":798057500,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY0OTM0OTIz","number":37,"title":"non-portable testing and result visualization","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-02-01T07:30:26Z","updated_at":"2021-02-01T15:42:52Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/pulls/37","html_url":"https://github.com/open-quantum-safe/profiling/pull/37","diff_url":"https://github.com/open-quantum-safe/profiling/pull/37.diff","patch_url":"https://github.com/open-quantum-safe/profiling/pull/37.patch"},"body":"Resolves #32 \r\n\r\nExample results available for review at https://test.openquantumsafe.org/noport/benchmark.html","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/comments/770950333","html_url":"https://github.com/open-quantum-safe/profiling/pull/37#issuecomment-770950333","issue_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/37","id":770950333,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MDk1MDMzMw==","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2021-02-01T15:42:52Z","updated_at":"2021-02-01T15:42:52Z","author_association":"MEMBER","body":"> @dstebila Do you have time for review or shall I just go ahead and merge based on your feedback above? We'll then let automation do its wonders and show us tomorrow morning whether all wheels fit together and work as intended...\r\n\r\nMerge is fine. ","performed_via_github_app":null}},"public":true,"created_at":"2021-02-01T15:42:52Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15025066880","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-01T20:31:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/771138383","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-771138383","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":771138383,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MTEzODM4Mw==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-02-01T20:31:58Z","updated_at":"2021-02-01T20:31:58Z","author_association":"NONE","body":"Thanks for the comments, Michael, Douglas. I've just pushed a slightly different approach which I think will be better in the long run.\r\n\r\nMajor changes:\r\n- No instrumentation of code in /src. The new version uses valgrind \"error suppression\" files, stored in the /tests directory, which as of Valgrind 3.14.0 allow for suppression of errors by source file and line number.\r\n- No valgrind headers in /common. There's a new build flag \"OQS_ENABLE_TEST_CONSTANT_TIME\" which introduces a compile time dependency on valgrind when building the tests.\r\n- Documentation. It's currently at the top of test_constant_time.py, but it's more-or-less ready to copy to the wiki if/when this is merged. I've copied it below to explain, in more detail, how this all works.\r\n- I've made suppression files for all of the secret dependant flow issues / false-positives that I run into on my laptop. My CPU is about 10 years old, so there will be more issues to document in the platform-specific implementations.\r\n\r\nI still need to add a CI job. I could use some help with that.\r\n\r\n# test_constant_time.py\r\n\r\nThe goal of this script is to ensure that every instance of secret-dependant\r\ncontrol flow in liboqs is documented. This script does not ensure that all of\r\nthe software in liboqs is constant time. Rather, it is intended to aid auditors\r\nin their search for non-constant time behaviour.\r\n\r\nWARNING: This script currently runs test_kem and test_sig on random seeds.\r\nIt is not coverage guided. It will miss instances of non-constant time\r\nbehaviour in code paths that are rarely executed.\r\n\r\nThis script requires Valgrind version >= 3.14.0, and it only gives meaningful\r\nresults if test_kem and test_sig have been compiled with CMAKE_BUILD_TYPE=Debug\r\nand OQS_ENABLE_TEST_CONSTANT_TIME.\r\n\r\n\r\nHow this script works\r\n---------------------\r\nThis script runs test_kem (and/or test_sig) through Valgrind's Memcheck tool.\r\nValgrind executes the test program and issues an error message if/whenever the\r\nprogram's control flow depends on uninitialized data. As observed by Adam\r\nLangley [1], if we tell Valgrind that secrets are uninitialized, then Valgrind\r\nwill tell us about secret-dependant control flow.\r\n\r\nAssuming that each scheme in liboqs passes test_kat, our test_kem and test_sig\r\nprograms are structured such that all secret data can be traced back to a call\r\nto OQS_randombytes. The tests intercept calls to OQS_randombytes and tell\r\nValgrind that every random byte is uninitialized. Hence, Valgrind will issue an\r\nerror if (but not only if!) our tests branch on secret data.\r\n\r\nSince there may be false positives, we say that Valgrind identifies \"suspected\r\nnon-constant time behaviour\".\r\n\r\nAgain, the purpose of this script is to ensure that suspected non-constant time\r\nbehaviour is documented. This script ships with a collection of Valgrind\r\n\"suppression files\". Each suppression file documents one or more instances of\r\nsuspected non-constant time behaviour in liboqs.\r\n\r\nThe suppression files are also used to silence errors from Valgrind. If this\r\nscript runs without error, then all of the suspected non-constant time behaviour\r\nin liboqs has been documented. If this script fails, then a new suppression\r\nfile should be written.\r\n\r\n\r\nHow to write suppression files\r\n------------------------------\r\nValgrind will output a suppression file template along with its error message.\r\nIt's your job to copy this template to the correct location, edit it, and tell\r\nthis script about the new file.\r\n\r\nSuppression files for KEMs are stored in\r\n    liboqs/tests/constant_time/kem/{passes,issues}/.\r\nSuppression files for signature schemes are stored in\r\n    liboqs/tests/constant_time/sig/{passes,issues}/.\r\n\r\nThis script does not differentiate between the passes and issues\r\nsubdirectories.  The label is for auditors. We \"give a pass\" to an error that\r\nis known not to be a security threat, and we store the corresponding\r\nsuppression file in the \"passes\" subdirectory. We \"raise an issue\" about any\r\nother error, and we store the corresponding suppression file in the \"issues\"\r\nsubdirectory.\r\n\r\nIf you are unsure where your suppression file belongs, then save it to the\r\n\"issues\" subdirectory.\r\n\r\nOnce you've written a suppression file, give it a descriptive file name and\r\ntell this script about it. There are json files called passes.json and\r\nissues.json in\r\n    liboqs/tests/constant_time/{kem,sig}/\r\nThese json files contain dictionaries of the form\r\n    { \"Scheme name\" : [\"list\", \"of\", \"suppression\", \"files\"], ... }\r\nAdd the name of your suppression file to the appropriate list to suppress\r\nthe errors that you have documented.\r\n\r\n\r\nHow to write a good suppression file\r\n------------------------------------\r\nHere is an example of a suppression file:\r\n    {\r\n       Rejection sampling to produce public \"A\" matrix\r\n       Memcheck:Cond\r\n       fun:rej_uniform\r\n       fun:PQCLEAN_KYBER*_CLEAN_gen_matrix\r\n    }\r\n\r\nThe brackets wrap a single error that is to be suppressed. Within the brackets,\r\nthe first line is a comment. The remaining lines tell Valgrind to ignore\r\nany \"Memcheck:Cond\" errors that occur when a function named rej_uniform is\r\ncalled from a function whose name matches the glob pattern\r\nPQCLEAN_KYBER*_CLEAN_gen_matrix.\r\n\r\nBefore this suppression file was written, a run of this script produced the\r\nfollowing output.\r\n\r\n    ==594== Conditional jump or move depends on uninitialised value(s)\r\n    ==594==    at 0x22550D: rej_uniform (indcpa.c:133)\r\n    ==594==    by 0x225654: PQCLEAN_KYBER512_CLEAN_gen_matrix (indcpa.c:177)\r\n    ==594==    by 0x2257D1: PQCLEAN_KYBER512_CLEAN_indcpa_keypair (indcpa.c:216)\r\n    ==594==    by 0x1B6C1E: PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair (kem.c:26)\r\n    ==594==    by 0x1B6B9F: OQS_KEM_kyber_512_keypair (kem_kyber_512.c:56)\r\n    ==594==    by 0x10D123: OQS_KEM_keypair (kem.c:818)\r\n    ==594==    by 0x10AD07: kem_test_correctness (test_kem.c:103)\r\n    ==594==    by 0x10B4E7: test_wrapper (test_kem.c:186)\r\n    ==594==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n    ==594==    by 0x4DED4CE: clone (clone.S:95)\r\n    ==594==\r\n    {\r\n       <insert_a_suppression_name_here>\r\n       Memcheck:Cond\r\n       fun:rej_uniform\r\n       fun:PQCLEAN_KYBER512_CLEAN_gen_matrix\r\n       fun:PQCLEAN_KYBER512_CLEAN_indcpa_keypair\r\n       fun:PQCLEAN_KYBER512_CLEAN_crypto_kem_keypair\r\n       fun:OQS_KEM_kyber_512_keypair\r\n       fun:OQS_KEM_keypair\r\n       fun:kem_test_correctness\r\n       fun:test_wrapper\r\n       fun:start_thread\r\n       fun:clone\r\n    }\r\n\r\nThe lines beginning with \"==\" are a Valgrind error message. The bracketed text\r\nis a suppression file template. To produce the final suppression file we\r\nadded a comment, replaced \"512\" with a wildcard (since an identical error occurs\r\nin other Kyber parameter sets), and truncated the backtrace (since the extra lines\r\nprovide no interesting information to auditors).\r\n\r\nThe \"fun:rej_uniform\" line says to ignore _all_ Memcheck:Cond errors in\r\nrej_uniform, but Valgrind told us that line 133 was the problem. Any\r\n\"fun:name\" line in the backtrace can be replaced by an equivalent\r\n\"src:file:line\", so we could have narrowed the scope of our suppression:\r\n    {\r\n       Rejection sampling to produce public \"A\" matrix\r\n       Memcheck:Cond\r\n       src:indcpa.c:133 # fun:rej_uniform\r\n       fun:PQCLEAN_KYBER*_CLEAN_gen_matrix\r\n    }\r\nHere \"# fun:rej_uniform\" is a comment. An update to the Kyber source code might\r\nbreak our suppression file by changing the line number, and leaving the function\r\nname as a comment might help a future reviewer.\r\n\r\nAn ellipsis (...) can serve as a wildcard for a portion of the backtrace.\r\nWe could have written:\r\n    {\r\n       Rejection sampling to produce public \"A\" matrix\r\n       Memcheck:Cond\r\n       ...\r\n       fun:PQCLEAN_KYBER*_CLEAN_gen_matrix\r\n    }\r\nBut this is perhaps too concise. Remember that the goal here is to help auditors.\r\n\r\nFurther information can be found in Valgrind's manual. See\r\n    https://www.valgrind.org/docs/manual/manual-core.html#manual-core.suppress\r\nand\r\n    https://www.valgrind.org/docs/manual/mc-manual.html#mc-manual.suppfiles\r\n\r\nCredits\r\n-------\r\nThe observation that Valgrind can be used to identify non-constant time\r\nbehaviour is due to Adam Langley [1, 2]. Mortiz Neikes' TIMECOP project applies\r\nLangley's idea to the SUPERCOP benchmarking suite [3]. Versions of SUPERCOP\r\nstarting with 20200816 include TIMECOP and apply Langley's idea to randombytes\r\ncalls in particular [4]. We have borrowed the idea of instrumenting randombytes\r\ncalls from SUPERCOP.\r\n\r\n[1] https://github.com/agl/ctgrind\r\n[2] https://boringssl.googlesource.com/boringssl/+/a6a049a6fb51a052347611d41583a0622bc89d60\r\n[2] https://post-apocalyptic-crypto.org/timecop/index.html\r\n[3] http://bench.cr.yp.to/tips.html#timecop\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-02-01T20:31:58Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
