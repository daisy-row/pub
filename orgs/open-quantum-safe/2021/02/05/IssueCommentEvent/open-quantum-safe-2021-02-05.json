{"id":"15076062605","type":"IssueCommentEvent","actor":{"id":9383677,"login":"geovandro","display_login":"geovandro","gravatar_id":"","url":"https://api.github.com/users/geovandro","avatar_url":"https://avatars.githubusercontent.com/u/9383677?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888","id":798705397,"node_id":"MDU6SXNzdWU3OTg3MDUzOTc=","number":888,"title":"Expert review needed for SIKE constant time warnings","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-02-01T21:02:58Z","updated_at":"2021-02-05T03:39:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Automated tests have identified a few instances of potentially non-constant time behaviour in SIKE. The tests produce a lot of false positives, so there's a good chance that these are benign, but I'm not expert enough to evaluate them. Help appreciated!\r\n\r\n- Lines 590 and 993 of sidh_compressed.c invert an element of Fp^2 using a non-constant time binary gcd (fp2inv_mont_bingcd).\r\n- Line 654 of ec_isogeny.c leaks the number of leading zeros in the \"m\" input to Ladder. This function is called from validate_ciphertext on line 1434 of sidh_compressed.c.\r\n\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773765074","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888#issuecomment-773765074","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","id":773765074,"node_id":"MDEyOklzc3VlQ29tbWVudDc3Mzc2NTA3NA==","user":{"login":"geovandro","id":9383677,"node_id":"MDQ6VXNlcjkzODM2Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/9383677?v=4","gravatar_id":"","url":"https://api.github.com/users/geovandro","html_url":"https://github.com/geovandro","followers_url":"https://api.github.com/users/geovandro/followers","following_url":"https://api.github.com/users/geovandro/following{/other_user}","gists_url":"https://api.github.com/users/geovandro/gists{/gist_id}","starred_url":"https://api.github.com/users/geovandro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geovandro/subscriptions","organizations_url":"https://api.github.com/users/geovandro/orgs","repos_url":"https://api.github.com/users/geovandro/repos","events_url":"https://api.github.com/users/geovandro/events{/privacy}","received_events_url":"https://api.github.com/users/geovandro/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T03:39:30Z","updated_at":"2021-02-05T03:39:30Z","author_association":"NONE","body":"> Automated tests have identified a few instances of potentially non-constant time behaviour in SIKE. The tests produce a lot of false positives, so there's a good chance that these are benign, but I'm not expert enough to evaluate them. Help appreciated!\r\n> \r\n> * Lines 590 and 993 of sidh_compressed.c invert an element of Fp^2 using a non-constant time binary gcd (fp2inv_mont_bingcd).\r\n> * Line 654 of ec_isogeny.c leaks the number of leading zeros in the \"m\" input to Ladder. This function is called from validate_ciphertext on line 1434 of sidh_compressed.c.\r\n\r\nThe Ladder function indeed leaks the number of leading zeros of \"m\". For the particular case of the usage at Line 1434, the scalar \"m\" has the form m=1/(a_0 + sk*a_1) where sk is secret and a_i's are public. The leading zeros of \"m\" could potentially be used to leak information about \"sk\" although I don't know how to do it right away. The Ladder function is now improved at https://github.com/microsoft/PQCrypto-SIDH/commit/c59a5e17ab684185d58c579a21e66e163ad66cea.\r\nThanksÂ @jschanck for reporting it.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T03:39:30Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15077012330","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895","id":801374003,"node_id":"MDU6SXNzdWU4MDEzNzQwMDM=","number":895,"title":"Infinite loop if call to OpenSSL function RAND_bytes() fails","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-02-04T15:11:28Z","updated_at":"2021-02-05T06:05:43Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The function `OQS_randombytes_openssl` will call RAND_bytes() in an infinite loop if it fails:\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/bd4d09da75e217a439e1f7790d7a064208c39d08/src/common/rand/rand.c#L114-L122\r\n\r\nThis is probably not the right behaviour. In some circumstances (for example if the DRBG has failed to seed) this call will never succeed no matter how many times you call it. This is the cause of the hang found here:\r\n\r\nhttps://github.com/openssl/openssl/issues/14069","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773813695","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895#issuecomment-773813695","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","id":773813695,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzgxMzY5NQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T06:05:43Z","updated_at":"2021-02-05T06:05:43Z","author_association":"MEMBER","body":"> so propagating the randomness error as a OQS return value would be better, IMO.\r\n\r\nThat also was my immediate reaction/preference, but then I counted 453 (!) instances of `randombytes` being called in the different algorithm implementations, none checking return value (they couldn't as the function's been defined as returning 'void'). So that's why I indeed suggest to\r\n\r\n> fail & exit in the rand function directly.\r\n\r\nI suppose it would be a rare event anyway given how many years it has taken to be discovered. As a compromise, we could retry MAX_RAND_RETRY times but then die (with a clear error message, of course).\r\n\r\n\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T06:05:43Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15077168934","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/276","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/276/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/276/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/276/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/276","id":801820531,"node_id":"MDU6SXNzdWU4MDE4MjA1MzE=","number":276,"title":"Current master out of sync with the current liboqs","user":{"login":"mouse07410","id":5923577,"node_id":"MDQ6VXNlcjU5MjM1Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/5923577?v=4","gravatar_id":"","url":"https://api.github.com/users/mouse07410","html_url":"https://github.com/mouse07410","followers_url":"https://api.github.com/users/mouse07410/followers","following_url":"https://api.github.com/users/mouse07410/following{/other_user}","gists_url":"https://api.github.com/users/mouse07410/gists{/gist_id}","starred_url":"https://api.github.com/users/mouse07410/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mouse07410/subscriptions","organizations_url":"https://api.github.com/users/mouse07410/orgs","repos_url":"https://api.github.com/users/mouse07410/repos","events_url":"https://api.github.com/users/mouse07410/events{/privacy}","received_events_url":"https://api.github.com/users/mouse07410/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-05T03:55:45Z","updated_at":"2021-02-05T06:25:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"In the NIST PQC round 3, and in the current https://github.com/open-quantum-safe/liboqs, Dilithium-4 has been dropped, and replaced with Dilithium-5.\r\n\r\nThis package now fails to compile, and will keep failing until it's brought in sync withi this Dilithium change.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/773822316","html_url":"https://github.com/open-quantum-safe/openssl/issues/276#issuecomment-773822316","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/276","id":773822316,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzgyMjMxNg==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T06:25:50Z","updated_at":"2021-02-05T06:25:50Z","author_association":"MEMBER","body":"ACK. Dil*-AES variants got added, too. Working on it.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T06:25:50Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15078136183","type":"IssueCommentEvent","actor":{"id":7422273,"login":"mattcaswell","display_login":"mattcaswell","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","avatar_url":"https://avatars.githubusercontent.com/u/7422273?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895","id":801374003,"node_id":"MDU6SXNzdWU4MDEzNzQwMDM=","number":895,"title":"Infinite loop if call to OpenSSL function RAND_bytes() fails","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2021-02-04T15:11:28Z","updated_at":"2021-02-05T08:14:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The function `OQS_randombytes_openssl` will call RAND_bytes() in an infinite loop if it fails:\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/bd4d09da75e217a439e1f7790d7a064208c39d08/src/common/rand/rand.c#L114-L122\r\n\r\nThis is probably not the right behaviour. In some circumstances (for example if the DRBG has failed to seed) this call will never succeed no matter how many times you call it. This is the cause of the hang found here:\r\n\r\nhttps://github.com/openssl/openssl/issues/14069","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773871872","html_url":"https://github.com/open-quantum-safe/liboqs/issues/895#issuecomment-773871872","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/895","id":773871872,"node_id":"MDEyOklzc3VlQ29tbWVudDc3Mzg3MTg3Mg==","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T08:14:30Z","updated_at":"2021-02-05T08:14:30Z","author_association":"NONE","body":"> I suppose it would be a rare event anyway given how many years it has taken to be discovered. \r\n\r\nIt would be rare in OpenSSL 1.1.1 but, as you discovered, with 3.0 a configuration error can lead to this which may not be that unlikely.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T08:14:30Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15078612564","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-05T08:59:35Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773894473","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-773894473","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":773894473,"node_id":"MDEyOklzc3VlQ29tbWVudDc3Mzg5NDQ3Mw==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T08:59:35Z","updated_at":"2021-02-05T08:59:35Z","author_association":"MEMBER","body":"I'm afraid we'd need to go over this again: The newly landed Dilithium+Kyber round3 code obviously requires new suppression files. @bhess: Might you have time & insight to help get this PR over the finish line?","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T08:59:35Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15078927512","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-05T09:26:45Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/773909467","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-773909467","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":773909467,"node_id":"MDEyOklzc3VlQ29tbWVudDc3MzkwOTQ2Nw==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T09:26:45Z","updated_at":"2021-02-05T09:26:45Z","author_association":"CONTRIBUTOR","body":"I will take a look at it.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T09:26:45Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15081594308","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/277","id":802149083,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY4MzQwOTE1","number":277,"title":"Updates for Dilithium round 3","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-05T13:05:44Z","updated_at":"2021-02-05T13:26:10Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/277","html_url":"https://github.com/open-quantum-safe/openssl/pull/277","diff_url":"https://github.com/open-quantum-safe/openssl/pull/277.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/277.patch"},"body":"* Updates OIDs for Dilithium round 3 (2, 3, 5, 2_aes, 3_aes, 5_aes)\r\n* Updates security strengths\r\n* Updates `mix_with` according to the security strengths\r\n* `code_point` field is also updated to make the dilithium schemes fit consequently.\r\n\r\nAddresses #276 \r\n\r\n##### Checklist\r\n<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->\r\n- [x] documentation is added or updated\r\n- [x] tests are added or updated\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/774031853","html_url":"https://github.com/open-quantum-safe/openssl/pull/277#issuecomment-774031853","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277","id":774031853,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDAzMTg1Mw==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T13:26:10Z","updated_at":"2021-02-05T13:26:10Z","author_association":"NONE","body":"> Please bump hybrid OIDs, too. Also, I don't understand why ` crypto/objects/obj_mac.num` gets _shorter_ with _more_ algorithms: Can you explain that?\r\n\r\nThanks, updating them as well. Also checking the second one..\r\n\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T13:26:10Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15081945614","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/277","id":802149083,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY4MzQwOTE1","number":277,"title":"Updates for Dilithium round 3","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-05T13:05:44Z","updated_at":"2021-02-05T13:55:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/277","html_url":"https://github.com/open-quantum-safe/openssl/pull/277","diff_url":"https://github.com/open-quantum-safe/openssl/pull/277.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/277.patch"},"body":"* Updates OIDs for Dilithium round 3 (2, 3, 5, 2_aes, 3_aes, 5_aes)\r\n* Updates security strengths\r\n* Updates `mix_with` according to the security strengths\r\n* `code_point` field is also updated to make the dilithium schemes fit consequently.\r\n\r\nAddresses #276 \r\n\r\n##### Checklist\r\n<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->\r\n- [x] documentation is added or updated\r\n- [x] tests are added or updated\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/774047213","html_url":"https://github.com/open-quantum-safe/openssl/pull/277#issuecomment-774047213","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277","id":774047213,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDA0NzIxMw==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T13:55:44Z","updated_at":"2021-02-05T13:55:44Z","author_association":"NONE","body":"> Also, I don't understand why ` crypto/objects/obj_mac.num` gets _shorter_ with _more_ algorithms: Can you explain that?\r\n\r\nHm, I don't see anything about kems being populated in the jinja-template: https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/oqs-template/crypto/objects/obj_mac.num/assign_ids.fragment\r\n\r\nThe jinja-snipped might have been accidentally removed sometime.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T13:55:44Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15083215021","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-05T15:33:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/774105708","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-774105708","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":774105708,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDEwNTcwOA==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T15:33:09Z","updated_at":"2021-02-05T15:33:09Z","author_association":"NONE","body":"There were also BIKE failures in the last constant-time-x64-extensions build. Turns out that Valgrind does not yet support AVX512. I've got a patch to disable AVX512 instructions when OQS_ENABLE_TEST_CONSTANT_TIME is on.\r\n \r\n@bhess if you've already started the suppression files for round 3 kyber/dilithium, I'm happy to let you work on them. Otherwise I can wrap this up now.\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T15:33:09Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15083336754","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-05T15:42:28Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/774111183","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-774111183","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":774111183,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDExMTE4Mw==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T15:42:28Z","updated_at":"2021-02-05T15:42:28Z","author_association":"CONTRIBUTOR","body":"> @bhess if you've already started the suppression files for round 3 kyber/dilithium, I'm happy to let you work on them. Otherwise I can wrap this up now.\r\n\r\nUnfortunately I got a bit stuck with another issue. Feel free to wrap it up. Thanks!","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T15:42:28Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15084047886","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/277","id":802149083,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY4MzQwOTE1","number":277,"title":"Updates for Dilithium round 3","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-05T13:05:44Z","updated_at":"2021-02-05T16:38:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/277","html_url":"https://github.com/open-quantum-safe/openssl/pull/277","diff_url":"https://github.com/open-quantum-safe/openssl/pull/277.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/277.patch"},"body":"* Updates OIDs for Dilithium round 3 (2, 3, 5, 2_aes, 3_aes, 5_aes)\r\n* Updates security strengths\r\n* Updates `mix_with` according to the security strengths\r\n* `code_point` field is also updated to make the dilithium schemes fit consequently.\r\n\r\nAddresses #276 \r\n\r\n##### Checklist\r\n<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->\r\n- [x] documentation is added or updated\r\n- [x] tests are added or updated\r\n- [ ] Boring interop","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/774144436","html_url":"https://github.com/open-quantum-safe/openssl/pull/277#issuecomment-774144436","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277","id":774144436,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDE0NDQzNg==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T16:38:04Z","updated_at":"2021-02-05T16:38:04Z","author_association":"MEMBER","body":"@xvzcf I'd be inclined to accept this PR (after the `test_tls_full` issue has been addressed) even though boring interop fails: Would you agree? Or in other words: Would you have time to look at updating boringssl? Or should @bhess or @baentsch look at that?","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T16:38:04Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15084128789","type":"IssueCommentEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/277","id":802149083,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY4MzQwOTE1","number":277,"title":"Updates for Dilithium round 3","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-02-05T13:05:44Z","updated_at":"2021-02-05T16:44:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/277","html_url":"https://github.com/open-quantum-safe/openssl/pull/277","diff_url":"https://github.com/open-quantum-safe/openssl/pull/277.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/277.patch"},"body":"* Updates OIDs for Dilithium round 3 (2, 3, 5, 2_aes, 3_aes, 5_aes)\r\n* Updates security strengths\r\n* Updates `mix_with` according to the security strengths\r\n* `code_point` field is also updated to make the dilithium schemes fit consequently.\r\n\r\nAddresses #276 \r\n\r\n##### Checklist\r\n<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->\r\n- [x] documentation is added or updated\r\n- [x] tests are added or updated\r\n- [ ] Boring interop","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/774148263","html_url":"https://github.com/open-quantum-safe/openssl/pull/277#issuecomment-774148263","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277","id":774148263,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDE0ODI2Mw==","user":{"login":"xvzcf","id":21228961,"node_id":"MDQ6VXNlcjIxMjI4OTYx","avatar_url":"https://avatars.githubusercontent.com/u/21228961?v=4","gravatar_id":"","url":"https://api.github.com/users/xvzcf","html_url":"https://github.com/xvzcf","followers_url":"https://api.github.com/users/xvzcf/followers","following_url":"https://api.github.com/users/xvzcf/following{/other_user}","gists_url":"https://api.github.com/users/xvzcf/gists{/gist_id}","starred_url":"https://api.github.com/users/xvzcf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xvzcf/subscriptions","organizations_url":"https://api.github.com/users/xvzcf/orgs","repos_url":"https://api.github.com/users/xvzcf/repos","events_url":"https://api.github.com/users/xvzcf/events{/privacy}","received_events_url":"https://api.github.com/users/xvzcf/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T16:44:47Z","updated_at":"2021-02-05T16:44:47Z","author_association":"MEMBER","body":"> @xvzcf I'd be inclined to accept this PR (after the `test_tls_full` issue has been addressed) even though boring interop fails: Would you agree? Or in other words: Would you have time to look at updating boringssl? Or should @bhess or @baentsch look at that?\r\n\r\nI'll try to update BoringSSL by the end of today and do at least one interop run, but if you or @bhess have spare cycles, I can review both this and the BoringSSL PR.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T16:44:48Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15084166548","type":"IssueCommentEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47","repository_url":"https://api.github.com/repos/open-quantum-safe/boringssl","labels_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47/comments","events_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47/events","html_url":"https://github.com/open-quantum-safe/boringssl/pull/47","id":802314113,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY4NDc4MDA4","number":47,"title":"Dilithium Round 3","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-02-05T16:45:50Z","updated_at":"2021-02-05T16:47:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/pulls/47","html_url":"https://github.com/open-quantum-safe/boringssl/pull/47","diff_url":"https://github.com/open-quantum-safe/boringssl/pull/47.diff","patch_url":"https://github.com/open-quantum-safe/boringssl/pull/47.patch"},"body":"Analogous to https://github.com/open-quantum-safe/openssl/pull/277\r\n\r\nAddresses https://github.com/open-quantum-safe/openssl/issues/276\r\n\r\n* Updates OIDs for Dilithium round 3 (2, 3, 5, 2_aes, 3_aes, 5_aes)\r\n* Updates security strengths\r\n* code_point synced with OpenSSL","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/comments/774150491","html_url":"https://github.com/open-quantum-safe/boringssl/pull/47#issuecomment-774150491","issue_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47","id":774150491,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDE1MDQ5MQ==","user":{"login":"xvzcf","id":21228961,"node_id":"MDQ6VXNlcjIxMjI4OTYx","avatar_url":"https://avatars.githubusercontent.com/u/21228961?v=4","gravatar_id":"","url":"https://api.github.com/users/xvzcf","html_url":"https://github.com/xvzcf","followers_url":"https://api.github.com/users/xvzcf/followers","following_url":"https://api.github.com/users/xvzcf/following{/other_user}","gists_url":"https://api.github.com/users/xvzcf/gists{/gist_id}","starred_url":"https://api.github.com/users/xvzcf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xvzcf/subscriptions","organizations_url":"https://api.github.com/users/xvzcf/orgs","repos_url":"https://api.github.com/users/xvzcf/repos","events_url":"https://api.github.com/users/xvzcf/events{/privacy}","received_events_url":"https://api.github.com/users/xvzcf/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T16:47:50Z","updated_at":"2021-02-05T16:47:50Z","author_association":"MEMBER","body":"Will run an interop job in a bit.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T16:47:50Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15084175487","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/277","id":802149083,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY4MzQwOTE1","number":277,"title":"Updates for Dilithium round 3","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-02-05T13:05:44Z","updated_at":"2021-02-05T16:48:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/277","html_url":"https://github.com/open-quantum-safe/openssl/pull/277","diff_url":"https://github.com/open-quantum-safe/openssl/pull/277.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/277.patch"},"body":"* Updates OIDs for Dilithium round 3 (2, 3, 5, 2_aes, 3_aes, 5_aes)\r\n* Updates security strengths\r\n* Updates `mix_with` according to the security strengths\r\n* `code_point` field is also updated to make the dilithium schemes fit consequently.\r\n\r\nAddresses #276 \r\n\r\n##### Checklist\r\n<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->\r\n- [x] documentation is added or updated\r\n- [x] tests are added or updated\r\n- [ ] Boring interop","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/774150899","html_url":"https://github.com/open-quantum-safe/openssl/pull/277#issuecomment-774150899","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277","id":774150899,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDE1MDg5OQ==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T16:48:34Z","updated_at":"2021-02-05T16:48:34Z","author_association":"NONE","body":"Just opened a PR for BoringSSL:\r\n\r\nhttps://github.com/open-quantum-safe/boringssl/pull/47","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T16:48:35Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15084550267","type":"IssueCommentEvent","actor":{"id":21283655,"login":"Hatzen","display_login":"Hatzen","gravatar_id":"","url":"https://api.github.com/users/Hatzen","avatar_url":"https://avatars.githubusercontent.com/u/21283655?"},"repo":{"id":247826799,"name":"open-quantum-safe/liboqs-java","url":"https://api.github.com/repos/open-quantum-safe/liboqs-java"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/12","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/12/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/12/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/12/events","html_url":"https://github.com/open-quantum-safe/liboqs-java/issues/12","id":796151551,"node_id":"MDU6SXNzdWU3OTYxNTE1NTE=","number":12,"title":"Crashing on Android after trying to create new Signature","user":{"login":"taimoorgit","id":37668804,"node_id":"MDQ6VXNlcjM3NjY4ODA0","avatar_url":"https://avatars.githubusercontent.com/u/37668804?v=4","gravatar_id":"","url":"https://api.github.com/users/taimoorgit","html_url":"https://github.com/taimoorgit","followers_url":"https://api.github.com/users/taimoorgit/followers","following_url":"https://api.github.com/users/taimoorgit/following{/other_user}","gists_url":"https://api.github.com/users/taimoorgit/gists{/gist_id}","starred_url":"https://api.github.com/users/taimoorgit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/taimoorgit/subscriptions","organizations_url":"https://api.github.com/users/taimoorgit/orgs","repos_url":"https://api.github.com/users/taimoorgit/repos","events_url":"https://api.github.com/users/taimoorgit/events{/privacy}","received_events_url":"https://api.github.com/users/taimoorgit/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-01-28T16:17:58Z","updated_at":"2021-02-05T17:19:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello! I'm using liboqs-java on Android. I have compiled liboqs.so and libjni.so for Android x86_64 successfully and the modules are loaded successfully by Android. I copied the CMakeLists.txt made by [Hatzen](https://github.com/Hatzen/LibOQSTestApp/tree/master/app/src/main/c). \r\n\r\nHowever, after my main activity loads, I try to call the example code from examples/SigExamples.java the app crashes on this line:\r\n\r\n`Signature signer = new Signature(\"DEFAULT\");`\r\n\r\nHere's the logcat from Android [(click here to see full crash log)](https://gist.github.com/taimoorgit/8b51c84c614d35f309d4f0e22a7ec9e8):\r\n\r\n```\r\n2021-01-28 11:14:44.807 2263-2263/io.trustwave.polarisclientapp A/olarisclientap: java_vm_ext.cc:577] JNI DETECTED ERROR IN APPLICATION: use of invalid jobject 0x7efd45de09d0\r\n    java_vm_ext.cc:577]     from org.openquantumsafe.Signature$SignatureDetails org.openquantumsafe.Signature.get_sig_details()\r\n2021-01-28 11:14:44.946 2263-2263/io.trustwave.polarisclientapp A/olarisclientap: runtime.cc:655] Runtime aborting...\r\n```\r\n\r\nIs this an issue with Android, the way I compiled liboqs, the Android version or an issue with the liboqs-java wrapper?\r\n\r\nThanks - Taimoor","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/comments/774169170","html_url":"https://github.com/open-quantum-safe/liboqs-java/issues/12#issuecomment-774169170","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/12","id":774169170,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDE2OTE3MA==","user":{"login":"Hatzen","id":21283655,"node_id":"MDQ6VXNlcjIxMjgzNjU1","avatar_url":"https://avatars.githubusercontent.com/u/21283655?v=4","gravatar_id":"","url":"https://api.github.com/users/Hatzen","html_url":"https://github.com/Hatzen","followers_url":"https://api.github.com/users/Hatzen/followers","following_url":"https://api.github.com/users/Hatzen/following{/other_user}","gists_url":"https://api.github.com/users/Hatzen/gists{/gist_id}","starred_url":"https://api.github.com/users/Hatzen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Hatzen/subscriptions","organizations_url":"https://api.github.com/users/Hatzen/orgs","repos_url":"https://api.github.com/users/Hatzen/repos","events_url":"https://api.github.com/users/Hatzen/events{/privacy}","received_events_url":"https://api.github.com/users/Hatzen/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T17:19:26Z","updated_at":"2021-02-05T17:19:26Z","author_association":"NONE","body":"Thanks for your investigations and trials. Just for clarification my code and the whole repository is not working as well. So this error is probably a duplicate of https://github.com/open-quantum-safe/liboqs-java/issues/11","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T17:19:26Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15084660950","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888","id":798705397,"node_id":"MDU6SXNzdWU3OTg3MDUzOTc=","number":888,"title":"Expert review needed for SIKE constant time warnings","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-02-01T21:02:58Z","updated_at":"2021-02-05T17:28:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Automated tests have identified a few instances of potentially non-constant time behaviour in SIKE. The tests produce a lot of false positives, so there's a good chance that these are benign, but I'm not expert enough to evaluate them. Help appreciated!\r\n\r\n- Lines 590 and 993 of sidh_compressed.c invert an element of Fp^2 using a non-constant time binary gcd (fp2inv_mont_bingcd).\r\n- Line 654 of ec_isogeny.c leaks the number of leading zeros in the \"m\" input to Ladder. This function is called from validate_ciphertext on line 1434 of sidh_compressed.c.\r\n\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/774174390","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888#issuecomment-774174390","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","id":774174390,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDE3NDM5MA==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T17:28:55Z","updated_at":"2021-02-05T17:28:55Z","author_association":"NONE","body":"Thanks for the update on the Ladder issue, @geovandro.\r\n\r\nI'm not sure that I've gotten a satisfactory answer regarding the variable time inversions.\r\n\r\nLet's focus on Line 590. You write:\r\n> the values in the projective representation [A24+:C24] \\equiv [A+2C:4C] (where a = A/C is the public Montgomery curve coefficient) are the actual output of the 2^e-isogeny computation algorithm as per SIKE specification (see Algs. 17 and 19 of https://sike.org/files/SIDH-spec.pdf), so no extra harm in leaking C24.\r\n\r\nThis is obviously true for the call to 2_e_iso in Encaps (Alg 23 line 4), but not obviously true for the call to 2_e_iso in KeyGen (Alg 21 line 4), which is our concern in Line 590. The public key does not reveal C24, and C24 depends on (nominally) secret data.\r\n\r\nIf I've followed correctly, the value of C24 that Alice passes to fp2inv_mont_bingcd on Line 590 is equal to `4 * R.Z ^ 4.` None of the arguments I've heard so far explain why it's safe to leak information about R.Z.\r\n\r\nTo be clear, I don't see a threat here. But I want to know whether this is a provably safe deviation from constant time discipline, or if there's an additional computational assumption here.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T17:28:55Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15084803813","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47","repository_url":"https://api.github.com/repos/open-quantum-safe/boringssl","labels_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47/comments","events_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47/events","html_url":"https://github.com/open-quantum-safe/boringssl/pull/47","id":802314113,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY4NDc4MDA4","number":47,"title":"Dilithium Round 3","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-05T16:45:50Z","updated_at":"2021-02-05T17:41:39Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/pulls/47","html_url":"https://github.com/open-quantum-safe/boringssl/pull/47","diff_url":"https://github.com/open-quantum-safe/boringssl/pull/47.diff","patch_url":"https://github.com/open-quantum-safe/boringssl/pull/47.patch"},"body":"Analogous to https://github.com/open-quantum-safe/openssl/pull/277\r\n\r\nAddresses https://github.com/open-quantum-safe/openssl/issues/276\r\n\r\n* Updates OIDs for Dilithium round 3 (2, 3, 5, 2_aes, 3_aes, 5_aes)\r\n* Updates security strengths\r\n* code_point synced with OpenSSL","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/comments/774181384","html_url":"https://github.com/open-quantum-safe/boringssl/pull/47#issuecomment-774181384","issue_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47","id":774181384,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDE4MTM4NA==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T17:41:39Z","updated_at":"2021-02-05T17:41:39Z","author_association":"NONE","body":"> Will run an interop job in a bit.\r\n\r\nWould the preferred way be to complete this PR and then rerun the OpenSSL interop-test? Locally, the interop-tests pass.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T17:41:39Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15085142788","type":"IssueCommentEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47","repository_url":"https://api.github.com/repos/open-quantum-safe/boringssl","labels_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47/comments","events_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47/events","html_url":"https://github.com/open-quantum-safe/boringssl/pull/47","id":802314113,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY4NDc4MDA4","number":47,"title":"Dilithium Round 3","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-05T16:45:50Z","updated_at":"2021-02-05T18:12:23Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/pulls/47","html_url":"https://github.com/open-quantum-safe/boringssl/pull/47","diff_url":"https://github.com/open-quantum-safe/boringssl/pull/47.diff","patch_url":"https://github.com/open-quantum-safe/boringssl/pull/47.patch"},"body":"Analogous to https://github.com/open-quantum-safe/openssl/pull/277\r\n\r\nAddresses https://github.com/open-quantum-safe/openssl/issues/276\r\n\r\n* Updates OIDs for Dilithium round 3 (2, 3, 5, 2_aes, 3_aes, 5_aes)\r\n* Updates security strengths\r\n* code_point synced with OpenSSL","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/comments/774198786","html_url":"https://github.com/open-quantum-safe/boringssl/pull/47#issuecomment-774198786","issue_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/47","id":774198786,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDE5ODc4Ng==","user":{"login":"xvzcf","id":21228961,"node_id":"MDQ6VXNlcjIxMjI4OTYx","avatar_url":"https://avatars.githubusercontent.com/u/21228961?v=4","gravatar_id":"","url":"https://api.github.com/users/xvzcf","html_url":"https://github.com/xvzcf","followers_url":"https://api.github.com/users/xvzcf/followers","following_url":"https://api.github.com/users/xvzcf/following{/other_user}","gists_url":"https://api.github.com/users/xvzcf/gists{/gist_id}","starred_url":"https://api.github.com/users/xvzcf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xvzcf/subscriptions","organizations_url":"https://api.github.com/users/xvzcf/orgs","repos_url":"https://api.github.com/users/xvzcf/repos","events_url":"https://api.github.com/users/xvzcf/events{/privacy}","received_events_url":"https://api.github.com/users/xvzcf/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T18:12:23Z","updated_at":"2021-02-05T18:12:23Z","author_association":"MEMBER","body":"> Would the preferred way be to complete this PR and then rerun the OpenSSL interop-test? Locally, the interop-tests pass.\r\n\r\nThanks for running them locally. \r\n\r\nYeah, my usual process is to open a PR on OpenSSL, then open one on BoringSSL, check that interop works locally (by changing the OpenSSL `.circleci/config.yml`), then merge the BoringSSL PR first and the OpenSSL PR after.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T18:12:23Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15085326164","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/277","id":802149083,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY4MzQwOTE1","number":277,"title":"Updates for Dilithium round 3","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-02-05T13:05:44Z","updated_at":"2021-02-05T18:29:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/277","html_url":"https://github.com/open-quantum-safe/openssl/pull/277","diff_url":"https://github.com/open-quantum-safe/openssl/pull/277.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/277.patch"},"body":"* Updates OIDs for Dilithium round 3 (2, 3, 5, 2_aes, 3_aes, 5_aes)\r\n* Updates security strengths\r\n* Updates `mix_with` according to the security strengths\r\n* `code_point` field is also updated to make the dilithium schemes fit consequently.\r\n\r\nAddresses #276 \r\n\r\n##### Checklist\r\n<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->\r\n- [x] documentation is added or updated\r\n- [x] tests are added or updated\r\n- [x] Boring interop","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/774208388","html_url":"https://github.com/open-quantum-safe/openssl/pull/277#issuecomment-774208388","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277","id":774208388,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDIwODM4OA==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T18:29:38Z","updated_at":"2021-02-05T18:29:38Z","author_association":"NONE","body":"> > @xvzcf I'd be inclined to accept this PR (after the `test_tls_full` issue has been addressed) even though boring interop fails: Would you agree? Or in other words: Would you have time to look at updating boringssl? Or should @bhess or @baentsch look at that?\r\n> \r\n> I'll try to update BoringSSL by the end of today and do at least one interop run, but if you or @bhess have spare cycles, I can review both this and the BoringSSL PR.\r\n\r\nMarking this as ready. The hybrid OIDs are added in OpenSSL (BoringSSL seems to not to have any).\r\n`crypto/objects/obj_mac.num` are fixed with an updated `assign_ids.fragment`. Interop-tests pass locally when pointing to the BoringSSL-PR.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T18:29:38Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15085357829","type":"IssueCommentEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/277","id":802149083,"node_id":"MDExOlB1bGxSZXF1ZXN0NTY4MzQwOTE1","number":277,"title":"Updates for Dilithium round 3","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-02-05T13:05:44Z","updated_at":"2021-02-05T18:32:37Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/277","html_url":"https://github.com/open-quantum-safe/openssl/pull/277","diff_url":"https://github.com/open-quantum-safe/openssl/pull/277.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/277.patch"},"body":"* Updates OIDs for Dilithium round 3 (2, 3, 5, 2_aes, 3_aes, 5_aes)\r\n* Updates security strengths\r\n* Updates `mix_with` according to the security strengths\r\n* `code_point` field is also updated to make the dilithium schemes fit consequently.\r\n\r\nAddresses #276 \r\n\r\n##### Checklist\r\n<!-- Remove items that do not apply. For completed items, change [ ] to [x]. -->\r\n- [x] documentation is added or updated\r\n- [x] tests are added or updated\r\n- [x] Boring interop","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/774209894","html_url":"https://github.com/open-quantum-safe/openssl/pull/277#issuecomment-774209894","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/277","id":774209894,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDIwOTg5NA==","user":{"login":"xvzcf","id":21228961,"node_id":"MDQ6VXNlcjIxMjI4OTYx","avatar_url":"https://avatars.githubusercontent.com/u/21228961?v=4","gravatar_id":"","url":"https://api.github.com/users/xvzcf","html_url":"https://github.com/xvzcf","followers_url":"https://api.github.com/users/xvzcf/followers","following_url":"https://api.github.com/users/xvzcf/following{/other_user}","gists_url":"https://api.github.com/users/xvzcf/gists{/gist_id}","starred_url":"https://api.github.com/users/xvzcf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xvzcf/subscriptions","organizations_url":"https://api.github.com/users/xvzcf/orgs","repos_url":"https://api.github.com/users/xvzcf/repos","events_url":"https://api.github.com/users/xvzcf/events{/privacy}","received_events_url":"https://api.github.com/users/xvzcf/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T18:32:37Z","updated_at":"2021-02-05T18:32:37Z","author_association":"MEMBER","body":"> The hybrid OIDs are added in OpenSSL (BoringSSL seems to not to have any).\r\n\r\nIndeed, BoringSSL currently does not support hybrid signatures.\r\n\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T18:32:37Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15086724305","type":"IssueCommentEvent","actor":{"id":9383677,"login":"geovandro","display_login":"geovandro","gravatar_id":"","url":"https://api.github.com/users/geovandro","avatar_url":"https://avatars.githubusercontent.com/u/9383677?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888","id":798705397,"node_id":"MDU6SXNzdWU3OTg3MDUzOTc=","number":888,"title":"Expert review needed for SIKE constant time warnings","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-02-01T21:02:58Z","updated_at":"2021-02-05T20:49:42Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Automated tests have identified a few instances of potentially non-constant time behaviour in SIKE. The tests produce a lot of false positives, so there's a good chance that these are benign, but I'm not expert enough to evaluate them. Help appreciated!\r\n\r\n- Lines 590 and 993 of sidh_compressed.c invert an element of Fp^2 using a non-constant time binary gcd (fp2inv_mont_bingcd).\r\n- Line 654 of ec_isogeny.c leaks the number of leading zeros in the \"m\" input to Ladder. This function is called from validate_ciphertext on line 1434 of sidh_compressed.c.\r\n\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/774281118","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888#issuecomment-774281118","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","id":774281118,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDI4MTExOA==","user":{"login":"geovandro","id":9383677,"node_id":"MDQ6VXNlcjkzODM2Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/9383677?v=4","gravatar_id":"","url":"https://api.github.com/users/geovandro","html_url":"https://github.com/geovandro","followers_url":"https://api.github.com/users/geovandro/followers","following_url":"https://api.github.com/users/geovandro/following{/other_user}","gists_url":"https://api.github.com/users/geovandro/gists{/gist_id}","starred_url":"https://api.github.com/users/geovandro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geovandro/subscriptions","organizations_url":"https://api.github.com/users/geovandro/orgs","repos_url":"https://api.github.com/users/geovandro/repos","events_url":"https://api.github.com/users/geovandro/events{/privacy}","received_events_url":"https://api.github.com/users/geovandro/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T20:49:42Z","updated_at":"2021-02-05T20:49:42Z","author_association":"NONE","body":"Sorry for not going into the technicalities in my previous reply. \r\n\r\nNote that Algorithms 17 and 19 output the projective version of the Montgomery coefficient \"a\" in the form (A24+,C24) because they are built on top of Algorithm 13, which computes individual projective 4-isogenies. The output of Algorithm 13 in turn is meant to be public. If you do some calculations, you will find that an adversary with possession of (A24+,C24) can retrieve R.X^4 and R.Z^4, where R.x :=R.X/R.Z is the affine abscissa of the previous (secret) kernel point of order 4. Recovering the correct R.x involves a fourth root extraction, and each one of the 4 possible roots will give a valid solution R.x' for a previous kernel (each one on a different 4-isogenous curve), so the adversary cannot distinguish among them and guess the right R.x. In the end, the adversary is trying to brute force to get to the correct isogeny with the information in hands.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T20:49:42Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15087502274","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888","id":798705397,"node_id":"MDU6SXNzdWU3OTg3MDUzOTc=","number":888,"title":"Expert review needed for SIKE constant time warnings","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2021-02-01T21:02:58Z","updated_at":"2021-02-05T22:17:48Z","closed_at":"2021-02-05T22:17:48Z","author_association":"NONE","active_lock_reason":null,"body":"Automated tests have identified a few instances of potentially non-constant time behaviour in SIKE. The tests produce a lot of false positives, so there's a good chance that these are benign, but I'm not expert enough to evaluate them. Help appreciated!\r\n\r\n- Lines 590 and 993 of sidh_compressed.c invert an element of Fp^2 using a non-constant time binary gcd (fp2inv_mont_bingcd).\r\n- Line 654 of ec_isogeny.c leaks the number of leading zeros in the \"m\" input to Ladder. This function is called from validate_ciphertext on line 1434 of sidh_compressed.c.\r\n\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/774318373","html_url":"https://github.com/open-quantum-safe/liboqs/issues/888#issuecomment-774318373","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/888","id":774318373,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDMxODM3Mw==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T22:17:48Z","updated_at":"2021-02-05T22:17:48Z","author_association":"NONE","body":"OK, that's enough for me to close this issue. Thanks @geovandro. ","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T22:17:48Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15087560155","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","id":792333487,"node_id":"MDExOlB1bGxSZXF1ZXN0NTYwMjM0NzI4","number":881,"title":"Use valgrind to check for secret-dependent branching","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2021-01-22T22:01:16Z","updated_at":"2021-02-05T22:25:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/881","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/881.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/881.patch"},"body":"Here's one way to use Valgrind to check for secret-dependent branching (and resolve #812). It's based on  Moritz Neikes [TIMECOP](https://post-apocalyptic-crypto.org/timecop/index.html).\r\n\r\nThe idea behind TIMECOP is that if you tell Valgrind that secret data resides in uninitialized memory, then Valgrind will tell you when your program branches on secret data.\r\n\r\nSUPERCOP's implementation of TIMECOP introduced \"classify\" and \"declassify\" terminology for the operation of telling Valgrind that memory is secret or non-secret. I've replicated that terminology by defining two macros in oqs.h:\r\n\r\n```c\r\n#define OQS_TIMECOP_CLASSIFY(addr, len)  VALGRIND_MAKE_MEM_UNDEFINED(addr, len)\r\n#define OQS_TIMECOP_DECLASSIFY(addr, len)  VALGRIND_MAKE_MEM_DEFINED(addr, len)\r\n```\r\n\r\nEvery secret can ultimately be traced back to a call to randombytes, so we can tell Valgrind that secrets reside in uninitialized memory by defining our own randombytes, e.g.\r\n\r\n```c\r\nvoid TEST_KEM_randombytes(uint8_t *random_array, size_t bytes_to_read) {\r\n  OQS_randombytes_system(random_array, bytes_to_read);\r\n  OQS_TIMECOP_CLASSIFY(random_array, bytes_to_read);\r\n}\r\n```\r\nand making it the default\r\n```c\r\n  OQS_randombytes_custom_algorithm(&TEST_KEM_randombytes);\r\n```\r\n\r\nI've done this in test_kem.c and test_sig.c. If you run the new test_kem or test_sig outside of Valgrind there's no change. But in Valgrind you'll see something like this:\r\n\r\n```sh\r\n$ valgrind ./tests/test_kem sntrup761\r\n[...]\r\n== Thread 2:\r\n== Conditional jump or move depends on uninitialised value(s)\r\n==    at 0x2B4EBF: PQCLEAN_SNTRUP761_CLEAN_crypto_kem_keypair (kem.c:145)\r\n==    by 0x10BCE8: kem_test_correctness (test_kem.c:94)\r\n==    by 0x10C58B: test_wrapper (test_kem.c:177)\r\n==    by 0x4CDAFA2: start_thread (pthread_create.c:486)\r\n==    by 0x4DED4CE: clone (clone.S:95) \r\n[...]\r\n```\r\n(I've compiled with CMAKE_BUILD_TYPE=debug to get the line numbers were secret branching occurs.)\r\n\r\nOf course, some non-secret data is derived from calls to randombytes, and examining pqclean_sntrup761_clean/kem.c we see that line 145 is part of a rejection sampling loop and the branch is not secret. We can remove the false positive by calling OQS_TIMECOP_DECLASSIFY on the offending memory.\r\n\r\nThere's a different example of declassifying memory in Kyber512 in the first commit linked to this PR.\r\n\r\n--- \r\n\r\nNone of changes to oqs.h, test_kem.c, or test_sig.c introduce a dependency on Valgrind. Users can still compile test_kem and test_sig and run them outside of Valgrind. All we need are some header files that the Valgrind project provides, for this purpose, under a BSD license. I've added those to src/common/valgrind.\r\n\r\n**TODO:**\r\n- [x] Configure CMake to include the local valgrind/memcheck.h and valgrind/valgrind.h.\r\n- [x] Add a compilation flag to completely remove calls to VALGRIND_MAKE_MEM_DEFINED. Compiling the schemes with \"-DNVALGRIND\" will do the trick. Alternatively we can change the definitions of OQS_TIMECOP_(DE)CLASSIFY in oqs.h with an ifdef.\r\n- [ ] Flag false positives with OQS_TIMECOP_DECLASSIFY.\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/774321185","html_url":"https://github.com/open-quantum-safe/liboqs/pull/881#issuecomment-774321185","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/881","id":774321185,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDMyMTE4NQ==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T22:25:06Z","updated_at":"2021-02-05T22:25:06Z","author_association":"NONE","body":"Hmm. ca5b2e4 doesn't seem to have worked. Any thoughts on a more reliable way to disable AVX512 when OQS_ENABLE_TEST_CONSTANT_TIME is on?","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T22:25:06Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15087603561","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/882","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/882/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/882/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/882/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/882","id":792340302,"node_id":"MDU6SXNzdWU3OTIzNDAzMDI=","number":882,"title":"Outdated SIKE code","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false},"assignees":[{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2021-01-22T22:16:29Z","updated_at":"2021-02-05T22:30:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The timing side-channel test from #881 flags this as a potential timing leak. It was fixed upstream last June.\r\n\r\nhttps://github.com/open-quantum-safe/liboqs/blob/fb5484cda68dac115dc563593c68388f89444b95/src/kem/sike/external/sike.c#L79-L82","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/774323332","html_url":"https://github.com/open-quantum-safe/liboqs/issues/882#issuecomment-774323332","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/882","id":774323332,"node_id":"MDEyOklzc3VlQ29tbWVudDc3NDMyMzMzMg==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-02-05T22:30:34Z","updated_at":"2021-02-05T22:30:34Z","author_association":"NONE","body":"Adding to this, we should pull the most recent SIKE code to get https://github.com/microsoft/PQCrypto-SIDH/commit/c59a5e17ab684185d58c579a21e66e163ad66cea as well.","performed_via_github_app":null}},"public":true,"created_at":"2021-02-05T22:30:34Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
