{"id":"15820885806","type":"IssuesEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/953","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/953/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/953/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/953/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/953","id":844709380,"node_id":"MDU6SXNzdWU4NDQ3MDkzODA=","number":953,"title":"Pull HQC code from PQClean once stack issue is fixed (https://github.com/PQClean/PQClean/issues/390)","user":{"login":"mouse07410","id":5923577,"node_id":"MDQ6VXNlcjU5MjM1Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/5923577?v=4","gravatar_id":"","url":"https://api.github.com/users/mouse07410","html_url":"https://github.com/mouse07410","followers_url":"https://api.github.com/users/mouse07410/followers","following_url":"https://api.github.com/users/mouse07410/following{/other_user}","gists_url":"https://api.github.com/users/mouse07410/gists{/gist_id}","starred_url":"https://api.github.com/users/mouse07410/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mouse07410/subscriptions","organizations_url":"https://api.github.com/users/mouse07410/orgs","repos_url":"https://api.github.com/users/mouse07410/repos","events_url":"https://api.github.com/users/mouse07410/events{/privacy}","received_events_url":"https://api.github.com/users/mouse07410/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/13","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13/labels","id":6475880,"node_id":"MDk6TWlsZXN0b25lNjQ3NTg4MA==","number":13,"title":"0.6.0 RC1","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":8,"state":"open","created_at":"2021-02-24T18:42:42Z","updated_at":"2021-04-05T19:40:08Z","due_on":"2021-04-07T07:00:00Z","closed_at":null},"comments":4,"created_at":"2021-03-30T15:09:48Z","updated_at":"2021-04-05T19:40:08Z","closed_at":"2021-04-05T19:40:08Z","author_association":"NONE","active_lock_reason":null,"body":"MacOS Catalina 10.15.7, Xcode-12.4. Current master.\r\n\r\n```\r\n.  .  .  .  .\r\n======================================================= FAILURES ========================================================\r\n___________________________________________________ test_kem[HQC-128] ___________________________________________________\r\n[gw16] darwin -- Python 3.9.2 /opt/local/bin/python3\r\n\r\nkem_name = 'HQC-128'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess(\r\n            [helpers.path_to_executable('test_kem'), kem_name],\r\n        )\r\n\r\ntests/test_cmdline.py:19: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ncommand = ['./build/tests/test_kem', 'HQC-128'], working_dir = '.'\r\nenv = {'ANT_OPTS': '-Dhttp.proxyHost=llproxy.llan.ll.mit.edu -Dhttp.proxyPort=8080', 'AS': 'yasm -m amd64 -f macho64 -p gas -X gnu ', 'AS_INTEGRATED_ASSEMBLER': '1', 'BASH_SILENCE_DEPRECATION_WARNING': '1', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -10\r\n\r\ntests/helpers.py:41: AssertionError\r\n------------------------------------------------- Captured stdout call --------------------------------------------------\r\n. > ./build/tests/test_kem HQC-128\r\n\r\n___________________________________________________ test_kem[HQC-192] ___________________________________________________\r\n[gw17] darwin -- Python 3.9.2 /opt/local/bin/python3\r\n\r\nkem_name = 'HQC-192'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess(\r\n            [helpers.path_to_executable('test_kem'), kem_name],\r\n        )\r\n\r\ntests/test_cmdline.py:19: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ncommand = ['./build/tests/test_kem', 'HQC-192'], working_dir = '.'\r\nenv = {'ANT_OPTS': '-Dhttp.proxyHost=llproxy.llan.ll.mit.edu -Dhttp.proxyPort=8080', 'AS': 'yasm -m amd64 -f macho64 -p gas -X gnu ', 'AS_INTEGRATED_ASSEMBLER': '1', 'BASH_SILENCE_DEPRECATION_WARNING': '1', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code -10\r\n\r\ntests/helpers.py:41: AssertionError\r\n------------------------------------------------- Captured stdout call --------------------------------------------------\r\n. > ./build/tests/test_kem HQC-192\r\n\r\n================================================ short test summary info ================================================\r\nFAILED tests/test_cmdline.py::test_kem[HQC-128] - AssertionError: Got unexpected return code -10\r\nFAILED tests/test_cmdline.py::test_kem[HQC-192] - AssertionError: Got unexpected return code -10\r\n====================================== 2 failed, 502 passed, 254 skipped in 44.37s ===============\r\n```","performed_via_github_app":null}},"public":true,"created_at":"2021-04-05T19:40:08Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
