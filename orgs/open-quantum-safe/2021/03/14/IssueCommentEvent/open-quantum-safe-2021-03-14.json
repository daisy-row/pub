{"id":"15532541952","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/942","id":830579454,"node_id":"MDExOlB1bGxSZXF1ZXN0NTkyMDgyNTQ3","number":942,"title":"Make OQS_USE_CPU_EXTENSIONS imply OQS_PORTABLE_BUILD=OFF; alternative…","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-03-12T22:29:14Z","updated_at":"2021-03-14T06:09:36Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/942","html_url":"https://github.com/open-quantum-safe/liboqs/pull/942","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/942.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/942.patch"},"body":"#941 fixes the broken `OQS_PORTABLE_BUILD=ON` + `OQS_USE_CPU_EXTENSIONS=OFF` combination (#939) as part of a larger effort to fix OQS_PORTABLE_BUILD. Unfortunately that's now waiting on new sha3 to merge.\r\n\r\n@baentsch, in #939, writes:\r\n> What I've been looking for in this case was a portable image without the need for/cost of CPU feature checks. And that --I thought-- `OQS_USE_CPU_EXTENSIONS=OFF` should yield.\r\n\r\nHere it sounds like you actually do want  `OQS_PORTABLE_BUILD=OFF` + `OQS_USE_CPU_EXTENSIONS=OFF`.\r\n\r\nThat doesn't change the fact that we should have a short-term mitigation for the broken configuration. I'm fine with forcing OQS_PORTABLE_BUILD=OFF when OQS_USE_CPU_EXTENSIONS=OFF. This PR does that.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/798841082","html_url":"https://github.com/open-quantum-safe/liboqs/pull/942#issuecomment-798841082","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942","id":798841082,"node_id":"MDEyOklzc3VlQ29tbWVudDc5ODg0MTA4Mg==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-14T06:09:36Z","updated_at":"2021-03-14T06:09:36Z","author_association":"MEMBER","body":"> Here it sounds like you actually do want OQS_PORTABLE_BUILD=OFF + OQS_USE_CPU_EXTENSIONS=OFF.\r\n> That doesn't change the fact that we should have a short-term mitigation for the broken configuration. I'm fine with forcing OQS_PORTABLE_BUILD=OFF when OQS_USE_CPU_EXTENSIONS=OFF. This PR does that.\r\n\r\nI was looking for a maximally portable binary. Getting this by setting `OQS_PORTABLE_BUILD=OFF` is somewhat counter-intuitive. But I may simply be confused by the naming:\r\n\r\nSo, allow me to state which configurations I'd been using & thought sensible:\r\n1) \"Reference\": A configuration permitting benchmarking of all algorithms' baseline, reference code. Build anywhere, run anywhere. Slow. No feature-test overhead.\r\n2) \"Performance\": A configuration permitting benchmarking of all algorithms' best optimized code. Build on CPUs with all required features, executing OK on CPUs with those features, crashing on CPUs without these features. No feature-test overhead.\r\n3) \"Practical\"/Release: A configuration running at high-speed where possible, slower where not (e.g., CPU features not present); but surely never crashing; carries CPU feature detection overhead and thus not good for benchmarking. Builds on CPUs with all CPU features available but executes also on CPUs without them (with feature-test overhead).\r\n\r\nCould we agree these configurations make sense? If not, let's discuss.\r\n\r\nIf we'd agree they make sense, these 3 configurations were delivered by (in my mind -- but possibly that's the problem):\r\n1) OQS_USE_CPU_EXTENSIONS=OFF (OQS_PORTABLE_BUILD not relevant)\r\n2) OQS_USE_CPU_EXTENSIONS=ON&&OQS_PORTABLE_BUILD=OFF\r\n3) OQS_USE_CPU_EXTENSIONS=ON&&OQS_PORTABLE_BUILD=ON\r\n\r\nIf I understand the PR right, OQS_PORTABLE_BUILD must be OFF when OQS_USE_CPU_EXTENSIONS=OFF. Basically fine with me, but I'd then probably suggest renaming OQS_PORTABLE_BUILD to something like OQS_CPU_RT_EXTENSION_CHECK to avoid future confusion. This would also make it obvious that the combination OQS_USE_CPU_EXTENSIONS=OFF&&OQS_CPU_RT_EXTENSION_CHECK=ON is pointless.\r\n\r\nLast point, should we add CMAKE_BUILD_TYPES named as per the 3 configs above, also documenting what we \"mean\" by the config flags (whatever their name)?","performed_via_github_app":null}},"public":true,"created_at":"2021-03-14T06:09:36Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15532578224","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/292","id":831030567,"node_id":"MDU6SXNzdWU4MzEwMzA1Njc=","number":292,"title":"Hybrid-Algorithm unexpected behavior","user":{"login":"mraavi5","id":55515041,"node_id":"MDQ6VXNlcjU1NTE1MDQx","avatar_url":"https://avatars.githubusercontent.com/u/55515041?v=4","gravatar_id":"","url":"https://api.github.com/users/mraavi5","html_url":"https://github.com/mraavi5","followers_url":"https://api.github.com/users/mraavi5/followers","following_url":"https://api.github.com/users/mraavi5/following{/other_user}","gists_url":"https://api.github.com/users/mraavi5/gists{/gist_id}","starred_url":"https://api.github.com/users/mraavi5/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mraavi5/subscriptions","organizations_url":"https://api.github.com/users/mraavi5/orgs","repos_url":"https://api.github.com/users/mraavi5/repos","events_url":"https://api.github.com/users/mraavi5/events{/privacy}","received_events_url":"https://api.github.com/users/mraavi5/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-14T00:21:41Z","updated_at":"2021-03-14T06:21:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi,\r\n\r\nI was wondering about the uncertainties in key-pair generation time and certificate generation times using hybrid algorithms with OpenSSL. I generated a key-pair and a certificate using the following classical, post-quantum, and hybrid algorithms. I got the following times and I couldn’t understand the reason behind slower key-pair generation/certificate generation times using hybrid algorithms.\r\n\r\nKey Generation\r\nClassical:\r\nRSA 3072 : 351.64 ms\r\nP256 : 3.7 ms\r\n\r\nPost-Quantum:\r\nDilithium 2 : 3.07 ms\r\n\r\nHybrids:\r\nRSA 3072-Dilithium2 : 263 ms (shouldn’t this be more than 351.64 ms?)\r\nP256-Dilihthium 2 : 3.21 ms (shouldn’t this be more than 3.7 ms?)\r\n\r\nMy understanding is that hybrid algorithms generate both keys/signatures and concatenate them in the certification process. If that is the case, key-pair/certificate generation time at a minimum should be the maximum key-pair/certificate generation times of individual algorithms. For example, algorithms A and B form a hybrid algorithm C. C should take a longer time than max(A,B) to generate key-pair/certificates. Is this correct?","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/798842230","html_url":"https://github.com/open-quantum-safe/openssl/issues/292#issuecomment-798842230","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292","id":798842230,"node_id":"MDEyOklzc3VlQ29tbWVudDc5ODg0MjIzMA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-14T06:21:59Z","updated_at":"2021-03-14T06:21:59Z","author_association":"MEMBER","body":"Hi, thanks for this report. Yes, conceptually, your argumentation is right. The question however is, how (often/with which tooling) did you do these tests/measurements? In all cases, randomness determines runtime to quite some degree... Best would be if you'd share your test code.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-14T06:21:59Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15534964147","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/942","id":830579454,"node_id":"MDExOlB1bGxSZXF1ZXN0NTkyMDgyNTQ3","number":942,"title":"Make OQS_USE_CPU_EXTENSIONS imply OQS_PORTABLE_BUILD=OFF; alternative…","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-03-12T22:29:14Z","updated_at":"2021-03-14T16:16:53Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/942","html_url":"https://github.com/open-quantum-safe/liboqs/pull/942","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/942.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/942.patch"},"body":"#941 fixes the broken `OQS_PORTABLE_BUILD=ON` + `OQS_USE_CPU_EXTENSIONS=OFF` combination (#939) as part of a larger effort to fix OQS_PORTABLE_BUILD. Unfortunately that's now waiting on new sha3 to merge.\r\n\r\n@baentsch, in #939, writes:\r\n> What I've been looking for in this case was a portable image without the need for/cost of CPU feature checks. And that --I thought-- `OQS_USE_CPU_EXTENSIONS=OFF` should yield.\r\n\r\nHere it sounds like you actually do want  `OQS_PORTABLE_BUILD=OFF` + `OQS_USE_CPU_EXTENSIONS=OFF`.\r\n\r\nThat doesn't change the fact that we should have a short-term mitigation for the broken configuration. I'm fine with forcing OQS_PORTABLE_BUILD=OFF when OQS_USE_CPU_EXTENSIONS=OFF. This PR does that.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/798934663","html_url":"https://github.com/open-quantum-safe/liboqs/pull/942#issuecomment-798934663","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942","id":798934663,"node_id":"MDEyOklzc3VlQ29tbWVudDc5ODkzNDY2Mw==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-03-14T16:16:53Z","updated_at":"2021-03-14T16:16:53Z","author_association":"CONTRIBUTOR","body":"Renaming OQS_PORTABLE_BUILD sounds good to me. It should wait until after #941 is merged and should not be tacked onto this PR. @baentsch would you mind opening a discussion thread instead?","performed_via_github_app":null}},"public":true,"created_at":"2021-03-14T16:16:54Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15535886023","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/942","id":830579454,"node_id":"MDExOlB1bGxSZXF1ZXN0NTkyMDgyNTQ3","number":942,"title":"Make OQS_USE_CPU_EXTENSIONS imply OQS_PORTABLE_BUILD=OFF; alternative…","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-03-12T22:29:14Z","updated_at":"2021-03-14T19:32:48Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/942","html_url":"https://github.com/open-quantum-safe/liboqs/pull/942","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/942.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/942.patch"},"body":"#941 fixes the broken `OQS_PORTABLE_BUILD=ON` + `OQS_USE_CPU_EXTENSIONS=OFF` combination (#939) as part of a larger effort to fix OQS_PORTABLE_BUILD. Unfortunately that's now waiting on new sha3 to merge.\r\n\r\n@baentsch, in #939, writes:\r\n> What I've been looking for in this case was a portable image without the need for/cost of CPU feature checks. And that --I thought-- `OQS_USE_CPU_EXTENSIONS=OFF` should yield.\r\n\r\nHere it sounds like you actually do want  `OQS_PORTABLE_BUILD=OFF` + `OQS_USE_CPU_EXTENSIONS=OFF`.\r\n\r\nThat doesn't change the fact that we should have a short-term mitigation for the broken configuration. I'm fine with forcing OQS_PORTABLE_BUILD=OFF when OQS_USE_CPU_EXTENSIONS=OFF. This PR does that.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/798965680","html_url":"https://github.com/open-quantum-safe/liboqs/pull/942#issuecomment-798965680","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/942","id":798965680,"node_id":"MDEyOklzc3VlQ29tbWVudDc5ODk2NTY4MA==","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2021-03-14T19:32:48Z","updated_at":"2021-03-14T19:32:48Z","author_association":"MEMBER","body":"Okay, I'll merge this one.  Then we're waiting on the Picnic team feedback on #922, then #941, then some new work on renaming OQS\\_PORTABLE\\_BUILD. Thanks guys.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-14T19:32:48Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15536232268","type":"IssueCommentEvent","actor":{"id":55515041,"login":"mraavi5","display_login":"mraavi5","gravatar_id":"","url":"https://api.github.com/users/mraavi5","avatar_url":"https://avatars.githubusercontent.com/u/55515041?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/292","id":831030567,"node_id":"MDU6SXNzdWU4MzEwMzA1Njc=","number":292,"title":"Hybrid-Algorithm unexpected behavior","user":{"login":"mraavi5","id":55515041,"node_id":"MDQ6VXNlcjU1NTE1MDQx","avatar_url":"https://avatars.githubusercontent.com/u/55515041?v=4","gravatar_id":"","url":"https://api.github.com/users/mraavi5","html_url":"https://github.com/mraavi5","followers_url":"https://api.github.com/users/mraavi5/followers","following_url":"https://api.github.com/users/mraavi5/following{/other_user}","gists_url":"https://api.github.com/users/mraavi5/gists{/gist_id}","starred_url":"https://api.github.com/users/mraavi5/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mraavi5/subscriptions","organizations_url":"https://api.github.com/users/mraavi5/orgs","repos_url":"https://api.github.com/users/mraavi5/repos","events_url":"https://api.github.com/users/mraavi5/events{/privacy}","received_events_url":"https://api.github.com/users/mraavi5/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-14T00:21:41Z","updated_at":"2021-03-14T20:49:36Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi,\r\n\r\nI was wondering about the uncertainties in key-pair generation time and certificate generation times using hybrid algorithms with OpenSSL. I generated a key-pair and a certificate using the following classical, post-quantum, and hybrid algorithms. I got the following times and I couldn’t understand the reason behind slower key-pair generation/certificate generation times using hybrid algorithms.\r\n\r\nKey Generation\r\nClassical:\r\nRSA 3072 : 351.64 ms\r\nP256 : 3.7 ms\r\n\r\nPost-Quantum:\r\nDilithium 2 : 3.07 ms\r\n\r\nHybrids:\r\nRSA 3072-Dilithium2 : 263 ms (shouldn’t this be more than 351.64 ms?)\r\nP256-Dilihthium 2 : 3.21 ms (shouldn’t this be more than 3.7 ms?)\r\n\r\nMy understanding is that hybrid algorithms generate both keys/signatures and concatenate them in the certification process. If that is the case, key-pair/certificate generation time at a minimum should be the maximum key-pair/certificate generation times of individual algorithms. For example, algorithms A and B form a hybrid algorithm C. C should take a longer time than max(A,B) to generate key-pair/certificates. Is this correct?","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/798977360","html_url":"https://github.com/open-quantum-safe/openssl/issues/292#issuecomment-798977360","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292","id":798977360,"node_id":"MDEyOklzc3VlQ29tbWVudDc5ODk3NzM2MA==","user":{"login":"mraavi5","id":55515041,"node_id":"MDQ6VXNlcjU1NTE1MDQx","avatar_url":"https://avatars.githubusercontent.com/u/55515041?v=4","gravatar_id":"","url":"https://api.github.com/users/mraavi5","html_url":"https://github.com/mraavi5","followers_url":"https://api.github.com/users/mraavi5/followers","following_url":"https://api.github.com/users/mraavi5/following{/other_user}","gists_url":"https://api.github.com/users/mraavi5/gists{/gist_id}","starred_url":"https://api.github.com/users/mraavi5/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mraavi5/subscriptions","organizations_url":"https://api.github.com/users/mraavi5/orgs","repos_url":"https://api.github.com/users/mraavi5/repos","events_url":"https://api.github.com/users/mraavi5/events{/privacy}","received_events_url":"https://api.github.com/users/mraavi5/received_events","type":"User","site_admin":false},"created_at":"2021-03-14T20:49:36Z","updated_at":"2021-03-14T20:49:36Z","author_association":"NONE","body":"Hi  Baentsch,\r\n\r\nThank you for your response. Please take a look at the following \r\n\r\nRSA 3072\r\napps/openssl genpkey -algorithm rsa -out key_srv_rsa3072.key -pkeyopt rsa_keygen_bits:3072 > /dev/null 2>&1'\r\n\r\nP256\r\napps/openssl ecparam -out key_srv_secp256k1.key -name secp256k1 -genkey > /dev/null 2>&1'\r\n\r\nDilithium2\r\napps/openssl genpkey -algorithm dilithium2 -out key_srv_dilithium2.key > /dev/null 2>&1'\r\n\r\nHybrid\r\nRSA3072-Dilithium2\r\napps/openssl genpkey -algorithm rsa3072_dilithium2 -out key_srv_rsa3072_dilithium2.key > /dev/null 2>&1'\r\n\r\nP256-Dilithium2\r\napps/openssl genpkey -algorithm p256_dilithium2 -out key_srv_p256_dilithium2.key > /dev/null 2>&1'\r\n\r\nI ran each command 1000 times and averaged the results.\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-03-14T20:49:37Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
