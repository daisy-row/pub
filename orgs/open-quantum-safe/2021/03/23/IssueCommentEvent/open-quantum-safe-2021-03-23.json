{"id":"15648444258","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/295","id":837206565,"node_id":"MDU6SXNzdWU4MzcyMDY1NjU=","number":295,"title":"Issue when signing with new algorithms","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-03-21T23:08:27Z","updated_at":"2021-03-23T05:44:56Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Everybody. I am trying to use the new algorithms in our wrapper library (LibPKI) that builds on top of OpenSSL. One thing I am having difficulties is to understand how to properly use the signing functions. \r\n\r\nSpecifically, I am trying to implement a generic signing function for DER encoded data (PKI_X509_sign(der (data), md (digest algor), evp_pkey) -> signature), and although the same functions work with RSA or ECDSA, they fail when I try with falcon, dilithium, or sphincs+.\r\n\r\nHere's the first code I tried:\r\n\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\n// Initializes the Signature\r\nEVP_SignInit_ex(ctx, md, NULL);\r\nEVP_SignUpdate (ctx, der->data, der->size);\r\n\r\n// Finalizes the signature\r\nif (!EVP_SignFinal(ctx, out_mem->data, (unsigned int *) &ossl_ret, pkey))\r\n{\r\n\tPKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot finalize signature (%s)\", \r\n\t\tHSM_OPENSSL_get_errdesc(HSM_OPENSSL_get_errno(), NULL, 0));\r\n\r\n\tPKI_MEM_free(out_mem);\r\n\tout_mem = NULL;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nI also tried the DigestSign version:\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\nif (!EVP_DigestSignInit(ctx, &pCtx, md, NULL, pkey)) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Initialize EVP_DigestSignInit()\");\r\n    goto err;\r\n}\r\n\r\nif (EVP_DigestSignUpdate(ctx, \r\n                                            der->data,\r\n   \t                                    der->size) <= 0) {\r\n   PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Update EVP_DigestSignUpdate()\");\r\n   goto err;\r\n}\r\n\r\nif (EVP_DigestSignFinal(ctx,\r\n                                        out_mem->data,\r\n                                        &ossl_ret) <= 0) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Finalize EVP_DigestSignFinal()\");\r\n    goto err;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nThe error seems to be related to the digest used (\"md\"). Specifically, if the md is not NULL, the EVP_SignFinal()/EVP_DigestSignFinal() fail with the following error trace:\r\n\r\n```\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:349] Can not create signature (117): Cannot finalize signature (  H??)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 0 bytes (estimated: 690 bytes)]\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [hsm_main.c:614] [PKI_sign()] [DEBUG]: Can not generate signature (returned from sign cb)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [hsm_main.c:541] Can not create signature (117):\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [pki_x509_req.c:222] [PKI_X509_REQ_new()] [DEBUG] REQ::ERROR 0 signing the Request [error:1012F0B1:elliptic curve routines:pkey_oqs_ctrl:wrong digest]\r\n```\r\nI know I am doing something wrong here, but I am not sure what... \r\n\r\nTo probe a bit further, I forced the use of a specific hashing algorithm - since the error was related to that, somehow: md = EVP_sha512(). If I do that, I get a success return code but the signature in the data is all zeroes.\r\n\r\n```\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [pki_x509_req.c:61] [PKI_X509_REQ_new()] [DEBUG]: No Digest Associated with used algorithm\r\nMar 21 22:54:41 2021 GMT [97064] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 690 bytes (estimated: 690 bytes)]\r\n```\r\n\r\nJust to be very precise, when I use the standard apps/ tools (i.e., openssl req -new ...) I am able to generate things correctly.\r\n\r\nAnybody experiencing similar issues and/or know what I might be doing wrong?\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/804634771","html_url":"https://github.com/open-quantum-safe/openssl/issues/295#issuecomment-804634771","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","id":804634771,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDYzNDc3MQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-23T05:44:56Z","updated_at":"2021-03-23T05:44:56Z","author_association":"MEMBER","body":"> by using a specific OID (instead of one OID for each combination) we can make things a bit easier for the developer\r\n\r\nI'm not sure I understand: Are you proposing one OID for _any_ algorithm combination? Wouldn't this permit creation of X.509 data (and files) that become completely unintelligible (different files with the same OID containing completely different key types)?\r\n\r\n> allows for more than 2 keys to be combined\r\n\r\nI'm not sure what benefit this would bring. At least for KEMs this would probably also go beyond https://tools.ietf.org/html/draft-ietf-tls-hybrid-design-00.\r\n\r\n> or are you focusing on 3.0 support only at this point\r\n\r\nDefinitely no; the OSSL111 fork has more functionality compared to the OSSL3 provider at this time. Also OSSL111 is the only widely deployed variant.\r\n\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-03-23T05:44:56Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15648498319","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/294","id":836797345,"node_id":"MDU6SXNzdWU4MzY3OTczNDU=","number":294,"title":"cannot generate self-signed root CA certificate","user":{"login":"IsTyping","id":75671533,"node_id":"MDQ6VXNlcjc1NjcxNTMz","avatar_url":"https://avatars.githubusercontent.com/u/75671533?v=4","gravatar_id":"","url":"https://api.github.com/users/IsTyping","html_url":"https://github.com/IsTyping","followers_url":"https://api.github.com/users/IsTyping/followers","following_url":"https://api.github.com/users/IsTyping/following{/other_user}","gists_url":"https://api.github.com/users/IsTyping/gists{/gist_id}","starred_url":"https://api.github.com/users/IsTyping/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IsTyping/subscriptions","organizations_url":"https://api.github.com/users/IsTyping/orgs","repos_url":"https://api.github.com/users/IsTyping/repos","events_url":"https://api.github.com/users/IsTyping/events{/privacy}","received_events_url":"https://api.github.com/users/IsTyping/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-03-20T12:32:19Z","updated_at":"2021-03-23T05:51:52Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm starting the TLS demmo on Ubuntu 18 with a shared library set up and these default algorithms announced: -DOQS_DEFAULT_GROUPS=\\\"CRYSTALS-kyber:FRODO:SABER\\\" . \r\nI try to generate the self signed certificate from my openssl-1.1.1 main directory with:\r\n\r\n`apps/openssl req -x509 -new -newkey kyber512 -keyout kyber512_CA.key -out kyber512_CA.crt -nodes -subj \"/CN=oqstest CA\" -days 365 -config apps/openssl.cnf`\r\n\r\nI get this error:\r\n\r\n`Can't load /root/.rnd into RNG\r\n140383120265664:error:2406F079:random number generator:RAND_load_file:Cannot open file:crypto/rand/randfile.c:88:Filename=/root/.rnd\r\nUnknown algorithm kyber512`\r\n\r\nThere is no such file /root/.rnd. \r\nIf I try the ECDSA certificate example I get the same error but instead of unknown algorithm it generates EC private key. \r\nI've followed quick start several times but cannot see where I've gone wrong.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/804637470","html_url":"https://github.com/open-quantum-safe/openssl/issues/294#issuecomment-804637470","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294","id":804637470,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDYzNzQ3MA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-23T05:51:52Z","updated_at":"2021-03-23T05:51:52Z","author_association":"MEMBER","body":"This now begins to look like a setup/configuration problem. Would you please try the same commands in our pre-created docker image and let us know whether the same happens there?\r\n\r\nExample execution:\r\n```\r\n$ docker run -it openquantumsafe/curl sh\r\n/ $ ls\r\nbin    etc    lib    mnt    proc   run    srv    tmp    var\r\ndev    home   media  opt    root   sbin   sys    usr\r\n/ $ openssl version\r\nOpenSSL 1.1.1j  16 Feb 2021, Open Quantum Safe xxxx-xx snapshot\r\n```\r\n\r\nIf everything works there, there's probably a shared library mixup in your local setup. You may want to set `LD_LIBRARY_PATH` explicitly as well as check libs used by `ldd`ing the executables and libraries you're using.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-23T05:51:52Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15652932631","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/948","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/948/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/948/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/948/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/948","id":838296670,"node_id":"MDExOlB1bGxSZXF1ZXN0NTk4NTAwNzk5","number":948,"title":"Patch Kyber, Dilithium, and SPHINCS to use our SHA3","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-23T02:44:58Z","updated_at":"2021-03-23T12:02:30Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/948","html_url":"https://github.com/open-quantum-safe/liboqs/pull/948","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/948.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/948.patch"},"body":"This PR patches Kyber, Dilithium, and SPHINCS to use our SHA3 .\r\n\r\nThe Kyber and Dilithium patches are bit more minimalistic than the ones that were originally part of #922. I've added shims for the \"absorb_once\" and \"squeezebytes\" functions.\r\n\r\nDilithium's fips202.c differs from Kyber's and PQClean's, so the patches here make some name changes like \"shake128_absorb\" to \"shake128_inc_absorb\". This prevents us from needing a parallel set of shims just for Dilithium.\r\n\r\nThe SPHINCS patches just remove unused files.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/804845928","html_url":"https://github.com/open-quantum-safe/liboqs/pull/948#issuecomment-804845928","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/948","id":804845928,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDg0NTkyOA==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-03-23T12:02:30Z","updated_at":"2021-03-23T12:02:30Z","author_association":"CONTRIBUTOR","body":"@baentsch \r\n> The SPHINCS patch in turn looks like a more drastic change: For that part I can't give feedback, thus.\r\n\r\nThe SPHINCS code has 12 copies of fips202x4.c and fips202x4.h that are no longer necessary after inserting shims. The patch just removes those. It's a quirk of `git apply` instead of `patch` that the 12 files appear in full in the .patches.\r\n\r\n@bhess \r\n> Is there a performance change after switching to the internal implementation\r\n\r\nYes, but it should be minor. I've tried to minimize the overhead by using `shake{128,256}_inc_ctx_reset` to re-use contexts when possible.\r\n\r\n>I've forwarded the patches to the pqcrystals team to check if they can be adopted in the upstream.\r\n\r\nThanks!","performed_via_github_app":null}},"public":true,"created_at":"2021-03-23T12:02:31Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15654946548","type":"IssueCommentEvent","actor":{"id":7943812,"login":"opencrypto","display_login":"opencrypto","gravatar_id":"","url":"https://api.github.com/users/opencrypto","avatar_url":"https://avatars.githubusercontent.com/u/7943812?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/295","id":837206565,"node_id":"MDU6SXNzdWU4MzcyMDY1NjU=","number":295,"title":"Issue when signing with new algorithms","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-03-21T23:08:27Z","updated_at":"2021-03-23T14:11:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Everybody. I am trying to use the new algorithms in our wrapper library (LibPKI) that builds on top of OpenSSL. One thing I am having difficulties is to understand how to properly use the signing functions. \r\n\r\nSpecifically, I am trying to implement a generic signing function for DER encoded data (PKI_X509_sign(der (data), md (digest algor), evp_pkey) -> signature), and although the same functions work with RSA or ECDSA, they fail when I try with falcon, dilithium, or sphincs+.\r\n\r\nHere's the first code I tried:\r\n\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\n// Initializes the Signature\r\nEVP_SignInit_ex(ctx, md, NULL);\r\nEVP_SignUpdate (ctx, der->data, der->size);\r\n\r\n// Finalizes the signature\r\nif (!EVP_SignFinal(ctx, out_mem->data, (unsigned int *) &ossl_ret, pkey))\r\n{\r\n\tPKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot finalize signature (%s)\", \r\n\t\tHSM_OPENSSL_get_errdesc(HSM_OPENSSL_get_errno(), NULL, 0));\r\n\r\n\tPKI_MEM_free(out_mem);\r\n\tout_mem = NULL;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nI also tried the DigestSign version:\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\nif (!EVP_DigestSignInit(ctx, &pCtx, md, NULL, pkey)) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Initialize EVP_DigestSignInit()\");\r\n    goto err;\r\n}\r\n\r\nif (EVP_DigestSignUpdate(ctx, \r\n                                            der->data,\r\n   \t                                    der->size) <= 0) {\r\n   PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Update EVP_DigestSignUpdate()\");\r\n   goto err;\r\n}\r\n\r\nif (EVP_DigestSignFinal(ctx,\r\n                                        out_mem->data,\r\n                                        &ossl_ret) <= 0) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Finalize EVP_DigestSignFinal()\");\r\n    goto err;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nThe error seems to be related to the digest used (\"md\"). Specifically, if the md is not NULL, the EVP_SignFinal()/EVP_DigestSignFinal() fail with the following error trace:\r\n\r\n```\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:349] Can not create signature (117): Cannot finalize signature (  H??)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 0 bytes (estimated: 690 bytes)]\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [hsm_main.c:614] [PKI_sign()] [DEBUG]: Can not generate signature (returned from sign cb)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [hsm_main.c:541] Can not create signature (117):\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [pki_x509_req.c:222] [PKI_X509_REQ_new()] [DEBUG] REQ::ERROR 0 signing the Request [error:1012F0B1:elliptic curve routines:pkey_oqs_ctrl:wrong digest]\r\n```\r\nI know I am doing something wrong here, but I am not sure what... \r\n\r\nTo probe a bit further, I forced the use of a specific hashing algorithm - since the error was related to that, somehow: md = EVP_sha512(). If I do that, I get a success return code but the signature in the data is all zeroes.\r\n\r\n```\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [pki_x509_req.c:61] [PKI_X509_REQ_new()] [DEBUG]: No Digest Associated with used algorithm\r\nMar 21 22:54:41 2021 GMT [97064] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 690 bytes (estimated: 690 bytes)]\r\n```\r\n\r\nJust to be very precise, when I use the standard apps/ tools (i.e., openssl req -new ...) I am able to generate things correctly.\r\n\r\nAnybody experiencing similar issues and/or know what I might be doing wrong?\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/804935066","html_url":"https://github.com/open-quantum-safe/openssl/issues/295#issuecomment-804935066","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","id":804935066,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDkzNTA2Ng==","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"created_at":"2021-03-23T14:11:40Z","updated_at":"2021-03-23T14:11:40Z","author_association":"NONE","body":"For the OIDs - using one OID makes the generation and handling of the \"composite\" container quite easy from the development point of view. For the unintelligibly, I do not share your view. The \"primary\" OID will be the composite one and the different components offer the rest of the structure for the key where each elements in the SEQUENCE of subjectPublicKeyInfo has its own OIDs and parameters.\r\n\r\nI am still behind in the KEMs use-case as in our environment we are still looking at older legacy protocols like DOCSIS 3.1 where we have not many choices for KEX. DOCSIS 4.0 supports it, but we have not worked on that use-case yet (which might be easier as we use CMS to carry the authentication signatures, but D4.0 devices will not hit the market before a couple of years at least).\r\n\r\nWhen we'll have something that works we'll try to contribute back - the composite method could be an alternative way not having to make the choices for the ecosystems at the crypto layer, but allow people to experiment and combine algorithms as needed in their environments (as you can tell we are not concerned with the WebPKI as there are many people looking in that direction, we are focusing on providing tools for... well, everybody else that are being a little left behind by the internet community at the moment - especially in the device space).\r\n\r\nBack to the technical discussion, when both the combined and combinedOr OIDs are implemented, the two can be used to differentiate (from a crypto-library perspective) how to validate a signature (i.e., if to require all signatures to validate or just the first) and how to perform encryption with multi-key certificates: a very cool property that solves many practical issues and enables targeted algorithm revocation.\r\n\r\nFor example, if I want to create a multi-key with Falcon and RSA, I can use \"combined\" as the algorithm and use the ctrl interface to add the different key components that can be stored in a STACK_OF(EVP_KEY). I can also combine existing keys - that is a property that is desirable when you want to add, in your existing RSA certificates (especially for CAs) new keypairs in a forward-looking fashion, without loosing the identities that were already established and trusted for many years.\r\n\r\nIn the current approach where all parameters are fixed by the OID (e.g., falconXXX and RSAXXX, not just falcon and RSA where I can use different level of security or key sizes), it quite difficult to have custom key structures (i.e., sequences of arbitrary keys) that are not already built into the library (i.e., 3 keys instead of 2 keys) and makes the source code grow considerably in size and complexity to make sure you capture all the OIDs.\r\n\r\nMaybe looking at single OIDs could yield easier-to-use APIs that provide better control over the structure of your certificate's keys... ?","performed_via_github_app":null}},"public":true,"created_at":"2021-03-23T14:11:40Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15655052107","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/295","id":837206565,"node_id":"MDU6SXNzdWU4MzcyMDY1NjU=","number":295,"title":"Issue when signing with new algorithms","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-03-21T23:08:27Z","updated_at":"2021-03-23T14:18:00Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Everybody. I am trying to use the new algorithms in our wrapper library (LibPKI) that builds on top of OpenSSL. One thing I am having difficulties is to understand how to properly use the signing functions. \r\n\r\nSpecifically, I am trying to implement a generic signing function for DER encoded data (PKI_X509_sign(der (data), md (digest algor), evp_pkey) -> signature), and although the same functions work with RSA or ECDSA, they fail when I try with falcon, dilithium, or sphincs+.\r\n\r\nHere's the first code I tried:\r\n\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\n// Initializes the Signature\r\nEVP_SignInit_ex(ctx, md, NULL);\r\nEVP_SignUpdate (ctx, der->data, der->size);\r\n\r\n// Finalizes the signature\r\nif (!EVP_SignFinal(ctx, out_mem->data, (unsigned int *) &ossl_ret, pkey))\r\n{\r\n\tPKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot finalize signature (%s)\", \r\n\t\tHSM_OPENSSL_get_errdesc(HSM_OPENSSL_get_errno(), NULL, 0));\r\n\r\n\tPKI_MEM_free(out_mem);\r\n\tout_mem = NULL;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nI also tried the DigestSign version:\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\nif (!EVP_DigestSignInit(ctx, &pCtx, md, NULL, pkey)) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Initialize EVP_DigestSignInit()\");\r\n    goto err;\r\n}\r\n\r\nif (EVP_DigestSignUpdate(ctx, \r\n                                            der->data,\r\n   \t                                    der->size) <= 0) {\r\n   PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Update EVP_DigestSignUpdate()\");\r\n   goto err;\r\n}\r\n\r\nif (EVP_DigestSignFinal(ctx,\r\n                                        out_mem->data,\r\n                                        &ossl_ret) <= 0) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Finalize EVP_DigestSignFinal()\");\r\n    goto err;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nThe error seems to be related to the digest used (\"md\"). Specifically, if the md is not NULL, the EVP_SignFinal()/EVP_DigestSignFinal() fail with the following error trace:\r\n\r\n```\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:349] Can not create signature (117): Cannot finalize signature (  H??)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 0 bytes (estimated: 690 bytes)]\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [hsm_main.c:614] [PKI_sign()] [DEBUG]: Can not generate signature (returned from sign cb)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [hsm_main.c:541] Can not create signature (117):\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [pki_x509_req.c:222] [PKI_X509_REQ_new()] [DEBUG] REQ::ERROR 0 signing the Request [error:1012F0B1:elliptic curve routines:pkey_oqs_ctrl:wrong digest]\r\n```\r\nI know I am doing something wrong here, but I am not sure what... \r\n\r\nTo probe a bit further, I forced the use of a specific hashing algorithm - since the error was related to that, somehow: md = EVP_sha512(). If I do that, I get a success return code but the signature in the data is all zeroes.\r\n\r\n```\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [pki_x509_req.c:61] [PKI_X509_REQ_new()] [DEBUG]: No Digest Associated with used algorithm\r\nMar 21 22:54:41 2021 GMT [97064] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 690 bytes (estimated: 690 bytes)]\r\n```\r\n\r\nJust to be very precise, when I use the standard apps/ tools (i.e., openssl req -new ...) I am able to generate things correctly.\r\n\r\nAnybody experiencing similar issues and/or know what I might be doing wrong?\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/804940007","html_url":"https://github.com/open-quantum-safe/openssl/issues/295#issuecomment-804940007","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","id":804940007,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDk0MDAwNw==","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2021-03-23T14:18:00Z","updated_at":"2021-03-23T14:18:00Z","author_association":"MEMBER","body":"There's been some discussion on the [IETF LAMPS mailing list](https://mailarchive.ietf.org/arch/browse/spasm/) about how to represent composite signatures in X.509, including an [Internet Draft by Mike Ounsworth](https://datatracker.ietf.org/doc/html/draft-ounsworth-pq-composite-sigs-04).  We haven't fully adopted this yet but probably will -- I'm currently talking with Mike about some of these issues.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-23T14:18:00Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15656008378","type":"IssueCommentEvent","actor":{"id":7943812,"login":"opencrypto","display_login":"opencrypto","gravatar_id":"","url":"https://api.github.com/users/opencrypto","avatar_url":"https://avatars.githubusercontent.com/u/7943812?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/295","id":837206565,"node_id":"MDU6SXNzdWU4MzcyMDY1NjU=","number":295,"title":"Issue when signing with new algorithms","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-03-21T23:08:27Z","updated_at":"2021-03-23T15:13:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Everybody. I am trying to use the new algorithms in our wrapper library (LibPKI) that builds on top of OpenSSL. One thing I am having difficulties is to understand how to properly use the signing functions. \r\n\r\nSpecifically, I am trying to implement a generic signing function for DER encoded data (PKI_X509_sign(der (data), md (digest algor), evp_pkey) -> signature), and although the same functions work with RSA or ECDSA, they fail when I try with falcon, dilithium, or sphincs+.\r\n\r\nHere's the first code I tried:\r\n\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\n// Initializes the Signature\r\nEVP_SignInit_ex(ctx, md, NULL);\r\nEVP_SignUpdate (ctx, der->data, der->size);\r\n\r\n// Finalizes the signature\r\nif (!EVP_SignFinal(ctx, out_mem->data, (unsigned int *) &ossl_ret, pkey))\r\n{\r\n\tPKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot finalize signature (%s)\", \r\n\t\tHSM_OPENSSL_get_errdesc(HSM_OPENSSL_get_errno(), NULL, 0));\r\n\r\n\tPKI_MEM_free(out_mem);\r\n\tout_mem = NULL;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nI also tried the DigestSign version:\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\nif (!EVP_DigestSignInit(ctx, &pCtx, md, NULL, pkey)) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Initialize EVP_DigestSignInit()\");\r\n    goto err;\r\n}\r\n\r\nif (EVP_DigestSignUpdate(ctx, \r\n                                            der->data,\r\n   \t                                    der->size) <= 0) {\r\n   PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Update EVP_DigestSignUpdate()\");\r\n   goto err;\r\n}\r\n\r\nif (EVP_DigestSignFinal(ctx,\r\n                                        out_mem->data,\r\n                                        &ossl_ret) <= 0) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Finalize EVP_DigestSignFinal()\");\r\n    goto err;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nThe error seems to be related to the digest used (\"md\"). Specifically, if the md is not NULL, the EVP_SignFinal()/EVP_DigestSignFinal() fail with the following error trace:\r\n\r\n```\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:349] Can not create signature (117): Cannot finalize signature (  H??)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 0 bytes (estimated: 690 bytes)]\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [hsm_main.c:614] [PKI_sign()] [DEBUG]: Can not generate signature (returned from sign cb)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [hsm_main.c:541] Can not create signature (117):\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [pki_x509_req.c:222] [PKI_X509_REQ_new()] [DEBUG] REQ::ERROR 0 signing the Request [error:1012F0B1:elliptic curve routines:pkey_oqs_ctrl:wrong digest]\r\n```\r\nI know I am doing something wrong here, but I am not sure what... \r\n\r\nTo probe a bit further, I forced the use of a specific hashing algorithm - since the error was related to that, somehow: md = EVP_sha512(). If I do that, I get a success return code but the signature in the data is all zeroes.\r\n\r\n```\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [pki_x509_req.c:61] [PKI_X509_REQ_new()] [DEBUG]: No Digest Associated with used algorithm\r\nMar 21 22:54:41 2021 GMT [97064] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 690 bytes (estimated: 690 bytes)]\r\n```\r\n\r\nJust to be very precise, when I use the standard apps/ tools (i.e., openssl req -new ...) I am able to generate things correctly.\r\n\r\nAnybody experiencing similar issues and/or know what I might be doing wrong?\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/804985346","html_url":"https://github.com/open-quantum-safe/openssl/issues/295#issuecomment-804985346","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","id":804985346,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDk4NTM0Ng==","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"created_at":"2021-03-23T15:13:05Z","updated_at":"2021-03-23T15:13:05Z","author_association":"NONE","body":"Yes - that is exactly our work (I was the original proponent and Mike is my co-author). Mike (and Datatrust) introduced the option of having individual OIDs, however that seemed impractical to me and quite restrictive when it comes to provide PKI architects with flexible tools.\r\n\r\nWe had an interim meeting with LAMPS chairs, Mike and few other folks to present the new results that really make multi-key environment viable and easy to leverage also for encryption.\r\n\r\nThe implementation tests I am doing together with looking at the code generated by others (e.g., this project) seems to confirm my initial usability fears from a developer's point of view (i.e. the many-OIDs approach), something, I am sure, you had to deal with yourself. The number of these OIDs tend to explode and does allow the ecosystem owners to make their own choices when they are different from what the specific crypto-library decided to support, which is not a good thing to do at this point when we need to experiment (and creates interoperability issues).\r\n\r\nAbout the last results I mentioned at the top, we already added the distinct AND/OR logic (i.e., combined, combinedOr) in the draft, however the new algorithm revocation that is based on key structure (i.e., revoking the use of RSA alone but allowing it when combined with falcon) are not in there yet, but I hope to have the time to add them soon. The revocation support, specifically, is very important for us to be able to test crypto-libraries validation behavior with algorithm deprecation at the CA level (if it is at the RootCA level, it is ecosystem-wide level) via simple OCSP and CRLs extensions.\r\n\r\nBut before we can deploy the next set of results, I think we need an easier way to manage the multi-key crypto so we can experiment without having to re-compile the crypto libraries when we opt for a different algorithm combination.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-23T15:13:06Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15656129561","type":"IssueCommentEvent","actor":{"id":75671533,"login":"IsTyping","display_login":"IsTyping","gravatar_id":"","url":"https://api.github.com/users/IsTyping","avatar_url":"https://avatars.githubusercontent.com/u/75671533?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/294","id":836797345,"node_id":"MDU6SXNzdWU4MzY3OTczNDU=","number":294,"title":"cannot generate self-signed root CA certificate","user":{"login":"IsTyping","id":75671533,"node_id":"MDQ6VXNlcjc1NjcxNTMz","avatar_url":"https://avatars.githubusercontent.com/u/75671533?v=4","gravatar_id":"","url":"https://api.github.com/users/IsTyping","html_url":"https://github.com/IsTyping","followers_url":"https://api.github.com/users/IsTyping/followers","following_url":"https://api.github.com/users/IsTyping/following{/other_user}","gists_url":"https://api.github.com/users/IsTyping/gists{/gist_id}","starred_url":"https://api.github.com/users/IsTyping/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IsTyping/subscriptions","organizations_url":"https://api.github.com/users/IsTyping/orgs","repos_url":"https://api.github.com/users/IsTyping/repos","events_url":"https://api.github.com/users/IsTyping/events{/privacy}","received_events_url":"https://api.github.com/users/IsTyping/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-03-20T12:32:19Z","updated_at":"2021-03-23T15:20:14Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm starting the TLS demmo on Ubuntu 18 with a shared library set up and these default algorithms announced: -DOQS_DEFAULT_GROUPS=\\\"CRYSTALS-kyber:FRODO:SABER\\\" . \r\nI try to generate the self signed certificate from my openssl-1.1.1 main directory with:\r\n\r\n`apps/openssl req -x509 -new -newkey kyber512 -keyout kyber512_CA.key -out kyber512_CA.crt -nodes -subj \"/CN=oqstest CA\" -days 365 -config apps/openssl.cnf`\r\n\r\nI get this error:\r\n\r\n`Can't load /root/.rnd into RNG\r\n140383120265664:error:2406F079:random number generator:RAND_load_file:Cannot open file:crypto/rand/randfile.c:88:Filename=/root/.rnd\r\nUnknown algorithm kyber512`\r\n\r\nThere is no such file /root/.rnd. \r\nIf I try the ECDSA certificate example I get the same error but instead of unknown algorithm it generates EC private key. \r\nI've followed quick start several times but cannot see where I've gone wrong.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/804991446","html_url":"https://github.com/open-quantum-safe/openssl/issues/294#issuecomment-804991446","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294","id":804991446,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDk5MTQ0Ng==","user":{"login":"IsTyping","id":75671533,"node_id":"MDQ6VXNlcjc1NjcxNTMz","avatar_url":"https://avatars.githubusercontent.com/u/75671533?v=4","gravatar_id":"","url":"https://api.github.com/users/IsTyping","html_url":"https://github.com/IsTyping","followers_url":"https://api.github.com/users/IsTyping/followers","following_url":"https://api.github.com/users/IsTyping/following{/other_user}","gists_url":"https://api.github.com/users/IsTyping/gists{/gist_id}","starred_url":"https://api.github.com/users/IsTyping/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IsTyping/subscriptions","organizations_url":"https://api.github.com/users/IsTyping/orgs","repos_url":"https://api.github.com/users/IsTyping/repos","events_url":"https://api.github.com/users/IsTyping/events{/privacy}","received_events_url":"https://api.github.com/users/IsTyping/received_events","type":"User","site_admin":false},"created_at":"2021-03-23T15:20:14Z","updated_at":"2021-03-23T15:20:14Z","author_association":"NONE","body":"The docker image starts just fine and runs as your example. I get connection refused when I try to query the server with `curl --curves kyber512 https://localhost:4433`, this may be my nginx config.\r\n\r\nI have updated `LD_LIBRARY_PATH` and confirmed it has been updated with echo '$LD_LIBRARY PATH'. When I try to generate the self CA cert I get the following error: \r\n'error while loading shared libraries: liboqs.so.0: cannot open shared object file: No such file or directory.' I see this has been resolved in another thread. If I `ldd` apps/openssl which, I call to create the self cert 'liboqs.so.0 => not found'. \r\nI find two locations of this file (in liboqs/build/lib and oqs/lib) and can access them both.\r\n\r\nI built liboqs with if that helps:\r\n`cmake -GNinja -DCMAKE_INSTALL_PREFIX=/openssl/oqs -DOQS_USE_OPENSSL=ON -DBUILD_SHARED_LIBS=ON -DQOS_ENABLE_KEM_SABER=ON -DQOS_ENABLE_KEM_KRYSTALS-Kyber=ON -DQOS_ENABLE_KEM_NTRU=ON -DQOS_ENABLE_KEM_FRODO=ON -DOQS_DEFAULT_GROUPS=\\\"CRYSTALS-kyber:FRODO:SABER:NTRU\\\" \r\n-DOPENSSL_ROOT_DIR=/openssl ..`\r\nand the fork with:\r\n`./Configure shared linux-x86_64  -lm`\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-03-23T15:20:14Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15656285649","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/295","id":837206565,"node_id":"MDU6SXNzdWU4MzcyMDY1NjU=","number":295,"title":"Issue when signing with new algorithms","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2021-03-21T23:08:27Z","updated_at":"2021-03-23T15:29:27Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Everybody. I am trying to use the new algorithms in our wrapper library (LibPKI) that builds on top of OpenSSL. One thing I am having difficulties is to understand how to properly use the signing functions. \r\n\r\nSpecifically, I am trying to implement a generic signing function for DER encoded data (PKI_X509_sign(der (data), md (digest algor), evp_pkey) -> signature), and although the same functions work with RSA or ECDSA, they fail when I try with falcon, dilithium, or sphincs+.\r\n\r\nHere's the first code I tried:\r\n\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\n// Initializes the Signature\r\nEVP_SignInit_ex(ctx, md, NULL);\r\nEVP_SignUpdate (ctx, der->data, der->size);\r\n\r\n// Finalizes the signature\r\nif (!EVP_SignFinal(ctx, out_mem->data, (unsigned int *) &ossl_ret, pkey))\r\n{\r\n\tPKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot finalize signature (%s)\", \r\n\t\tHSM_OPENSSL_get_errdesc(HSM_OPENSSL_get_errno(), NULL, 0));\r\n\r\n\tPKI_MEM_free(out_mem);\r\n\tout_mem = NULL;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nI also tried the DigestSign version:\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\nif (!EVP_DigestSignInit(ctx, &pCtx, md, NULL, pkey)) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Initialize EVP_DigestSignInit()\");\r\n    goto err;\r\n}\r\n\r\nif (EVP_DigestSignUpdate(ctx, \r\n                                            der->data,\r\n   \t                                    der->size) <= 0) {\r\n   PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Update EVP_DigestSignUpdate()\");\r\n   goto err;\r\n}\r\n\r\nif (EVP_DigestSignFinal(ctx,\r\n                                        out_mem->data,\r\n                                        &ossl_ret) <= 0) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Finalize EVP_DigestSignFinal()\");\r\n    goto err;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nThe error seems to be related to the digest used (\"md\"). Specifically, if the md is not NULL, the EVP_SignFinal()/EVP_DigestSignFinal() fail with the following error trace:\r\n\r\n```\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:349] Can not create signature (117): Cannot finalize signature (  H??)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 0 bytes (estimated: 690 bytes)]\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [hsm_main.c:614] [PKI_sign()] [DEBUG]: Can not generate signature (returned from sign cb)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [hsm_main.c:541] Can not create signature (117):\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [pki_x509_req.c:222] [PKI_X509_REQ_new()] [DEBUG] REQ::ERROR 0 signing the Request [error:1012F0B1:elliptic curve routines:pkey_oqs_ctrl:wrong digest]\r\n```\r\nI know I am doing something wrong here, but I am not sure what... \r\n\r\nTo probe a bit further, I forced the use of a specific hashing algorithm - since the error was related to that, somehow: md = EVP_sha512(). If I do that, I get a success return code but the signature in the data is all zeroes.\r\n\r\n```\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [pki_x509_req.c:61] [PKI_X509_REQ_new()] [DEBUG]: No Digest Associated with used algorithm\r\nMar 21 22:54:41 2021 GMT [97064] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 690 bytes (estimated: 690 bytes)]\r\n```\r\n\r\nJust to be very precise, when I use the standard apps/ tools (i.e., openssl req -new ...) I am able to generate things correctly.\r\n\r\nAnybody experiencing similar issues and/or know what I might be doing wrong?\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/804998934","html_url":"https://github.com/open-quantum-safe/openssl/issues/295#issuecomment-804998934","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","id":804998934,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDk5ODkzNA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-23T15:29:26Z","updated_at":"2021-03-23T15:29:26Z","author_association":"MEMBER","body":"> The \"primary\" OID will be the composite one and the different components offer the rest of the structure for the key where each elements in the SEQUENCE of subjectPublicKeyInfo has its own OIDs and parameters.\r\n\r\nOK, then I get it: One OID to announce a \"composite\" structure and then all piece parts following with their own ids (OIDs?). Without the latter I wouldn't have understood how to parse composite sigs. Thanks @dstebila for the pointer to https://datatracker.ietf.org/doc/html/draft-ounsworth-pq-composite-sigs-04 ","performed_via_github_app":null}},"public":true,"created_at":"2021-03-23T15:29:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15656446834","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/294","id":836797345,"node_id":"MDU6SXNzdWU4MzY3OTczNDU=","number":294,"title":"cannot generate self-signed root CA certificate","user":{"login":"IsTyping","id":75671533,"node_id":"MDQ6VXNlcjc1NjcxNTMz","avatar_url":"https://avatars.githubusercontent.com/u/75671533?v=4","gravatar_id":"","url":"https://api.github.com/users/IsTyping","html_url":"https://github.com/IsTyping","followers_url":"https://api.github.com/users/IsTyping/followers","following_url":"https://api.github.com/users/IsTyping/following{/other_user}","gists_url":"https://api.github.com/users/IsTyping/gists{/gist_id}","starred_url":"https://api.github.com/users/IsTyping/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IsTyping/subscriptions","organizations_url":"https://api.github.com/users/IsTyping/orgs","repos_url":"https://api.github.com/users/IsTyping/repos","events_url":"https://api.github.com/users/IsTyping/events{/privacy}","received_events_url":"https://api.github.com/users/IsTyping/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-03-20T12:32:19Z","updated_at":"2021-03-23T15:39:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm starting the TLS demmo on Ubuntu 18 with a shared library set up and these default algorithms announced: -DOQS_DEFAULT_GROUPS=\\\"CRYSTALS-kyber:FRODO:SABER\\\" . \r\nI try to generate the self signed certificate from my openssl-1.1.1 main directory with:\r\n\r\n`apps/openssl req -x509 -new -newkey kyber512 -keyout kyber512_CA.key -out kyber512_CA.crt -nodes -subj \"/CN=oqstest CA\" -days 365 -config apps/openssl.cnf`\r\n\r\nI get this error:\r\n\r\n`Can't load /root/.rnd into RNG\r\n140383120265664:error:2406F079:random number generator:RAND_load_file:Cannot open file:crypto/rand/randfile.c:88:Filename=/root/.rnd\r\nUnknown algorithm kyber512`\r\n\r\nThere is no such file /root/.rnd. \r\nIf I try the ECDSA certificate example I get the same error but instead of unknown algorithm it generates EC private key. \r\nI've followed quick start several times but cannot see where I've gone wrong.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/805006414","html_url":"https://github.com/open-quantum-safe/openssl/issues/294#issuecomment-805006414","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294","id":805006414,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNTAwNjQxNA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-23T15:39:08Z","updated_at":"2021-03-23T15:39:08Z","author_association":"MEMBER","body":"> and the fork with:\r\n> ./Configure shared linux-x86_64 -lm\r\n\r\nThis then indeed seems to be a shared lib location problem pretty much independent of OQS: Either all libs need to be in a system location (happens with `make install`) or be locally configured or specified. If you don't want to run `make install` to move the shared openssl&liboqs libs in place (dangerous as it may mess with your system OpenSSL) you need to either pass `LDFLAGS` [or RPATHS](https://wiki.openssl.org/index.php/Compilation_and_Installation#Using_RPATHs) to the `Configure` command; final option is to use LD_LIBRARY_PATH (set to the path where `liboqs.so` is located on your machine) when starting `openssl`.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-23T15:39:09Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15657982855","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/295","id":837206565,"node_id":"MDU6SXNzdWU4MzcyMDY1NjU=","number":295,"title":"Issue when signing with new algorithms","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2021-03-21T23:08:27Z","updated_at":"2021-03-23T17:06:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Everybody. I am trying to use the new algorithms in our wrapper library (LibPKI) that builds on top of OpenSSL. One thing I am having difficulties is to understand how to properly use the signing functions. \r\n\r\nSpecifically, I am trying to implement a generic signing function for DER encoded data (PKI_X509_sign(der (data), md (digest algor), evp_pkey) -> signature), and although the same functions work with RSA or ECDSA, they fail when I try with falcon, dilithium, or sphincs+.\r\n\r\nHere's the first code I tried:\r\n\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\n// Initializes the Signature\r\nEVP_SignInit_ex(ctx, md, NULL);\r\nEVP_SignUpdate (ctx, der->data, der->size);\r\n\r\n// Finalizes the signature\r\nif (!EVP_SignFinal(ctx, out_mem->data, (unsigned int *) &ossl_ret, pkey))\r\n{\r\n\tPKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot finalize signature (%s)\", \r\n\t\tHSM_OPENSSL_get_errdesc(HSM_OPENSSL_get_errno(), NULL, 0));\r\n\r\n\tPKI_MEM_free(out_mem);\r\n\tout_mem = NULL;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nI also tried the DigestSign version:\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\nif (!EVP_DigestSignInit(ctx, &pCtx, md, NULL, pkey)) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Initialize EVP_DigestSignInit()\");\r\n    goto err;\r\n}\r\n\r\nif (EVP_DigestSignUpdate(ctx, \r\n                                            der->data,\r\n   \t                                    der->size) <= 0) {\r\n   PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Update EVP_DigestSignUpdate()\");\r\n   goto err;\r\n}\r\n\r\nif (EVP_DigestSignFinal(ctx,\r\n                                        out_mem->data,\r\n                                        &ossl_ret) <= 0) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Finalize EVP_DigestSignFinal()\");\r\n    goto err;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nThe error seems to be related to the digest used (\"md\"). Specifically, if the md is not NULL, the EVP_SignFinal()/EVP_DigestSignFinal() fail with the following error trace:\r\n\r\n```\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:349] Can not create signature (117): Cannot finalize signature (  H??)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 0 bytes (estimated: 690 bytes)]\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [hsm_main.c:614] [PKI_sign()] [DEBUG]: Can not generate signature (returned from sign cb)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [hsm_main.c:541] Can not create signature (117):\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [pki_x509_req.c:222] [PKI_X509_REQ_new()] [DEBUG] REQ::ERROR 0 signing the Request [error:1012F0B1:elliptic curve routines:pkey_oqs_ctrl:wrong digest]\r\n```\r\nI know I am doing something wrong here, but I am not sure what... \r\n\r\nTo probe a bit further, I forced the use of a specific hashing algorithm - since the error was related to that, somehow: md = EVP_sha512(). If I do that, I get a success return code but the signature in the data is all zeroes.\r\n\r\n```\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [pki_x509_req.c:61] [PKI_X509_REQ_new()] [DEBUG]: No Digest Associated with used algorithm\r\nMar 21 22:54:41 2021 GMT [97064] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 690 bytes (estimated: 690 bytes)]\r\n```\r\n\r\nJust to be very precise, when I use the standard apps/ tools (i.e., openssl req -new ...) I am able to generate things correctly.\r\n\r\nAnybody experiencing similar issues and/or know what I might be doing wrong?\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/805073498","html_url":"https://github.com/open-quantum-safe/openssl/issues/295#issuecomment-805073498","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","id":805073498,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNTA3MzQ5OA==","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2021-03-23T17:06:18Z","updated_at":"2021-03-23T17:06:18Z","author_association":"MEMBER","body":"> Yes - that is exactly our work (I was the original proponent and Mike is my co-author). Mike (and Datatrust) introduced the option of having individual OIDs, however that seemed impractical to me and quite restrictive when it comes to provide PKI architects with flexible tools.\r\n\r\nSorry for not realizing that, Massimiliano.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-23T17:06:18Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
