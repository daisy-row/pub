{"id":"15671614802","type":"IssueCommentEvent","actor":{"id":81308792,"login":"crispySafe","display_login":"crispySafe","gravatar_id":"","url":"https://api.github.com/users/crispySafe","avatar_url":"https://avatars.githubusercontent.com/u/81308792?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/295","id":837206565,"node_id":"MDU6SXNzdWU4MzcyMDY1NjU=","number":295,"title":"Issue when signing with new algorithms","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2021-03-21T23:08:27Z","updated_at":"2021-03-24T14:03:25Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Everybody. I am trying to use the new algorithms in our wrapper library (LibPKI) that builds on top of OpenSSL. One thing I am having difficulties is to understand how to properly use the signing functions. \r\n\r\nSpecifically, I am trying to implement a generic signing function for DER encoded data (PKI_X509_sign(der (data), md (digest algor), evp_pkey) -> signature), and although the same functions work with RSA or ECDSA, they fail when I try with falcon, dilithium, or sphincs+.\r\n\r\nHere's the first code I tried:\r\n\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\n// Initializes the Signature\r\nEVP_SignInit_ex(ctx, md, NULL);\r\nEVP_SignUpdate (ctx, der->data, der->size);\r\n\r\n// Finalizes the signature\r\nif (!EVP_SignFinal(ctx, out_mem->data, (unsigned int *) &ossl_ret, pkey))\r\n{\r\n\tPKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot finalize signature (%s)\", \r\n\t\tHSM_OPENSSL_get_errdesc(HSM_OPENSSL_get_errno(), NULL, 0));\r\n\r\n\tPKI_MEM_free(out_mem);\r\n\tout_mem = NULL;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nI also tried the DigestSign version:\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\nif (!EVP_DigestSignInit(ctx, &pCtx, md, NULL, pkey)) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Initialize EVP_DigestSignInit()\");\r\n    goto err;\r\n}\r\n\r\nif (EVP_DigestSignUpdate(ctx, \r\n                                            der->data,\r\n   \t                                    der->size) <= 0) {\r\n   PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Update EVP_DigestSignUpdate()\");\r\n   goto err;\r\n}\r\n\r\nif (EVP_DigestSignFinal(ctx,\r\n                                        out_mem->data,\r\n                                        &ossl_ret) <= 0) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Finalize EVP_DigestSignFinal()\");\r\n    goto err;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nThe error seems to be related to the digest used (\"md\"). Specifically, if the md is not NULL, the EVP_SignFinal()/EVP_DigestSignFinal() fail with the following error trace:\r\n\r\n```\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:349] Can not create signature (117): Cannot finalize signature (  H??)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 0 bytes (estimated: 690 bytes)]\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [hsm_main.c:614] [PKI_sign()] [DEBUG]: Can not generate signature (returned from sign cb)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [hsm_main.c:541] Can not create signature (117):\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [pki_x509_req.c:222] [PKI_X509_REQ_new()] [DEBUG] REQ::ERROR 0 signing the Request [error:1012F0B1:elliptic curve routines:pkey_oqs_ctrl:wrong digest]\r\n```\r\nI know I am doing something wrong here, but I am not sure what... \r\n\r\nTo probe a bit further, I forced the use of a specific hashing algorithm - since the error was related to that, somehow: md = EVP_sha512(). If I do that, I get a success return code but the signature in the data is all zeroes.\r\n\r\n```\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [pki_x509_req.c:61] [PKI_X509_REQ_new()] [DEBUG]: No Digest Associated with used algorithm\r\nMar 21 22:54:41 2021 GMT [97064] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 690 bytes (estimated: 690 bytes)]\r\n```\r\n\r\nJust to be very precise, when I use the standard apps/ tools (i.e., openssl req -new ...) I am able to generate things correctly.\r\n\r\nAnybody experiencing similar issues and/or know what I might be doing wrong?\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/805848450","html_url":"https://github.com/open-quantum-safe/openssl/issues/295#issuecomment-805848450","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","id":805848450,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNTg0ODQ1MA==","user":{"login":"crispySafe","id":81308792,"node_id":"MDQ6VXNlcjgxMzA4Nzky","avatar_url":"https://avatars.githubusercontent.com/u/81308792?v=4","gravatar_id":"","url":"https://api.github.com/users/crispySafe","html_url":"https://github.com/crispySafe","followers_url":"https://api.github.com/users/crispySafe/followers","following_url":"https://api.github.com/users/crispySafe/following{/other_user}","gists_url":"https://api.github.com/users/crispySafe/gists{/gist_id}","starred_url":"https://api.github.com/users/crispySafe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/crispySafe/subscriptions","organizations_url":"https://api.github.com/users/crispySafe/orgs","repos_url":"https://api.github.com/users/crispySafe/repos","events_url":"https://api.github.com/users/crispySafe/events{/privacy}","received_events_url":"https://api.github.com/users/crispySafe/received_events","type":"User","site_admin":false},"created_at":"2021-03-24T14:03:25Z","updated_at":"2021-03-24T14:03:25Z","author_association":"NONE","body":"Hello, I am struggling with signing too.\r\nI hope it is OK that I ask in the issue of opencrypto.\r\n\r\nHow I have to use openssl to sign like in default openssl?\r\n\r\nI used:\r\n   apps/openssl dgst -sign sign_rsa.pem -out sign_rsa some.txt\r\nThat worked properly, but:\r\n   apps/openssl dgst -sign sign_dil2.pem -out sign_dil2 some.txt\r\nresulted in:\r\n   Error Signing Data\r\n\r\n(sign_dil2.pem was created without an error by: apps/openssl genpkey -algorithm dilithium2 -out sig_dil2.pem)\r\n\r\nI hope you can clarify my issue.\r\nThanks.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-24T14:03:25Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15674293801","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/296","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/296/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/296/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/296/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/296","id":839763637,"node_id":"MDU6SXNzdWU4Mzk3NjM2Mzc=","number":296,"title":"KEMs, Hybrid KEMs and code points","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-24T14:09:54Z","updated_at":"2021-03-24T16:46:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"While working at adding hybrid KEMs to the OSSL3 provider, I ran into a few questions about the code points used for KEMs and hybrid KEMs in TLS. I open an issue here because it also affects interop with OSSL1.1.1.\r\n\r\n- Interop with previous-round algorithms\r\n\r\nLooking at the google sheets, some of the algorithm names still refer to round 2 variants:\r\nhttps://docs.google.com/spreadsheets/d/12YarzaNv3XQNLnvDsWLlRKwtZFhRrDdWf36YlzwrPeg/edit#gid=0\r\nIn the meanwhile, the algorithms were updated to r3 while keeping the same code points. \r\nI imagine that this can cause confusion, similar to https://github.com/open-quantum-safe/liboqs/issues/909, when trying to interop between different libraries or between different versions of OQS.\r\nDo we want to consider to update the code points after future algorithm updates?\r\n\r\n- Hybrid KEM code points with ECX (X25519, X448)\r\n\r\nI'm adding support for combining all OQS KEM with ECX and ECP curves in https://github.com/open-quantum-safe/oqs-provider/pull/16. The `generate.yml` file currently only defines code points for ECP-hybrids. Looking at https://tools.ietf.org/html/draft-ietf-tls-hybrid-design-01#section-3.1, the hybrid code points should fit in `0x2F00 .. 0x2FFF`. An option is to add the ECX-hybrids with a `0x40` offset to `0x2F..` (except for those three hybrid algorithms already defined with X25519). For example, a field in generate.yml would look like this:\r\n\r\n```\r\n    family: 'FrodoKEM'\r\n    name_group: 'frodo640aes'\r\n    nid: '0x0200'\r\n    nid_hybrid: '0x2F00'\r\n    nid_ecx_hybrid: '0x2F40'\r\n    oqs_alg: 'OQS_KEM_alg_frodokem_640_aes'\r\n    bit_security: 128\r\n```\r\nThe OSSL3 provider currently imports generate.yml from the OSSL1.1.1 repository. If you agree, I'd open a PR here with new code points for ECX-hybrids (and the google sheets can be updated). OSSL1.1.1 doesn't necessarily need to support the additional ECX-hybrid code points.\r\n\r\n- Strength matching X448\r\n\r\nX448 with 224 bit security sits between NIST L3/L4 and L5. The initial attempt in https://github.com/open-quantum-safe/oqs-provider/pull/16 is to match PQC L3-L5 with X448, being aware that this is not an \"exact\" match. Are there any thoughts about this and if/how we should support hybrids with X448?","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/805985203","html_url":"https://github.com/open-quantum-safe/openssl/issues/296#issuecomment-805985203","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/296","id":805985203,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNTk4NTIwMw==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-24T16:46:08Z","updated_at":"2021-03-24T16:46:08Z","author_association":"MEMBER","body":"> I'd open a PR here with new code points for ECX-hybrids (and the google sheets can be updated)\r\n\r\nIf I'm not entirely mistaken, the Google sheets are not maintained any more but `generate.yml` _is_ the documentation (right, @xvzcf ?)\r\n\r\n> The OSSL3 provider currently imports generate.yml from the OSSL1.1.1 repository.\r\n\r\nThat was the easiest way to assure interop at the time. Before now moving logic that's only needed in oqsprovider into oqs-openssl, I'd ask the question whether we want to have those hybrids also in the OSSL111 fork? @dstebila @christianpaquin ? If not, wouldn't a patch-mechanism for `generate.yml` within oqsprovider only be more preferable (over moving this into oqs-openssl)?","performed_via_github_app":null}},"public":true,"created_at":"2021-03-24T16:46:08Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15674433582","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/295","id":837206565,"node_id":"MDU6SXNzdWU4MzcyMDY1NjU=","number":295,"title":"Issue when signing with new algorithms","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2021-03-21T23:08:27Z","updated_at":"2021-03-24T16:55:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Everybody. I am trying to use the new algorithms in our wrapper library (LibPKI) that builds on top of OpenSSL. One thing I am having difficulties is to understand how to properly use the signing functions. \r\n\r\nSpecifically, I am trying to implement a generic signing function for DER encoded data (PKI_X509_sign(der (data), md (digest algor), evp_pkey) -> signature), and although the same functions work with RSA or ECDSA, they fail when I try with falcon, dilithium, or sphincs+.\r\n\r\nHere's the first code I tried:\r\n\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\n// Initializes the Signature\r\nEVP_SignInit_ex(ctx, md, NULL);\r\nEVP_SignUpdate (ctx, der->data, der->size);\r\n\r\n// Finalizes the signature\r\nif (!EVP_SignFinal(ctx, out_mem->data, (unsigned int *) &ossl_ret, pkey))\r\n{\r\n\tPKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot finalize signature (%s)\", \r\n\t\tHSM_OPENSSL_get_errdesc(HSM_OPENSSL_get_errno(), NULL, 0));\r\n\r\n\tPKI_MEM_free(out_mem);\r\n\tout_mem = NULL;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nI also tried the DigestSign version:\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\nif (!EVP_DigestSignInit(ctx, &pCtx, md, NULL, pkey)) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Initialize EVP_DigestSignInit()\");\r\n    goto err;\r\n}\r\n\r\nif (EVP_DigestSignUpdate(ctx, \r\n                                            der->data,\r\n   \t                                    der->size) <= 0) {\r\n   PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Update EVP_DigestSignUpdate()\");\r\n   goto err;\r\n}\r\n\r\nif (EVP_DigestSignFinal(ctx,\r\n                                        out_mem->data,\r\n                                        &ossl_ret) <= 0) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Finalize EVP_DigestSignFinal()\");\r\n    goto err;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nThe error seems to be related to the digest used (\"md\"). Specifically, if the md is not NULL, the EVP_SignFinal()/EVP_DigestSignFinal() fail with the following error trace:\r\n\r\n```\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:349] Can not create signature (117): Cannot finalize signature (  H??)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 0 bytes (estimated: 690 bytes)]\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [hsm_main.c:614] [PKI_sign()] [DEBUG]: Can not generate signature (returned from sign cb)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [hsm_main.c:541] Can not create signature (117):\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [pki_x509_req.c:222] [PKI_X509_REQ_new()] [DEBUG] REQ::ERROR 0 signing the Request [error:1012F0B1:elliptic curve routines:pkey_oqs_ctrl:wrong digest]\r\n```\r\nI know I am doing something wrong here, but I am not sure what... \r\n\r\nTo probe a bit further, I forced the use of a specific hashing algorithm - since the error was related to that, somehow: md = EVP_sha512(). If I do that, I get a success return code but the signature in the data is all zeroes.\r\n\r\n```\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [pki_x509_req.c:61] [PKI_X509_REQ_new()] [DEBUG]: No Digest Associated with used algorithm\r\nMar 21 22:54:41 2021 GMT [97064] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 690 bytes (estimated: 690 bytes)]\r\n```\r\n\r\nJust to be very precise, when I use the standard apps/ tools (i.e., openssl req -new ...) I am able to generate things correctly.\r\n\r\nAnybody experiencing similar issues and/or know what I might be doing wrong?\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/805993176","html_url":"https://github.com/open-quantum-safe/openssl/issues/295#issuecomment-805993176","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","id":805993176,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNTk5MzE3Ng==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-24T16:55:29Z","updated_at":"2021-03-24T16:55:29Z","author_association":"MEMBER","body":"Thanks for reporting this, @crispySafe . As already stated above, our focus was on getting `cms` to work, not all other openssl commands related to signing (incl. `dgst`).\r\n\r\nBefore debugging/looking more deeply into what it would require to also make this command work, could you please comment on where/how you need this (and why `cms` doesn't work for you)? Thanks in advance for this background.\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-03-24T16:55:29Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15675731441","type":"IssueCommentEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/296","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/296/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/296/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/296/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/296","id":839763637,"node_id":"MDU6SXNzdWU4Mzk3NjM2Mzc=","number":296,"title":"KEMs, Hybrid KEMs and code points","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-03-24T14:09:54Z","updated_at":"2021-03-24T18:29:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"While working at adding hybrid KEMs to the OSSL3 provider, I ran into a few questions about the code points used for KEMs and hybrid KEMs in TLS. I open an issue here because it also affects interop with OSSL1.1.1.\r\n\r\n- Interop with previous-round algorithms\r\n\r\nLooking at the google sheets, some of the algorithm names still refer to round 2 variants:\r\nhttps://docs.google.com/spreadsheets/d/12YarzaNv3XQNLnvDsWLlRKwtZFhRrDdWf36YlzwrPeg/edit#gid=0\r\nIn the meanwhile, the algorithms were updated to r3 while keeping the same code points. \r\nI imagine that this can cause confusion, similar to https://github.com/open-quantum-safe/liboqs/issues/909, when trying to interop between different libraries or between different versions of OQS.\r\nDo we want to consider to update the code points after future algorithm updates?\r\n\r\n- Hybrid KEM code points with ECX (X25519, X448)\r\n\r\nI'm adding support for combining all OQS KEM with ECX and ECP curves in https://github.com/open-quantum-safe/oqs-provider/pull/16. The `generate.yml` file currently only defines code points for ECP-hybrids. Looking at https://tools.ietf.org/html/draft-ietf-tls-hybrid-design-01#section-3.1, the hybrid code points should fit in `0x2F00 .. 0x2FFF`. An option is to add the ECX-hybrids with a `0x40` offset to `0x2F..` (except for those three hybrid algorithms already defined with X25519). For example, a field in generate.yml would look like this:\r\n\r\n```\r\n    family: 'FrodoKEM'\r\n    name_group: 'frodo640aes'\r\n    nid: '0x0200'\r\n    nid_hybrid: '0x2F00'\r\n    nid_ecx_hybrid: '0x2F40'\r\n    oqs_alg: 'OQS_KEM_alg_frodokem_640_aes'\r\n    bit_security: 128\r\n```\r\nThe OSSL3 provider currently imports generate.yml from the OSSL1.1.1 repository. If you agree, I'd open a PR here with new code points for ECX-hybrids (and the google sheets can be updated). OSSL1.1.1 doesn't necessarily need to support the additional ECX-hybrid code points.\r\n\r\n- Strength matching X448\r\n\r\nX448 with 224 bit security sits between NIST L3/L4 and L5. The initial attempt in https://github.com/open-quantum-safe/oqs-provider/pull/16 is to match PQC L3-L5 with X448, being aware that this is not an \"exact\" match. Are there any thoughts about this and if/how we should support hybrids with X448?","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/806059433","html_url":"https://github.com/open-quantum-safe/openssl/issues/296#issuecomment-806059433","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/296","id":806059433,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNjA1OTQzMw==","user":{"login":"xvzcf","id":21228961,"node_id":"MDQ6VXNlcjIxMjI4OTYx","avatar_url":"https://avatars.githubusercontent.com/u/21228961?v=4","gravatar_id":"","url":"https://api.github.com/users/xvzcf","html_url":"https://github.com/xvzcf","followers_url":"https://api.github.com/users/xvzcf/followers","following_url":"https://api.github.com/users/xvzcf/following{/other_user}","gists_url":"https://api.github.com/users/xvzcf/gists{/gist_id}","starred_url":"https://api.github.com/users/xvzcf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xvzcf/subscriptions","organizations_url":"https://api.github.com/users/xvzcf/orgs","repos_url":"https://api.github.com/users/xvzcf/repos","events_url":"https://api.github.com/users/xvzcf/events{/privacy}","received_events_url":"https://api.github.com/users/xvzcf/received_events","type":"User","site_admin":false},"created_at":"2021-03-24T18:29:06Z","updated_at":"2021-03-24T18:29:06Z","author_association":"MEMBER","body":"> > I'd open a PR here with new code points for ECX-hybrids (and the google sheets can be updated)\r\n> \r\n> If I'm not entirely mistaken, the Google sheets are not maintained any more but `generate.yml` _is_ the documentation (right, @xvzcf ?)\r\n> \r\n\r\nIndeed, @bhess the new tables can be found [here (for KEMS)](https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/oqs-template/oqs-kem-info.md) and [here (for signatures)](https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/oqs-template/oqs-sig-info.md). Once we have [YAML summaries of all the algorithms in liboqs](https://github.com/open-quantum-safe/liboqs/issues/892) I can add more information to these tables.\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-03-24T18:29:07Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
