{"id":"15722152300","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/294","id":836797345,"node_id":"MDU6SXNzdWU4MzY3OTczNDU=","number":294,"title":"cannot generate self-signed root CA certificate","user":{"login":"IsTyping","id":75671533,"node_id":"MDQ6VXNlcjc1NjcxNTMz","avatar_url":"https://avatars.githubusercontent.com/u/75671533?v=4","gravatar_id":"","url":"https://api.github.com/users/IsTyping","html_url":"https://github.com/IsTyping","followers_url":"https://api.github.com/users/IsTyping/followers","following_url":"https://api.github.com/users/IsTyping/following{/other_user}","gists_url":"https://api.github.com/users/IsTyping/gists{/gist_id}","starred_url":"https://api.github.com/users/IsTyping/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IsTyping/subscriptions","organizations_url":"https://api.github.com/users/IsTyping/orgs","repos_url":"https://api.github.com/users/IsTyping/repos","events_url":"https://api.github.com/users/IsTyping/events{/privacy}","received_events_url":"https://api.github.com/users/IsTyping/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2021-03-20T12:32:19Z","updated_at":"2021-03-29T05:06:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm starting the TLS demmo on Ubuntu 18 with a shared library set up and these default algorithms announced: -DOQS_DEFAULT_GROUPS=\\\"CRYSTALS-kyber:FRODO:SABER\\\" . \r\nI try to generate the self signed certificate from my openssl-1.1.1 main directory with:\r\n\r\n`apps/openssl req -x509 -new -newkey kyber512 -keyout kyber512_CA.key -out kyber512_CA.crt -nodes -subj \"/CN=oqstest CA\" -days 365 -config apps/openssl.cnf`\r\n\r\nI get this error:\r\n\r\n`Can't load /root/.rnd into RNG\r\n140383120265664:error:2406F079:random number generator:RAND_load_file:Cannot open file:crypto/rand/randfile.c:88:Filename=/root/.rnd\r\nUnknown algorithm kyber512`\r\n\r\nThere is no such file /root/.rnd. \r\nIf I try the ECDSA certificate example I get the same error but instead of unknown algorithm it generates EC private key. \r\nI've followed quick start several times but cannot see where I've gone wrong.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/809068281","html_url":"https://github.com/open-quantum-safe/openssl/issues/294#issuecomment-809068281","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294","id":809068281,"node_id":"MDEyOklzc3VlQ29tbWVudDgwOTA2ODI4MQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-29T05:06:29Z","updated_at":"2021-03-29T05:06:29Z","author_association":"MEMBER","body":"Do those make errors provide information as to what's wrong? They are not contained in the logfile. Also, building code in system folders (`/usr`) is pretty dangerous as it requires root privileges and might mess with the system openssl installation. I'd recommend you only run `apt` commands as root and all the rest as a user (say in a folder `~/git/oqs` containing the folders `liboqs` and `openssl` after cloning those projects). Final comment: Using `make -j`  [may be risky](https://unix.stackexchange.com/questions/316644/is-make-j-with-no-argument-dangerous) as it may trigger memory allocation problems -- with all kinds of follow-on issues.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-29T05:06:30Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15722221662","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/951","id":842119233,"node_id":"MDExOlB1bGxSZXF1ZXN0NjAxNzUzODMx","number":951,"title":"Replace OQS_PORTABLE_BUILD and OQS_USE_CPU_EXTENSIONS","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-26T16:22:03Z","updated_at":"2021-03-29T05:16:23Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/951","html_url":"https://github.com/open-quantum-safe/liboqs/pull/951","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/951.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/951.patch"},"body":"Following the discussion in https://github.com/open-quantum-safe/liboqs/discussions/943, this replaces OQS_PORTABLE_BUILD and OQS_USE_CPU_EXTENSIONS with more flexible (and less confusing) alternatives.\r\n\r\n* OQS_DIST_BUILD (default: OFF): \"Build distributable library with optimized code for several CPU microarchitectures. Enables run-time CPU feature detection.\"\r\n* OQS_OPT_TARGET (default: \"auto\"): \"The target microarchitecture for optimization.\"\r\n\r\nOQS_DIST_BUILD is a drop in replacement for the previous OQS_PORTABLE_BUILD. A library built with OQS_DIST_BUILD will include implementations for several microarchitectures, and it will dispatch calls to the correct implementation based the CPU features that are available at run time. The OQS_DIST_BUILD option is refined to one of OQS_DIST_X86_64_BUILD, OQS_DIST_ARM64v8_BUILD, or OQS_DIST_ARM32v7_BUILD at compile time depending on CMAKE_SYSTEM_PROCESSOR. This is useful for cross compiling and it also simplifies some logic throughout the build.\r\n\r\nOQS_OPT_TARGET can take a value of \"auto\", \"generic\", or the name of a CPU like \"haswell\". When OQS_DIST_BUILD=ON we force OQS_OPT_TARGET=generic.\r\n\r\nOn x86_64, \"generic\" means we'll compile with \"-march=x86-64\". On ARM64v8 \"generic\" means \"-mcpu=cortex-a53\". On ARM32v7 \"generic\" means \"-mcpu=cortex-a5\". This is like OQS_USE_CPU_EXTENSIONS=OFF.\r\n\r\nOn any architecture, \"auto\" will try to determine the current CPU using \"march=native\" (if it's supported). This is like the previous OQS_USE_CPU_EXTENSIONS=ON\r\n\r\nDownstream builds that set OQS_PORTABLE_BUILD or OQS_USE_CPU_FEATURES will fail. So we should prepare for that if we decide to make these changes.\r\n\r\n*edit*: Removing OQS_USE_CPU_EXTENSIONS had the side effect that our ARM jobs tried to execute detect_gcc_clang_intrinsics.c. I took the opportunity to add both compile-time detection of ARM crypto features and neon. It is now possible to cross compile for ARM and optimize for the target CPU (relevant to #775). I also took the opportunity to add run-time detection of ARM features, and I replaced OQS_get_available_CPU_extensions (01efe50) for efficiency reasons (previous implementation was copying ~40 bytes on return).","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/809072040","html_url":"https://github.com/open-quantum-safe/liboqs/pull/951#issuecomment-809072040","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951","id":809072040,"node_id":"MDEyOklzc3VlQ29tbWVudDgwOTA3MjA0MA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-29T05:16:23Z","updated_at":"2021-03-29T05:16:23Z","author_association":"MEMBER","body":"Thanks for working on this! Conceptually, it looks good. I'd like to be sure I understood correctly how this now delivers the three main configs for different uses:\r\n1) \"Release\" (fastest, with all possible CPU feature support, but never-crashing/RT feature detection): In docker images\r\n2) \"Reference\" (without any CPU feature support): Benchmarking ref code\r\n3) \"Performance\" (possibly crashing if not all required features available at run-time): (Aiming to get) Best benchmarking numbers\r\n\r\nAm I understanding the above correct such as to set up those 3 configurations up (for x86_64) with the following switches:\r\n1) OQS_OPT_TARGET=\"skylake\" & OQS_DIST_BUILD=ON\r\n2) OQS_OPT_TARGET=\"generic\"; OQS_DIST_BUILD=don't care (or _must_ it be OFF?)\r\n3) OQS_OPT_TARGET=\"skylake\" (or \"auto\" if building and running on the same host) & OQS_DIST_BUILD=OFF\r\n\r\nFor ARM64, I guess building with \"auto\" and only setting OQS_DIST_BUILD=ON when creating docker images is best.\r\n\r\nDid I get this all right? In any case, what about the suggestion to create something like CMAKE_BUILD_TYPE(s) designating sensible configurations -- incl. one that doesn't trip up the unwary (\"Release\"? Or rather something like \"Development\": OQS_OPT_TARGET=\"auto\" & OQS_DIST_BUILD=OFF)?","performed_via_github_app":null}},"public":true,"created_at":"2021-03-29T05:16:23Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15722345409","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/295","id":837206565,"node_id":"MDU6SXNzdWU4MzcyMDY1NjU=","number":295,"title":"Issue when signing with new algorithms","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2021-03-21T23:08:27Z","updated_at":"2021-03-29T05:33:00Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Everybody. I am trying to use the new algorithms in our wrapper library (LibPKI) that builds on top of OpenSSL. One thing I am having difficulties is to understand how to properly use the signing functions. \r\n\r\nSpecifically, I am trying to implement a generic signing function for DER encoded data (PKI_X509_sign(der (data), md (digest algor), evp_pkey) -> signature), and although the same functions work with RSA or ECDSA, they fail when I try with falcon, dilithium, or sphincs+.\r\n\r\nHere's the first code I tried:\r\n\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\n// Initializes the Signature\r\nEVP_SignInit_ex(ctx, md, NULL);\r\nEVP_SignUpdate (ctx, der->data, der->size);\r\n\r\n// Finalizes the signature\r\nif (!EVP_SignFinal(ctx, out_mem->data, (unsigned int *) &ossl_ret, pkey))\r\n{\r\n\tPKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot finalize signature (%s)\", \r\n\t\tHSM_OPENSSL_get_errdesc(HSM_OPENSSL_get_errno(), NULL, 0));\r\n\r\n\tPKI_MEM_free(out_mem);\r\n\tout_mem = NULL;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nI also tried the DigestSign version:\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\nif (!EVP_DigestSignInit(ctx, &pCtx, md, NULL, pkey)) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Initialize EVP_DigestSignInit()\");\r\n    goto err;\r\n}\r\n\r\nif (EVP_DigestSignUpdate(ctx, \r\n                                            der->data,\r\n   \t                                    der->size) <= 0) {\r\n   PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Update EVP_DigestSignUpdate()\");\r\n   goto err;\r\n}\r\n\r\nif (EVP_DigestSignFinal(ctx,\r\n                                        out_mem->data,\r\n                                        &ossl_ret) <= 0) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Finalize EVP_DigestSignFinal()\");\r\n    goto err;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nThe error seems to be related to the digest used (\"md\"). Specifically, if the md is not NULL, the EVP_SignFinal()/EVP_DigestSignFinal() fail with the following error trace:\r\n\r\n```\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:349] Can not create signature (117): Cannot finalize signature (  H??)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 0 bytes (estimated: 690 bytes)]\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [hsm_main.c:614] [PKI_sign()] [DEBUG]: Can not generate signature (returned from sign cb)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [hsm_main.c:541] Can not create signature (117):\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [pki_x509_req.c:222] [PKI_X509_REQ_new()] [DEBUG] REQ::ERROR 0 signing the Request [error:1012F0B1:elliptic curve routines:pkey_oqs_ctrl:wrong digest]\r\n```\r\nI know I am doing something wrong here, but I am not sure what... \r\n\r\nTo probe a bit further, I forced the use of a specific hashing algorithm - since the error was related to that, somehow: md = EVP_sha512(). If I do that, I get a success return code but the signature in the data is all zeroes.\r\n\r\n```\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [pki_x509_req.c:61] [PKI_X509_REQ_new()] [DEBUG]: No Digest Associated with used algorithm\r\nMar 21 22:54:41 2021 GMT [97064] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 690 bytes (estimated: 690 bytes)]\r\n```\r\n\r\nJust to be very precise, when I use the standard apps/ tools (i.e., openssl req -new ...) I am able to generate things correctly.\r\n\r\nAnybody experiencing similar issues and/or know what I might be doing wrong?\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/809079475","html_url":"https://github.com/open-quantum-safe/openssl/issues/295#issuecomment-809079475","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","id":809079475,"node_id":"MDEyOklzc3VlQ29tbWVudDgwOTA3OTQ3NQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-29T05:33:00Z","updated_at":"2021-03-29T05:33:00Z","author_association":"MEMBER","body":"> if only the ASN1 subsystem was better documented.. :D\r\n\r\n I second that: Stumbling on this again and again trying to create a proper OpenSSL(3) oqs-provider.\r\n\r\n> we will work on the EVP_PKEY signing interface - since that seems to be the trick to provide generalized support.\r\n\r\nAlso fully agreed with this assessment.\r\n\r\n> We hope to be able to contribute back the signature part\r\n\r\nVery much looking forward to that: Thanks in advance!\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-03-29T05:33:00Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15724759020","type":"IssueCommentEvent","actor":{"id":75671533,"login":"IsTyping","display_login":"IsTyping","gravatar_id":"","url":"https://api.github.com/users/IsTyping","avatar_url":"https://avatars.githubusercontent.com/u/75671533?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/294","id":836797345,"node_id":"MDU6SXNzdWU4MzY3OTczNDU=","number":294,"title":"cannot generate self-signed root CA certificate","user":{"login":"IsTyping","id":75671533,"node_id":"MDQ6VXNlcjc1NjcxNTMz","avatar_url":"https://avatars.githubusercontent.com/u/75671533?v=4","gravatar_id":"","url":"https://api.github.com/users/IsTyping","html_url":"https://github.com/IsTyping","followers_url":"https://api.github.com/users/IsTyping/followers","following_url":"https://api.github.com/users/IsTyping/following{/other_user}","gists_url":"https://api.github.com/users/IsTyping/gists{/gist_id}","starred_url":"https://api.github.com/users/IsTyping/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IsTyping/subscriptions","organizations_url":"https://api.github.com/users/IsTyping/orgs","repos_url":"https://api.github.com/users/IsTyping/repos","events_url":"https://api.github.com/users/IsTyping/events{/privacy}","received_events_url":"https://api.github.com/users/IsTyping/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2021-03-20T12:32:19Z","updated_at":"2021-03-29T09:11:09Z","closed_at":"2021-03-29T09:11:09Z","author_association":"NONE","active_lock_reason":null,"body":"I'm starting the TLS demmo on Ubuntu 18 with a shared library set up and these default algorithms announced: -DOQS_DEFAULT_GROUPS=\\\"CRYSTALS-kyber:FRODO:SABER\\\" . \r\nI try to generate the self signed certificate from my openssl-1.1.1 main directory with:\r\n\r\n`apps/openssl req -x509 -new -newkey kyber512 -keyout kyber512_CA.key -out kyber512_CA.crt -nodes -subj \"/CN=oqstest CA\" -days 365 -config apps/openssl.cnf`\r\n\r\nI get this error:\r\n\r\n`Can't load /root/.rnd into RNG\r\n140383120265664:error:2406F079:random number generator:RAND_load_file:Cannot open file:crypto/rand/randfile.c:88:Filename=/root/.rnd\r\nUnknown algorithm kyber512`\r\n\r\nThere is no such file /root/.rnd. \r\nIf I try the ECDSA certificate example I get the same error but instead of unknown algorithm it generates EC private key. \r\nI've followed quick start several times but cannot see where I've gone wrong.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/809212838","html_url":"https://github.com/open-quantum-safe/openssl/issues/294#issuecomment-809212838","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294","id":809212838,"node_id":"MDEyOklzc3VlQ29tbWVudDgwOTIxMjgzOA==","user":{"login":"IsTyping","id":75671533,"node_id":"MDQ6VXNlcjc1NjcxNTMz","avatar_url":"https://avatars.githubusercontent.com/u/75671533?v=4","gravatar_id":"","url":"https://api.github.com/users/IsTyping","html_url":"https://github.com/IsTyping","followers_url":"https://api.github.com/users/IsTyping/followers","following_url":"https://api.github.com/users/IsTyping/following{/other_user}","gists_url":"https://api.github.com/users/IsTyping/gists{/gist_id}","starred_url":"https://api.github.com/users/IsTyping/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IsTyping/subscriptions","organizations_url":"https://api.github.com/users/IsTyping/orgs","repos_url":"https://api.github.com/users/IsTyping/repos","events_url":"https://api.github.com/users/IsTyping/events{/privacy}","received_events_url":"https://api.github.com/users/IsTyping/received_events","type":"User","site_admin":false},"created_at":"2021-03-29T09:11:09Z","updated_at":"2021-03-29T09:11:09Z","author_association":"NONE","body":"The errors were all Makefile : ## : failed. There was no other detail.\r\n\r\nI have started from a clean snapshot, increased the memory allocation (as my usage graphs were up to 80% when using the 'make' command) and can now generate the self CA Cert. \r\n\r\nThank you for your patience with me! I have learned a lot!","performed_via_github_app":null}},"public":true,"created_at":"2021-03-29T09:11:09Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15725329325","type":"IssueCommentEvent","actor":{"id":81308792,"login":"crispySafe","display_login":"crispySafe","gravatar_id":"","url":"https://api.github.com/users/crispySafe","avatar_url":"https://avatars.githubusercontent.com/u/81308792?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/295","id":837206565,"node_id":"MDU6SXNzdWU4MzcyMDY1NjU=","number":295,"title":"Issue when signing with new algorithms","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":16,"created_at":"2021-03-21T23:08:27Z","updated_at":"2021-03-29T09:51:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Everybody. I am trying to use the new algorithms in our wrapper library (LibPKI) that builds on top of OpenSSL. One thing I am having difficulties is to understand how to properly use the signing functions. \r\n\r\nSpecifically, I am trying to implement a generic signing function for DER encoded data (PKI_X509_sign(der (data), md (digest algor), evp_pkey) -> signature), and although the same functions work with RSA or ECDSA, they fail when I try with falcon, dilithium, or sphincs+.\r\n\r\nHere's the first code I tried:\r\n\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\n// Initializes the Signature\r\nEVP_SignInit_ex(ctx, md, NULL);\r\nEVP_SignUpdate (ctx, der->data, der->size);\r\n\r\n// Finalizes the signature\r\nif (!EVP_SignFinal(ctx, out_mem->data, (unsigned int *) &ossl_ret, pkey))\r\n{\r\n\tPKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot finalize signature (%s)\", \r\n\t\tHSM_OPENSSL_get_errdesc(HSM_OPENSSL_get_errno(), NULL, 0));\r\n\r\n\tPKI_MEM_free(out_mem);\r\n\tout_mem = NULL;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nI also tried the DigestSign version:\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\nif (!EVP_DigestSignInit(ctx, &pCtx, md, NULL, pkey)) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Initialize EVP_DigestSignInit()\");\r\n    goto err;\r\n}\r\n\r\nif (EVP_DigestSignUpdate(ctx, \r\n                                            der->data,\r\n   \t                                    der->size) <= 0) {\r\n   PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Update EVP_DigestSignUpdate()\");\r\n   goto err;\r\n}\r\n\r\nif (EVP_DigestSignFinal(ctx,\r\n                                        out_mem->data,\r\n                                        &ossl_ret) <= 0) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Finalize EVP_DigestSignFinal()\");\r\n    goto err;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nThe error seems to be related to the digest used (\"md\"). Specifically, if the md is not NULL, the EVP_SignFinal()/EVP_DigestSignFinal() fail with the following error trace:\r\n\r\n```\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:349] Can not create signature (117): Cannot finalize signature (  H??)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 0 bytes (estimated: 690 bytes)]\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [hsm_main.c:614] [PKI_sign()] [DEBUG]: Can not generate signature (returned from sign cb)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [hsm_main.c:541] Can not create signature (117):\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [pki_x509_req.c:222] [PKI_X509_REQ_new()] [DEBUG] REQ::ERROR 0 signing the Request [error:1012F0B1:elliptic curve routines:pkey_oqs_ctrl:wrong digest]\r\n```\r\nI know I am doing something wrong here, but I am not sure what... \r\n\r\nTo probe a bit further, I forced the use of a specific hashing algorithm - since the error was related to that, somehow: md = EVP_sha512(). If I do that, I get a success return code but the signature in the data is all zeroes.\r\n\r\n```\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [pki_x509_req.c:61] [PKI_X509_REQ_new()] [DEBUG]: No Digest Associated with used algorithm\r\nMar 21 22:54:41 2021 GMT [97064] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 690 bytes (estimated: 690 bytes)]\r\n```\r\n\r\nJust to be very precise, when I use the standard apps/ tools (i.e., openssl req -new ...) I am able to generate things correctly.\r\n\r\nAnybody experiencing similar issues and/or know what I might be doing wrong?\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/809243092","html_url":"https://github.com/open-quantum-safe/openssl/issues/295#issuecomment-809243092","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","id":809243092,"node_id":"MDEyOklzc3VlQ29tbWVudDgwOTI0MzA5Mg==","user":{"login":"crispySafe","id":81308792,"node_id":"MDQ6VXNlcjgxMzA4Nzky","avatar_url":"https://avatars.githubusercontent.com/u/81308792?v=4","gravatar_id":"","url":"https://api.github.com/users/crispySafe","html_url":"https://github.com/crispySafe","followers_url":"https://api.github.com/users/crispySafe/followers","following_url":"https://api.github.com/users/crispySafe/following{/other_user}","gists_url":"https://api.github.com/users/crispySafe/gists{/gist_id}","starred_url":"https://api.github.com/users/crispySafe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/crispySafe/subscriptions","organizations_url":"https://api.github.com/users/crispySafe/orgs","repos_url":"https://api.github.com/users/crispySafe/repos","events_url":"https://api.github.com/users/crispySafe/events{/privacy}","received_events_url":"https://api.github.com/users/crispySafe/received_events","type":"User","site_admin":false},"created_at":"2021-03-29T09:51:55Z","updated_at":"2021-03-29T09:51:55Z","author_association":"NONE","body":" > I guess if there is no further follow up, we can close this issue.. ? Unless @crispySafe would like to add more comments... ?\r\n\r\nI am fine. Thanks a lot - all of you working on that project.\r\n> > We hope to be able to contribute back the signature part\r\n\r\n> Very much looking forward to that: Thanks in advance!\r\n\r\nMe too!","performed_via_github_app":null}},"public":true,"created_at":"2021-03-29T09:51:56Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15729519981","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/951","id":842119233,"node_id":"MDExOlB1bGxSZXF1ZXN0NjAxNzUzODMx","number":951,"title":"Replace OQS_PORTABLE_BUILD and OQS_USE_CPU_EXTENSIONS","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-26T16:22:03Z","updated_at":"2021-03-29T14:56:32Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/951","html_url":"https://github.com/open-quantum-safe/liboqs/pull/951","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/951.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/951.patch"},"body":"Following the discussion in https://github.com/open-quantum-safe/liboqs/discussions/943, this replaces OQS_PORTABLE_BUILD and OQS_USE_CPU_EXTENSIONS with more flexible (and less confusing) alternatives.\r\n\r\n* OQS_DIST_BUILD (default: OFF): \"Build distributable library with optimized code for several CPU microarchitectures. Enables run-time CPU feature detection.\"\r\n* OQS_OPT_TARGET (default: \"auto\"): \"The target microarchitecture for optimization.\"\r\n\r\nOQS_DIST_BUILD is a drop in replacement for the previous OQS_PORTABLE_BUILD. A library built with OQS_DIST_BUILD will include implementations for several microarchitectures, and it will dispatch calls to the correct implementation based the CPU features that are available at run time. The OQS_DIST_BUILD option is refined to one of OQS_DIST_X86_64_BUILD, OQS_DIST_ARM64v8_BUILD, or OQS_DIST_ARM32v7_BUILD at compile time depending on CMAKE_SYSTEM_PROCESSOR. This is useful for cross compiling and it also simplifies some logic throughout the build.\r\n\r\nOQS_OPT_TARGET can take a value of \"auto\", \"generic\", or the name of a CPU like \"haswell\". When OQS_DIST_BUILD=ON we force OQS_OPT_TARGET=generic.\r\n\r\nOn x86_64, \"generic\" means we'll compile with \"-march=x86-64\". On ARM64v8 \"generic\" means \"-mcpu=cortex-a53\". On ARM32v7 \"generic\" means \"-mcpu=cortex-a5\". This is like OQS_USE_CPU_EXTENSIONS=OFF.\r\n\r\nOn any architecture, \"auto\" will try to determine the current CPU using \"march=native\" (if it's supported). This is like the previous OQS_USE_CPU_EXTENSIONS=ON\r\n\r\nDownstream builds that set OQS_PORTABLE_BUILD or OQS_USE_CPU_FEATURES will fail. So we should prepare for that if we decide to make these changes.\r\n\r\n*edit*: Removing OQS_USE_CPU_EXTENSIONS had the side effect that our ARM jobs tried to execute detect_gcc_clang_intrinsics.c. I took the opportunity to add both compile-time detection of ARM crypto features and neon. It is now possible to cross compile for ARM and optimize for the target CPU (relevant to #775). I also took the opportunity to add run-time detection of ARM features, and I replaced OQS_get_available_CPU_extensions (01efe50) for efficiency reasons (previous implementation was copying ~40 bytes on return).","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/809447886","html_url":"https://github.com/open-quantum-safe/liboqs/pull/951#issuecomment-809447886","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951","id":809447886,"node_id":"MDEyOklzc3VlQ29tbWVudDgwOTQ0Nzg4Ng==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-03-29T14:56:32Z","updated_at":"2021-03-29T14:56:32Z","author_association":"CONTRIBUTOR","body":"Thanks for taking a look.\r\n\r\n> 1. \"Release\" (fastest, with all possible CPU feature support, but never-crashing/RT feature detection): In docker images\r\n> [...] OQS_OPT_TARGET=\"skylake\" & OQS_DIST_BUILD=ON\r\n\r\nYou don't have to set OQS_OPT_TARGET here (in fact it's ignored).\r\n\r\n> 2. \"Reference\" (without any CPU feature support): Benchmarking ref code\r\n> [...] OQS_OPT_TARGET=\"generic\"; OQS_DIST_BUILD=don't care (or _must_ it be OFF?)\r\n\r\nOQS_DIST_BUILD must be OFF in this case (it is off by default so the user only has to specify OQS_OPT_TARGET=generic).\r\n\r\n> 3. \"Performance\" (possibly crashing if not all required features available at run-time): (Aiming to get) Best benchmarking numbers \r\n> [...]  OQS_OPT_TARGET=\"skylake\" (or \"auto\" if building and running on the same host) & OQS_DIST_BUILD=OFF\r\n\r\nRight.\r\n\r\n> For ARM64, I guess building with \"auto\" and only setting OQS_DIST_BUILD=ON when creating docker images is best.\r\n\r\nAgreed.\r\n\r\n> Did I get this all right? In any case, what about the suggestion to create something like CMAKE_BUILD_TYPE(s) designating sensible configurations -- incl. one that doesn't trip up the unwary (\"Release\"? Or rather something like \"Development\": OQS_OPT_TARGET=\"auto\" & OQS_DIST_BUILD=OFF)?\r\n\r\nWe have four CMAKE_BUILD_TYPEs right now.  \"\" (empty string), \"Release\", \"Debug\", and \"RelWithDebInfo\". But we barely use these. \"Debug\" and \"RelWithDebInfo\" are the same. Release and \"\" are the same. This PR makes OQS_OPT_TARGET=auto and OQS_DIST_BUILD=OFF the default for all four configurations.\r\n\r\nSo the question is whether we want some build type that enables OQS_DIST_BUILD by default. Would we want this to be the \"Release\"/\"RelWithDebInfo\" types? Or would we add \"Distribution\"/\"DistWithDebInfo\"?","performed_via_github_app":null}},"public":true,"created_at":"2021-03-29T14:56:33Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15730625810","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/952","id":843513594,"node_id":"MDU6SXNzdWU4NDM1MTM1OTQ=","number":952,"title":"compilation fails with 0.5.0 branch with error OPENSSL_NO_EC2M - not found","user":{"login":"jhfeng","id":13461061,"node_id":"MDQ6VXNlcjEzNDYxMDYx","avatar_url":"https://avatars.githubusercontent.com/u/13461061?v=4","gravatar_id":"","url":"https://api.github.com/users/jhfeng","html_url":"https://github.com/jhfeng","followers_url":"https://api.github.com/users/jhfeng/followers","following_url":"https://api.github.com/users/jhfeng/following{/other_user}","gists_url":"https://api.github.com/users/jhfeng/gists{/gist_id}","starred_url":"https://api.github.com/users/jhfeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jhfeng/subscriptions","organizations_url":"https://api.github.com/users/jhfeng/orgs","repos_url":"https://api.github.com/users/jhfeng/repos","events_url":"https://api.github.com/users/jhfeng/events{/privacy}","received_events_url":"https://api.github.com/users/jhfeng/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-29T15:57:43Z","updated_at":"2021-03-29T16:07:28Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When build with 0.5.0 code on Ubuntu 18.04\r\n\r\n```\r\nmkdir: created directory 'build'\r\n+ cd build\r\n+ cmake -DCMAKE_BUILD_TYPE=Release -DOQS_BUILD_ONLY_LIB=ON -DOQS_PORTABLE_BUILD=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=/usr/src/openssl/oqs ..\r\n-- The C compiler identification is GNU 7.5.0\r\n-- The ASM compiler identification is GNU\r\n-- Found assembler: /usr/bin/cc\r\n-- Check for working C compiler: /usr/bin/cc\r\n-- Check for working C compiler: /usr/bin/cc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Found OpenSSL: /usr/lib/x86_64-linux-gnu/libcrypto.so (found suitable version \"1.1.1\", minimum required is \"1.1.1\") \r\n**-- Looking for OPENSSL_NO_EC2M\r\n-- Looking for OPENSSL_NO_EC2M - not found\r\nCMake Error at src/CMakeLists.txt:82 (target_link_options):\r\n  Unknown CMake command \"target_link_options\".**\r\n\r\n\r\n-- Configuring incomplete, errors occurred!\r\nSee also \"/usr/src/liboqs/build/CMakeFiles/CMakeOutput.log\".\r\nSee also \"/usr/src/liboqs/build/CMakeFiles/CMakeError.log\".\r\n```\r\n\r\nBUT, the compilation works with `main` branch code.  ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/809510030","html_url":"https://github.com/open-quantum-safe/liboqs/issues/952#issuecomment-809510030","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952","id":809510030,"node_id":"MDEyOklzc3VlQ29tbWVudDgwOTUxMDAzMA==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-03-29T16:07:28Z","updated_at":"2021-03-29T16:07:28Z","author_association":"CONTRIBUTOR","body":"This is actually not about OPENSSL_NO_EC2M---it's that your CMake doesn't have target_link_options. You should be able to compile the 0.5.0 branch with CMake 3.13.5 or later. The main branch is no longer using target_link_options and can be compiled with CMake 3.5 or later.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-29T16:07:29Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15730685688","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/951","id":842119233,"node_id":"MDExOlB1bGxSZXF1ZXN0NjAxNzUzODMx","number":951,"title":"Replace OQS_PORTABLE_BUILD and OQS_USE_CPU_EXTENSIONS","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-03-26T16:22:03Z","updated_at":"2021-03-29T16:11:35Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/951","html_url":"https://github.com/open-quantum-safe/liboqs/pull/951","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/951.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/951.patch"},"body":"Following the discussion in https://github.com/open-quantum-safe/liboqs/discussions/943, this replaces OQS_PORTABLE_BUILD and OQS_USE_CPU_EXTENSIONS with more flexible (and less confusing) alternatives.\r\n\r\n* OQS_DIST_BUILD (default: OFF): \"Build distributable library with optimized code for several CPU microarchitectures. Enables run-time CPU feature detection.\"\r\n* OQS_OPT_TARGET (default: \"auto\"): \"The target microarchitecture for optimization.\"\r\n\r\nOQS_DIST_BUILD is a drop in replacement for the previous OQS_PORTABLE_BUILD. A library built with OQS_DIST_BUILD will include implementations for several microarchitectures, and it will dispatch calls to the correct implementation based the CPU features that are available at run time. The OQS_DIST_BUILD option is refined to one of OQS_DIST_X86_64_BUILD, OQS_DIST_ARM64v8_BUILD, or OQS_DIST_ARM32v7_BUILD at compile time depending on CMAKE_SYSTEM_PROCESSOR. This is useful for cross compiling and it also simplifies some logic throughout the build.\r\n\r\nOQS_OPT_TARGET can take a value of \"auto\", \"generic\", or the name of a CPU like \"haswell\". When OQS_DIST_BUILD=ON we force OQS_OPT_TARGET=generic.\r\n\r\nOn x86_64, \"generic\" means we'll compile with \"-march=x86-64\". On ARM64v8 \"generic\" means \"-mcpu=cortex-a53\". On ARM32v7 \"generic\" means \"-mcpu=cortex-a5\". This is like OQS_USE_CPU_EXTENSIONS=OFF.\r\n\r\nOn any architecture, \"auto\" will try to determine the current CPU using \"march=native\" (if it's supported). This is like the previous OQS_USE_CPU_EXTENSIONS=ON\r\n\r\nDownstream builds that set OQS_PORTABLE_BUILD or OQS_USE_CPU_FEATURES will fail. So we should prepare for that if we decide to make these changes.\r\n\r\n*edit*: Removing OQS_USE_CPU_EXTENSIONS had the side effect that our ARM jobs tried to execute detect_gcc_clang_intrinsics.c. I took the opportunity to add both compile-time detection of ARM crypto features and neon. It is now possible to cross compile for ARM and optimize for the target CPU (relevant to #775). I also took the opportunity to add run-time detection of ARM features, and I replaced OQS_get_available_CPU_extensions (01efe50) for efficiency reasons (previous implementation was copying ~40 bytes on return).","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/809512811","html_url":"https://github.com/open-quantum-safe/liboqs/pull/951#issuecomment-809512811","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951","id":809512811,"node_id":"MDEyOklzc3VlQ29tbWVudDgwOTUxMjgxMQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-29T16:11:35Z","updated_at":"2021-03-29T16:11:35Z","author_association":"MEMBER","body":"Looks like I'm slowly appearing to be on the same page now: Thanks for the explanations. Just two more comments:\r\n\r\n> You don't have to set OQS_OPT_TARGET here (in fact it's ignored).\r\n\r\nHm, so setting `OQS_DIST_BUILD` turns off (evaluation of) `OQS_OPT_TARGET`? Wasn't the latter meant to provide also a way to trigger cross-compilation? So one has to be on \"the right\"/target platform building when setting `OQS_DIST_BUILD`? If so, what if that platform does not have all possible CPU features? In other words, setting `OQS_DIST_BUILD` on an old machine (e.g., without AVX2) will not generate AVX2 extension code?\r\n\r\n> So the question is whether we want some build type that enables OQS_DIST_BUILD by default. Would we want this to be the \"Release\"/\"RelWithDebInfo\" types? Or would we add \"Distribution\"/\"DistWithDebInfo\"?\r\n\r\nI'd vote for \"Release\". A Release-with-Debuginfo doesn't sound needed, is it?\r\n\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-03-29T16:11:35Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15730808137","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/952","id":843513594,"node_id":"MDU6SXNzdWU4NDM1MTM1OTQ=","number":952,"title":"compilation fails with 0.5.0 branch with error OPENSSL_NO_EC2M - not found","user":{"login":"jhfeng","id":13461061,"node_id":"MDQ6VXNlcjEzNDYxMDYx","avatar_url":"https://avatars.githubusercontent.com/u/13461061?v=4","gravatar_id":"","url":"https://api.github.com/users/jhfeng","html_url":"https://github.com/jhfeng","followers_url":"https://api.github.com/users/jhfeng/followers","following_url":"https://api.github.com/users/jhfeng/following{/other_user}","gists_url":"https://api.github.com/users/jhfeng/gists{/gist_id}","starred_url":"https://api.github.com/users/jhfeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jhfeng/subscriptions","organizations_url":"https://api.github.com/users/jhfeng/orgs","repos_url":"https://api.github.com/users/jhfeng/repos","events_url":"https://api.github.com/users/jhfeng/events{/privacy}","received_events_url":"https://api.github.com/users/jhfeng/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-03-29T15:57:43Z","updated_at":"2021-03-29T16:20:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When build with 0.5.0 code on Ubuntu 18.04\r\n\r\n```\r\nmkdir: created directory 'build'\r\n+ cd build\r\n+ cmake -DCMAKE_BUILD_TYPE=Release -DOQS_BUILD_ONLY_LIB=ON -DOQS_PORTABLE_BUILD=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=/usr/src/openssl/oqs ..\r\n-- The C compiler identification is GNU 7.5.0\r\n-- The ASM compiler identification is GNU\r\n-- Found assembler: /usr/bin/cc\r\n-- Check for working C compiler: /usr/bin/cc\r\n-- Check for working C compiler: /usr/bin/cc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Found OpenSSL: /usr/lib/x86_64-linux-gnu/libcrypto.so (found suitable version \"1.1.1\", minimum required is \"1.1.1\") \r\n**-- Looking for OPENSSL_NO_EC2M\r\n-- Looking for OPENSSL_NO_EC2M - not found\r\nCMake Error at src/CMakeLists.txt:82 (target_link_options):\r\n  Unknown CMake command \"target_link_options\".**\r\n\r\n\r\n-- Configuring incomplete, errors occurred!\r\nSee also \"/usr/src/liboqs/build/CMakeFiles/CMakeOutput.log\".\r\nSee also \"/usr/src/liboqs/build/CMakeFiles/CMakeError.log\".\r\n```\r\n\r\nBUT, the compilation works with `main` branch code.  ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/809518357","html_url":"https://github.com/open-quantum-safe/liboqs/issues/952#issuecomment-809518357","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952","id":809518357,"node_id":"MDEyOklzc3VlQ29tbWVudDgwOTUxODM1Nw==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-29T16:20:05Z","updated_at":"2021-03-29T16:20:05Z","author_association":"MEMBER","body":"@jhfeng do you have a specific need for Ubuntu 18? CI moved to Ubuntu 20 and that also has a more current cmake. Nevertheless @jschanck's comment is right in that that dependency on a more current `cmake` is gone (for now) and that this has nothing to do with NO_EC2M. Suggest to close or rename the issue.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-29T16:20:05Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15730946767","type":"IssueCommentEvent","actor":{"id":13461061,"login":"jhfeng","display_login":"jhfeng","gravatar_id":"","url":"https://api.github.com/users/jhfeng","avatar_url":"https://avatars.githubusercontent.com/u/13461061?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/952","id":843513594,"node_id":"MDU6SXNzdWU4NDM1MTM1OTQ=","number":952,"title":"compilation fails with 0.5.0 branch with error OPENSSL_NO_EC2M - not found","user":{"login":"jhfeng","id":13461061,"node_id":"MDQ6VXNlcjEzNDYxMDYx","avatar_url":"https://avatars.githubusercontent.com/u/13461061?v=4","gravatar_id":"","url":"https://api.github.com/users/jhfeng","html_url":"https://github.com/jhfeng","followers_url":"https://api.github.com/users/jhfeng/followers","following_url":"https://api.github.com/users/jhfeng/following{/other_user}","gists_url":"https://api.github.com/users/jhfeng/gists{/gist_id}","starred_url":"https://api.github.com/users/jhfeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jhfeng/subscriptions","organizations_url":"https://api.github.com/users/jhfeng/orgs","repos_url":"https://api.github.com/users/jhfeng/repos","events_url":"https://api.github.com/users/jhfeng/events{/privacy}","received_events_url":"https://api.github.com/users/jhfeng/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-03-29T15:57:43Z","updated_at":"2021-03-29T16:29:22Z","closed_at":"2021-03-29T16:29:22Z","author_association":"NONE","active_lock_reason":null,"body":"When build with 0.5.0 code on Ubuntu 18.04\r\n\r\n```\r\nmkdir: created directory 'build'\r\n+ cd build\r\n+ cmake -DCMAKE_BUILD_TYPE=Release -DOQS_BUILD_ONLY_LIB=ON -DOQS_PORTABLE_BUILD=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=/usr/src/openssl/oqs ..\r\n-- The C compiler identification is GNU 7.5.0\r\n-- The ASM compiler identification is GNU\r\n-- Found assembler: /usr/bin/cc\r\n-- Check for working C compiler: /usr/bin/cc\r\n-- Check for working C compiler: /usr/bin/cc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Found OpenSSL: /usr/lib/x86_64-linux-gnu/libcrypto.so (found suitable version \"1.1.1\", minimum required is \"1.1.1\") \r\n**-- Looking for OPENSSL_NO_EC2M\r\n-- Looking for OPENSSL_NO_EC2M - not found\r\nCMake Error at src/CMakeLists.txt:82 (target_link_options):\r\n  Unknown CMake command \"target_link_options\".**\r\n\r\n\r\n-- Configuring incomplete, errors occurred!\r\nSee also \"/usr/src/liboqs/build/CMakeFiles/CMakeOutput.log\".\r\nSee also \"/usr/src/liboqs/build/CMakeFiles/CMakeError.log\".\r\n```\r\n\r\nBUT, the compilation works with `main` branch code.  ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/809524631","html_url":"https://github.com/open-quantum-safe/liboqs/issues/952#issuecomment-809524631","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/952","id":809524631,"node_id":"MDEyOklzc3VlQ29tbWVudDgwOTUyNDYzMQ==","user":{"login":"jhfeng","id":13461061,"node_id":"MDQ6VXNlcjEzNDYxMDYx","avatar_url":"https://avatars.githubusercontent.com/u/13461061?v=4","gravatar_id":"","url":"https://api.github.com/users/jhfeng","html_url":"https://github.com/jhfeng","followers_url":"https://api.github.com/users/jhfeng/followers","following_url":"https://api.github.com/users/jhfeng/following{/other_user}","gists_url":"https://api.github.com/users/jhfeng/gists{/gist_id}","starred_url":"https://api.github.com/users/jhfeng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jhfeng/subscriptions","organizations_url":"https://api.github.com/users/jhfeng/orgs","repos_url":"https://api.github.com/users/jhfeng/repos","events_url":"https://api.github.com/users/jhfeng/events{/privacy}","received_events_url":"https://api.github.com/users/jhfeng/received_events","type":"User","site_admin":false},"created_at":"2021-03-29T16:29:22Z","updated_at":"2021-03-29T16:29:22Z","author_association":"NONE","body":"Thanks @jschanck @baentsch, I can close the issue. yes, I need run the bits on ubuntu 18 at this time. With change on target_link_options in next release. I'm fine with it.\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-03-29T16:29:22Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15731163749","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/951","id":842119233,"node_id":"MDExOlB1bGxSZXF1ZXN0NjAxNzUzODMx","number":951,"title":"Replace OQS_PORTABLE_BUILD and OQS_USE_CPU_EXTENSIONS","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-03-26T16:22:03Z","updated_at":"2021-03-29T16:44:40Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/951","html_url":"https://github.com/open-quantum-safe/liboqs/pull/951","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/951.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/951.patch"},"body":"Following the discussion in https://github.com/open-quantum-safe/liboqs/discussions/943, this replaces OQS_PORTABLE_BUILD and OQS_USE_CPU_EXTENSIONS with more flexible (and less confusing) alternatives.\r\n\r\n* OQS_DIST_BUILD (default: OFF): \"Build distributable library with optimized code for several CPU microarchitectures. Enables run-time CPU feature detection.\"\r\n* OQS_OPT_TARGET (default: \"auto\"): \"The target microarchitecture for optimization.\"\r\n\r\nOQS_DIST_BUILD is a drop in replacement for the previous OQS_PORTABLE_BUILD. A library built with OQS_DIST_BUILD will include implementations for several microarchitectures, and it will dispatch calls to the correct implementation based the CPU features that are available at run time. The OQS_DIST_BUILD option is refined to one of OQS_DIST_X86_64_BUILD, OQS_DIST_ARM64v8_BUILD, or OQS_DIST_ARM32v7_BUILD at compile time depending on CMAKE_SYSTEM_PROCESSOR. This is useful for cross compiling and it also simplifies some logic throughout the build.\r\n\r\nOQS_OPT_TARGET can take a value of \"auto\", \"generic\", or the name of a CPU like \"haswell\". When OQS_DIST_BUILD=ON we force OQS_OPT_TARGET=generic.\r\n\r\nOn x86_64, \"generic\" means we'll compile with \"-march=x86-64\". On ARM64v8 \"generic\" means \"-mcpu=cortex-a53\". On ARM32v7 \"generic\" means \"-mcpu=cortex-a5\". This is like OQS_USE_CPU_EXTENSIONS=OFF.\r\n\r\nOn any architecture, \"auto\" will try to determine the current CPU using \"march=native\" (if it's supported). This is like the previous OQS_USE_CPU_EXTENSIONS=ON\r\n\r\nDownstream builds that set OQS_PORTABLE_BUILD or OQS_USE_CPU_FEATURES will fail. So we should prepare for that if we decide to make these changes.\r\n\r\n*edit*: Removing OQS_USE_CPU_EXTENSIONS had the side effect that our ARM jobs tried to execute detect_gcc_clang_intrinsics.c. I took the opportunity to add both compile-time detection of ARM crypto features and neon. It is now possible to cross compile for ARM and optimize for the target CPU (relevant to #775). I also took the opportunity to add run-time detection of ARM features, and I replaced OQS_get_available_CPU_extensions (01efe50) for efficiency reasons (previous implementation was copying ~40 bytes on return).","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/809535150","html_url":"https://github.com/open-quantum-safe/liboqs/pull/951#issuecomment-809535150","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/951","id":809535150,"node_id":"MDEyOklzc3VlQ29tbWVudDgwOTUzNTE1MA==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-03-29T16:44:40Z","updated_at":"2021-03-29T16:44:40Z","author_association":"CONTRIBUTOR","body":"> Hm, so setting `OQS_DIST_BUILD` turns off (evaluation of) `OQS_OPT_TARGET`? Wasn't the latter meant to provide also a way to trigger cross-compilation? So one has to be on \"the right\"/target platform building when setting `OQS_DIST_BUILD`? If so, what if that platform does not have all possible CPU features? In other words, setting `OQS_DIST_BUILD` on an old machine (e.g., without AVX2) will not generate AVX2 extension code?\r\n\r\nNo. If OQS_DIST_BUILD=ON and you're compiling on any x86_64 machine (or compiling for x86_64 from arm64, etc, etc) then you will get a library with AVX2 implementations.\r\n\r\nWe briefly discussed using OQS_OPT_TARGET in combination with OQS_DIST_BUILD to trigger some types of cross-compilation (x86_64 compiling for arm64, etc), but that doesn't actually work. The right way to do that sort of cross-compilation is with a toolchain file. I've provided some examples with this PR.\r\n\r\n> > So the question is whether we want some build type that enables OQS_DIST_BUILD by default. Would we want this to be the \"Release\"/\"RelWithDebInfo\" types? Or would we add \"Distribution\"/\"DistWithDebInfo\"?\r\n> \r\n> I'd vote for \"Release\". A Release-with-Debuginfo doesn't sound needed, is it?\r\n\r\nLet's discuss this on the Wednesday call.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-29T16:44:41Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
