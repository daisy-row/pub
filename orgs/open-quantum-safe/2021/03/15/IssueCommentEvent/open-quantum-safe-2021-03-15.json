{"id":"15537740053","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","id":813619057,"node_id":"MDExOlB1bGxSZXF1ZXN0NTc3NzM3NjQ3","number":922,"title":"Refactor SHA3 implementations and improve API","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/13","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13/labels","id":6475880,"node_id":"MDk6TWlsZXN0b25lNjQ3NTg4MA==","number":13,"title":"0.5.1 RC1","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":6,"closed_issues":3,"state":"open","created_at":"2021-02-24T18:42:42Z","updated_at":"2021-03-12T02:31:27Z","due_on":"2021-03-19T07:00:00Z","closed_at":null},"comments":3,"created_at":"2021-02-22T15:44:33Z","updated_at":"2021-03-15T02:09:01Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/922","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/922.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/922.patch"},"body":"This is an attempt to restructure our sha3 api to meet the needs of the remaining schemes and avoid code duplication.\r\n\r\nChanges:\r\n* Added a complete four-way parallel shake interface made public through sha3x4.h.  This interface does not require AVX2 instructions. It accepts any implementation of \"Keccak1600P-times4\" from the XKCP low-level interface, and it quietly falls back to a serial implementation using whatever (possibly platform optimized) implementation of Keccak1600P is available. A serial implementation is also used when OpenSSL is enabled.\r\n* Scripted the importing/patching of implementations of the low-level XKCP interface. (scripts will be submitted in a followup commit or pr). The implementations are made available in src/common/sha3/xkcp_low and a suitable implementation is chosen at compile time by src/common/sha3/xkcp_low/CMakeLists.txt.\r\n* Replaced fips202.c, sha3_c.c, and sha3_avx.c with xkcp_sha3.c, which implements sha3.h using the low-level XKCP interface.\r\n* Replaced sha3_x4.c, and sha3x4_avx2.c with xkcp_sha3x4.c, which implements sha3x4.h using the low-level XKCP interface.\r\n* Added ossl_sha3.c and ossl_sha3x4.c which implement sha3.h and sha3x4, including the incremental APIs (#502), using openssl.\r\n* Removed (unused) cshake functions.\r\n* Removed non-incremental shake functions like OQS_SHA3_shake128_absorb, but keep simple shake functions like OQS_SHA3_shake128.\r\n* Added \"sha3_*_ctx_reset\" which re-initializes an already allocated context.\r\n* Changed OQS_SHA3_sha3_*_inc_finalize so that it does not free the context. This allows you to re-use a context with \"reset\".\r\n* Removed Picnic's duplicate sha3 code\r\n* Added a patching mechanism to copy_from_upstream\r\n* Removed SPHINCS's duplicate sha3 code (with copy_from_upstream patch)\r\n* Removed Kyber's duplicate sha3 code (with copy_from_upstream patch)\r\n* Removed Dilithium's duplicate sha3 code (with copy_from_upstream patch)\r\n\r\nIssues:\r\n* OpenSSL does not implement a proper \"squeeze\" function. There's work in progress to fix this (https://github.com/openssl/openssl/pull/7921), but we should not expect it to be available anytime soon. The implementation of the incremental API that I've written is quadratic in the total output length if O(1) bytes are squeezed at a time. This leads to a severe loss of performance for Falcon, so this PR currently turns off OQS_USE_SHA3_OPENSSL even when OQS_USE_OPENSSL is on.\r\n\r\nTODO:\r\n* Import optimized Keccak routines for other architectures and select appropriately at compile time. There are several ARM implementations available. There's also AVX512.\r\n* (Future work) Compile multiple Keccak implementations and select an appropriate one at runtime for \"portable\" builds. \r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/799042005","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922#issuecomment-799042005","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","id":799042005,"node_id":"MDEyOklzc3VlQ29tbWVudDc5OTA0MjAwNQ==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-03-15T02:09:01Z","updated_at":"2021-03-15T02:09:01Z","author_association":"CONTRIBUTOR","body":"> How would we regenerate patches in the future if need be?\r\n\r\nI wrote documentation for the patching mechanism, but didn't include it with the PR. Here's a copy.\r\nhttps://gist.github.com/jschanck/c67d37551da2a5f6e06c640816d2c99f\r\n\r\n> And perhaps to ask a question before that: why were these patches needed in the first place? It looks like the main reason is to change something to do with the hash context object allocation/releasing. \r\n\r\nUpstream Kyber and Dilithium allocate their shake contexts on the stack. We use the heap. So we have to insert some additional calls to free contexts.\r\n\r\n> Is there something about OQS's architecture that is so different from PQClean's that we want to manage hash context objects different?\r\n\r\nWhen we were pulling from PQClean we could make it all work with shims. But we don't pull from PQClean anymore. Even if we did, it only worked because PQClean already applies these patches (https://github.com/jschanck/package-pqclean/tree/main/kyber/patches). If we're going to pull directly from upstream we need to apply them ourselves.\r\n\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-03-15T02:09:01Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15540995099","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","id":813619057,"node_id":"MDExOlB1bGxSZXF1ZXN0NTc3NzM3NjQ3","number":922,"title":"Refactor SHA3 implementations and improve API","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/13","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13/labels","id":6475880,"node_id":"MDk6TWlsZXN0b25lNjQ3NTg4MA==","number":13,"title":"0.5.1 RC1","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":6,"closed_issues":3,"state":"open","created_at":"2021-02-24T18:42:42Z","updated_at":"2021-03-12T02:31:27Z","due_on":"2021-03-19T07:00:00Z","closed_at":null},"comments":4,"created_at":"2021-02-22T15:44:33Z","updated_at":"2021-03-15T08:49:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/922","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/922.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/922.patch"},"body":"This is an attempt to restructure our sha3 api to meet the needs of the remaining schemes and avoid code duplication.\r\n\r\nChanges:\r\n* Added a complete four-way parallel shake interface made public through sha3x4.h.  This interface does not require AVX2 instructions. It accepts any implementation of \"Keccak1600P-times4\" from the XKCP low-level interface, and it quietly falls back to a serial implementation using whatever (possibly platform optimized) implementation of Keccak1600P is available. A serial implementation is also used when OpenSSL is enabled.\r\n* Scripted the importing/patching of implementations of the low-level XKCP interface. (scripts will be submitted in a followup commit or pr). The implementations are made available in src/common/sha3/xkcp_low and a suitable implementation is chosen at compile time by src/common/sha3/xkcp_low/CMakeLists.txt.\r\n* Replaced fips202.c, sha3_c.c, and sha3_avx.c with xkcp_sha3.c, which implements sha3.h using the low-level XKCP interface.\r\n* Replaced sha3_x4.c, and sha3x4_avx2.c with xkcp_sha3x4.c, which implements sha3x4.h using the low-level XKCP interface.\r\n* Added ossl_sha3.c and ossl_sha3x4.c which implement sha3.h and sha3x4, including the incremental APIs (#502), using openssl.\r\n* Removed (unused) cshake functions.\r\n* Removed non-incremental shake functions like OQS_SHA3_shake128_absorb, but keep simple shake functions like OQS_SHA3_shake128.\r\n* Added \"sha3_*_ctx_reset\" which re-initializes an already allocated context.\r\n* Changed OQS_SHA3_sha3_*_inc_finalize so that it does not free the context. This allows you to re-use a context with \"reset\".\r\n* Removed Picnic's duplicate sha3 code\r\n* Added a patching mechanism to copy_from_upstream\r\n* Removed SPHINCS's duplicate sha3 code (with copy_from_upstream patch)\r\n* Removed Kyber's duplicate sha3 code (with copy_from_upstream patch)\r\n* Removed Dilithium's duplicate sha3 code (with copy_from_upstream patch)\r\n\r\nIssues:\r\n* OpenSSL does not implement a proper \"squeeze\" function. There's work in progress to fix this (https://github.com/openssl/openssl/pull/7921), but we should not expect it to be available anytime soon. The implementation of the incremental API that I've written is quadratic in the total output length if O(1) bytes are squeezed at a time. This leads to a severe loss of performance for Falcon, so this PR currently turns off OQS_USE_SHA3_OPENSSL even when OQS_USE_OPENSSL is on.\r\n\r\nTODO:\r\n* Import optimized Keccak routines for other architectures and select appropriately at compile time. There are several ARM implementations available. There's also AVX512.\r\n* (Future work) Compile multiple Keccak implementations and select an appropriate one at runtime for \"portable\" builds. \r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/799235127","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922#issuecomment-799235127","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","id":799235127,"node_id":"MDEyOklzc3VlQ29tbWVudDc5OTIzNTEyNw==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-15T08:49:05Z","updated_at":"2021-03-15T08:49:05Z","author_association":"MEMBER","body":"> Upstream Kyber and Dilithium allocate their shake contexts on the stack. We use the heap. So we have to insert some additional calls to free contexts.\r\n\r\nWouldn't there be a chance that the pqcrystals team would be willing to add a \"free_context(&state)\" call to their uses of the SHA3 API? For stack-based implementations it could simply be a NOP. It would mean their code could easily benefit from downstream shared, possibly better vetted, SHA3 code without being subject to lots of patching (which always carries risks if upstream code changes). Such downstream uptake should be attractive to the upstream team(s), no?\r\n\r\nIn addition, shouldn't any upstream be interested in not having to maintain their own --optimized-- SHA3 code as it conceptually has nothing to do with the core of the PQC competition? What are all other implementations doing that need fast SHA3? Do they all \"roll their own\"? To make the core PQC code comparable, shared SHA3 code (also for the optimized case) would be generally beneficial, no? \r\n\r\n> If we're going to pull directly from upstream we need to apply them ourselves.\r\n\r\nShould we then maybe reconsider this decision if it otherwise seems to cause us to take responsibility for \"correct patching\"? \r\n\r\nIf we don't want to revert this decision we should make an informed decision whether we want to a) simply copy code properly maintained upstream or b) patching such code to integrate our own library into such code. Personally, option b) causes me headaches (of increased \"responsibility\" for proper operation of algorithms we didn't author and that can and will change without our influence).\r\n\r\nThinking all options through, I've got to ask what is our key motivation to create and integrate this optimized SHA3 code into upstream code bases? Do we only want to save on object code size? Do we want to enable performance comparisons of the core PQC logic (not of things like SHA3)? Do we want to have a more robust code base for shared code?","performed_via_github_app":null}},"public":true,"created_at":"2021-03-15T08:49:05Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15544561162","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/292","id":831030567,"node_id":"MDU6SXNzdWU4MzEwMzA1Njc=","number":292,"title":"Hybrid-Algorithm unexpected behavior","user":{"login":"mraavi5","id":55515041,"node_id":"MDQ6VXNlcjU1NTE1MDQx","avatar_url":"https://avatars.githubusercontent.com/u/55515041?v=4","gravatar_id":"","url":"https://api.github.com/users/mraavi5","html_url":"https://github.com/mraavi5","followers_url":"https://api.github.com/users/mraavi5/followers","following_url":"https://api.github.com/users/mraavi5/following{/other_user}","gists_url":"https://api.github.com/users/mraavi5/gists{/gist_id}","starred_url":"https://api.github.com/users/mraavi5/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mraavi5/subscriptions","organizations_url":"https://api.github.com/users/mraavi5/orgs","repos_url":"https://api.github.com/users/mraavi5/repos","events_url":"https://api.github.com/users/mraavi5/events{/privacy}","received_events_url":"https://api.github.com/users/mraavi5/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-03-14T00:21:41Z","updated_at":"2021-03-15T13:16:52Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi,\r\n\r\nI was wondering about the uncertainties in key-pair generation time and certificate generation times using hybrid algorithms with OpenSSL. I generated a key-pair and a certificate using the following classical, post-quantum, and hybrid algorithms. I got the following times and I couldn’t understand the reason behind slower key-pair generation/certificate generation times using hybrid algorithms.\r\n\r\nKey Generation\r\nClassical:\r\nRSA 3072 : 351.64 ms\r\nP256 : 3.7 ms\r\n\r\nPost-Quantum:\r\nDilithium 2 : 3.07 ms\r\n\r\nHybrids:\r\nRSA 3072-Dilithium2 : 263 ms (shouldn’t this be more than 351.64 ms?)\r\nP256-Dilihthium 2 : 3.21 ms (shouldn’t this be more than 3.7 ms?)\r\n\r\nMy understanding is that hybrid algorithms generate both keys/signatures and concatenate them in the certification process. If that is the case, key-pair/certificate generation time at a minimum should be the maximum key-pair/certificate generation times of individual algorithms. For example, algorithms A and B form a hybrid algorithm C. C should take a longer time than max(A,B) to generate key-pair/certificates. Is this correct?","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/799411213","html_url":"https://github.com/open-quantum-safe/openssl/issues/292#issuecomment-799411213","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/292","id":799411213,"node_id":"MDEyOklzc3VlQ29tbWVudDc5OTQxMTIxMw==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-15T13:16:52Z","updated_at":"2021-03-15T13:16:52Z","author_association":"MEMBER","body":"Hmm -- isn't this a very \"coarse-grained\" approach? With this you pay not just process-creation (incl. library loading), but also random-number generator initialization costs at each round; particularly on a machine running other processes, this might make the actual key generation cost not really properly dominate the measurement as you want it.\r\n\r\nWhat is even more problematic in my eyes though is that you compare this way code that generates output (classic RSA keygen) with code that does _not_ do that (hybrid keygen): That alone can ensure that hybrid (RSA+sth) appears faster than classic RSA keygen alone.\r\n\r\nI think a better test allowing you to draw conclusions better would be one in which you call the OpenSSL APIs repeatedly yourself, avoiding all setup & output overhead.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-15T13:16:52Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15544986352","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":247826799,"name":"open-quantum-safe/liboqs-java","url":"https://api.github.com/repos/open-quantum-safe/liboqs-java"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/1","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/1/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/1/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/1/events","html_url":"https://github.com/open-quantum-safe/liboqs-java/issues/1","id":597411011,"node_id":"MDU6SXNzdWU1OTc0MTEwMTE=","number":1,"title":"Enable build on Windows","user":{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false},"assignees":[{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false}],"milestone":null,"comments":23,"created_at":"2020-04-09T16:41:27Z","updated_at":"2021-03-15T13:44:58Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"The Makefile needs to be rewritten for Windows. ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/comments/799431398","html_url":"https://github.com/open-quantum-safe/liboqs-java/issues/1#issuecomment-799431398","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/1","id":799431398,"node_id":"MDEyOklzc3VlQ29tbWVudDc5OTQzMTM5OA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-15T13:44:58Z","updated_at":"2021-03-15T13:44:58Z","author_association":"MEMBER","body":"This indeed creates proper object files -- but then the linking fails completely: It looks like the linker takes the JAR file as target instead of the shared library:\r\n\r\n```\r\n>mvn package -P windows -Dliboqs.include.dir=\"c:\\Users\\Administrator\\git\\liboqs\\build\\include\" -Dliboqs.lib.dir=\"c:\\Users\\Administrator\\git\\liboqs\\build\\lib\"\r\n[INFO] Scanning for projects...\r\n[INFO]\r\n[INFO] ------------------< org.openquantumsafe:liboqs-java >-------------------\r\n[INFO] Building liboqs-java: Java wrapper for liboqs 1.0\r\n[INFO] --------------------------------[ jar ]---------------------------------\r\n[INFO]\r\n[INFO] --- maven-antrun-plugin:3.0.0:run (default) @ liboqs-java ---\r\n[INFO] Executing tasks\r\n[INFO] Executed tasks\r\n[INFO]\r\n[INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ liboqs-java ---\r\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\r\n[INFO] Copying 2 resources\r\n[INFO]\r\n[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ liboqs-java ---\r\n[INFO] Nothing to compile - all classes are up to date\r\n[INFO]\r\n[INFO] --- native-maven-plugin:1.0-alpha-9:initialize (generate-shared-oqs-library) @ liboqs-java ---\r\n[INFO]\r\n[INFO] --- native-maven-plugin:1.0-alpha-9:compile (generate-shared-oqs-library) @ liboqs-java ---\r\n[INFO]\r\n[INFO] --- native-maven-plugin:1.0-alpha-9:link (generate-shared-oqs-library) @ liboqs-java ---\r\n[INFO] cmd.exe /X /C \"link.exe /out:C:\\Users\\Administrator\\git\\liboqs-java\\target\\liboqs-java.jar target\\objs\\handle.obj target\\objs\\KEMs.obj target\\objs\\KeyEncapsulation.obj target\\objs\\Rand.obj target\\objs\\Signature.obj target\\objs\\Sigs.obj\"\r\nMicrosoft (R) Incremental Linker Version 14.28.29910.0\r\nCopyright (C) Microsoft Corporation.  All rights reserved.\r\n\r\n   Creating library C:\\Users\\Administrator\\git\\liboqs-java\\target\\liboqs-java.lib and object C:\\Users\\Administrator\\git\\liboqs-java\\target\\liboqs-java.exp\r\nLINK : fatal error LNK1561: entry point must be defined\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] BUILD FAILURE\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Total time:  7.891 s\r\n[INFO] Finished at: 2021-03-15T13:41:03Z\r\n[INFO] ------------------------------------------------------------------------\r\n[ERROR] Failed to execute goal org.codehaus.mojo:native-maven-plugin:1.0-alpha-9:link (generate-shared-oqs-library) on project liboqs-java: Error executing command line. Exit code:1561 -> [Help 1]\r\n[ERROR]\r\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\r\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\r\n[ERROR]\r\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\r\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\r\n```\r\n\r\nTo get there I changed the `pom.xml` as follows:\r\n1) Added windows profile:\r\n```\r\n        <profile>\r\n            <id>windows</id>\r\n            <activation>\r\n                <activeByDefault>true</activeByDefault>\r\n                <property>\r\n                    <name>platform</name>\r\n                    <value>windows</value>\r\n                </property>\r\n            </activation>\r\n            <properties>\r\n                <lib_name>liboqs-jni.dll</lib_name>\r\n                <liboqs.include.dir>/usr/local/include</liboqs.include.dir>\r\n                <liboqs.lib.dir>/usr/local/lib</liboqs.lib.dir>\r\n                <java.os.include>-I${JAVA_HOME}/include -I${JAVA_HOME}/include/win32</java.os.include>\r\n            </properties>\r\n        </profile>\r\n```\r\n2) set compiler & linker as\r\n```\r\n                    <compilerProvider>msvc</compilerProvider>\r\n                    <compilerStartOptions>\r\n                        <compilerStartOption>${java.os.include}</compilerStartOption>\r\n                        <compilerStartOption>-I${liboqs.include.dir}</compilerStartOption>\r\n                    </compilerStartOptions>\r\n                    <linkerProvider>msvc</linkerProvider>\r\n                    <linkerOutputDirectory>target</linkerOutputDirectory>\r\n```\r\n\r\nMaybe time to read the full maven documentation alongside the one for MSVC...","performed_via_github_app":null}},"public":true,"created_at":"2021-03-15T13:44:58Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15546684806","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","id":813619057,"node_id":"MDExOlB1bGxSZXF1ZXN0NTc3NzM3NjQ3","number":922,"title":"Refactor SHA3 implementations and improve API","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/13","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13/labels","id":6475880,"node_id":"MDk6TWlsZXN0b25lNjQ3NTg4MA==","number":13,"title":"0.5.1 RC1","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":6,"closed_issues":3,"state":"open","created_at":"2021-02-24T18:42:42Z","updated_at":"2021-03-12T02:31:27Z","due_on":"2021-03-19T07:00:00Z","closed_at":null},"comments":5,"created_at":"2021-02-22T15:44:33Z","updated_at":"2021-03-15T15:27:49Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/922","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/922.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/922.patch"},"body":"This is an attempt to restructure our sha3 api to meet the needs of the remaining schemes and avoid code duplication.\r\n\r\nChanges:\r\n* Added a complete four-way parallel shake interface made public through sha3x4.h.  This interface does not require AVX2 instructions. It accepts any implementation of \"Keccak1600P-times4\" from the XKCP low-level interface, and it quietly falls back to a serial implementation using whatever (possibly platform optimized) implementation of Keccak1600P is available. A serial implementation is also used when OpenSSL is enabled.\r\n* Scripted the importing/patching of implementations of the low-level XKCP interface. (scripts will be submitted in a followup commit or pr). The implementations are made available in src/common/sha3/xkcp_low and a suitable implementation is chosen at compile time by src/common/sha3/xkcp_low/CMakeLists.txt.\r\n* Replaced fips202.c, sha3_c.c, and sha3_avx.c with xkcp_sha3.c, which implements sha3.h using the low-level XKCP interface.\r\n* Replaced sha3_x4.c, and sha3x4_avx2.c with xkcp_sha3x4.c, which implements sha3x4.h using the low-level XKCP interface.\r\n* Added ossl_sha3.c and ossl_sha3x4.c which implement sha3.h and sha3x4, including the incremental APIs (#502), using openssl.\r\n* Removed (unused) cshake functions.\r\n* Removed non-incremental shake functions like OQS_SHA3_shake128_absorb, but keep simple shake functions like OQS_SHA3_shake128.\r\n* Added \"sha3_*_ctx_reset\" which re-initializes an already allocated context.\r\n* Changed OQS_SHA3_sha3_*_inc_finalize so that it does not free the context. This allows you to re-use a context with \"reset\".\r\n* Removed Picnic's duplicate sha3 code\r\n* Added a patching mechanism to copy_from_upstream\r\n* Removed SPHINCS's duplicate sha3 code (with copy_from_upstream patch)\r\n* Removed Kyber's duplicate sha3 code (with copy_from_upstream patch)\r\n* Removed Dilithium's duplicate sha3 code (with copy_from_upstream patch)\r\n\r\nIssues:\r\n* OpenSSL does not implement a proper \"squeeze\" function. There's work in progress to fix this (https://github.com/openssl/openssl/pull/7921), but we should not expect it to be available anytime soon. The implementation of the incremental API that I've written is quadratic in the total output length if O(1) bytes are squeezed at a time. This leads to a severe loss of performance for Falcon, so this PR currently turns off OQS_USE_SHA3_OPENSSL even when OQS_USE_OPENSSL is on.\r\n\r\nTODO:\r\n* Import optimized Keccak routines for other architectures and select appropriately at compile time. There are several ARM implementations available. There's also AVX512.\r\n* (Future work) Compile multiple Keccak implementations and select an appropriate one at runtime for \"portable\" builds. \r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/799511271","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922#issuecomment-799511271","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","id":799511271,"node_id":"MDEyOklzc3VlQ29tbWVudDc5OTUxMTI3MQ==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-03-15T15:27:49Z","updated_at":"2021-03-15T15:27:49Z","author_association":"CONTRIBUTOR","body":"This discussion seems like it might spiral out of control....\r\n\r\nSo I'm splitting this PR into the SHA3 refactoring (this PR #922), the copy from upstream patch mechanism (#944), and the patches themselves (which I'll hold locally for now).\r\n\r\n@baentsch I found it hard to follow your comment. I understand that you have concerns about the patching mechanism. Could you please separate those concerns from the core question of whether we want to provide a SHA3 interface, like what this PR provides, that eliminates the need for (say) Picnic to bring their own implementations?","performed_via_github_app":null}},"public":true,"created_at":"2021-03-15T15:27:49Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15548427731","type":"IssueCommentEvent","actor":{"id":5923577,"login":"mouse07410","display_login":"mouse07410","gravatar_id":"","url":"https://api.github.com/users/mouse07410","avatar_url":"https://avatars.githubusercontent.com/u/5923577?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","id":813619057,"node_id":"MDExOlB1bGxSZXF1ZXN0NTc3NzM3NjQ3","number":922,"title":"Refactor SHA3 implementations and improve API","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/13","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13/labels","id":6475880,"node_id":"MDk6TWlsZXN0b25lNjQ3NTg4MA==","number":13,"title":"0.5.1 RC1","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":6,"closed_issues":3,"state":"open","created_at":"2021-02-24T18:42:42Z","updated_at":"2021-03-12T02:31:27Z","due_on":"2021-03-19T07:00:00Z","closed_at":null},"comments":6,"created_at":"2021-02-22T15:44:33Z","updated_at":"2021-03-15T17:18:35Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/922","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/922.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/922.patch"},"body":"This is an attempt to restructure our sha3 api to meet the needs of the remaining schemes and avoid code duplication.\r\n\r\nChanges:\r\n* Added a complete four-way parallel shake interface made public through sha3x4.h.  This interface does not require AVX2 instructions. It accepts any implementation of \"Keccak1600P-times4\" from the XKCP low-level interface, and it quietly falls back to a serial implementation using whatever (possibly platform optimized) implementation of Keccak1600P is available. A serial implementation is also used when OpenSSL is enabled.\r\n* Scripted the importing/patching of implementations of the low-level XKCP interface. (scripts will be submitted in a followup commit or pr). The implementations are made available in src/common/sha3/xkcp_low and a suitable implementation is chosen at compile time by src/common/sha3/xkcp_low/CMakeLists.txt.\r\n* Replaced fips202.c, sha3_c.c, and sha3_avx.c with xkcp_sha3.c, which implements sha3.h using the low-level XKCP interface.\r\n* Replaced sha3_x4.c, and sha3x4_avx2.c with xkcp_sha3x4.c, which implements sha3x4.h using the low-level XKCP interface.\r\n* Added ossl_sha3.c and ossl_sha3x4.c which implement sha3.h and sha3x4, including the incremental APIs (#502), using openssl.\r\n* Removed (unused) cshake functions.\r\n* Removed non-incremental shake functions like OQS_SHA3_shake128_absorb, but keep simple shake functions like OQS_SHA3_shake128.\r\n* Added \"sha3_*_ctx_reset\" which re-initializes an already allocated context.\r\n* Changed OQS_SHA3_sha3_*_inc_finalize so that it does not free the context. This allows you to re-use a context with \"reset\".\r\n* Removed Picnic's duplicate sha3 code\r\n* Added a patching mechanism to copy_from_upstream\r\n* Removed SPHINCS's duplicate sha3 code (with copy_from_upstream patch)\r\n* Removed Kyber's duplicate sha3 code (with copy_from_upstream patch)\r\n* Removed Dilithium's duplicate sha3 code (with copy_from_upstream patch)\r\n\r\nIssues:\r\n* OpenSSL does not implement a proper \"squeeze\" function. There's work in progress to fix this (https://github.com/openssl/openssl/pull/7921), but we should not expect it to be available anytime soon. The implementation of the incremental API that I've written is quadratic in the total output length if O(1) bytes are squeezed at a time. This leads to a severe loss of performance for Falcon, so this PR currently turns off OQS_USE_SHA3_OPENSSL even when OQS_USE_OPENSSL is on.\r\n\r\nTODO:\r\n* Import optimized Keccak routines for other architectures and select appropriately at compile time. There are several ARM implementations available. There's also AVX512.\r\n* (Future work) Compile multiple Keccak implementations and select an appropriate one at runtime for \"portable\" builds. \r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/799596499","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922#issuecomment-799596499","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","id":799596499,"node_id":"MDEyOklzc3VlQ29tbWVudDc5OTU5NjQ5OQ==","user":{"login":"mouse07410","id":5923577,"node_id":"MDQ6VXNlcjU5MjM1Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/5923577?v=4","gravatar_id":"","url":"https://api.github.com/users/mouse07410","html_url":"https://github.com/mouse07410","followers_url":"https://api.github.com/users/mouse07410/followers","following_url":"https://api.github.com/users/mouse07410/following{/other_user}","gists_url":"https://api.github.com/users/mouse07410/gists{/gist_id}","starred_url":"https://api.github.com/users/mouse07410/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mouse07410/subscriptions","organizations_url":"https://api.github.com/users/mouse07410/orgs","repos_url":"https://api.github.com/users/mouse07410/repos","events_url":"https://api.github.com/users/mouse07410/events{/privacy}","received_events_url":"https://api.github.com/users/mouse07410/received_events","type":"User","site_admin":false},"created_at":"2021-03-15T17:18:35Z","updated_at":"2021-03-15T17:18:35Z","author_association":"NONE","body":"> @baentsch I found it hard to follow your comment. I understand that you have concerns about the patching mechanism. Could you please separate those concerns from the core question of whether we want to provide a SHA3 interface, like what this PR provides, that eliminates the need for (say) Picnic to bring their own implementations?\r\n\r\nLet me offer my (possibly naïve) view. \r\n1. I think it would be beneficial for this library to offer its own optimized and portable versions of SHA3.\r\n2. I think it makes sense to approach the upstream maintainers and offer them `liboqs` API to SHA3 (this API probably won't differ much from what they have anyway).\r\n3. I doubt `liboqs` maintainers want to take upon themselves any more patching of the upstream code than absolutely necessary. That means, we probably don't want to patch SHA3 for the upstream repos - potentially large pain for likely small gain.\r\n\r\nSo, to answer @jschanck questions (@baentsch can correct where our views diverge):\r\n1. Yes, it would be good for `liboqs` to provide its own SHA3 interface.\r\n2. It does not look attractive (aka, manageable) to patch SHA3 implementations of the upstream vendors.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-15T17:18:35Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15551649404","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/944","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/944/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/944/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/944/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/944","id":831917916,"node_id":"MDExOlB1bGxSZXF1ZXN0NTkzMTYzOTU1","number":944,"title":"Patch mechanism for copy from upstream","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-15T15:19:35Z","updated_at":"2021-03-15T21:42:32Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/944","html_url":"https://github.com/open-quantum-safe/liboqs/pull/944","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/944.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/944.patch"},"body":"Opening this PR for discussion around whether we want a patch mechanism for copy from upstream.\r\n\r\nThis PR contains a functioning patch mechanism. The documentation is here:\r\nhttps://gist.github.com/jschanck/c67d37551da2a5f6e06c640816d2c99f","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/799772020","html_url":"https://github.com/open-quantum-safe/liboqs/pull/944#issuecomment-799772020","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/944","id":799772020,"node_id":"MDEyOklzc3VlQ29tbWVudDc5OTc3MjAyMA==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-03-15T21:42:32Z","updated_at":"2021-03-15T21:42:32Z","author_association":"CONTRIBUTOR","body":"The changes look good to me. It's a useful extension for copy_from_upstream when integrating upstream implementations.\r\n\r\nPerhaps we could briefly describe in https://gist.github.com/jschanck/c67d37551da2a5f6e06c640816d2c99f the alternatives to (big) patches, such as\r\n- Adding shim API (similar to `src/common/pqclean_shims`) to avoid having to patch namespaces, function names and incompatible API. \r\n- Offer the patch to upstream, if it is not only for OQS-internal reasons.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-15T21:42:33Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
