{"id":"15632245225","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/295","id":837206565,"node_id":"MDU6SXNzdWU4MzcyMDY1NjU=","number":295,"title":"Issue when signing with new algorithms","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-21T23:08:27Z","updated_at":"2021-03-22T06:35:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Everybody. I am trying to use the new algorithms in our wrapper library (LibPKI) that builds on top of OpenSSL. One thing I am having difficulties is to understand how to properly use the signing functions. \r\n\r\nSpecifically, I am trying to implement a generic signing function for DER encoded data (PKI_X509_sign(der (data), md (digest algor), evp_pkey) -> signature), and although the same functions work with RSA or ECDSA, they fail when I try with falcon, dilithium, or sphincs+.\r\n\r\nHere's the first code I tried:\r\n\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\n// Initializes the Signature\r\nEVP_SignInit_ex(ctx, md, NULL);\r\nEVP_SignUpdate (ctx, der->data, der->size);\r\n\r\n// Finalizes the signature\r\nif (!EVP_SignFinal(ctx, out_mem->data, (unsigned int *) &ossl_ret, pkey))\r\n{\r\n\tPKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot finalize signature (%s)\", \r\n\t\tHSM_OPENSSL_get_errdesc(HSM_OPENSSL_get_errno(), NULL, 0));\r\n\r\n\tPKI_MEM_free(out_mem);\r\n\tout_mem = NULL;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nI also tried the DigestSign version:\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\nif (!EVP_DigestSignInit(ctx, &pCtx, md, NULL, pkey)) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Initialize EVP_DigestSignInit()\");\r\n    goto err;\r\n}\r\n\r\nif (EVP_DigestSignUpdate(ctx, \r\n                                            der->data,\r\n   \t                                    der->size) <= 0) {\r\n   PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Update EVP_DigestSignUpdate()\");\r\n   goto err;\r\n}\r\n\r\nif (EVP_DigestSignFinal(ctx,\r\n                                        out_mem->data,\r\n                                        &ossl_ret) <= 0) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Finalize EVP_DigestSignFinal()\");\r\n    goto err;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nThe error seems to be related to the digest used (\"md\"). Specifically, if the md is not NULL, the EVP_SignFinal()/EVP_DigestSignFinal() fail with the following error trace:\r\n\r\n```\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:349] Can not create signature (117): Cannot finalize signature (  H??)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 0 bytes (estimated: 690 bytes)]\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [hsm_main.c:614] [PKI_sign()] [DEBUG]: Can not generate signature (returned from sign cb)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [hsm_main.c:541] Can not create signature (117):\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [pki_x509_req.c:222] [PKI_X509_REQ_new()] [DEBUG] REQ::ERROR 0 signing the Request [error:1012F0B1:elliptic curve routines:pkey_oqs_ctrl:wrong digest]\r\n```\r\nI know I am doing something wrong here, but I am not sure what... \r\n\r\nTo probe a bit further, I forced the use of a specific hashing algorithm - since the error was related to that, somehow: md = EVP_sha512(). If I do that, I get a success return code but the signature in the data is all zeroes.\r\n\r\n```\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [pki_x509_req.c:61] [PKI_X509_REQ_new()] [DEBUG]: No Digest Associated with used algorithm\r\nMar 21 22:54:41 2021 GMT [97064] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 690 bytes (estimated: 690 bytes)]\r\n```\r\n\r\nJust to be very precise, when I use the standard apps/ tools (i.e., openssl req -new ...) I am able to generate things correctly.\r\n\r\nAnybody experiencing similar issues and/or know what I might be doing wrong?\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/803801505","html_url":"https://github.com/open-quantum-safe/openssl/issues/295#issuecomment-803801505","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","id":803801505,"node_id":"MDEyOklzc3VlQ29tbWVudDgwMzgwMTUwNQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-22T06:35:20Z","updated_at":"2021-03-22T06:35:20Z","author_association":"MEMBER","body":"Thanks for taking a closer look at this functionality (well, for actually using it :). When building this functionality we (actually, I) never considered library use of this code: If I recall correctly you encounter a limitation intentionally built into the code, namely that it only uses it's own SHA512 digest and not an externally provided one: https://github.com/open-quantum-safe/openssl/blob/f5937740a1272ae3af0bec4c41c80bee3e931825/crypto/ec/oqs_meth.c#L1683-L1699. It also checks for this, too: https://github.com/open-quantum-safe/openssl/blob/f5937740a1272ae3af0bec4c41c80bee3e931825/crypto/ec/oqs_meth.c#L1655-L1658 \r\nI'm not entirely certain I recall the reason for doing it this way (using its own Digest instead of using an externally provided one). It may be as simple as the OpenSSL CMS logic not allocating a proper Digest. You can tell this is pretty dated code with a single purpose in life: Work for OQS-CMS operations. \r\nIf you could share your use case, we could work together to make it operate correctly also under those circumstances. Alternatively, feel free to change the code yourself (all oqs-signing logic is contained in `crypto/ec/oqs_meth.c`) and submit a PR as and when it works for you (and still passes the CI test suite).","performed_via_github_app":null}},"public":true,"created_at":"2021-03-22T06:35:20Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15632512300","type":"IssueCommentEvent","actor":{"id":49699333,"login":"dependabot[bot]","display_login":"dependabot","gravatar_id":"","url":"https://api.github.com/users/dependabot[bot]","avatar_url":"https://avatars.githubusercontent.com/u/49699333?"},"repo":{"id":252143304,"name":"open-quantum-safe/liboqs-rust","url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/41","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/41/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/41/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/41/events","html_url":"https://github.com/open-quantum-safe/liboqs-rust/pull/41","id":831494607,"node_id":"MDExOlB1bGxSZXF1ZXN0NTkyODA2ODE1","number":41,"title":"Bump oqs-sys/liboqs from `af1b14e` to `4b1a9e2`","user":{"login":"dependabot[bot]","id":49699333,"node_id":"MDM6Qm90NDk2OTkzMzM=","avatar_url":"https://avatars.githubusercontent.com/in/29110?v=4","gravatar_id":"","url":"https://api.github.com/users/dependabot%5Bbot%5D","html_url":"https://github.com/apps/dependabot","followers_url":"https://api.github.com/users/dependabot%5Bbot%5D/followers","following_url":"https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dependabot%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/dependabot%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/dependabot%5Bbot%5D/repos","events_url":"https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/dependabot%5Bbot%5D/received_events","type":"Bot","site_admin":false},"labels":[{"id":2730583541,"node_id":"MDU6TGFiZWwyNzMwNTgzNTQx","url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/labels/dependencies","name":"dependencies","color":"0366d6","default":false,"description":"Pull requests that update a dependency file"},{"id":2730584915,"node_id":"MDU6TGFiZWwyNzMwNTg0OTE1","url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/labels/submodules","name":"submodules","color":"000000","default":false,"description":"Pull requests that update Submodules code"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-15T07:07:18Z","updated_at":"2021-03-22T07:04:15Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/pulls/41","html_url":"https://github.com/open-quantum-safe/liboqs-rust/pull/41","diff_url":"https://github.com/open-quantum-safe/liboqs-rust/pull/41.diff","patch_url":"https://github.com/open-quantum-safe/liboqs-rust/pull/41.patch"},"body":"Bumps [oqs-sys/liboqs](https://github.com/Open-Quantum-Safe/liboqs) from `af1b14e` to `4b1a9e2`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/open-quantum-safe/liboqs/commit/4b1a9e23eea28301667a7d4c71caba139ad328a9\"><code>4b1a9e2</code></a> Make OQS_USE_CPU_EXTENSIONS imply OQS_PORTABLE_BUILD=OFF; alternative to <a href=\"https://github.com/Open-Quantum-Safe/liboqs/issues/939\">#939</a>...</li>\n<li><a href=\"https://github.com/open-quantum-safe/liboqs/commit/e116748c50ef3adbbf08f4bc1ad0c18ab8f7b7df\"><code>e116748</code></a> these two example files got moved at some time (<a href=\"https://github.com/Open-Quantum-Safe/liboqs/issues/938\">#938</a>)</li>\n<li><a href=\"https://github.com/open-quantum-safe/liboqs/commit/707750e03488d985938dd119bf3914ba1d065d98\"><code>707750e</code></a> Fix OQS_PORTABLE_BUILD logic for Frodo (<a href=\"https://github.com/Open-Quantum-Safe/liboqs/issues/927\">#927</a>)</li>\n<li><a href=\"https://github.com/open-quantum-safe/liboqs/commit/b5fd8aedfcde030a5f309acb1a2c941f86a149a3\"><code>b5fd8ae</code></a> Resolve some McEliece AVX build issues (<a href=\"https://github.com/Open-Quantum-Safe/liboqs/issues/932\">#932</a>)</li>\n<li><a href=\"https://github.com/open-quantum-safe/liboqs/commit/0ab1d1d95b0d77a5f7db5230f3701dac7daf3406\"><code>0ab1d1d</code></a> Switch to 0.5.1-dev [skip ci]</li>\n<li>See full diff in <a href=\"https://github.com/Open-Quantum-Safe/liboqs/compare/af1b14e7b62bfa4fcc9cf7ed5cf0135bbd743cc4...4b1a9e23eea28301667a7d4c71caba139ad328a9\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/comments/803816487","html_url":"https://github.com/open-quantum-safe/liboqs-rust/pull/41#issuecomment-803816487","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/41","id":803816487,"node_id":"MDEyOklzc3VlQ29tbWVudDgwMzgxNjQ4Nw==","user":{"login":"dependabot[bot]","id":49699333,"node_id":"MDM6Qm90NDk2OTkzMzM=","avatar_url":"https://avatars.githubusercontent.com/in/29110?v=4","gravatar_id":"","url":"https://api.github.com/users/dependabot%5Bbot%5D","html_url":"https://github.com/apps/dependabot","followers_url":"https://api.github.com/users/dependabot%5Bbot%5D/followers","following_url":"https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dependabot%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/dependabot%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/dependabot%5Bbot%5D/repos","events_url":"https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/dependabot%5Bbot%5D/received_events","type":"Bot","site_admin":false},"created_at":"2021-03-22T07:04:15Z","updated_at":"2021-03-22T07:04:15Z","author_association":"CONTRIBUTOR","body":"Superseded by #42.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-22T07:04:15Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15637801487","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","id":813619057,"node_id":"MDExOlB1bGxSZXF1ZXN0NTc3NzM3NjQ3","number":922,"title":"Refactor SHA3 implementations and improve API","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/13","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13/labels","id":6475880,"node_id":"MDk6TWlsZXN0b25lNjQ3NTg4MA==","number":13,"title":"0.5.1 RC1","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":6,"closed_issues":3,"state":"open","created_at":"2021-02-24T18:42:42Z","updated_at":"2021-03-12T02:31:27Z","due_on":"2021-03-19T07:00:00Z","closed_at":null},"comments":11,"created_at":"2021-02-22T15:44:33Z","updated_at":"2021-03-22T13:46:18Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/922","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/922.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/922.patch"},"body":"This is an attempt to restructure our sha3 api to meet the needs of the remaining schemes and avoid code duplication.\r\n\r\nChanges:\r\n* Added a complete four-way parallel shake interface made public through sha3x4.h.  This interface does not require AVX2 instructions. It accepts any implementation of \"Keccak1600P-times4\" from the XKCP low-level interface, and it quietly falls back to a serial implementation using whatever (possibly platform optimized) implementation of Keccak1600P is available. A serial implementation is also used when OpenSSL is enabled.\r\n* Scripted the importing/patching of implementations of the low-level XKCP interface. (scripts will be submitted in a followup commit or pr). The implementations are made available in src/common/sha3/xkcp_low and a suitable implementation is chosen at compile time by src/common/sha3/xkcp_low/CMakeLists.txt.\r\n* Replaced fips202.c, sha3_c.c, and sha3_avx.c with xkcp_sha3.c, which implements sha3.h using the low-level XKCP interface.\r\n* Replaced sha3_x4.c, and sha3x4_avx2.c with xkcp_sha3x4.c, which implements sha3x4.h using the low-level XKCP interface.\r\n* Added ossl_sha3.c and ossl_sha3x4.c which implement sha3.h and sha3x4, including the incremental APIs (#502), using openssl.\r\n* Removed (unused) cshake functions.\r\n* Removed non-incremental shake functions like OQS_SHA3_shake128_absorb, but keep simple shake functions like OQS_SHA3_shake128.\r\n* Added \"sha3_*_ctx_reset\" which re-initializes an already allocated context.\r\n* Changed OQS_SHA3_sha3_*_inc_finalize so that it does not free the context. This allows you to re-use a context with \"reset\".\r\n* Removed Picnic's duplicate sha3 code\r\n\r\n**edit** patching mechanism moved to #944, specific patches to be added later.\r\n* ~~Added a patching mechanism to copy_from_upstream~~\r\n* ~~Removed SPHINCS's duplicate sha3 code (with copy_from_upstream patch)~~\r\n* ~~Removed Kyber's duplicate sha3 code (with copy_from_upstream patch)~~\r\n* ~~Removed Dilithium's duplicate sha3 code (with copy_from_upstream patch)~~\r\n\r\nIssues:\r\n* OpenSSL does not implement a proper \"squeeze\" function. There's work in progress to fix this (https://github.com/openssl/openssl/pull/7921), but we should not expect it to be available anytime soon. The implementation of the incremental API that I've written is quadratic in the total output length if O(1) bytes are squeezed at a time. This leads to a severe loss of performance for Falcon, so this PR currently turns off OQS_USE_SHA3_OPENSSL even when OQS_USE_OPENSSL is on.\r\n\r\nTODO:\r\n* Import optimized Keccak routines for other architectures and select appropriately at compile time. There are several ARM implementations available. There's also AVX512.\r\n* (Future work) Compile multiple Keccak implementations and select an appropriate one at runtime for \"portable\" builds. \r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/804073633","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922#issuecomment-804073633","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","id":804073633,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDA3MzYzMw==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-03-22T13:46:18Z","updated_at":"2021-03-22T13:46:18Z","author_association":"CONTRIBUTOR","body":"> I noticed that xkcp_low does not have SPDX license identification headers. Is this so that those files can be copied from xkcp without changes? If so, that's fine, but then the license section of README.md should be updated to indicate clearly the license(s) that apply to this directory.\r\n\r\nI updated the README. We don't copy directly from xkcp because we need to patch a bunch of undefined behaviour. I've added the scripts that I use to do this patching.\r\n\r\n> As for merging, should I merge to an audit branch first to get the full test suite?\r\nNot worth it. Right now we're only running address sanitizer on audit branches. That's not going to turn up anything new. I could re-enable UBSan, but that's disabled because of #791. This PR no longer includes the patches for Kyber so it no longer fixes #791, so we already know UBSan will fail.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-22T13:46:19Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15638334087","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","id":813619057,"node_id":"MDExOlB1bGxSZXF1ZXN0NTc3NzM3NjQ3","number":922,"title":"Refactor SHA3 implementations and improve API","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/13","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13/labels","id":6475880,"node_id":"MDk6TWlsZXN0b25lNjQ3NTg4MA==","number":13,"title":"0.5.1 RC1","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":6,"closed_issues":3,"state":"open","created_at":"2021-02-24T18:42:42Z","updated_at":"2021-03-12T02:31:27Z","due_on":"2021-03-19T07:00:00Z","closed_at":null},"comments":13,"created_at":"2021-02-22T15:44:33Z","updated_at":"2021-03-22T14:17:10Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/922","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/922.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/922.patch"},"body":"This is an attempt to restructure our sha3 api to meet the needs of the remaining schemes and avoid code duplication.\r\n\r\nChanges:\r\n* Added a complete four-way parallel shake interface made public through sha3x4.h.  This interface does not require AVX2 instructions. It accepts any implementation of \"Keccak1600P-times4\" from the XKCP low-level interface, and it quietly falls back to a serial implementation using whatever (possibly platform optimized) implementation of Keccak1600P is available. A serial implementation is also used when OpenSSL is enabled.\r\n* Scripted the importing/patching of implementations of the low-level XKCP interface. (scripts will be submitted in a followup commit or pr). The implementations are made available in src/common/sha3/xkcp_low and a suitable implementation is chosen at compile time by src/common/sha3/xkcp_low/CMakeLists.txt.\r\n* Replaced fips202.c, sha3_c.c, and sha3_avx.c with xkcp_sha3.c, which implements sha3.h using the low-level XKCP interface.\r\n* Replaced sha3_x4.c, and sha3x4_avx2.c with xkcp_sha3x4.c, which implements sha3x4.h using the low-level XKCP interface.\r\n* Added ossl_sha3.c and ossl_sha3x4.c which implement sha3.h and sha3x4, including the incremental APIs (#502), using openssl.\r\n* Removed (unused) cshake functions.\r\n* Removed non-incremental shake functions like OQS_SHA3_shake128_absorb, but keep simple shake functions like OQS_SHA3_shake128.\r\n* Added \"sha3_*_ctx_reset\" which re-initializes an already allocated context.\r\n* Changed OQS_SHA3_sha3_*_inc_finalize so that it does not free the context. This allows you to re-use a context with \"reset\".\r\n* Removed Picnic's duplicate sha3 code\r\n\r\n**edit** patching mechanism moved to #944, specific patches to be added later.\r\n* ~~Added a patching mechanism to copy_from_upstream~~\r\n* ~~Removed SPHINCS's duplicate sha3 code (with copy_from_upstream patch)~~\r\n* ~~Removed Kyber's duplicate sha3 code (with copy_from_upstream patch)~~\r\n* ~~Removed Dilithium's duplicate sha3 code (with copy_from_upstream patch)~~\r\n\r\nIssues:\r\n* OpenSSL does not implement a proper \"squeeze\" function. There's work in progress to fix this (https://github.com/openssl/openssl/pull/7921), but we should not expect it to be available anytime soon. The implementation of the incremental API that I've written is quadratic in the total output length if O(1) bytes are squeezed at a time. This leads to a severe loss of performance for Falcon, so this PR currently turns off OQS_USE_SHA3_OPENSSL even when OQS_USE_OPENSSL is on.\r\n\r\nTODO:\r\n* Import optimized Keccak routines for other architectures and select appropriately at compile time. There are several ARM implementations available. There's also AVX512.\r\n* (Future work) Compile multiple Keccak implementations and select an appropriate one at runtime for \"portable\" builds. \r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/804097815","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922#issuecomment-804097815","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","id":804097815,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDA5NzgxNQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-22T14:17:10Z","updated_at":"2021-03-22T14:17:10Z","author_association":"MEMBER","body":"> Not worth it. Right now we're only running address sanitizer on audit branches. That's not going to turn up anything new. I could re-enable UBSan, but that's disabled because of #791. This PR no longer includes the patches for Kyber so it no longer fixes #791, so we already know UBSan will fail.\r\n\r\nWasn't (the by now merged) #891 meant to provide a fix for #791 ? Did I [misunderstand this statement](https://github.com/open-quantum-safe/liboqs/issues/791#issuecomment-772431186)?","performed_via_github_app":null}},"public":true,"created_at":"2021-03-22T14:17:10Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15638437934","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","id":813619057,"node_id":"MDExOlB1bGxSZXF1ZXN0NTc3NzM3NjQ3","number":922,"title":"Refactor SHA3 implementations and improve API","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/13","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13/labels","id":6475880,"node_id":"MDk6TWlsZXN0b25lNjQ3NTg4MA==","number":13,"title":"0.5.1 RC1","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":6,"closed_issues":3,"state":"open","created_at":"2021-02-24T18:42:42Z","updated_at":"2021-03-12T02:31:27Z","due_on":"2021-03-19T07:00:00Z","closed_at":null},"comments":13,"created_at":"2021-02-22T15:44:33Z","updated_at":"2021-03-22T14:22:56Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/922","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/922.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/922.patch"},"body":"This is an attempt to restructure our sha3 api to meet the needs of the remaining schemes and avoid code duplication.\r\n\r\nChanges:\r\n* Added a complete four-way parallel shake interface made public through sha3x4.h.  This interface does not require AVX2 instructions. It accepts any implementation of \"Keccak1600P-times4\" from the XKCP low-level interface, and it quietly falls back to a serial implementation using whatever (possibly platform optimized) implementation of Keccak1600P is available. A serial implementation is also used when OpenSSL is enabled.\r\n* Scripted the importing/patching of implementations of the low-level XKCP interface. (scripts will be submitted in a followup commit or pr). The implementations are made available in src/common/sha3/xkcp_low and a suitable implementation is chosen at compile time by src/common/sha3/xkcp_low/CMakeLists.txt.\r\n* Replaced fips202.c, sha3_c.c, and sha3_avx.c with xkcp_sha3.c, which implements sha3.h using the low-level XKCP interface.\r\n* Replaced sha3_x4.c, and sha3x4_avx2.c with xkcp_sha3x4.c, which implements sha3x4.h using the low-level XKCP interface.\r\n* Added ossl_sha3.c and ossl_sha3x4.c which implement sha3.h and sha3x4, including the incremental APIs (#502), using openssl.\r\n* Removed (unused) cshake functions.\r\n* Removed non-incremental shake functions like OQS_SHA3_shake128_absorb, but keep simple shake functions like OQS_SHA3_shake128.\r\n* Added \"sha3_*_ctx_reset\" which re-initializes an already allocated context.\r\n* Changed OQS_SHA3_sha3_*_inc_finalize so that it does not free the context. This allows you to re-use a context with \"reset\".\r\n* Removed Picnic's duplicate sha3 code\r\n\r\n**edit** patching mechanism moved to #944, specific patches to be added later.\r\n* ~~Added a patching mechanism to copy_from_upstream~~\r\n* ~~Removed SPHINCS's duplicate sha3 code (with copy_from_upstream patch)~~\r\n* ~~Removed Kyber's duplicate sha3 code (with copy_from_upstream patch)~~\r\n* ~~Removed Dilithium's duplicate sha3 code (with copy_from_upstream patch)~~\r\n\r\nIssues:\r\n* OpenSSL does not implement a proper \"squeeze\" function. There's work in progress to fix this (https://github.com/openssl/openssl/pull/7921), but we should not expect it to be available anytime soon. The implementation of the incremental API that I've written is quadratic in the total output length if O(1) bytes are squeezed at a time. This leads to a severe loss of performance for Falcon, so this PR currently turns off OQS_USE_SHA3_OPENSSL even when OQS_USE_OPENSSL is on.\r\n\r\nTODO:\r\n* Import optimized Keccak routines for other architectures and select appropriately at compile time. There are several ARM implementations available. There's also AVX512.\r\n* (Future work) Compile multiple Keccak implementations and select an appropriate one at runtime for \"portable\" builds. \r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/804102332","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922#issuecomment-804102332","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","id":804102332,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDEwMjMzMg==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-03-22T14:22:56Z","updated_at":"2021-03-22T14:22:56Z","author_association":"CONTRIBUTOR","body":"> Wasn't (the by now merged) #891 meant to provide a fix for #791 ? Did I [misunderstand this statement](https://github.com/open-quantum-safe/liboqs/issues/791#issuecomment-772431186)?\r\n\r\nAh right, #891 \"fixed\" #791 because some global variables got properly aligned by chance. This \"fix\" could break with a compiler update, but #791 is no longer reproducible.\r\n\r\nSo we could re-enable UBSan and it might pass.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-22T14:22:56Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15640271509","type":"IssueCommentEvent","actor":{"id":7943812,"login":"opencrypto","display_login":"opencrypto","gravatar_id":"","url":"https://api.github.com/users/opencrypto","avatar_url":"https://avatars.githubusercontent.com/u/7943812?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/295","id":837206565,"node_id":"MDU6SXNzdWU4MzcyMDY1NjU=","number":295,"title":"Issue when signing with new algorithms","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-03-21T23:08:27Z","updated_at":"2021-03-22T16:12:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Everybody. I am trying to use the new algorithms in our wrapper library (LibPKI) that builds on top of OpenSSL. One thing I am having difficulties is to understand how to properly use the signing functions. \r\n\r\nSpecifically, I am trying to implement a generic signing function for DER encoded data (PKI_X509_sign(der (data), md (digest algor), evp_pkey) -> signature), and although the same functions work with RSA or ECDSA, they fail when I try with falcon, dilithium, or sphincs+.\r\n\r\nHere's the first code I tried:\r\n\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\n// Initializes the Signature\r\nEVP_SignInit_ex(ctx, md, NULL);\r\nEVP_SignUpdate (ctx, der->data, der->size);\r\n\r\n// Finalizes the signature\r\nif (!EVP_SignFinal(ctx, out_mem->data, (unsigned int *) &ossl_ret, pkey))\r\n{\r\n\tPKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot finalize signature (%s)\", \r\n\t\tHSM_OPENSSL_get_errdesc(HSM_OPENSSL_get_errno(), NULL, 0));\r\n\r\n\tPKI_MEM_free(out_mem);\r\n\tout_mem = NULL;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nI also tried the DigestSign version:\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\nif (!EVP_DigestSignInit(ctx, &pCtx, md, NULL, pkey)) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Initialize EVP_DigestSignInit()\");\r\n    goto err;\r\n}\r\n\r\nif (EVP_DigestSignUpdate(ctx, \r\n                                            der->data,\r\n   \t                                    der->size) <= 0) {\r\n   PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Update EVP_DigestSignUpdate()\");\r\n   goto err;\r\n}\r\n\r\nif (EVP_DigestSignFinal(ctx,\r\n                                        out_mem->data,\r\n                                        &ossl_ret) <= 0) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Finalize EVP_DigestSignFinal()\");\r\n    goto err;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nThe error seems to be related to the digest used (\"md\"). Specifically, if the md is not NULL, the EVP_SignFinal()/EVP_DigestSignFinal() fail with the following error trace:\r\n\r\n```\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:349] Can not create signature (117): Cannot finalize signature (  H??)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 0 bytes (estimated: 690 bytes)]\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [hsm_main.c:614] [PKI_sign()] [DEBUG]: Can not generate signature (returned from sign cb)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [hsm_main.c:541] Can not create signature (117):\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [pki_x509_req.c:222] [PKI_X509_REQ_new()] [DEBUG] REQ::ERROR 0 signing the Request [error:1012F0B1:elliptic curve routines:pkey_oqs_ctrl:wrong digest]\r\n```\r\nI know I am doing something wrong here, but I am not sure what... \r\n\r\nTo probe a bit further, I forced the use of a specific hashing algorithm - since the error was related to that, somehow: md = EVP_sha512(). If I do that, I get a success return code but the signature in the data is all zeroes.\r\n\r\n```\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [pki_x509_req.c:61] [PKI_X509_REQ_new()] [DEBUG]: No Digest Associated with used algorithm\r\nMar 21 22:54:41 2021 GMT [97064] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 690 bytes (estimated: 690 bytes)]\r\n```\r\n\r\nJust to be very precise, when I use the standard apps/ tools (i.e., openssl req -new ...) I am able to generate things correctly.\r\n\r\nAnybody experiencing similar issues and/or know what I might be doing wrong?\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/804195283","html_url":"https://github.com/open-quantum-safe/openssl/issues/295#issuecomment-804195283","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","id":804195283,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDE5NTI4Mw==","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"created_at":"2021-03-22T16:12:46Z","updated_at":"2021-03-22T16:12:46Z","author_association":"NONE","body":"First of all - **let me THANK YOU and the WHOLE TEAM for this project**. I think it is a very important project for the future of our security: being able to work with these new algorithms (even if for testing) it is paramount to get engineers acquainted with the technology and start understanding the deployment paradigm that fit your use-case and industry!\r\n\r\nMy use-case is quite simple in this case - I just want to be able to sign some already-encoded data (e.g., the tbs structure of a certificate or a csr) :D I am not trying to use the CMS interface but by using the more generic EVP_ one.\r\n\r\nIt was a bit difficult trying to understand the crypto/ec logic - and I was wondering why the functions in the ec/ directory were called :D I know that because of the way OpenSSL is structured (I have been using/contributing since the times of SSLEay), it is a bit difficult to properly set the X509_ALGOR in the structure independently from the signing (since the decoupling of hash algos from the signing one in the library) but that is what we are trying to do to be able to have \"swappable\" (as much as possible) crypto libraries implementations.\r\n\r\nSpecifically, because of the original attempt at LibPKI to provide a high-level abstraction on top of crypto libraries, we implemented a mechanism that we use to pass the data to be signed already DER encoded to the specific library to generate a signature.\r\n\r\nFor that, we have the `PKI_X509_sign(data, data_len, pkey)` that dispatches to the different \"drivers\" (i.e., openssl-software, openssl-engine, pkcs11, etc.) based on a callback architecture. In the callback, I use the code I posted here to sign anything ... CRLs, Certificates, OCSP Responses... anything.\r\n\r\n**_What would be the right way to use the library for that?_**\r\n\r\nI say this because while checking the link for the **oqs_int_update()** I see the ones before **pkey_oqs_sign_init()** and pkey_oqs_sign() **_being empty but returning_** (1) (OK) - I think that might be an issue as they are used as the callback functions for the method. I also see, instead, the '*ctx' versions to actually contain working code... and I am wondering, was this because of lack of time or there are issues in implementing the first set of calls?\r\n\r\nSince the usual openssl's apps code work, I hoped the code work simply work too :D But I guess there are specific patterns we need to adopt at this time (we do appreciate the difficulties and we hope to be able to help as much as we can, but we also need to get some signatures working first :D ).\r\n\r\nI will try to look into the init code and see if I can re-use some of those techniques, however it would be useful to try to document these limitations (my current resources in terms of time are very limited so our contributions might take quite sometime).\r\n\r\nAny suggestion for how to solve the DigestSign/Sign issue?","performed_via_github_app":null}},"public":true,"created_at":"2021-03-22T16:12:47Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15640812832","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/295","id":837206565,"node_id":"MDU6SXNzdWU4MzcyMDY1NjU=","number":295,"title":"Issue when signing with new algorithms","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-03-21T23:08:27Z","updated_at":"2021-03-22T16:40:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Everybody. I am trying to use the new algorithms in our wrapper library (LibPKI) that builds on top of OpenSSL. One thing I am having difficulties is to understand how to properly use the signing functions. \r\n\r\nSpecifically, I am trying to implement a generic signing function for DER encoded data (PKI_X509_sign(der (data), md (digest algor), evp_pkey) -> signature), and although the same functions work with RSA or ECDSA, they fail when I try with falcon, dilithium, or sphincs+.\r\n\r\nHere's the first code I tried:\r\n\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\n// Initializes the Signature\r\nEVP_SignInit_ex(ctx, md, NULL);\r\nEVP_SignUpdate (ctx, der->data, der->size);\r\n\r\n// Finalizes the signature\r\nif (!EVP_SignFinal(ctx, out_mem->data, (unsigned int *) &ossl_ret, pkey))\r\n{\r\n\tPKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot finalize signature (%s)\", \r\n\t\tHSM_OPENSSL_get_errdesc(HSM_OPENSSL_get_errno(), NULL, 0));\r\n\r\n\tPKI_MEM_free(out_mem);\r\n\tout_mem = NULL;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nI also tried the DigestSign version:\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\nif (!EVP_DigestSignInit(ctx, &pCtx, md, NULL, pkey)) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Initialize EVP_DigestSignInit()\");\r\n    goto err;\r\n}\r\n\r\nif (EVP_DigestSignUpdate(ctx, \r\n                                            der->data,\r\n   \t                                    der->size) <= 0) {\r\n   PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Update EVP_DigestSignUpdate()\");\r\n   goto err;\r\n}\r\n\r\nif (EVP_DigestSignFinal(ctx,\r\n                                        out_mem->data,\r\n                                        &ossl_ret) <= 0) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Finalize EVP_DigestSignFinal()\");\r\n    goto err;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nThe error seems to be related to the digest used (\"md\"). Specifically, if the md is not NULL, the EVP_SignFinal()/EVP_DigestSignFinal() fail with the following error trace:\r\n\r\n```\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:349] Can not create signature (117): Cannot finalize signature (  H??)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 0 bytes (estimated: 690 bytes)]\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [hsm_main.c:614] [PKI_sign()] [DEBUG]: Can not generate signature (returned from sign cb)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [hsm_main.c:541] Can not create signature (117):\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [pki_x509_req.c:222] [PKI_X509_REQ_new()] [DEBUG] REQ::ERROR 0 signing the Request [error:1012F0B1:elliptic curve routines:pkey_oqs_ctrl:wrong digest]\r\n```\r\nI know I am doing something wrong here, but I am not sure what... \r\n\r\nTo probe a bit further, I forced the use of a specific hashing algorithm - since the error was related to that, somehow: md = EVP_sha512(). If I do that, I get a success return code but the signature in the data is all zeroes.\r\n\r\n```\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [pki_x509_req.c:61] [PKI_X509_REQ_new()] [DEBUG]: No Digest Associated with used algorithm\r\nMar 21 22:54:41 2021 GMT [97064] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 690 bytes (estimated: 690 bytes)]\r\n```\r\n\r\nJust to be very precise, when I use the standard apps/ tools (i.e., openssl req -new ...) I am able to generate things correctly.\r\n\r\nAnybody experiencing similar issues and/or know what I might be doing wrong?\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/804216758","html_url":"https://github.com/open-quantum-safe/openssl/issues/295#issuecomment-804216758","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","id":804216758,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDIxNjc1OA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-03-22T16:40:43Z","updated_at":"2021-03-22T16:40:43Z","author_association":"MEMBER","body":"Thanks for the additional background.\r\n\r\n> I am not trying to use the CMS interface but by using the more generic EVP_ one.\r\n\r\nWell, then we may have a problem: The OQSSIG algs on oqs_meth.c have been explicitly created to support CMS; Fully supporting EVP APIs never was a goal (as you may tell from us somewhat (ab)using the \"EC\" code base to \"sneak in\" QSC).\r\n\r\n> what we are trying to do to be able to have \"swappable\" (as much as possible) crypto libraries implementations.\r\n\r\nThat rings a big bell: We're working in the [oqsprovider](https://github.com/open-quantum-safe/oqs-provider) subproject on a way to cleanly make OQS algs accessible via the OSSL3.0 provider concept (EVP and all) such as to not \"tweak\" base OpenSSL internals as in our OQS-OpenSSL111 fork.\r\n\r\n> Any suggestion for how to solve the DigestSign/Sign issue?\r\n\r\nI'm sorry but I don't understand which issue you mean exactly? For example, I'm at a loss as to where/how `pkey` in your code has been created. But again, a generic EVP-OQS API has not been our goal and things may or may not work depending on what is tried.\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-03-22T16:40:44Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15641429627","type":"IssueCommentEvent","actor":{"id":75671533,"login":"IsTyping","display_login":"IsTyping","gravatar_id":"","url":"https://api.github.com/users/IsTyping","avatar_url":"https://avatars.githubusercontent.com/u/75671533?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/294","id":836797345,"node_id":"MDU6SXNzdWU4MzY3OTczNDU=","number":294,"title":"cannot generate self-signed root CA certificate","user":{"login":"IsTyping","id":75671533,"node_id":"MDQ6VXNlcjc1NjcxNTMz","avatar_url":"https://avatars.githubusercontent.com/u/75671533?v=4","gravatar_id":"","url":"https://api.github.com/users/IsTyping","html_url":"https://github.com/IsTyping","followers_url":"https://api.github.com/users/IsTyping/followers","following_url":"https://api.github.com/users/IsTyping/following{/other_user}","gists_url":"https://api.github.com/users/IsTyping/gists{/gist_id}","starred_url":"https://api.github.com/users/IsTyping/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IsTyping/subscriptions","organizations_url":"https://api.github.com/users/IsTyping/orgs","repos_url":"https://api.github.com/users/IsTyping/repos","events_url":"https://api.github.com/users/IsTyping/events{/privacy}","received_events_url":"https://api.github.com/users/IsTyping/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-03-20T12:32:19Z","updated_at":"2021-03-22T17:21:27Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm starting the TLS demmo on Ubuntu 18 with a shared library set up and these default algorithms announced: -DOQS_DEFAULT_GROUPS=\\\"CRYSTALS-kyber:FRODO:SABER\\\" . \r\nI try to generate the self signed certificate from my openssl-1.1.1 main directory with:\r\n\r\n`apps/openssl req -x509 -new -newkey kyber512 -keyout kyber512_CA.key -out kyber512_CA.crt -nodes -subj \"/CN=oqstest CA\" -days 365 -config apps/openssl.cnf`\r\n\r\nI get this error:\r\n\r\n`Can't load /root/.rnd into RNG\r\n140383120265664:error:2406F079:random number generator:RAND_load_file:Cannot open file:crypto/rand/randfile.c:88:Filename=/root/.rnd\r\nUnknown algorithm kyber512`\r\n\r\nThere is no such file /root/.rnd. \r\nIf I try the ECDSA certificate example I get the same error but instead of unknown algorithm it generates EC private key. \r\nI've followed quick start several times but cannot see where I've gone wrong.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/804248011","html_url":"https://github.com/open-quantum-safe/openssl/issues/294#issuecomment-804248011","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/294","id":804248011,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDI0ODAxMQ==","user":{"login":"IsTyping","id":75671533,"node_id":"MDQ6VXNlcjc1NjcxNTMz","avatar_url":"https://avatars.githubusercontent.com/u/75671533?v=4","gravatar_id":"","url":"https://api.github.com/users/IsTyping","html_url":"https://github.com/IsTyping","followers_url":"https://api.github.com/users/IsTyping/followers","following_url":"https://api.github.com/users/IsTyping/following{/other_user}","gists_url":"https://api.github.com/users/IsTyping/gists{/gist_id}","starred_url":"https://api.github.com/users/IsTyping/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IsTyping/subscriptions","organizations_url":"https://api.github.com/users/IsTyping/orgs","repos_url":"https://api.github.com/users/IsTyping/repos","events_url":"https://api.github.com/users/IsTyping/events{/privacy}","received_events_url":"https://api.github.com/users/IsTyping/received_events","type":"User","site_admin":false},"created_at":"2021-03-22T17:21:27Z","updated_at":"2021-03-22T17:21:27Z","author_association":"NONE","body":"Many thanks for your quick reply! I have tried all the oqs_sig_default* authentication algorithms which, include those suggested by opencrypto but receive the same error. \r\n\r\nAfter creating the ecdsa example root cert with the above error. If I try to generate the server cert I receive the error: `Algorithm ecdsa not found` or for ec:<(apps/openssl ecparam -name secp3841r1) `Algorithm ec:/dev/fd/63 not found. \r\n\r\nI wonder if an old binary or link to openssl-1.1.1g could be causing me problems, as I updated to openssl-1.1.1 before beginning quick-start steps. ","performed_via_github_app":null}},"public":true,"created_at":"2021-03-22T17:21:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15642115494","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","id":813619057,"node_id":"MDExOlB1bGxSZXF1ZXN0NTc3NzM3NjQ3","number":922,"title":"Refactor SHA3 implementations and improve API","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/13","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13/labels","id":6475880,"node_id":"MDk6TWlsZXN0b25lNjQ3NTg4MA==","number":13,"title":"0.5.1 RC1","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":6,"closed_issues":3,"state":"open","created_at":"2021-02-24T18:42:42Z","updated_at":"2021-03-12T02:31:27Z","due_on":"2021-03-19T07:00:00Z","closed_at":null},"comments":15,"created_at":"2021-02-22T15:44:33Z","updated_at":"2021-03-22T18:04:59Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/922","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/922.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/922.patch"},"body":"This is an attempt to restructure our sha3 api to meet the needs of the remaining schemes and avoid code duplication.\r\n\r\nChanges:\r\n* Added a complete four-way parallel shake interface made public through sha3x4.h.  This interface does not require AVX2 instructions. It accepts any implementation of \"Keccak1600P-times4\" from the XKCP low-level interface, and it quietly falls back to a serial implementation using whatever (possibly platform optimized) implementation of Keccak1600P is available. A serial implementation is also used when OpenSSL is enabled.\r\n* Scripted the importing/patching of implementations of the low-level XKCP interface. (scripts will be submitted in a followup commit or pr). The implementations are made available in src/common/sha3/xkcp_low and a suitable implementation is chosen at compile time by src/common/sha3/xkcp_low/CMakeLists.txt.\r\n* Replaced fips202.c, sha3_c.c, and sha3_avx.c with xkcp_sha3.c, which implements sha3.h using the low-level XKCP interface.\r\n* Replaced sha3_x4.c, and sha3x4_avx2.c with xkcp_sha3x4.c, which implements sha3x4.h using the low-level XKCP interface.\r\n* Added ossl_sha3.c and ossl_sha3x4.c which implement sha3.h and sha3x4, including the incremental APIs (#502), using openssl.\r\n* Removed (unused) cshake functions.\r\n* Removed non-incremental shake functions like OQS_SHA3_shake128_absorb, but keep simple shake functions like OQS_SHA3_shake128.\r\n* Added \"sha3_*_ctx_reset\" which re-initializes an already allocated context.\r\n* Changed OQS_SHA3_sha3_*_inc_finalize so that it does not free the context. This allows you to re-use a context with \"reset\".\r\n* Removed Picnic's duplicate sha3 code\r\n\r\n**edit** patching mechanism moved to #944, specific patches to be added later.\r\n* ~~Added a patching mechanism to copy_from_upstream~~\r\n* ~~Removed SPHINCS's duplicate sha3 code (with copy_from_upstream patch)~~\r\n* ~~Removed Kyber's duplicate sha3 code (with copy_from_upstream patch)~~\r\n* ~~Removed Dilithium's duplicate sha3 code (with copy_from_upstream patch)~~\r\n\r\nIssues:\r\n* OpenSSL does not implement a proper \"squeeze\" function. There's work in progress to fix this (https://github.com/openssl/openssl/pull/7921), but we should not expect it to be available anytime soon. The implementation of the incremental API that I've written is quadratic in the total output length if O(1) bytes are squeezed at a time. This leads to a severe loss of performance for Falcon, so this PR currently turns off OQS_USE_SHA3_OPENSSL even when OQS_USE_OPENSSL is on.\r\n\r\nTODO:\r\n* Import optimized Keccak routines for other architectures and select appropriately at compile time. There are several ARM implementations available. There's also AVX512.\r\n* (Future work) Compile multiple Keccak implementations and select an appropriate one at runtime for \"portable\" builds. \r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/804278183","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922#issuecomment-804278183","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","id":804278183,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDI3ODE4Mw==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-03-22T18:04:59Z","updated_at":"2021-03-22T18:04:59Z","author_association":"CONTRIBUTOR","body":"I pushed to audit.sha3 and circleci started a run. Results will be here: https://app.circleci.com/pipelines/github/open-quantum-safe/liboqs/1341/workflows/7ff9763a-030a-4521-8159-30f81fc92e6e","performed_via_github_app":null}},"public":true,"created_at":"2021-03-22T18:04:59Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15642913224","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","id":813619057,"node_id":"MDExOlB1bGxSZXF1ZXN0NTc3NzM3NjQ3","number":922,"title":"Refactor SHA3 implementations and improve API","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/13","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13/labels","id":6475880,"node_id":"MDk6TWlsZXN0b25lNjQ3NTg4MA==","number":13,"title":"0.5.1 RC1","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":6,"closed_issues":3,"state":"open","created_at":"2021-02-24T18:42:42Z","updated_at":"2021-03-12T02:31:27Z","due_on":"2021-03-19T07:00:00Z","closed_at":null},"comments":15,"created_at":"2021-02-22T15:44:33Z","updated_at":"2021-03-22T19:03:21Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/922","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/922.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/922.patch"},"body":"This is an attempt to restructure our sha3 api to meet the needs of the remaining schemes and avoid code duplication.\r\n\r\nChanges:\r\n* Added a complete four-way parallel shake interface made public through sha3x4.h.  This interface does not require AVX2 instructions. It accepts any implementation of \"Keccak1600P-times4\" from the XKCP low-level interface, and it quietly falls back to a serial implementation using whatever (possibly platform optimized) implementation of Keccak1600P is available. A serial implementation is also used when OpenSSL is enabled.\r\n* Scripted the importing/patching of implementations of the low-level XKCP interface. (scripts will be submitted in a followup commit or pr). The implementations are made available in src/common/sha3/xkcp_low and a suitable implementation is chosen at compile time by src/common/sha3/xkcp_low/CMakeLists.txt.\r\n* Replaced fips202.c, sha3_c.c, and sha3_avx.c with xkcp_sha3.c, which implements sha3.h using the low-level XKCP interface.\r\n* Replaced sha3_x4.c, and sha3x4_avx2.c with xkcp_sha3x4.c, which implements sha3x4.h using the low-level XKCP interface.\r\n* Added ossl_sha3.c and ossl_sha3x4.c which implement sha3.h and sha3x4, including the incremental APIs (#502), using openssl.\r\n* Removed (unused) cshake functions.\r\n* Removed non-incremental shake functions like OQS_SHA3_shake128_absorb, but keep simple shake functions like OQS_SHA3_shake128.\r\n* Added \"sha3_*_ctx_reset\" which re-initializes an already allocated context.\r\n* Changed OQS_SHA3_sha3_*_inc_finalize so that it does not free the context. This allows you to re-use a context with \"reset\".\r\n* Removed Picnic's duplicate sha3 code\r\n\r\n**edit** patching mechanism moved to #944, specific patches to be added later.\r\n* ~~Added a patching mechanism to copy_from_upstream~~\r\n* ~~Removed SPHINCS's duplicate sha3 code (with copy_from_upstream patch)~~\r\n* ~~Removed Kyber's duplicate sha3 code (with copy_from_upstream patch)~~\r\n* ~~Removed Dilithium's duplicate sha3 code (with copy_from_upstream patch)~~\r\n\r\nIssues:\r\n* OpenSSL does not implement a proper \"squeeze\" function. There's work in progress to fix this (https://github.com/openssl/openssl/pull/7921), but we should not expect it to be available anytime soon. The implementation of the incremental API that I've written is quadratic in the total output length if O(1) bytes are squeezed at a time. This leads to a severe loss of performance for Falcon, so this PR currently turns off OQS_USE_SHA3_OPENSSL even when OQS_USE_OPENSSL is on.\r\n\r\nTODO:\r\n* Import optimized Keccak routines for other architectures and select appropriately at compile time. There are several ARM implementations available. There's also AVX512.\r\n* (Future work) Compile multiple Keccak implementations and select an appropriate one at runtime for \"portable\" builds. \r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/804317522","html_url":"https://github.com/open-quantum-safe/liboqs/pull/922#issuecomment-804317522","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/922","id":804317522,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDMxNzUyMg==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-03-22T19:03:21Z","updated_at":"2021-03-22T19:03:21Z","author_association":"CONTRIBUTOR","body":"Address sanitizer passed on audit branch. UBSan failed because of unrelated (and recently fixed https://github.com/microsoft/PQCrypto-SIDH/commit/67981447d36dfdcfc849d8d88963f727a31ba772) UB in SIKE.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-22T19:03:21Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15645308509","type":"IssueCommentEvent","actor":{"id":7943812,"login":"opencrypto","display_login":"opencrypto","gravatar_id":"","url":"https://api.github.com/users/opencrypto","avatar_url":"https://avatars.githubusercontent.com/u/7943812?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/295","id":837206565,"node_id":"MDU6SXNzdWU4MzcyMDY1NjU=","number":295,"title":"Issue when signing with new algorithms","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-03-21T23:08:27Z","updated_at":"2021-03-22T22:30:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Everybody. I am trying to use the new algorithms in our wrapper library (LibPKI) that builds on top of OpenSSL. One thing I am having difficulties is to understand how to properly use the signing functions. \r\n\r\nSpecifically, I am trying to implement a generic signing function for DER encoded data (PKI_X509_sign(der (data), md (digest algor), evp_pkey) -> signature), and although the same functions work with RSA or ECDSA, they fail when I try with falcon, dilithium, or sphincs+.\r\n\r\nHere's the first code I tried:\r\n\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\n// Initializes the Signature\r\nEVP_SignInit_ex(ctx, md, NULL);\r\nEVP_SignUpdate (ctx, der->data, der->size);\r\n\r\n// Finalizes the signature\r\nif (!EVP_SignFinal(ctx, out_mem->data, (unsigned int *) &ossl_ret, pkey))\r\n{\r\n\tPKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot finalize signature (%s)\", \r\n\t\tHSM_OPENSSL_get_errdesc(HSM_OPENSSL_get_errno(), NULL, 0));\r\n\r\n\tPKI_MEM_free(out_mem);\r\n\tout_mem = NULL;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nI also tried the DigestSign version:\r\n```\r\n// Creates the context\r\nif ((ctx = EVP_MD_CTX_create()) == NULL) {\r\n\tPKI_ERROR(PKI_ERR_MEMORY_ALLOC, NULL);\r\n\tif (out_mem) PKI_MEM_free(out_mem);\r\n\treturn NULL;\r\n}\r\n\r\n// Initializes the Context\r\nEVP_MD_CTX_init(ctx);\r\n\r\nif (!EVP_DigestSignInit(ctx, &pCtx, md, NULL, pkey)) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Initialize EVP_DigestSignInit()\");\r\n    goto err;\r\n}\r\n\r\nif (EVP_DigestSignUpdate(ctx, \r\n                                            der->data,\r\n   \t                                    der->size) <= 0) {\r\n   PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Update EVP_DigestSignUpdate()\");\r\n   goto err;\r\n}\r\n\r\nif (EVP_DigestSignFinal(ctx,\r\n                                        out_mem->data,\r\n                                        &ossl_ret) <= 0) {\r\n    PKI_ERROR(PKI_ERR_SIGNATURE_CREATE, \"Cannot Finalize EVP_DigestSignFinal()\");\r\n    goto err;\r\n}\r\nelse out_mem->size = (size_t) ossl_ret;\r\n```\r\nThe error seems to be related to the digest used (\"md\"). Specifically, if the md is not NULL, the EVP_SignFinal()/EVP_DigestSignFinal() fail with the following error trace:\r\n\r\n```\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:349] Can not create signature (117): Cannot finalize signature (  H??)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 0 bytes (estimated: 690 bytes)]\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [hsm_main.c:614] [PKI_sign()] [DEBUG]: Can not generate signature (returned from sign cb)\r\nMar 21 22:48:28 2021 GMT [91455] ERROR: [hsm_main.c:541] Can not create signature (117):\r\nMar 21 22:48:28 2021 GMT [91455] INFO: [pki_x509_req.c:222] [PKI_X509_REQ_new()] [DEBUG] REQ::ERROR 0 signing the Request [error:1012F0B1:elliptic curve routines:pkey_oqs_ctrl:wrong digest]\r\n```\r\nI know I am doing something wrong here, but I am not sure what... \r\n\r\nTo probe a bit further, I forced the use of a specific hashing algorithm - since the error was related to that, somehow: md = EVP_sha512(). If I do that, I get a success return code but the signature in the data is all zeroes.\r\n\r\n```\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [pki_x509_req.c:61] [PKI_X509_REQ_new()] [DEBUG]: No Digest Associated with used algorithm\r\nMar 21 22:54:41 2021 GMT [97064] ERROR: [openssl_hsm.c:392] [HSM_OPENSSL_sign()] [ERROR] PKEY Type => 1294, falcon512\r\nMar 21 22:54:41 2021 GMT [97064] INFO: [openssl_hsm.c:395] [HSM_OPENSSL_sign()] [DEBUG]: [Signature Generated: 690 bytes (estimated: 690 bytes)]\r\n```\r\n\r\nJust to be very precise, when I use the standard apps/ tools (i.e., openssl req -new ...) I am able to generate things correctly.\r\n\r\nAnybody experiencing similar issues and/or know what I might be doing wrong?\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/804438888","html_url":"https://github.com/open-quantum-safe/openssl/issues/295#issuecomment-804438888","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/295","id":804438888,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDQzODg4OA==","user":{"login":"opencrypto","id":7943812,"node_id":"MDQ6VXNlcjc5NDM4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7943812?v=4","gravatar_id":"","url":"https://api.github.com/users/opencrypto","html_url":"https://github.com/opencrypto","followers_url":"https://api.github.com/users/opencrypto/followers","following_url":"https://api.github.com/users/opencrypto/following{/other_user}","gists_url":"https://api.github.com/users/opencrypto/gists{/gist_id}","starred_url":"https://api.github.com/users/opencrypto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/opencrypto/subscriptions","organizations_url":"https://api.github.com/users/opencrypto/orgs","repos_url":"https://api.github.com/users/opencrypto/repos","events_url":"https://api.github.com/users/opencrypto/events{/privacy}","received_events_url":"https://api.github.com/users/opencrypto/received_events","type":"User","site_admin":false},"created_at":"2021-03-22T22:30:59Z","updated_at":"2021-03-22T22:30:59Z","author_association":"NONE","body":"I was just trying to understand if there was an alternative I could use - the PKEY is created as usual (either key gen or load from a file) - there are just missing callbacks that, if implemented, I think should do the trick.\r\n\r\nFor that, I created a separate oqs/ and a composite/ directories where to implement the EVP_PKEY_METHOD and EVP_PKEY_ASN1_METHOD - so far it seems it works ok and opens the path of patching standard (pre3.0) OpenSSL distros a bit easier in the future (there might be quite some work there to decouple all the includes).\r\n\r\nFor the composite approach, I am thinking that by using a specific OID (instead of one OID for each combination) so that we can make things a bit easier for the developer and we do not have to come up with every possible combination (it might be that we add two different OIDs instead of just one to implement the latest updates for composite and compositeOR for easier implementations of the verify() for crypto libraries when multi-keys are used). This simplifies the use of composite for the specific needs of the ecosystem (e.g., the use of RSA2048 for backward compatibility).\r\n\r\nHave you thought about using this approach? Would you be interested in contributions back if and when we have good results or are you focusing on 3.0 support only at this point?\r\n\r\nThanks again for the amazing work!","performed_via_github_app":null}},"public":true,"created_at":"2021-03-22T22:30:59Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15645980152","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/502","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/502/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/502/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/502/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/502","id":461567325,"node_id":"MDU6SXNzdWU0NjE1NjczMjU=","number":502,"title":"Use OpenSSL SHA3 for incremental API","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"labels":[{"id":423520878,"node_id":"MDU6TGFiZWw0MjM1MjA4Nzg=","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":"New feature or request"},{"id":1876026231,"node_id":"MDU6TGFiZWwxODc2MDI2MjMx","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/future-work","name":"future-work","color":"cccccc","default":false,"description":"Will not be fixed in current release cycle"}],"state":"closed","locked":false,"assignee":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"assignees":[{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2019-06-27T14:35:46Z","updated_at":"2021-03-22T23:55:25Z","closed_at":"2021-03-22T23:55:25Z","author_association":"MEMBER","active_lock_reason":null,"body":"","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/804476922","html_url":"https://github.com/open-quantum-safe/liboqs/issues/502#issuecomment-804476922","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/502","id":804476922,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDQ3NjkyMg==","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2021-03-22T23:55:25Z","updated_at":"2021-03-22T23:55:25Z","author_association":"MEMBER","body":"Closing due to #922.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-22T23:55:25Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"15645987856","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/791","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/791/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/791/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/791/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/791","id":657670194,"node_id":"MDU6SXNzdWU2NTc2NzAxOTQ=","number":791,"title":"Undefined behaviour in KeccakP-1600-times4-SIMD256","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/13","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/13/labels","id":6475880,"node_id":"MDk6TWlsZXN0b25lNjQ3NTg4MA==","number":13,"title":"0.5.1 RC1","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":4,"closed_issues":5,"state":"open","created_at":"2021-02-24T18:42:42Z","updated_at":"2021-03-22T23:56:14Z","due_on":"2021-03-19T07:00:00Z","closed_at":null},"comments":2,"created_at":"2020-07-15T21:25:39Z","updated_at":"2021-03-22T23:56:14Z","closed_at":"2021-03-22T23:56:14Z","author_association":"MEMBER","active_lock_reason":null,"body":"When enabling clang's UndefinedBehaviorSanitizer using the build sequence\r\n```\r\nmkdir build && cd build\r\ncmake -DCMAKE_C_COMPILER=clang-9 -DCMAKE_BUILD_TYPE=Debug -DUSE_SANITIZER=Undefined -GNinja ..\r\nninja\r\n```\r\nthere are several undefined behaviours in many algorithms, related to the KeccakP-1600-times4-SIMD256 operation.  I can't tell at this point whether the undefined behaviour is present in the Keccak code package or in how code in liboqs/implementations are calling it.  Here's an example:\r\n\r\n```\r\ntests/test_kem Kyber512\r\nConfiguration info\r\n==================\r\nTarget platform:  x86_64-Linux-4.19.76-linuxkit\r\nCompiler:         clang (9.0.0 (tags/RELEASE_900/final))\r\nOQS version:      0.3.1-dev\r\nGit commit:       53937db0c2c5e40afc50c4a8be2362379ca407de\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1  11 Sep 2018)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            OpenSSL\r\n\r\n================================================================================\r\nSample computation for KEM Kyber512\r\n================================================================================\r\n/usr/lib/llvm-9/lib/clang/9.0.0/include/avxintrin.h:3145:10: runtime error: load of misaligned address 0x000001220830 for type 'const __m256i' (vector of 4 'long long' values), which requires 32 byte alignment\r\n0x000001220830: note: pointer points here\r\n 00 00 00 00  07 00 01 02 03 04 05 06  0f 08 09 0a 0b 0c 0d 0e  17 10 11 12 13 14 15 16  1f 18 19 1a\r\n              ^ \r\nUndefinedBehaviorSanitizer:DEADLYSIGNAL\r\n==5033==ERROR: UndefinedBehaviorSanitizer: SEGV on unknown address 0x000000000000 (pc 0x000000bc2081 bp 0x7fa205e65fb0 sp 0x7fa205e1d640 T5034)\r\n==5033==The signal is caused by a READ memory access.\r\n==5033==Hint: address points to the zero page.\r\n    #0 0xbc2080 in KeccakP1600times4_PermuteAll_24rounds /root/liboqs/build/../src/common/sha3/keccak4x/KeccakP-1600-times4-SIMD256.c\r\n    #1 0xb80301 in keccak_squeezeblocks4x /root/liboqs/build/../src/kem/kyber/pqclean_kyber512_avx2/fips202x4.c:101:9\r\n    #2 0xb802ad in PQCLEAN_KYBER512_AVX2_shake128x4_squeezeblocks /root/liboqs/build/../src/kem/kyber/pqclean_kyber512_avx2/fips202x4.c:154:5\r\n    #3 0xa1c4aa in gen_matrix /root/liboqs/build/../src/kem/kyber/pqclean_kyber512_avx2/indcpa.c:149:5\r\n    #4 0xa1bbd9 in PQCLEAN_KYBER512_AVX2_indcpa_keypair /root/liboqs/build/../src/kem/kyber/pqclean_kyber512_avx2/indcpa.c:192:5\r\n    #5 0x67423f in PQCLEAN_KYBER512_AVX2_crypto_kem_keypair /root/liboqs/build/../src/kem/kyber/pqclean_kyber512_avx2/kem.c:22:5\r\n    #6 0x673209 in OQS_KEM_kyber_512_keypair /root/liboqs/build/../src/kem/kyber/kem_kyber_512.c:49:23\r\n    #7 0x42b961 in OQS_KEM_keypair /root/liboqs/build/../src/kem/kem.c:805:10\r\n    #8 0x424e9a in kem_test_correctness /root/liboqs/build/../tests/test_kem.c:78:7\r\n    #9 0x424115 in test_wrapper /root/liboqs/build/../tests/test_kem.c:151:11\r\n    #10 0x7fa2068866da in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76da)\r\n    #11 0x7fa205f8b88e in clone (/lib/x86_64-linux-gnu/libc.so.6+0x12188e)\r\n\r\nUndefinedBehaviorSanitizer can not provide additional info.\r\n==5033==ABORTING\r\n```\r\n\r\nI thought it might be due to the variable `state` in [indcpa.c/gen_matrix](https://github.com/open-quantum-safe/liboqs/blob/53937db0c2c5e40afc50c4a8be2362379ca407de/src/kem/kyber/pqclean_kyber512_avx2/indcpa.c#L141) being on the heap, so I tried allocating its contents using aligned\\_alloc, but to no avail.  I'm at a loss at how to proceed.  Any ideas? @thomwiggers @cryptojedi @baentsch ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/804477544","html_url":"https://github.com/open-quantum-safe/liboqs/issues/791#issuecomment-804477544","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/791","id":804477544,"node_id":"MDEyOklzc3VlQ29tbWVudDgwNDQ3NzU0NA==","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2021-03-22T23:56:14Z","updated_at":"2021-03-22T23:56:14Z","author_association":"MEMBER","body":"Fixed by #891.","performed_via_github_app":null}},"public":true,"created_at":"2021-03-22T23:56:14Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
