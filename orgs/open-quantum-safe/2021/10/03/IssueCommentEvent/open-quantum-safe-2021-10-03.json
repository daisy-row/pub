{"id":"18259526843","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2","id":798109377,"node_id":"MDU6SXNzdWU3OTgxMDkzNzc=","number":2,"title":"Implement encoder/decoder","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2021-02-01T08:33:55Z","updated_at":"2021-10-03T16:02:58Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"As per https://www.openssl.org/docs/manmaster/man7/provider-encoder.html","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/932979166","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2#issuecomment-932979166","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","id":932979166,"node_id":"IC_kwDOE_A9l843nCHe","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-10-03T16:02:58Z","updated_at":"2021-10-03T16:02:58Z","author_association":"MEMBER","body":"Now \"found\" an alternative way to the above: Using the core/provider callbacks to register new algorithms' OIDs (`OSSL_FUNC_core_obj_create`) when initializing the provider seems to be the \"intended\" way of [doing this](https://github.com/open-quantum-safe/oqs-provider/blob/b3d609aea39fba1c20b95729f23db89d391b56aa/oqsprov/oqsprov.c#L359-L360), right?\r\n\r\nHowever, one issue has me wondering: In order for the X509(pubkey) logic to work correctly (\"find\" the new/provider signature algorithms), it seems to be required to also call into `OSSL_FUNC_core_obj_add_sigid`: Is that intentional? Probably, as without doing this, the new signature algorithms are not found by the X509 logic -- courtesy the code in `OBJ_find_sigid_algs` if I understand things right (?)\r\n\r\nIf so, this is conceptually great, _if_ there were a message digest that one could meaningfully register when calling `core_obj_add_sigid` -- unfortunately, for QSC there is none, as those algorithms don't need digesting (i.e., work on arbitrary length data when signing).\r\n\r\nSo my question is this: Would it make sense (to change its implementation) for `OBJ_find_sigid_algs` to also return sig algs that have _not_ been registered via  `core_obj_add_sigid` (but only via `core_obj_create`) -- and consequently don't \"force\" application of a message digest algorithm before entering the provider's \"sign\" method? Or is the logic of requiring digesting so deeply embedded in the OpenSSL (X509) logic that our provider better provide its own digest implementation (probable name \"DO_NOTHING\" :) to register with `core_obj_add_sigid`?\r\n\r\nAs always thanks in advance for suggestions/corrections.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/932979166/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2021-10-03T16:02:58Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
