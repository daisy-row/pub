{"id":"14921077096","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/267","id":782037360,"node_id":"MDExOlB1bGxSZXF1ZXN0NTUxNjY1NzY5","number":267,"title":"removal of internal OSSL dependencies","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":30,"created_at":"2021-01-08T11:02:49Z","updated_at":"2021-01-23T08:18:28Z","closed_at":"2021-01-19T06:07:31Z","author_association":"MEMBER","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/267","html_url":"https://github.com/open-quantum-safe/openssl/pull/267","diff_url":"https://github.com/open-quantum-safe/openssl/pull/267.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/267.patch"},"body":"Addresses various [improvement suggestions](https://github.com/open-quantum-safe/openssl/commit/603b1f764dda7739074278c7e9d0e7db20384828#commitcomment-45737460) by @mattcaswell: Thanks!\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/765887579","html_url":"https://github.com/open-quantum-safe/openssl/pull/267#issuecomment-765887579","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267","id":765887579,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NTg4NzU3OQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-01-23T08:18:28Z","updated_at":"2021-01-23T08:18:28Z","author_association":"MEMBER","body":"> So you could work on the traditional crypto first\r\n\r\nProbably a better approach, indeed.\r\n\r\n> In theory...yes.\r\n\r\nIt does even in practice (after adding \"1.2.840.113549.1.1.1\" to the \"RSA\" decoder registrar), `OBJ_obj2txt(algname, 100, key->algor->algorithm, 1); OSSL_DECODER_CTX_new_by_EVP_PKEY(...algname...)` then delivers several decoders... However, to follow this\r\n\r\n> I think it may not be that difficult with a decoder. The \"x509_pubkey_decode\" function mentioned in the issue above would have to have some code, something like the following for the OID \"1.2.3.4\":\r\n\r\n```\r\nEVP_PKEY *pkey = EVP_PKEY_new();\r\nOSSL_DECODER_CTX *dctx = OSSL_DECODER_CTX_new_by_EVP_PKEY(&pkey,\r\n                                                          \"DER\", \"SubjectPublicKeyInfo\",\r\n                                                          \"1.2.3.4\", EVP_PKEY_PUBLIC_KEY,\r\n                                                          libctx, propq);\r\nOSSL_DECODER_from_bio(dctx, membio);\r\n```\r\n\r\nI feel I'm missing way too much insight on how the X509 decoding logic works to follow through: For example, when running this, `x509_pubkey_decode` is called 15 levels deep in macros like `asn1_item_embed_d2i` and I'm at a loss as to understanding what's (supposed to be) going on :-( Indeed, I've gained the impression the proposal above would introduce a recursion (as `x509_pubkey_decode` appears to be called _by_ `OSSL_DECODER_from_bio` and thus probably shouldn't call it again (unless, maybe it could work on an unprocessed subsection of the X509, hence the question: Is there a way to get at the currently operated-on BIO (state) to ensure progress?)\r\n\r\nWhich documentation pertaining to all this would you recommend I should read to better get a grasp on this? Just reading the code seems suboptimal. ","performed_via_github_app":null}},"public":true,"created_at":"2021-01-23T08:18:28Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14921935166","type":"IssueCommentEvent","actor":{"id":7422273,"login":"mattcaswell","display_login":"mattcaswell","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","avatar_url":"https://avatars.githubusercontent.com/u/7422273?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/267","id":782037360,"node_id":"MDExOlB1bGxSZXF1ZXN0NTUxNjY1NzY5","number":267,"title":"removal of internal OSSL dependencies","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":31,"created_at":"2021-01-08T11:02:49Z","updated_at":"2021-01-23T12:36:39Z","closed_at":"2021-01-19T06:07:31Z","author_association":"MEMBER","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/267","html_url":"https://github.com/open-quantum-safe/openssl/pull/267","diff_url":"https://github.com/open-quantum-safe/openssl/pull/267.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/267.patch"},"body":"Addresses various [improvement suggestions](https://github.com/open-quantum-safe/openssl/commit/603b1f764dda7739074278c7e9d0e7db20384828#commitcomment-45737460) by @mattcaswell: Thanks!\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/765962534","html_url":"https://github.com/open-quantum-safe/openssl/pull/267#issuecomment-765962534","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267","id":765962534,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NTk2MjUzNA==","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"created_at":"2021-01-23T12:36:39Z","updated_at":"2021-01-23T12:36:39Z","author_association":"NONE","body":"> For example, when running this, x509_pubkey_decode is called 15 levels deep in macros like asn1_item_embed_d2i and I'm at a loss as to understanding what's (supposed to be) going on :-(\r\n\r\nThis is the ASN.1 DER decoding logic. Really you don't need to understand this to tackle this particular problem. We have an X509 structure which contains many fields and nested sequences that aren't particularly interesting for this problem. Eventually, within the bigger X509 structures, we hit a sub-structure, i.e. the \"SubjectPublicKeyInfo\" ASN.1 structure. This is represented internally as an `X509_PUBKEY`:\r\n\r\nhttps://github.com/openssl/openssl/blob/8a9394c1eddbac210d4a2dceab521efa7518fa1f/crypto/x509/x_pubkey.c#L89-L92\r\n\r\nYou will note that the definition of that structure has a callback associated with it called `pubkey_cb`. That's defined here:\r\n\r\nhttps://github.com/openssl/openssl/blob/8a9394c1eddbac210d4a2dceab521efa7518fa1f/crypto/x509/x_pubkey.c#L57-L87\r\n\r\nBy this stage in the ASN.1 DER decoding logic we have successfully decoded an X509_PUBKEY structure and the callback gets called to do whatever post-processing we care to do on it. `pubkey_cb` subsequently calls `x509_pubkey_decode` - and its the job of that function to get hold of an `EVP_PKEY` and cache it away. Don't worry about the 15 level deep macros....magic has happened and we now have to convert an `X509_PUBKEY` into an `EVP_PKEY`.\r\n\r\n> I've gained the impression the proposal above would introduce a recursion (as x509_pubkey_decode appears to be called by OSSL_DECODER_from_bio and thus probably shouldn't call it again\r\n\r\nI've not investigated this, but I guess the upper layer decoder is to decode the higher level X509 cert structure. There shouldn't be a problem with re-entering the decoder code because we are now decoding a different sub-structure.\r\n\r\n> Is there a way to get at the currently operated-on BIO (state) to ensure progress?)\r\n\r\nWe can't get hold of the BIO at this point - what we have to work with is the X509_PUBKEY structure. The simplest thing to do is probably counter-intuitive and a bit nasty....call `i2d_X509_PUBKEY` to convert it back into a string of bytes - and then wrap that up in a mem BIO.\r\n\r\n> Which documentation pertaining to all this would you recommend I should read to better get a grasp on this? Just reading the code seems suboptimal.\r\n\r\nThere are a number of pages on the OSSL_DECODER API, e.g. start with:\r\n\r\nhttps://www.openssl.org/docs/manmaster/man3/OSSL_DECODER_CTX_new_by_EVP_PKEY.html\r\nhttps://www.openssl.org/docs/manmaster/man3/OSSL_DECODER_CTX.html\r\nhttps://www.openssl.org/docs/manmaster/man3/OSSL_DECODER.html\r\n\r\nThere doesn't seem to be an \"overview\" (man7) page for this, which seems like a bit of an omission.","performed_via_github_app":null}},"public":true,"created_at":"2021-01-23T12:36:40Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14922967451","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/267","id":782037360,"node_id":"MDExOlB1bGxSZXF1ZXN0NTUxNjY1NzY5","number":267,"title":"removal of internal OSSL dependencies","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":31,"created_at":"2021-01-08T11:02:49Z","updated_at":"2021-01-23T16:59:28Z","closed_at":"2021-01-19T06:07:31Z","author_association":"MEMBER","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/267","html_url":"https://github.com/open-quantum-safe/openssl/pull/267","diff_url":"https://github.com/open-quantum-safe/openssl/pull/267.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/267.patch"},"body":"Addresses various [improvement suggestions](https://github.com/open-quantum-safe/openssl/commit/603b1f764dda7739074278c7e9d0e7db20384828#commitcomment-45737460) by @mattcaswell: Thanks!\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/766141144","html_url":"https://github.com/open-quantum-safe/openssl/pull/267#issuecomment-766141144","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267","id":766141144,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NjE0MTE0NA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-01-23T16:59:28Z","updated_at":"2021-01-23T16:59:28Z","author_association":"MEMBER","body":"> The simplest thing to do is probably counter-intuitive and a bit nasty....call i2d_X509_PUBKEY to convert it back into a string of bytes - and then wrap that up in a mem BIO.\r\n\r\nHmmm... If we re-encode the decoded DER structure (SubjectPublicKeyInfo) to then apply a (arguably the same) DER decoder (again) wouldn't it be logical that we recurse (into the same \"done decoding this DER component\" code)? To show the point, here's the code executed within `x509_pubkey_decode` enhanced with some printf's to make the point: \r\n```\r\n    printf(\"  ENTRY pub decode\\n\");\r\n    if (OBJ_obj2txt(algname, 100, key->algor->algorithm, 1) > 0)\r\n        printf(\"X509 OID: %s\\n\", algname);\r\n    dec_ctx = OSSL_DECODER_CTX_new_by_EVP_PKEY(&pkey, \"DER\", NULL, algname, 0, NULL, NULL);\r\n    if (!dec_ctx) {\r\n        printf(\"No Decoder CTX retrieved\\n\");\r\n    }\r\n    else {\r\n        printf(\"%d decoders found\\n\", OSSL_DECODER_CTX_get_num_decoders(dec_ctx));\r\n        printf(\"Putting into membio: %d\\n\", i2d_X509_PUBKEY_bio(membio, key));\r\n        printf(\"Stored %ld bytes\\n\", BIO_get_mem_data(membio, &data));\r\n        printf(\"Decode result: %d\\n\", OSSL_DECODER_from_bio(dec_ctx, membio));\r\n    }\r\n```\r\nand its result:\r\n```\r\n  ENTRY pub decode\r\nX509 OID: 1.2.840.113549.1.1.1\r\n3 decoders found\r\nPutting into membio: 1\r\nStored 294 bytes\r\n  ENTRY pub decode\r\nX509 OID: 1.2.840.113549.1.1.1\r\n....\r\n```\r\nIndeed, it blows the stack apart -- \"Decode result\" never appears.\r\n\r\nOr did I overlook a mechanism to just call the EVP_PKEY constructor (which is apparently properly set after calling `OSSL_DECODER_CTX_new_by_EVP_PKEY` to https://github.com/openssl/openssl/blob/c9603dfa42d0643a6c8cac3e14364d9fd63303c4/crypto/encode_decode/decoder_pkey.c#L65 _without_ doing all the rest (incl. calling into `x509_pubkey_decode`) again? Also/alternatively, is there a way to \"manually\" walk and execute single DECODERs in the DECODER_CTX structure? It really seems `OSSL_DECODER_from_bio` is the only way to execute all decoders --- which then leads to the recursion.\r\n\r\n> There doesn't seem to be an \"overview\" (man7) page for this, which seems like a bit of an omission.\r\n\r\nYup. Same with provider doc: Only [provider-encoder](https://www.openssl.org/docs/manmaster/man7/provider-encoder.html), nothing on decoders.","performed_via_github_app":null}},"public":true,"created_at":"2021-01-23T16:59:29Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14924380650","type":"IssueCommentEvent","actor":{"id":7422273,"login":"mattcaswell","display_login":"mattcaswell","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","avatar_url":"https://avatars.githubusercontent.com/u/7422273?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/267","id":782037360,"node_id":"MDExOlB1bGxSZXF1ZXN0NTUxNjY1NzY5","number":267,"title":"removal of internal OSSL dependencies","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":33,"created_at":"2021-01-08T11:02:49Z","updated_at":"2021-01-23T23:32:41Z","closed_at":"2021-01-19T06:07:31Z","author_association":"MEMBER","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/267","html_url":"https://github.com/open-quantum-safe/openssl/pull/267","diff_url":"https://github.com/open-quantum-safe/openssl/pull/267.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/267.patch"},"body":"Addresses various [improvement suggestions](https://github.com/open-quantum-safe/openssl/commit/603b1f764dda7739074278c7e9d0e7db20384828#commitcomment-45737460) by @mattcaswell: Thanks!\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/766200133","html_url":"https://github.com/open-quantum-safe/openssl/pull/267#issuecomment-766200133","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267","id":766200133,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NjIwMDEzMw==","user":{"login":"mattcaswell","id":7422273,"node_id":"MDQ6VXNlcjc0MjIyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7422273?v=4","gravatar_id":"","url":"https://api.github.com/users/mattcaswell","html_url":"https://github.com/mattcaswell","followers_url":"https://api.github.com/users/mattcaswell/followers","following_url":"https://api.github.com/users/mattcaswell/following{/other_user}","gists_url":"https://api.github.com/users/mattcaswell/gists{/gist_id}","starred_url":"https://api.github.com/users/mattcaswell/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattcaswell/subscriptions","organizations_url":"https://api.github.com/users/mattcaswell/orgs","repos_url":"https://api.github.com/users/mattcaswell/repos","events_url":"https://api.github.com/users/mattcaswell/events{/privacy}","received_events_url":"https://api.github.com/users/mattcaswell/received_events","type":"User","site_admin":false},"created_at":"2021-01-23T23:32:41Z","updated_at":"2021-01-23T23:32:41Z","author_association":"NONE","body":"> without doing all the rest (incl. calling into x509_pubkey_decode) again?\r\n\r\nHmmm....that's an unexpected problem....somehow we need to act differently when called libcrypto side, to how we act provider side....because it seems the implementation of the provider side decoder code is itself calling d2i_X509_PUBKEY and hence we get the recursion, i.e. if an *application* calls d2i_X509_PUBKEY then we need need `x509_pubkey_decode` to call the OSSL_DECODER_CTX code - but if a *provider* calls d2i_X509_PUBKEY then we need it to go the old route.","performed_via_github_app":null}},"public":true,"created_at":"2021-01-23T23:32:41Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
