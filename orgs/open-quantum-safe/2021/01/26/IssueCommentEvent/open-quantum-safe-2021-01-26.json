{"id":"14948960971","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/267","id":782037360,"node_id":"MDExOlB1bGxSZXF1ZXN0NTUxNjY1NzY5","number":267,"title":"removal of internal OSSL dependencies","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":37,"created_at":"2021-01-08T11:02:49Z","updated_at":"2021-01-26T10:49:19Z","closed_at":"2021-01-19T06:07:31Z","author_association":"MEMBER","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/267","html_url":"https://github.com/open-quantum-safe/openssl/pull/267","diff_url":"https://github.com/open-quantum-safe/openssl/pull/267.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/267.patch"},"body":"Addresses various [improvement suggestions](https://github.com/open-quantum-safe/openssl/commit/603b1f764dda7739074278c7e9d0e7db20384828#commitcomment-45737460) by @mattcaswell: Thanks!\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/767462080","html_url":"https://github.com/open-quantum-safe/openssl/pull/267#issuecomment-767462080","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/267","id":767462080,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NzQ2MjA4MA==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-01-26T10:49:19Z","updated_at":"2021-01-26T10:49:19Z","author_association":"MEMBER","body":">  We have a similar problem with d2i_PrivateKey(), which has a proposed workaround that's still in an OpenSSL PR: openssl#13591. I haven't given that workaround enough thought yet to comment on it, but it might be an inspiration.\r\n\r\nWhen looking at it, isn't this PR rather \"perpetuating\" the concept of NIDs/legacy keys:\r\n`EVP_PKEY *evp_privatekey_from_binary(int keytype,...` with `keytype` being used in `EVP_PKEY_set_type(ret, keytype)` ?\r\n\r\nAs such it's not much of an inspiration to resolve https://github.com/openssl/openssl/issues/13893 (where exactly the `EVP_PKEY_set_type(...OBJ_obj2nid)` pattern is considered the problem).\r\n\r\n>  The ASN1_item_sign and ASN1_item_verify set of functions would really need to be rewritten from zero\r\n\r\nI tend to agree: This https://github.com/openssl/openssl/blob/b897b353dff8138aa838bae9766ecd3de8c03280/crypto/asn1/a_verify.c#L133-L137 also looks like it wouldn't possibly be able to work with provider( key)s... \r\n\r\nMaybe time to re-word https://github.com/openssl/openssl/issues/13893 as \"add provider key support everywhere\" (or \"eliminate use of `OBJ_obj2nid`\" or --given the latter is unlikely considering the 196 places where it's used in OpenSSL-- turn things upside down and \"assign provider algorithms their own NIDs\")?","performed_via_github_app":null}},"public":true,"created_at":"2021-01-26T10:49:17Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14952633080","type":"IssueCommentEvent","actor":{"id":25615540,"login":"jschanck","display_login":"jschanck","gravatar_id":"","url":"https://api.github.com/users/jschanck","avatar_url":"https://avatars.githubusercontent.com/u/25615540?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/880","id":791911850,"node_id":"MDU6SXNzdWU3OTE5MTE4NTA=","number":880,"title":"Update copy_from_pqclean","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-01-22T11:02:42Z","updated_at":"2021-01-26T15:45:36Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"I'd support this proposal from Basil Hess and solicit further feedback to the below from @dstebila , @xvzcf : \r\n\r\n> Using kyber-upstream is now indeed a simple task thanks to what you already prepared.\r\n> I really like the copy_from_pqclean mechanism. The META.yml definitions are obviously a pqclean-\"invention\", but they are a nice way to make an easy path for integrating also other implementations/libraries. Perhaps it could be renamed to copy_from_upstream.\r\n> \r\n> I'm slightly updating the script with the following features. Please let me know if anything doesn't make sense here:\r\n>\r\n>- Adding support to checkout the upstream code from a git-repository: copy_from_pqclean.yml will contain a section \"upstreams\" with several git-repos (pqclean, pqcrystals-kyber, pqcrystals-dilithium, etc...), and the git-commit hash that will be used. This will replace the PQCLEAN_DIR env. variable. Instead, the git repo location will be used (this can be a github-url, a local path on the filesystem, etc.).\r\n> - Adding a \"verify\" switch to the script: The goal is to be able to prove that the code used in liboqs origins from an upstream location with a specific commit. This will basically repeat the copy_from_pqclean process, hash of the code that is checked out, and compare it with the code in the liboqs src-directory. For someone using liboqs it should be useful to be able to reproduce and verify from where the crypto code origins.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/767632470","html_url":"https://github.com/open-quantum-safe/liboqs/issues/880#issuecomment-767632470","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880","id":767632470,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NzYzMjQ3MA==","user":{"login":"jschanck","id":25615540,"node_id":"MDQ6VXNlcjI1NjE1NTQw","avatar_url":"https://avatars.githubusercontent.com/u/25615540?v=4","gravatar_id":"","url":"https://api.github.com/users/jschanck","html_url":"https://github.com/jschanck","followers_url":"https://api.github.com/users/jschanck/followers","following_url":"https://api.github.com/users/jschanck/following{/other_user}","gists_url":"https://api.github.com/users/jschanck/gists{/gist_id}","starred_url":"https://api.github.com/users/jschanck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschanck/subscriptions","organizations_url":"https://api.github.com/users/jschanck/orgs","repos_url":"https://api.github.com/users/jschanck/repos","events_url":"https://api.github.com/users/jschanck/events{/privacy}","received_events_url":"https://api.github.com/users/jschanck/received_events","type":"User","site_admin":false},"created_at":"2021-01-26T15:45:36Z","updated_at":"2021-01-26T15:45:36Z","author_association":"NONE","body":"I like the \"verify\" idea. Does liboqs maintain any patches on upstream code? If so then verify needs to apply those patches before the comparison.\r\n\r\nIf there are not any patches on upstream, and we intend to have a \"verify\" option that does not apply patches, then I'll have to take a different approach to silencing false positives in #881.","performed_via_github_app":null}},"public":true,"created_at":"2021-01-26T15:45:36Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14953388320","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/880","id":791911850,"node_id":"MDU6SXNzdWU3OTE5MTE4NTA=","number":880,"title":"Update copy_from_pqclean","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-01-22T11:02:42Z","updated_at":"2021-01-26T16:37:54Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"I'd support this proposal from Basil Hess and solicit further feedback to the below from @dstebila , @xvzcf : \r\n\r\n> Using kyber-upstream is now indeed a simple task thanks to what you already prepared.\r\n> I really like the copy_from_pqclean mechanism. The META.yml definitions are obviously a pqclean-\"invention\", but they are a nice way to make an easy path for integrating also other implementations/libraries. Perhaps it could be renamed to copy_from_upstream.\r\n> \r\n> I'm slightly updating the script with the following features. Please let me know if anything doesn't make sense here:\r\n>\r\n>- Adding support to checkout the upstream code from a git-repository: copy_from_pqclean.yml will contain a section \"upstreams\" with several git-repos (pqclean, pqcrystals-kyber, pqcrystals-dilithium, etc...), and the git-commit hash that will be used. This will replace the PQCLEAN_DIR env. variable. Instead, the git repo location will be used (this can be a github-url, a local path on the filesystem, etc.).\r\n> - Adding a \"verify\" switch to the script: The goal is to be able to prove that the code used in liboqs origins from an upstream location with a specific commit. This will basically repeat the copy_from_pqclean process, hash of the code that is checked out, and compare it with the code in the liboqs src-directory. For someone using liboqs it should be useful to be able to reproduce and verify from where the crypto code origins.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/767668631","html_url":"https://github.com/open-quantum-safe/liboqs/issues/880#issuecomment-767668631","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880","id":767668631,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NzY2ODYzMQ==","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2021-01-26T16:37:54Z","updated_at":"2021-01-26T16:37:54Z","author_association":"MEMBER","body":"> I like the \"verify\" idea. Does liboqs maintain any patches on upstream code? If so then verify needs to apply those patches before the comparison.\r\n\r\nFor all the things imported via copy\\_from\\_pqclean, no, we do not add any patches.  (Things directly imported, like SIKE, Picnic, FrodoKEM, do make patches before being added.) ","performed_via_github_app":null}},"public":true,"created_at":"2021-01-26T16:37:54Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14953658963","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/880","id":791911850,"node_id":"MDU6SXNzdWU3OTE5MTE4NTA=","number":880,"title":"Update copy_from_pqclean","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-01-22T11:02:42Z","updated_at":"2021-01-26T16:57:33Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"I'd support this proposal from Basil Hess and solicit further feedback to the below from @dstebila , @xvzcf : \r\n\r\n> Using kyber-upstream is now indeed a simple task thanks to what you already prepared.\r\n> I really like the copy_from_pqclean mechanism. The META.yml definitions are obviously a pqclean-\"invention\", but they are a nice way to make an easy path for integrating also other implementations/libraries. Perhaps it could be renamed to copy_from_upstream.\r\n> \r\n> I'm slightly updating the script with the following features. Please let me know if anything doesn't make sense here:\r\n>\r\n>- Adding support to checkout the upstream code from a git-repository: copy_from_pqclean.yml will contain a section \"upstreams\" with several git-repos (pqclean, pqcrystals-kyber, pqcrystals-dilithium, etc...), and the git-commit hash that will be used. This will replace the PQCLEAN_DIR env. variable. Instead, the git repo location will be used (this can be a github-url, a local path on the filesystem, etc.).\r\n> - Adding a \"verify\" switch to the script: The goal is to be able to prove that the code used in liboqs origins from an upstream location with a specific commit. This will basically repeat the copy_from_pqclean process, hash of the code that is checked out, and compare it with the code in the liboqs src-directory. For someone using liboqs it should be useful to be able to reproduce and verify from where the crypto code origins.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/767681426","html_url":"https://github.com/open-quantum-safe/liboqs/issues/880#issuecomment-767681426","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/880","id":767681426,"node_id":"MDEyOklzc3VlQ29tbWVudDc2NzY4MTQyNg==","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2021-01-26T16:57:33Z","updated_at":"2021-01-26T16:57:33Z","author_association":"NONE","body":"I also thought about adding the possibility to apply patches before the comparison, if necessary. But if there is an alternative this might be cleaner.\r\n\r\nFor now the updated copy_from_pqclean script is on this branch https://github.com/bhess/liboqs/tree/feat.copy_from_upstream\r\n\r\nThe script is renamed to `copy_from_upstream` to reflect that other upstream sources are possible.\r\nFor now pqcrystals-kyber and pqcrystals-dilithium are added as additional upstream sources to pqclean. They are defined in the `copy_from_upstream.yml` file like this (ideally the commits will be a tagged version):\r\n\r\n```\r\nupstreams:\r\n  -\r\n    name: pqclean\r\n    git_url: https://github.com/PQClean/PQClean.git\r\n    git_branch: master\r\n    git_commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n    kem_meta_path: 'crypto_kem/{pqclean_scheme}/META.yml'\r\n    sig_meta_path: 'crypto_sign/{pqclean_scheme}/META.yml'\r\n    kem_scheme_path: 'crypto_kem/{pqclean_scheme}'\r\n    sig_scheme_path: 'crypto_sign/{pqclean_scheme}'\r\n  -\r\n    name: pqcrystals-kyber\r\n    git_url: https://github.com/pq-crystals/kyber.git\r\n    git_branch: master\r\n    git_commit: 8c8d7da74ee92808eebb6128ca209fd5851f48dc\r\n    kem_meta_path: '{pretty_name_full}_META.yml'\r\n    kem_scheme_path: '.'\r\n  -\r\n    name: pqcrystals-dilithium\r\n    git_url: https://github.com/pq-crystals/dilithium.git\r\n    git_branch: master\r\n    git_commit: bda9689704262b53f0942efdda6340b922acb58b\r\n    sig_meta_path: '{pretty_name_full}_META.yml'\r\n    sig_scheme_path: '.'\r\n...\r\n```\r\n\r\ncopy_from_upstream has two options: \"copy\" and \"verify\":\r\n\r\n```\r\n$ ./copy_from_upstream.py --help\r\nusage: copy_from_upstream.py [-h] [-v VERBOSITY] [-k] {copy,verify}\r\n\r\npositional arguments:\r\n  {copy,verify}\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -v VERBOSITY, --verbosity VERBOSITY\r\n  -k, --keep_data       Keep temporary files\r\n```\r\n\r\nCopy checks out the git-repos and copies the upstream-sources to the src/ folder. The implementation folders in src/kem and src/sig are prefixed with the upstream names.\r\n\r\nVerify creates a temporary folder and copies the upstream-sources there. It then does a diff of each implementation-folder with the corresponding ones in src/.\r\n\r\nFor example, if saber_avx2 differs from pqclean-upstream (just an example), it shows a follows:\r\n```\r\n$ ./copy_from_upstream.py verify\r\n-----\r\nTotal schemes: 151 - 150 match with upstream, 1 differ\r\n-----\r\nImplementations that differ from upstream:\r\nName: pqclean_saber_avx2, expected upstream: https://github.com/PQClean/PQClean.git - commit: 3d7d2024fa892bd7f00dca3fff4122175f4a26dc\r\n-----\r\n```\r\n\r\nI plan to open a PR for review later.","performed_via_github_app":null}},"public":true,"created_at":"2021-01-26T16:57:33Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
