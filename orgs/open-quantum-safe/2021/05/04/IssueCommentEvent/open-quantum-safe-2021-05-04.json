{"id":"16192658600","type":"IssueCommentEvent","actor":{"id":23386187,"login":"ibmo96","display_login":"ibmo96","gravatar_id":"","url":"https://api.github.com/users/ibmo96","avatar_url":"https://avatars.githubusercontent.com/u/23386187?"},"repo":{"id":218087071,"name":"open-quantum-safe/oqs-demos","url":"https://api.github.com/repos/open-quantum-safe/oqs-demos"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/80","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/80/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/80/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/80/events","html_url":"https://github.com/open-quantum-safe/oqs-demos/issues/80","id":873994796,"node_id":"MDU6SXNzdWU4NzM5OTQ3OTY=","number":80,"title":"Forwarding to HTTPS requests from clients not supporting post-quantum cipher-suite","user":{"login":"ibmo96","id":23386187,"node_id":"MDQ6VXNlcjIzMzg2MTg3","avatar_url":"https://avatars.githubusercontent.com/u/23386187?v=4","gravatar_id":"","url":"https://api.github.com/users/ibmo96","html_url":"https://github.com/ibmo96","followers_url":"https://api.github.com/users/ibmo96/followers","following_url":"https://api.github.com/users/ibmo96/following{/other_user}","gists_url":"https://api.github.com/users/ibmo96/gists{/gist_id}","starred_url":"https://api.github.com/users/ibmo96/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ibmo96/subscriptions","organizations_url":"https://api.github.com/users/ibmo96/orgs","repos_url":"https://api.github.com/users/ibmo96/repos","events_url":"https://api.github.com/users/ibmo96/events{/privacy}","received_events_url":"https://api.github.com/users/ibmo96/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-05-02T17:14:46Z","updated_at":"2021-05-04T10:41:27Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have setup a test OQS Nginx server, that integrates your OQS fork of OpenSSL. I was wondering how to route clients to different server ports based on the cipher suites they support. In your test server:  [https://test.openquantumsafe.org/](url) I can see that the site is accessible using clients that do not support post-quantum TLS as well, and that the site then uses a classical certificate. But if I use your OQS curl demo [https://github.com/open-quantum-safe/oqs-demos/tree/main/curl](url), that supports post-quantum TLS, I can get a response from your test serve when curving with a post-quantum key-exchange algorithm such as Kyber512, doing the following: \r\n\r\n`docker run -it oqs-curl curl -k https://test.openquantumsafe.org --curves kyber512`\r\n\r\n So my question is how can you identify clients that do not support post-quantum TLS and then use a classical certificate for those types of clients, if i've understood the setup correctly. ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/comments/831846733","html_url":"https://github.com/open-quantum-safe/oqs-demos/issues/80#issuecomment-831846733","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/80","id":831846733,"node_id":"MDEyOklzc3VlQ29tbWVudDgzMTg0NjczMw==","user":{"login":"ibmo96","id":23386187,"node_id":"MDQ6VXNlcjIzMzg2MTg3","avatar_url":"https://avatars.githubusercontent.com/u/23386187?v=4","gravatar_id":"","url":"https://api.github.com/users/ibmo96","html_url":"https://github.com/ibmo96","followers_url":"https://api.github.com/users/ibmo96/followers","following_url":"https://api.github.com/users/ibmo96/following{/other_user}","gists_url":"https://api.github.com/users/ibmo96/gists{/gist_id}","starred_url":"https://api.github.com/users/ibmo96/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ibmo96/subscriptions","organizations_url":"https://api.github.com/users/ibmo96/orgs","repos_url":"https://api.github.com/users/ibmo96/repos","events_url":"https://api.github.com/users/ibmo96/events{/privacy}","received_events_url":"https://api.github.com/users/ibmo96/received_events","type":"User","site_admin":false},"created_at":"2021-05-04T10:41:27Z","updated_at":"2021-05-04T10:41:27Z","author_association":"NONE","body":"Oh alright. But I couldn't connect to say port 6011 of your test site with \"classical\" clients because it would only accepts \"modern\" clients, if I've understood correctly?","performed_via_github_app":null}},"public":true,"created_at":"2021-05-04T10:41:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"16193483488","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":218087071,"name":"open-quantum-safe/oqs-demos","url":"https://api.github.com/repos/open-quantum-safe/oqs-demos"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/80","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/80/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/80/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/80/events","html_url":"https://github.com/open-quantum-safe/oqs-demos/issues/80","id":873994796,"node_id":"MDU6SXNzdWU4NzM5OTQ3OTY=","number":80,"title":"Forwarding to HTTPS requests from clients not supporting post-quantum cipher-suite","user":{"login":"ibmo96","id":23386187,"node_id":"MDQ6VXNlcjIzMzg2MTg3","avatar_url":"https://avatars.githubusercontent.com/u/23386187?v=4","gravatar_id":"","url":"https://api.github.com/users/ibmo96","html_url":"https://github.com/ibmo96","followers_url":"https://api.github.com/users/ibmo96/followers","following_url":"https://api.github.com/users/ibmo96/following{/other_user}","gists_url":"https://api.github.com/users/ibmo96/gists{/gist_id}","starred_url":"https://api.github.com/users/ibmo96/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ibmo96/subscriptions","organizations_url":"https://api.github.com/users/ibmo96/orgs","repos_url":"https://api.github.com/users/ibmo96/repos","events_url":"https://api.github.com/users/ibmo96/events{/privacy}","received_events_url":"https://api.github.com/users/ibmo96/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-05-02T17:14:46Z","updated_at":"2021-05-04T11:51:03Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have setup a test OQS Nginx server, that integrates your OQS fork of OpenSSL. I was wondering how to route clients to different server ports based on the cipher suites they support. In your test server:  [https://test.openquantumsafe.org/](url) I can see that the site is accessible using clients that do not support post-quantum TLS as well, and that the site then uses a classical certificate. But if I use your OQS curl demo [https://github.com/open-quantum-safe/oqs-demos/tree/main/curl](url), that supports post-quantum TLS, I can get a response from your test serve when curving with a post-quantum key-exchange algorithm such as Kyber512, doing the following: \r\n\r\n`docker run -it oqs-curl curl -k https://test.openquantumsafe.org --curves kyber512`\r\n\r\n So my question is how can you identify clients that do not support post-quantum TLS and then use a classical certificate for those types of clients, if i've understood the setup correctly. ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/comments/831882103","html_url":"https://github.com/open-quantum-safe/oqs-demos/issues/80#issuecomment-831882103","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/80","id":831882103,"node_id":"MDEyOklzc3VlQ29tbWVudDgzMTg4MjEwMw==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-05-04T11:51:03Z","updated_at":"2021-05-04T11:51:03Z","author_association":"MEMBER","body":"Correct. If disregarding certificate validation, port 6011 in this example exists to test that a client correctly implements the Kyber512 KEM and thus, only accepts clients offering (among an arbitrary selection of others also) that algorithm.","performed_via_github_app":null}},"public":true,"created_at":"2021-05-04T11:51:03Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"16195205731","type":"IssueCommentEvent","actor":{"id":6706342,"login":"zerjioang","display_login":"zerjioang","gravatar_id":"","url":"https://api.github.com/users/zerjioang","avatar_url":"https://avatars.githubusercontent.com/u/6706342?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/978","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/978/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/978/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/978/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/978","id":869850288,"node_id":"MDU6SXNzdWU4Njk4NTAyODg=","number":978,"title":"No documentation available to easily cross compile a library for Windows","user":{"login":"zerjioang","id":6706342,"node_id":"MDQ6VXNlcjY3MDYzNDI=","avatar_url":"https://avatars.githubusercontent.com/u/6706342?v=4","gravatar_id":"","url":"https://api.github.com/users/zerjioang","html_url":"https://github.com/zerjioang","followers_url":"https://api.github.com/users/zerjioang/followers","following_url":"https://api.github.com/users/zerjioang/following{/other_user}","gists_url":"https://api.github.com/users/zerjioang/gists{/gist_id}","starred_url":"https://api.github.com/users/zerjioang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zerjioang/subscriptions","organizations_url":"https://api.github.com/users/zerjioang/orgs","repos_url":"https://api.github.com/users/zerjioang/repos","events_url":"https://api.github.com/users/zerjioang/events{/privacy}","received_events_url":"https://api.github.com/users/zerjioang/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-04-28T11:40:00Z","updated_at":"2021-05-04T13:49:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I wanted to compile a liboqs library for windows using linux and I was unable to find a way to do it just following the documentation. We should have a section in readme specifying how to properly cross compile. For example\r\n\r\n## Cross compiling LIBOQS from Ubuntu to Windows\r\nTo build a `.dll` file\r\n\r\n```bash\r\nsudo apt install cmake gcc gcc-mingw-w64 ninja-install\r\ngit clone https://github.com/open-quantum-safe/liboqs\r\ncd liboqs\r\nmkdir build && cd build\r\ncmake -GNinja -DCMAKE_TOOLCHAIN_FILE=../.CMake/toolchain_windows-amd64.cmake -DOQS_DIST_BUILD=ON -DBUILD_SHARED_LIBS=ON ..\r\nninja\r\n```\r\n\r\nThe result of ninja process, will generate a `bin/liboqs.dll` file on project root directory","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/831957162","html_url":"https://github.com/open-quantum-safe/liboqs/issues/978#issuecomment-831957162","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/978","id":831957162,"node_id":"MDEyOklzc3VlQ29tbWVudDgzMTk1NzE2Mg==","user":{"login":"zerjioang","id":6706342,"node_id":"MDQ6VXNlcjY3MDYzNDI=","avatar_url":"https://avatars.githubusercontent.com/u/6706342?v=4","gravatar_id":"","url":"https://api.github.com/users/zerjioang","html_url":"https://github.com/zerjioang","followers_url":"https://api.github.com/users/zerjioang/followers","following_url":"https://api.github.com/users/zerjioang/following{/other_user}","gists_url":"https://api.github.com/users/zerjioang/gists{/gist_id}","starred_url":"https://api.github.com/users/zerjioang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zerjioang/subscriptions","organizations_url":"https://api.github.com/users/zerjioang/orgs","repos_url":"https://api.github.com/users/zerjioang/repos","events_url":"https://api.github.com/users/zerjioang/events{/privacy}","received_events_url":"https://api.github.com/users/zerjioang/received_events","type":"User","site_admin":false},"created_at":"2021-05-04T13:49:49Z","updated_at":"2021-05-04T13:49:49Z","author_association":"NONE","body":"@baentsch  I PR you. Sadly I cannot test in windows at the moment, so i cant give you an answer","performed_via_github_app":null}},"public":true,"created_at":"2021-05-04T13:49:49Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"16198562742","type":"IssueCommentEvent","actor":{"id":16247285,"login":"christianpaquin","display_login":"christianpaquin","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","avatar_url":"https://avatars.githubusercontent.com/u/16247285?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/988","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/988/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/988/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/988/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/988","id":874691709,"node_id":"MDU6SXNzdWU4NzQ2OTE3MDk=","number":988,"title":"Encaps/decaps failures with SIKE-compressed","user":{"login":"thomwiggers","id":974662,"node_id":"MDQ6VXNlcjk3NDY2Mg==","avatar_url":"https://avatars.githubusercontent.com/u/974662?v=4","gravatar_id":"","url":"https://api.github.com/users/thomwiggers","html_url":"https://github.com/thomwiggers","followers_url":"https://api.github.com/users/thomwiggers/followers","following_url":"https://api.github.com/users/thomwiggers/following{/other_user}","gists_url":"https://api.github.com/users/thomwiggers/gists{/gist_id}","starred_url":"https://api.github.com/users/thomwiggers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thomwiggers/subscriptions","organizations_url":"https://api.github.com/users/thomwiggers/orgs","repos_url":"https://api.github.com/users/thomwiggers/repos","events_url":"https://api.github.com/users/thomwiggers/events{/privacy}","received_events_url":"https://api.github.com/users/thomwiggers/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2021-05-03T15:49:06Z","updated_at":"2021-05-04T17:34:33Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"I've been seeing encaps/decapsulation failures with SIKE-434-compressed.\r\n\r\nI modified `test_kem.c` to be multithreaded and use NIST-KAT's RNG:  https://gist.github.com/thomwiggers/c23e2c4e01971ccfd5496466b72a89c6\r\n\r\n\r\n```\r\nSIKE-p434-compressed\r\nConfiguration info\r\n==================\r\nTarget platform:  x86_64-Linux-5.11.16-arch1-1\r\nCompiler:         gcc (10.2.0)\r\nCompile options:  [-march=native;-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.6.0-rc1\r\nGit commit:       8f8bb44c2fb8ce4b65aca2889ca2b8c11861f2cb\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1k  25 Mar 2021)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nCPU exts compile-time:  ADX AES AVX AVX2 AVX512 BMI1 BMI2 POPCNT SSE SSE2 SSE3\r\n\r\nERROR: shared secrets are not equal\r\nentropy_input        (  48 bytes):  8B9E5F79BB0EE397C7DF04C0D6593280ADD0A92CB6F9D046738C7C0846A340529B28F78FC7CFBCE732C0C0E1031114F4\r\nshared_secret_e      (  16 bytes):  119D4BBA6CC7A3196B6CB11EDC2C5331\r\nshared_secret_d      (  16 bytes):  8BBA5DD161F22661502BE27C603B5CE4\r\nERROR: shared secrets are not equal\r\nentropy_input        (  48 bytes):  6BA56E8703B104A29E1F20D8A3D64FD9EB36CDE9A49E921B462178A86D1D8FB677902F8C61B4C488B11AD879F5FDDA67\r\nshared_secret_e      (  16 bytes):  911A05EA62C8CE15F8E88F107C810284\r\nshared_secret_d      (  16 bytes):  B6B6926F523F575BFE9C4864D6506C57\r\nERROR: shared secrets are not equal\r\nentropy_input        (  48 bytes):  FCC52CBE74090A719C44655B99623B89DE1D39C09286FCA28F7A21B468CD43A7249166DA370D68E445F1CE7F4FDB365A\r\nshared_secret_e      (  16 bytes):  F717246F5062F3C571A85ED7BB5ACC98\r\nshared_secret_d      (  16 bytes):  B8C0FC2D380DBF78338D7DFD425448AF\r\nERROR: shared secrets are not equal\r\nentropy_input        (  48 bytes):  BF65977D2084F980670C2BDC36544A486E4394944342DD09EF308D5F004732C4D15D5799F1B34FF730CF76C22BC0865F\r\nshared_secret_e      (  16 bytes):  35B19B9E4B0B8B08ECA644143B917EE7\r\nshared_secret_d      (  16 bytes):  C63B716E1640D7CB9E50099F32727F89\r\nERROR: shared secrets are not equal\r\nentropy_input        (  48 bytes):  509867683AF7141564E58616740CADEA09E127F3B688E4BC478B82E5BB6D3FFEBA5EB23C086D04098B67477C32725749\r\nshared_secret_e      (  16 bytes):  0028DA44B2E61F170421B97499D1F84B\r\nshared_secret_d      (  16 bytes):  F00B568402CAC17896EAC96F721C9DB4\r\nERROR: shared secrets are not equal\r\nentropy_input        (  48 bytes):  4C47590C30F81A7F3269B1D84673357300C3FA8C320D7EB5536F35FE90C6E806CCBDCB58F12636DB11AAA5AC18CFC5DA\r\nshared_secret_e      (  16 bytes):  A2DC81A27CB5D52B9E009C1BB0108DB9\r\nshared_secret_d      (  16 bytes):  12A2EECB020B2F36578EA5FA1B975FA0\r\nERROR: shared secrets are not equal\r\nentropy_input        (  48 bytes):  7AB5700CAF8CAC1616A1D035B8D11BE99FB9F2C86CE59D2B2EF8DBC86487388474AB54A2380D9D18B3A8BACAE1F5D939\r\nshared_secret_e      (  16 bytes):  84F16BEF4CEA85F1D6180558E12F4D75\r\nshared_secret_d      (  16 bytes):  01768B20F51CBCBEAFE00C2389717BB4\r\nERROR: shared secrets are not equal\r\nentropy_input        (  48 bytes):  62CD496D391D7FE6447A417F4466C2D9424B2DCEC6F8787D0132F33BB97EAE1CC0FF08C63A789433D98DE2BED09855AA\r\nshared_secret_e      (  16 bytes):  16733BB49A09248179772B18FD282DC6\r\nshared_secret_d      (  16 bytes):  2907E88CD3FD5BDF5AE82AC945366318\r\n```\r\n\r\nI've not yet entirely figured out how to feed the seed back in to get a reproducible-every-time version.\r\n\r\n_See discussion in https://github.com/open-quantum-safe/liboqs/issues/981_","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/832118078","html_url":"https://github.com/open-quantum-safe/liboqs/issues/988#issuecomment-832118078","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/988","id":832118078,"node_id":"MDEyOklzc3VlQ29tbWVudDgzMjExODA3OA==","user":{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false},"created_at":"2021-05-04T17:34:33Z","updated_at":"2021-05-04T17:34:33Z","author_association":"CONTRIBUTOR","body":"FYI, @patricklonga. ","performed_via_github_app":null}},"public":true,"created_at":"2021-05-04T17:34:33Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"16201222356","type":"IssueCommentEvent","actor":{"id":1266573,"login":"anhu","display_login":"anhu","gravatar_id":"","url":"https://api.github.com/users/anhu","avatar_url":"https://avatars.githubusercontent.com/u/1266573?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/9","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/9/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/9/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/9/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/9","id":801990284,"node_id":"MDU6SXNzdWU4MDE5OTAyODQ=","number":9,"title":"Implement full TLS1.3 OQS signature support","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-02-05T09:11:30Z","updated_at":"2021-05-04T21:16:08Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Warning: This is a _big_ issue. Anyone willing to tackle it should consider this requires substantial OpenSSL3 support (see for example https://github.com/openssl/openssl/issues/10512). Also helpful to get started may be discussions [documented here](https://github.com/open-quantum-safe/openssl/issues/243).","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/832254372","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/9#issuecomment-832254372","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/9","id":832254372,"node_id":"MDEyOklzc3VlQ29tbWVudDgzMjI1NDM3Mg==","user":{"login":"anhu","id":1266573,"node_id":"MDQ6VXNlcjEyNjY1NzM=","avatar_url":"https://avatars.githubusercontent.com/u/1266573?v=4","gravatar_id":"","url":"https://api.github.com/users/anhu","html_url":"https://github.com/anhu","followers_url":"https://api.github.com/users/anhu/followers","following_url":"https://api.github.com/users/anhu/following{/other_user}","gists_url":"https://api.github.com/users/anhu/gists{/gist_id}","starred_url":"https://api.github.com/users/anhu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anhu/subscriptions","organizations_url":"https://api.github.com/users/anhu/orgs","repos_url":"https://api.github.com/users/anhu/repos","events_url":"https://api.github.com/users/anhu/events{/privacy}","received_events_url":"https://api.github.com/users/anhu/received_events","type":"User","site_admin":false},"created_at":"2021-05-04T21:16:08Z","updated_at":"2021-05-04T21:16:08Z","author_association":"NONE","body":"I'd like to propose a direction for this issue: \r\n\r\nProviders that supply new and unknown sigalgs for TLS 1.3 signature verification should be able to do so via a fully pluggable mechanism called the capabilities query. OpenSSL will query the provider asking it what kind of sigalgs it supports. During this call, the provider will register the name and the TLS 1.3 code point of the sigalgs it supports. That name can be referenced in .conf files or command line parameters to specify supported sigalgs. \r\n\r\nThis would be similar to the way it currently works for supported groups in TLS 1.3. \r\n\r\nSomething that needs to also be considered is the OIDs for the signature and public key of the registered sigalgs.  Do the OIDs need to be associated with the codepoint and name as well? ","performed_via_github_app":null}},"public":true,"created_at":"2021-05-04T21:16:09Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"16201287604","type":"IssueCommentEvent","actor":{"id":1266573,"login":"anhu","display_login":"anhu","gravatar_id":"","url":"https://api.github.com/users/anhu","avatar_url":"https://avatars.githubusercontent.com/u/1266573?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2/events","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2","id":798109377,"node_id":"MDU6SXNzdWU3OTgxMDkzNzc=","number":2,"title":"Implement encoder/decoder","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-02-01T08:33:55Z","updated_at":"2021-05-04T21:22:10Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"As per https://www.openssl.org/docs/manmaster/man7/provider-encoder.html","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/comments/832257438","html_url":"https://github.com/open-quantum-safe/oqs-provider/issues/2#issuecomment-832257438","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/issues/2","id":832257438,"node_id":"MDEyOklzc3VlQ29tbWVudDgzMjI1NzQzOA==","user":{"login":"anhu","id":1266573,"node_id":"MDQ6VXNlcjEyNjY1NzM=","avatar_url":"https://avatars.githubusercontent.com/u/1266573?v=4","gravatar_id":"","url":"https://api.github.com/users/anhu","html_url":"https://github.com/anhu","followers_url":"https://api.github.com/users/anhu/followers","following_url":"https://api.github.com/users/anhu/following{/other_user}","gists_url":"https://api.github.com/users/anhu/gists{/gist_id}","starred_url":"https://api.github.com/users/anhu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anhu/subscriptions","organizations_url":"https://api.github.com/users/anhu/orgs","repos_url":"https://api.github.com/users/anhu/repos","events_url":"https://api.github.com/users/anhu/events{/privacy}","received_events_url":"https://api.github.com/users/anhu/received_events","type":"User","site_admin":false},"created_at":"2021-05-04T21:22:10Z","updated_at":"2021-05-04T21:22:10Z","author_association":"NONE","body":"@baentsch : quick tip: \r\n\r\nhave a look at `providers/implementations/encode_decode/encode_key2any.c` .  Run it through the C compiler's pre-processor and look at the the output.  It makes it much clearer whats going on with some of the implementation.  If you can follow what is going on with X25519 in there then you're on a good start. Your implementation of an encoder will probably be similar to that, except much more simplified. ","performed_via_github_app":null}},"public":true,"created_at":"2021-05-04T21:22:10Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
