{"id":"17497172837","type":"IssueCommentEvent","actor":{"id":7589678,"login":"MaChengxin","display_login":"MaChengxin","gravatar_id":"","url":"https://api.github.com/users/MaChengxin","avatar_url":"https://avatars.githubusercontent.com/u/7589678?"},"repo":{"id":247826799,"name":"open-quantum-safe/liboqs-java","url":"https://api.github.com/repos/open-quantum-safe/liboqs-java"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/19","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/19/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/19/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/19/events","html_url":"https://github.com/open-quantum-safe/liboqs-java/issues/19","id":950293527,"node_id":"MDU6SXNzdWU5NTAyOTM1Mjc=","number":19,"title":"Examples fail to run with some JDKs on macOS","user":{"login":"MaChengxin","id":7589678,"node_id":"MDQ6VXNlcjc1ODk2Nzg=","avatar_url":"https://avatars.githubusercontent.com/u/7589678?v=4","gravatar_id":"","url":"https://api.github.com/users/MaChengxin","html_url":"https://github.com/MaChengxin","followers_url":"https://api.github.com/users/MaChengxin/followers","following_url":"https://api.github.com/users/MaChengxin/following{/other_user}","gists_url":"https://api.github.com/users/MaChengxin/gists{/gist_id}","starred_url":"https://api.github.com/users/MaChengxin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MaChengxin/subscriptions","organizations_url":"https://api.github.com/users/MaChengxin/orgs","repos_url":"https://api.github.com/users/MaChengxin/repos","events_url":"https://api.github.com/users/MaChengxin/events{/privacy}","received_events_url":"https://api.github.com/users/MaChengxin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-07-22T04:35:24Z","updated_at":"2021-08-10T03:08:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am trying to integrate `liboqs` into a Java project by using `liboqs-java`.\r\nThe OS is macOS Big Sur (11.4) and the JDK is Amazon Corretto 8, installed by `brew install --cask corretto8`.\r\n\r\nWhen I try to run the signature example, I got the following error:\r\n```\r\n~/Code/open-quantum-safe/liboqs-java master ❯ javac -cp target/liboqs-java.jar examples/SigExample.java                                  12:13:20\r\n~/Code/open-quantum-safe/liboqs-java master ❯ java -cp target/liboqs-java.jar:examples/ SigExample                                       12:13:24\r\nSupported signatures:\r\nException in thread \"main\" java.lang.UnsatisfiedLinkError: /private/var/folders/jm/886yj20s08bcrb560kxvfbwm0000gn/T/oqs-native-lib5047501627777998882/liboqs-jni.jnilib: dlopen(/private/var/folders/jm/886yj20s08bcrb560kxvfbwm0000gn/T/oqs-native-lib5047501627777998882/liboqs-jni.jnilib, 1): Library not loaded: @rpath/liboqs.0.dylib\r\n  Referenced from: /private/var/folders/jm/886yj20s08bcrb560kxvfbwm0000gn/T/oqs-native-lib5047501627777998882/liboqs-jni.jnilib\r\n  Reason: image not found\r\n\tat java.lang.ClassLoader$NativeLibrary.load(Native Method)\r\n\tat java.lang.ClassLoader.loadLibrary0(ClassLoader.java:1934)\r\n\tat java.lang.ClassLoader.loadLibrary(ClassLoader.java:1817)\r\n\tat java.lang.Runtime.load0(Runtime.java:810)\r\n\tat java.lang.System.load(System.java:1088)\r\n\tat org.openquantumsafe.Common.loadNativeLibrary(Common.java:53)\r\n\tat org.openquantumsafe.Sigs.<clinit>(Sigs.java:12)\r\n\tat SigExample.main(SigExample.java:9)\r\n```\r\n\r\nThe same error occurred for the key encapsulation example as well.\r\n\r\nI've already tried the suggestion in [the troubleshooting section](https://github.com/open-quantum-safe/liboqs-java#troubleshooting), but it doesn't help.\r\nI also tried switching from Amazon Corretto to Azul Zulu Java 8, but it didn't help either.\r\nWhat works for me is to change the JDK to `openjdk@8` (installed by `brew install openjdk@8`), with which both `SigExample` and `KEMExample` can run.\r\n\r\nHowever, the problem for me is that `openjdk@8` is actually not the recommended JDK for the project I'm working with due to its own limitations, so I'd prefer to stick with Amazon Corretto.\r\n\r\nHow can I successfully run the examples with Amazon Corretto then?","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/comments/895693222","html_url":"https://github.com/open-quantum-safe/liboqs-java/issues/19#issuecomment-895693222","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs-java/issues/19","id":895693222,"node_id":"IC_kwDODsWJb841YzGm","user":{"login":"MaChengxin","id":7589678,"node_id":"MDQ6VXNlcjc1ODk2Nzg=","avatar_url":"https://avatars.githubusercontent.com/u/7589678?v=4","gravatar_id":"","url":"https://api.github.com/users/MaChengxin","html_url":"https://github.com/MaChengxin","followers_url":"https://api.github.com/users/MaChengxin/followers","following_url":"https://api.github.com/users/MaChengxin/following{/other_user}","gists_url":"https://api.github.com/users/MaChengxin/gists{/gist_id}","starred_url":"https://api.github.com/users/MaChengxin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MaChengxin/subscriptions","organizations_url":"https://api.github.com/users/MaChengxin/orgs","repos_url":"https://api.github.com/users/MaChengxin/repos","events_url":"https://api.github.com/users/MaChengxin/events{/privacy}","received_events_url":"https://api.github.com/users/MaChengxin/received_events","type":"User","site_admin":false},"created_at":"2021-08-10T03:08:32Z","updated_at":"2021-08-10T03:08:32Z","author_association":"NONE","body":"> Probably you could work around the problem by installing liboqs and pass it as an command line argument?\r\n> // If the library is in the java library path, load it directly. (e.g., -Djava.library.path=src/main/resources)\r\n\r\nI've already tried this but it didn't work.\r\n\r\nWhat works for me in the end is to use a specific version of JDK: Oracle JDK 8u171, with which both these examples of liboqs-java and my other project can run well.","performed_via_github_app":null}},"public":true,"created_at":"2021-08-10T03:08:32Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"17498017456","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/66","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/66/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/66/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/66/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/66","id":727806598,"node_id":"MDU6SXNzdWU3Mjc4MDY1OTg=","number":66,"title":"Update hybrid key exchange format to match Internet-Draft","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-10-23T00:32:17Z","updated_at":"2021-08-10T05:07:49Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"https://tools.ietf.org/html/draft-kampanakis-curdle-pq-ssh-00","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/895732936","html_url":"https://github.com/open-quantum-safe/openssh/issues/66#issuecomment-895732936","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/66","id":895732936,"node_id":"IC_kwDOBsoLV841Y8zI","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-08-10T05:07:49Z","updated_at":"2021-08-10T05:07:49Z","author_association":"MEMBER","body":"Out of curiosity: Did the IETF draft mentioned above get a revision that's still valid or shall we drop this issue as the spec seems to be expired (?not of interest?)","performed_via_github_app":null}},"public":true,"created_at":"2021-08-10T05:07:49Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"17498382772","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1072","id":962813852,"node_id":"MDU6SXNzdWU5NjI4MTM4NTI=","number":1072,"title":"Android Buildscript problem with Cross Compilation","user":{"login":"Hatzen","id":21283655,"node_id":"MDQ6VXNlcjIxMjgzNjU1","avatar_url":"https://avatars.githubusercontent.com/u/21283655?v=4","gravatar_id":"","url":"https://api.github.com/users/Hatzen","html_url":"https://github.com/Hatzen","followers_url":"https://api.github.com/users/Hatzen/followers","following_url":"https://api.github.com/users/Hatzen/following{/other_user}","gists_url":"https://api.github.com/users/Hatzen/gists{/gist_id}","starred_url":"https://api.github.com/users/Hatzen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Hatzen/subscriptions","organizations_url":"https://api.github.com/users/Hatzen/orgs","repos_url":"https://api.github.com/users/Hatzen/repos","events_url":"https://api.github.com/users/Hatzen/events{/privacy}","received_events_url":"https://api.github.com/users/Hatzen/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-06T14:58:25Z","updated_at":"2021-08-10T05:55:17Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I try to setup a CI pipeline for compiling liboqs with liboqs-java for android.  \r\nBut with the current master version (and release 0.6.0) of this repo it is not possible to run the android build script (https://github.com/open-quantum-safe/liboqs/blob/main/scripts/build-android.sh)  \r\n  \r\ni run in a similar issue like compiling for windows.  But cannot use wine for this problem afaik.  \r\nhttps://github.com/open-quantum-safe/liboqs/issues/727  \r\n  \r\nWhen i run  \r\nbash build-android.sh $ndkPath -s 19-a x86_64  \r\n  \r\n1. it first runs into the problem that \"try_run\" is not working as the target architecture is not the same.  \r\nhttps://github.com/open-quantum-safe/liboqs/blob/2db7f97922a7d3e50aa9f56b7e86566f62c0365a/.CMake/gcc_clang_intrinsics.cmake#L3  \r\nExcluding that file let the compile process start.  \r\n  \r\n2. But then it crashes afterwards for the common c files  \r\n\r\n```\r\ncommon.c:169:9: error: incompatible integer to pointer conversion returning 'int' from a function with result type 'void *' [-Werror,-Wint-conversion]\r\n        return aligned_alloc(alignment, size);\r\n```\r\n\r\n<details>\r\n<summary>click for full build log</summary>  \r\n  \r\n```\r\n-- Build files have been written to: /home/hatzen/LibOQSTestApp--12-add-ci-for-prebuild-liboqs/liboqs-android/prebuild-liboqs/liboqs/build\r\nScanning dependencies of target falcon_512_clean\r\n[  0%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/sig_falcon_512.c.o\r\n[  0%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/codec.c.o\r\n[  0%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/common.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/fft.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/fpr.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/keygen.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/pqclean.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/rng.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/sign.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/vrfy.c.o\r\n[  1%] Built target falcon_512_clean\r\nScanning dependencies of target common\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/aes/aes.c.o\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/aes/aes_c.c.o\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/sha2/sha2_c.c.o\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/sha3/xkcp_sha3.c.o\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/sha3/xkcp_sha3x4.c.o\r\n[  2%] Building C object src/common/CMakeFiles/common.dir/common.c.o\r\n/home/hatzen/LibOQSTestApp--12-add-ci-for-prebuild-liboqs/liboqs-android/prebuild-liboqs/liboqs/src/common/common.c:169:9: error: implicit declaration of function 'aligned_alloc' is invalid in C99 [-Werror,-Wimplicit-function-declaration]\r\n        return aligned_alloc(alignment, size);\r\n               ^\r\n/home/hatzen/LibOQSTestApp--12-add-ci-for-prebuild-liboqs/liboqs-android/prebuild-liboqs/liboqs/src/common/common.c:169:9: error: incompatible integer to pointer conversion returning 'int' from a function with result type 'void *' [-Werror,-Wint-conversion]\r\n        return aligned_alloc(alignment, size);\r\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n2 errors generated.\r\nsrc/common/CMakeFiles/common.dir/build.make:182: recipe for target 'src/common/CMakeFiles/common.dir/common.c.o' failed\r\nmake[2]: *** [src/common/CMakeFiles/common.dir/common.c.o] Error 1\r\nCMakeFiles/Makefile2:260: recipe for target 'src/common/CMakeFiles/common.dir/all' failed\r\nmake[1]: *** [src/common/CMakeFiles/common.dir/all] Error 2\r\nMakefile:129: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n```  \r\n  \r\n</details>  \r\n  \r\nAs i would like to make a CI pipe for my android integration [here](https://github.com/Hatzen/LibOQSTestApp/pull/13/files#diff-cec8aea73739e8e679768673e3a38cee42b5fe69d0837642cdd7f7bfab56de59) it would be a charm if we can make the android build script work without the need of changing anything in the cloned files.  \r\nSo i would suggest \r\n1. For the first problem to pass a property which disables \"try_run\"\r\n2.  and for the second problem i need help as i am not very familiar with the code or error. So can anyone provide a suggestion or solution?   \r\n  \r\nThank you   ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/895749391","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1072#issuecomment-895749391","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072","id":895749391,"node_id":"IC_kwDOA-eq3c41ZA0P","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-08-10T05:55:17Z","updated_at":"2021-08-10T05:55:17Z","author_association":"MEMBER","body":"Thanks for your interest in this project and apologies in advance for possibly silly questions below as I have 0 experience with Android and definitely am no cross-building expert, but I wonder:\r\n\r\n> without the need of changing anything in the cloned files.\r\n\r\nWhy do you have this goal? If something does not work as intended, it should be corrected, no?\r\n\r\n> For the first problem to pass a property which disables \"try_run\"\r\n\r\nAFAIK running this file is essential to inform the whole build process (setting correct compiler flags for the platform), so it can't simply be dropped but either should be replaced by an alternative mechanism that works just for Android (in the worst case disabling all CPU feature flags/performance optimizations for Android) and the platform(s) you want to support OR one might follow the suggestions in the files created by `cmake`:\r\n\r\n```\r\n# This file was generated by CMake because it detected TRY_RUN() commands\r\n# in crosscompiling mode. It will be overwritten by the next CMake run.\r\n# Copy it to a safe location, set the variables to appropriate values\r\n# and use it then to preset the CMake cache (using -C).\r\n\r\n\r\n# RUN_RESULT\r\n#    indicates whether the executable would have been able to run on its\r\n#    target platform. If so, set RUN_RESULT to\r\n#    the exit code (in many cases 0 for success), otherwise enter \"FAILED_TO_RUN\".\r\n# RUN_RESULT__TRYRUN_OUTPUT\r\n#    contains the text the executable would have printed on stdout and stderr.\r\n#    If the executable would not have been able to run, set RUN_RESULT__TRYRUN_OUTPUT empty.\r\n#    Otherwise check if the output is evaluated by the calling CMake code. If so,\r\n#    check what the source file would have printed when called with the given arguments.\r\n# The COMPILE_RESULT variable holds the build result for this TRY_RUN().\r\n```\r\n\r\n--> As you obviously have experience with Android, wouldn't this be something you might be willing to do (and contribute back)? Either on real hardware or a suitable emulator? Also, only you know which architectures you want to run the resultant binaries on. What little I know about Android is that there is a wide variety of chips supporting Android, so the CPU feature flags that are supported (and that the file `.CMake/detect_gcc_clang_intrinsics.c` outputs) will probably be different from platform to platform (i.e., the `-a` and `-s` parameters you are passing to the build command). Long story short, I have the gut feeling that a generic solution would encompass running emulators executing this file on the requested architectures.\r\n\r\nRegarding the second question, the issue ultimately seems to come down to another Android issue:\r\n\r\n> implicit declaration of function 'aligned_alloc' is invalid in C99 \r\n\r\nA quick google search returned [others dealing with the same problem](https://stackoverflow.com/questions/67044851/android-ndk-build-error-undefined-symbol-aligned-alloc). Thus, my question would be whether you could envision using your Android knowledge, looking into this and contributing a suitable change to our project that rectifies this for Android?\r\n\r\nFinally, I'm tagging @nicholasfulton who contributed this code quite some time ago asking for his suggestions (if he has time) on how to resolve this issue.\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-08-10T05:55:18Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"17509224449","type":"IssueCommentEvent","actor":{"id":21283655,"login":"Hatzen","display_login":"Hatzen","gravatar_id":"","url":"https://api.github.com/users/Hatzen","avatar_url":"https://avatars.githubusercontent.com/u/21283655?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1072","id":962813852,"node_id":"MDU6SXNzdWU5NjI4MTM4NTI=","number":1072,"title":"Android Buildscript problem with Cross Compilation","user":{"login":"Hatzen","id":21283655,"node_id":"MDQ6VXNlcjIxMjgzNjU1","avatar_url":"https://avatars.githubusercontent.com/u/21283655?v=4","gravatar_id":"","url":"https://api.github.com/users/Hatzen","html_url":"https://github.com/Hatzen","followers_url":"https://api.github.com/users/Hatzen/followers","following_url":"https://api.github.com/users/Hatzen/following{/other_user}","gists_url":"https://api.github.com/users/Hatzen/gists{/gist_id}","starred_url":"https://api.github.com/users/Hatzen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Hatzen/subscriptions","organizations_url":"https://api.github.com/users/Hatzen/orgs","repos_url":"https://api.github.com/users/Hatzen/repos","events_url":"https://api.github.com/users/Hatzen/events{/privacy}","received_events_url":"https://api.github.com/users/Hatzen/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-08-06T14:58:25Z","updated_at":"2021-08-10T19:39:16Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I try to setup a CI pipeline for compiling liboqs with liboqs-java for android.  \r\nBut with the current master version (and release 0.6.0) of this repo it is not possible to run the android build script (https://github.com/open-quantum-safe/liboqs/blob/main/scripts/build-android.sh)  \r\n  \r\ni run in a similar issue like compiling for windows.  But cannot use wine for this problem afaik.  \r\nhttps://github.com/open-quantum-safe/liboqs/issues/727  \r\n  \r\nWhen i run  \r\nbash build-android.sh $ndkPath -s 19-a x86_64  \r\n  \r\n1. it first runs into the problem that \"try_run\" is not working as the target architecture is not the same.  \r\nhttps://github.com/open-quantum-safe/liboqs/blob/2db7f97922a7d3e50aa9f56b7e86566f62c0365a/.CMake/gcc_clang_intrinsics.cmake#L3  \r\nExcluding that file let the compile process start.  \r\n  \r\n2. But then it crashes afterwards for the common c files  \r\n\r\n```\r\ncommon.c:169:9: error: incompatible integer to pointer conversion returning 'int' from a function with result type 'void *' [-Werror,-Wint-conversion]\r\n        return aligned_alloc(alignment, size);\r\n```\r\n\r\n<details>\r\n<summary>click for full build log</summary>  \r\n  \r\n```\r\n-- Build files have been written to: /home/hatzen/LibOQSTestApp--12-add-ci-for-prebuild-liboqs/liboqs-android/prebuild-liboqs/liboqs/build\r\nScanning dependencies of target falcon_512_clean\r\n[  0%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/sig_falcon_512.c.o\r\n[  0%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/codec.c.o\r\n[  0%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/common.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/fft.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/fpr.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/keygen.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/pqclean.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/rng.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/sign.c.o\r\n[  1%] Building C object src/sig/falcon/CMakeFiles/falcon_512_clean.dir/pqclean_falcon-512_clean/vrfy.c.o\r\n[  1%] Built target falcon_512_clean\r\nScanning dependencies of target common\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/aes/aes.c.o\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/aes/aes_c.c.o\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/sha2/sha2_c.c.o\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/sha3/xkcp_sha3.c.o\r\n[  1%] Building C object src/common/CMakeFiles/common.dir/sha3/xkcp_sha3x4.c.o\r\n[  2%] Building C object src/common/CMakeFiles/common.dir/common.c.o\r\n/home/hatzen/LibOQSTestApp--12-add-ci-for-prebuild-liboqs/liboqs-android/prebuild-liboqs/liboqs/src/common/common.c:169:9: error: implicit declaration of function 'aligned_alloc' is invalid in C99 [-Werror,-Wimplicit-function-declaration]\r\n        return aligned_alloc(alignment, size);\r\n               ^\r\n/home/hatzen/LibOQSTestApp--12-add-ci-for-prebuild-liboqs/liboqs-android/prebuild-liboqs/liboqs/src/common/common.c:169:9: error: incompatible integer to pointer conversion returning 'int' from a function with result type 'void *' [-Werror,-Wint-conversion]\r\n        return aligned_alloc(alignment, size);\r\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n2 errors generated.\r\nsrc/common/CMakeFiles/common.dir/build.make:182: recipe for target 'src/common/CMakeFiles/common.dir/common.c.o' failed\r\nmake[2]: *** [src/common/CMakeFiles/common.dir/common.c.o] Error 1\r\nCMakeFiles/Makefile2:260: recipe for target 'src/common/CMakeFiles/common.dir/all' failed\r\nmake[1]: *** [src/common/CMakeFiles/common.dir/all] Error 2\r\nMakefile:129: recipe for target 'all' failed\r\nmake: *** [all] Error 2\r\n```  \r\n  \r\n</details>  \r\n  \r\nAs i would like to make a CI pipe for my android integration [here](https://github.com/Hatzen/LibOQSTestApp/pull/13/files#diff-cec8aea73739e8e679768673e3a38cee42b5fe69d0837642cdd7f7bfab56de59) it would be a charm if we can make the android build script work without the need of changing anything in the cloned files.  \r\nSo i would suggest \r\n1. For the first problem to pass a property which disables \"try_run\"\r\n2.  and for the second problem i need help as i am not very familiar with the code or error. So can anyone provide a suggestion or solution?   \r\n  \r\nThank you   ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/896265417","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1072#issuecomment-896265417","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1072","id":896265417,"node_id":"IC_kwDOA-eq3c41a-zJ","user":{"login":"Hatzen","id":21283655,"node_id":"MDQ6VXNlcjIxMjgzNjU1","avatar_url":"https://avatars.githubusercontent.com/u/21283655?v=4","gravatar_id":"","url":"https://api.github.com/users/Hatzen","html_url":"https://github.com/Hatzen","followers_url":"https://api.github.com/users/Hatzen/followers","following_url":"https://api.github.com/users/Hatzen/following{/other_user}","gists_url":"https://api.github.com/users/Hatzen/gists{/gist_id}","starred_url":"https://api.github.com/users/Hatzen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Hatzen/subscriptions","organizations_url":"https://api.github.com/users/Hatzen/orgs","repos_url":"https://api.github.com/users/Hatzen/repos","events_url":"https://api.github.com/users/Hatzen/events{/privacy}","received_events_url":"https://api.github.com/users/Hatzen/received_events","type":"User","site_admin":false},"created_at":"2021-08-10T19:39:16Z","updated_at":"2021-08-10T19:39:16Z","author_association":"NONE","body":"Thanks for the fast, good and detailed answer.\r\n\r\n1.\r\nI would like to contribute and will have a look at the compile and test process android. I cant promise anything, especially witihn my repository i would already test liboqs on android completly. But at the very end.  \r\n\r\n2.\r\n`\r\nimplicit declaration of function 'aligned_alloc' is invalid in C99\r\n`\r\nI did Not thought about it being a specific Android Problem i will have a closer look at this.\r\n\r\nTL;DR\r\n`\r\nwithout the need of changing anything in the cloned files.\r\n\r\nWhy do you have this goal? If something does not work as intended, it should be corrected, no?\r\n`\r\nThats why i created an issue. I Just didnt want to fix the Problem Just in my Android repo and copying 90% of the Code :)\r\nI hopefully can provide some parts of the solution.","performed_via_github_app":null}},"public":true,"created_at":"2021-08-10T19:39:17Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
