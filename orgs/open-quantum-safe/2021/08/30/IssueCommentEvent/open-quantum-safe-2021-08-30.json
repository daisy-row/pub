{"id":"17763389732","type":"IssueCommentEvent","actor":{"id":36664211,"login":"vt-alt","display_login":"vt-alt","gravatar_id":"","url":"https://api.github.com/users/vt-alt","avatar_url":"https://avatars.githubusercontent.com/u/36664211?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1081","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1081/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1081/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1081/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1081","id":982093901,"node_id":"MDU6SXNzdWU5ODIwOTM5MDE=","number":1081,"title":"Shared library versioning scheme (SOVERSION)","user":{"login":"vt-alt","id":36664211,"node_id":"MDQ6VXNlcjM2NjY0MjEx","avatar_url":"https://avatars.githubusercontent.com/u/36664211?v=4","gravatar_id":"","url":"https://api.github.com/users/vt-alt","html_url":"https://github.com/vt-alt","followers_url":"https://api.github.com/users/vt-alt/followers","following_url":"https://api.github.com/users/vt-alt/following{/other_user}","gists_url":"https://api.github.com/users/vt-alt/gists{/gist_id}","starred_url":"https://api.github.com/users/vt-alt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vt-alt/subscriptions","organizations_url":"https://api.github.com/users/vt-alt/orgs","repos_url":"https://api.github.com/users/vt-alt/repos","events_url":"https://api.github.com/users/vt-alt/events{/privacy}","received_events_url":"https://api.github.com/users/vt-alt/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-08-29T13:03:22Z","updated_at":"2021-08-30T02:13:01Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"As pointed there https://github.com/open-quantum-safe/openssh/issues/111#issuecomment-907751920 `liboqs` would benefit from proper _library versioning_. (Sometimes called _API version_ or _SOVERSION_). This is different thing than usual project versioning. It's purpose to maintain binary (ABI) compatibility between executable binaries and shared libraries. Currently, liboqs just copy project version into SOVERSION which does not reflect backward incompatible ABI changes (which may cause obscure program errors when binary that is linked to a newer library used on system with older library â€” current versioning allows this, because major version number (that signifying backward-incompatible ABI change) is not incremented (while library does have backward incompatible ABI changes).\r\n\r\nReferences:\r\n* General explanation https://stackoverflow.com/questions/12637841/what-is-the-soname-option-for-building-shared-libraries-for\r\n* GNU tooling https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html (Note that their `-version-info` arguments order is different from what will actually appear in the library suffix - they say `current:revision:age`, but library will be named like `liboqs.so..current.age.revision`).\r\n* Cmake property https://cmake.org/cmake/help/latest/prop_tgt/SOVERSION.html\r\n\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/907958252","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1081#issuecomment-907958252","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1081","id":907958252,"node_id":"IC_kwDOA-eq3c42Hlfs","user":{"login":"vt-alt","id":36664211,"node_id":"MDQ6VXNlcjM2NjY0MjEx","avatar_url":"https://avatars.githubusercontent.com/u/36664211?v=4","gravatar_id":"","url":"https://api.github.com/users/vt-alt","html_url":"https://github.com/vt-alt","followers_url":"https://api.github.com/users/vt-alt/followers","following_url":"https://api.github.com/users/vt-alt/following{/other_user}","gists_url":"https://api.github.com/users/vt-alt/gists{/gist_id}","starred_url":"https://api.github.com/users/vt-alt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vt-alt/subscriptions","organizations_url":"https://api.github.com/users/vt-alt/orgs","repos_url":"https://api.github.com/users/vt-alt/repos","events_url":"https://api.github.com/users/vt-alt/events{/privacy}","received_events_url":"https://api.github.com/users/vt-alt/received_events","type":"User","site_admin":false},"created_at":"2021-08-30T02:13:01Z","updated_at":"2021-08-30T02:13:01Z","author_association":"CONTRIBUTOR","body":"I think Dilithium ABI (that was caused heap corruption) is changed with changes like this: https://github.com/open-quantum-safe/liboqs/commits/main/src/sig/dilithium/sig_dilithium.h, for example when any `_length_` define is increased. `abipkgdiff` cannot detect this, because (I think) it is change in `define` and buffers are passed using generic `uint8_t *` pointer of unspecified length.\r\n\r\nSo, any release after such change should have incremented SOVERSION.\r\n\r\n","performed_via_github_app":null}},"public":true,"created_at":"2021-08-30T02:13:01Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"17764741502","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":288761656,"name":"open-quantum-safe/profiling","url":"https://api.github.com/repos/open-quantum-safe/profiling"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/62","repository_url":"https://api.github.com/repos/open-quantum-safe/profiling","labels_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/62/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/62/comments","events_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/62/events","html_url":"https://github.com/open-quantum-safe/profiling/issues/62","id":977997447,"node_id":"MDU6SXNzdWU5Nzc5OTc0NDc=","number":62,"title":"Missing/incorrect units in benchmark results","user":{"login":"MaChengxin","id":7589678,"node_id":"MDQ6VXNlcjc1ODk2Nzg=","avatar_url":"https://avatars.githubusercontent.com/u/7589678?v=4","gravatar_id":"","url":"https://api.github.com/users/MaChengxin","html_url":"https://github.com/MaChengxin","followers_url":"https://api.github.com/users/MaChengxin/followers","following_url":"https://api.github.com/users/MaChengxin/following{/other_user}","gists_url":"https://api.github.com/users/MaChengxin/gists{/gist_id}","starred_url":"https://api.github.com/users/MaChengxin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MaChengxin/subscriptions","organizations_url":"https://api.github.com/users/MaChengxin/orgs","repos_url":"https://api.github.com/users/MaChengxin/repos","events_url":"https://api.github.com/users/MaChengxin/events{/privacy}","received_events_url":"https://api.github.com/users/MaChengxin/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"assignees":[{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2021-08-24T11:30:18Z","updated_at":"2021-08-30T05:28:39Z","closed_at":"2021-08-28T17:17:41Z","author_association":"NONE","active_lock_reason":null,"body":"1. On the [result page of signature algorithms memory usage](https://openquantumsafe.org/benchmarking/visualization/mem_sig.html), the unit of the values in the table is not specified. It should be \"bytes\", right?\r\n2. In the three charts (keygen operations, sign operations, verify operations) following the table on this page, the labels for the y-axis seems to be incorrect. The labels are \"keygen/s\", \"sign/s\", and \"verify/s\" respectively, same as those in [SIG algorithms runtime performance](https://openquantumsafe.org/benchmarking/visualization/speed_sig.html). Aren't they supposed to be \"bytes\"?\r\n\r\nPS: I took a look at the source code [here](https://github.com/open-quantum-safe/profiling/blob/db88970996401da1e6d6b0f25f530ee627659c03/visualization/speed_sig_script.js#L188) and [here](https://github.com/open-quantum-safe/profiling/blob/db88970996401da1e6d6b0f25f530ee627659c03/visualization/mem_sig_script.js#L197) and found that the labels are not consistent with those I saw on [the benchmark page](https://openquantumsafe.org/benchmarking/).","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/comments/908041087","html_url":"https://github.com/open-quantum-safe/profiling/issues/62#issuecomment-908041087","issue_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/62","id":908041087,"node_id":"IC_kwDOETYnOM42H5t_","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-08-30T05:28:39Z","updated_at":"2021-08-30T05:28:39Z","author_association":"MEMBER","body":"After the server code update over the weekend, the two bugs reported are now gone for good at https://openquantumsafe.org/benchmarking.\r\n\r\n> PS: I took a look at the source code here and here and found that the labels are not consistent with those I saw on the benchmark page.\r\n\r\nThese observations are correct and in line with what is intended as the code actually running is in [oqsvis.js](https://github.com/open-quantum-safe/profiling/blob/main/visualization/oqsvis.js) ([and this](https://github.com/open-quantum-safe/profiling/blob/900b96d5f0cc12573dc58b13867ff61fcd9f3424/visualization/oqsvis.js#L280-L287) defines the chart labels as we refactored to do away with code duplications). It may be sensible to remove the old JS to not cause confusion.","performed_via_github_app":null}},"public":true,"created_at":"2021-08-30T05:28:39Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"17765854454","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1081","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1081/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1081/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1081/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1081","id":982093901,"node_id":"MDU6SXNzdWU5ODIwOTM5MDE=","number":1081,"title":"Shared library versioning scheme (SOVERSION)","user":{"login":"vt-alt","id":36664211,"node_id":"MDQ6VXNlcjM2NjY0MjEx","avatar_url":"https://avatars.githubusercontent.com/u/36664211?v=4","gravatar_id":"","url":"https://api.github.com/users/vt-alt","html_url":"https://github.com/vt-alt","followers_url":"https://api.github.com/users/vt-alt/followers","following_url":"https://api.github.com/users/vt-alt/following{/other_user}","gists_url":"https://api.github.com/users/vt-alt/gists{/gist_id}","starred_url":"https://api.github.com/users/vt-alt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vt-alt/subscriptions","organizations_url":"https://api.github.com/users/vt-alt/orgs","repos_url":"https://api.github.com/users/vt-alt/repos","events_url":"https://api.github.com/users/vt-alt/events{/privacy}","received_events_url":"https://api.github.com/users/vt-alt/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-08-29T13:03:22Z","updated_at":"2021-08-30T07:22:28Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"As pointed there https://github.com/open-quantum-safe/openssh/issues/111#issuecomment-907751920 `liboqs` would benefit from proper _library versioning_. (Sometimes called _API version_ or _SOVERSION_). This is different thing than usual project versioning. It's purpose to maintain binary (ABI) compatibility between executable binaries and shared libraries. Currently, liboqs just copy project version into SOVERSION which does not reflect backward incompatible ABI changes (which may cause obscure program errors when binary that is linked to a newer library used on system with older library â€” current versioning allows this, because major version number (that signifying backward-incompatible ABI change) is not incremented (while library does have backward incompatible ABI changes).\r\n\r\nReferences:\r\n* General explanation https://stackoverflow.com/questions/12637841/what-is-the-soname-option-for-building-shared-libraries-for\r\n* GNU tooling https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html (Note that their `-version-info` arguments order is different from what will actually appear in the library suffix - they say `current:revision:age`, but library will be named like `liboqs.so..current.age.revision`).\r\n* Cmake property https://cmake.org/cmake/help/latest/prop_tgt/SOVERSION.html\r\n\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/908100280","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1081#issuecomment-908100280","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1081","id":908100280,"node_id":"IC_kwDOA-eq3c42IIK4","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2021-08-30T07:22:28Z","updated_at":"2021-08-30T07:22:28Z","author_association":"MEMBER","body":"Thanks again for the explanation and tests. \r\n\r\n> So, any release after such change should have incremented SOVERSION.\r\n\r\nOne question related to this: In your opinion/experience, would a \"regular\" (read: couple of times a year) increase of `SOVERSION` not be \"unusual\" or even create problems for downstream users of the library? Reason for asking: `liboqs` basically is a collection of many different upstream algorithms -- each of which is separately enhanced (one example of which is Dilithium as you point out above) by a separate team.\r\n\r\nThus --short of manually analyzing each upstream code import in detail to judge the need for a version increase-- the one way to be sure such (possibly) \"ABI-breaking\" changes are detected/highlighted would be to increase `SOVERSION` each time a release is done after importing _any_ new upstream algorithm version. The latter is typically done automatically via [copy_from_upstream](https://github.com/open-quantum-safe/liboqs/blob/main/scripts/copy_from_upstream/copy_from_upstream.py) to minimize the need to inspect all upstream code.\r\n\r\nIn other words, would a simple (\"preventative\") `SOVERSION`++ be sufficient (advisable?) each time (i.e., for each release) after taking in any updated upstream code (or intentionally changing `liboqs`' common APIs)?","performed_via_github_app":null}},"public":true,"created_at":"2021-08-30T07:22:28Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
