{"id":"20143171385","type":"IssueCommentEvent","actor":{"id":5675552,"login":"LeShadow","display_login":"LeShadow","gravatar_id":"","url":"https://api.github.com/users/LeShadow","avatar_url":"https://avatars.githubusercontent.com/u/5675552?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/351","id":1124299120,"node_id":"I_kwDOA_fpb85DA3Fw","number":351,"title":"Integrating OpenSSL & Liboqs in Python - SSL Unexpected Message","user":{"login":"LeShadow","id":5675552,"node_id":"MDQ6VXNlcjU2NzU1NTI=","avatar_url":"https://avatars.githubusercontent.com/u/5675552?v=4","gravatar_id":"","url":"https://api.github.com/users/LeShadow","html_url":"https://github.com/LeShadow","followers_url":"https://api.github.com/users/LeShadow/followers","following_url":"https://api.github.com/users/LeShadow/following{/other_user}","gists_url":"https://api.github.com/users/LeShadow/gists{/gist_id}","starred_url":"https://api.github.com/users/LeShadow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LeShadow/subscriptions","organizations_url":"https://api.github.com/users/LeShadow/orgs","repos_url":"https://api.github.com/users/LeShadow/repos","events_url":"https://api.github.com/users/LeShadow/events{/privacy}","received_events_url":"https://api.github.com/users/LeShadow/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2022-02-04T15:01:53Z","updated_at":"2022-02-09T02:52:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hey!\r\n\r\nSo for the last few days I have been trying to integrate liboqs and this version of OpenSSL in Python 3.8.11. \r\nThis is basically what I am doing:\r\n\r\n- Configure and compile liboqs with the following configure settings: `cmake -GNinja -DOQS_DIST_BUILD=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=../../openssl/oqs ..`\r\n- Configure and compile openssl with the following configure settings: `./Configure shared linux-x86_64 -lm --prefix=/opt/openssl_installed --openssldir=/opt/openssl_installed`\r\n\r\nNow when I compile Python, it finds that custom openssl installation, I added the paths to my PATH as well.\r\n\r\nHowever, when I then use Python, every SSL connection (even the ones without PQC) are getting an error with SSL \"UNEXPECTED MESSAGE\".\r\n\r\nExample:\r\n ```\r\nStarting new HTTPS connection (1): pypi.org:443\r\nIncremented Retry for (url='/simple/requests/'): Retry(total=4, connect=None, read=None, redirect=None, status=None)\r\nWARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLError(1, '[SSL: UNEXPECTED_MESSAGE] unexpected message (_ssl.c:1131)'))': /simple/requests/\r\n```\r\n\r\nI was wondering if anyone could give me pointers, or get me on the right path, on how to fix this?\r\n\r\nThank you!","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1033290103","html_url":"https://github.com/open-quantum-safe/openssl/issues/351#issuecomment-1033290103","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351","id":1033290103,"node_id":"IC_kwDOA_fpb849lsF3","user":{"login":"LeShadow","id":5675552,"node_id":"MDQ6VXNlcjU2NzU1NTI=","avatar_url":"https://avatars.githubusercontent.com/u/5675552?v=4","gravatar_id":"","url":"https://api.github.com/users/LeShadow","html_url":"https://github.com/LeShadow","followers_url":"https://api.github.com/users/LeShadow/followers","following_url":"https://api.github.com/users/LeShadow/following{/other_user}","gists_url":"https://api.github.com/users/LeShadow/gists{/gist_id}","starred_url":"https://api.github.com/users/LeShadow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LeShadow/subscriptions","organizations_url":"https://api.github.com/users/LeShadow/orgs","repos_url":"https://api.github.com/users/LeShadow/repos","events_url":"https://api.github.com/users/LeShadow/events{/privacy}","received_events_url":"https://api.github.com/users/LeShadow/received_events","type":"User","site_admin":false},"created_at":"2022-02-09T02:52:08Z","updated_at":"2022-02-09T02:52:08Z","author_association":"NONE","body":"Small status update:\r\n\r\n@baentsch \r\n\r\nAfter a few days of being ill, I thought I'd continue on my journey to get this to work!\r\n\r\n\r\nSo, first I discovered that the version of Python that I was compiling (**3.8.11**) didn't have the same implementation of SSL (or not entirely the same, there are differences on how things are defined or executed) as the current version (which is Python **3.10.2**). So I was also looking at the wrong code in Github to understand errors etc...\r\n\r\nSo I compiled Python 3.10.2 with the oqs-openssl, as described above, and now I get a different error. \r\nFor a test connection on port `6058`, which uses `p256_lightsaber` instead of `saber`, I get this:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/opt/python310_installed/bin/test_seb.py\", line 11, in <module>\r\n    sslSettings.set_ecdh_curve(\"p256_lightsaber\")\r\nssl.SSLError: [EC: UNKNOWN_GROUP] unknown group (_ssl.c:4331)\r\n```\r\nThis error is caused in the following function (can also be found [here](https://github.com/python/cpython/blob/77bab59c8a1f04922bb975cc4f11e5323d1d379d/Modules/_ssl.c#L4316)):\r\n```\r\nstatic PyObject *\r\n_ssl__SSLContext_set_ecdh_curve(PySSLContext *self, PyObject *name)\r\n/*[clinic end generated code: output=23022c196e40d7d2 input=c2bafb6f6e34726b]*/\r\n{\r\n    PyObject *name_bytes;\r\n    int nid;\r\n    EC_KEY *key;\r\n\r\n    if (!PyUnicode_FSConverter(name, &name_bytes))\r\n        return NULL;\r\n    assert(PyBytes_Check(name_bytes));\r\n    nid = OBJ_sn2nid(PyBytes_AS_STRING(name_bytes));\r\n    Py_DECREF(name_bytes);\r\n    if (nid == 0) {\r\n        PyErr_Format(PyExc_ValueError,\r\n                     \"unknown elliptic curve name %R\", name);\r\n        return NULL; ==> THIS IS LINE 4331\r\n    }\r\n    key = EC_KEY_new_by_curve_name(nid);\r\n    if (key == NULL) {\r\n        _setSSLError(get_state_ctx(self), NULL, 0, __FILE__, __LINE__);\r\n        return NULL;\r\n    }\r\n    SSL_CTX_set_tmp_ecdh(self->ctx, key);\r\n    EC_KEY_free(key);\r\n    Py_RETURN_NONE;\r\n}\r\n```\r\n\r\nI went to the include files for `oqs-openssl`, and behold, that is defined in obj_mac.h. So now I am trying to figure out why it can't find that group, yet it exists. Maybe I am missing something? I'll keep you posted!\r\n\r\nTo be continued...","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1033290103/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-02-09T02:52:08Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20156722269","type":"IssueCommentEvent","actor":{"id":55515041,"login":"mraavi5","display_login":"mraavi5","gravatar_id":"","url":"https://api.github.com/users/mraavi5","avatar_url":"https://avatars.githubusercontent.com/u/55515041?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/73","repository_url":"https://api.github.com/repos/open-quantum-safe/boringssl","labels_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/73/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/73/comments","events_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/73/events","html_url":"https://github.com/open-quantum-safe/boringssl/issues/73","id":1027643762,"node_id":"I_kwDOCrBzOM49QJly","number":73,"title":"Session-out not writing to file ","user":{"login":"prchander","id":54725951,"node_id":"MDQ6VXNlcjU0NzI1OTUx","avatar_url":"https://avatars.githubusercontent.com/u/54725951?v=4","gravatar_id":"","url":"https://api.github.com/users/prchander","html_url":"https://github.com/prchander","followers_url":"https://api.github.com/users/prchander/followers","following_url":"https://api.github.com/users/prchander/following{/other_user}","gists_url":"https://api.github.com/users/prchander/gists{/gist_id}","starred_url":"https://api.github.com/users/prchander/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/prchander/subscriptions","organizations_url":"https://api.github.com/users/prchander/orgs","repos_url":"https://api.github.com/users/prchander/repos","events_url":"https://api.github.com/users/prchander/events{/privacy}","received_events_url":"https://api.github.com/users/prchander/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-10-15T17:18:11Z","updated_at":"2022-02-09T17:07:02Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello, I have a basic client and server that I was testing session resumption on.  The client had this code:\r\n~/oqs/boringssl/build/tool/bssl client -connect 10.0.0.2:44330 -session-out res.txt\r\n\r\nThe connection established but it does not write anything to the file. Am I doing something wrong with the file format?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/73/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/73/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/comments/1033991525","html_url":"https://github.com/open-quantum-safe/boringssl/issues/73#issuecomment-1033991525","issue_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/73","id":1033991525,"node_id":"IC_kwDOCrBzOM49oXVl","user":{"login":"mraavi5","id":55515041,"node_id":"MDQ6VXNlcjU1NTE1MDQx","avatar_url":"https://avatars.githubusercontent.com/u/55515041?v=4","gravatar_id":"","url":"https://api.github.com/users/mraavi5","html_url":"https://github.com/mraavi5","followers_url":"https://api.github.com/users/mraavi5/followers","following_url":"https://api.github.com/users/mraavi5/following{/other_user}","gists_url":"https://api.github.com/users/mraavi5/gists{/gist_id}","starred_url":"https://api.github.com/users/mraavi5/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mraavi5/subscriptions","organizations_url":"https://api.github.com/users/mraavi5/orgs","repos_url":"https://api.github.com/users/mraavi5/repos","events_url":"https://api.github.com/users/mraavi5/events{/privacy}","received_events_url":"https://api.github.com/users/mraavi5/received_events","type":"User","site_admin":false},"created_at":"2022-02-09T17:07:02Z","updated_at":"2022-02-09T17:07:02Z","author_association":"NONE","body":"It's working with that set of commands. Thank you!!","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/comments/1033991525/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-02-09T17:07:02Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20158263113","type":"IssueCommentEvent","actor":{"id":5675552,"login":"LeShadow","display_login":"LeShadow","gravatar_id":"","url":"https://api.github.com/users/LeShadow","avatar_url":"https://avatars.githubusercontent.com/u/5675552?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/351","id":1124299120,"node_id":"I_kwDOA_fpb85DA3Fw","number":351,"title":"Integrating OpenSSL & Liboqs in Python - SSL Unexpected Message","user":{"login":"LeShadow","id":5675552,"node_id":"MDQ6VXNlcjU2NzU1NTI=","avatar_url":"https://avatars.githubusercontent.com/u/5675552?v=4","gravatar_id":"","url":"https://api.github.com/users/LeShadow","html_url":"https://github.com/LeShadow","followers_url":"https://api.github.com/users/LeShadow/followers","following_url":"https://api.github.com/users/LeShadow/following{/other_user}","gists_url":"https://api.github.com/users/LeShadow/gists{/gist_id}","starred_url":"https://api.github.com/users/LeShadow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LeShadow/subscriptions","organizations_url":"https://api.github.com/users/LeShadow/orgs","repos_url":"https://api.github.com/users/LeShadow/repos","events_url":"https://api.github.com/users/LeShadow/events{/privacy}","received_events_url":"https://api.github.com/users/LeShadow/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2022-02-04T15:01:53Z","updated_at":"2022-02-09T18:35:01Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hey!\r\n\r\nSo for the last few days I have been trying to integrate liboqs and this version of OpenSSL in Python 3.8.11. \r\nThis is basically what I am doing:\r\n\r\n- Configure and compile liboqs with the following configure settings: `cmake -GNinja -DOQS_DIST_BUILD=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=../../openssl/oqs ..`\r\n- Configure and compile openssl with the following configure settings: `./Configure shared linux-x86_64 -lm --prefix=/opt/openssl_installed --openssldir=/opt/openssl_installed`\r\n\r\nNow when I compile Python, it finds that custom openssl installation, I added the paths to my PATH as well.\r\n\r\nHowever, when I then use Python, every SSL connection (even the ones without PQC) are getting an error with SSL \"UNEXPECTED MESSAGE\".\r\n\r\nExample:\r\n ```\r\nStarting new HTTPS connection (1): pypi.org:443\r\nIncremented Retry for (url='/simple/requests/'): Retry(total=4, connect=None, read=None, redirect=None, status=None)\r\nWARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLError(1, '[SSL: UNEXPECTED_MESSAGE] unexpected message (_ssl.c:1131)'))': /simple/requests/\r\n```\r\n\r\nI was wondering if anyone could give me pointers, or get me on the right path, on how to fix this?\r\n\r\nThank you!","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1034073072","html_url":"https://github.com/open-quantum-safe/openssl/issues/351#issuecomment-1034073072","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351","id":1034073072,"node_id":"IC_kwDOA_fpb849orPw","user":{"login":"LeShadow","id":5675552,"node_id":"MDQ6VXNlcjU2NzU1NTI=","avatar_url":"https://avatars.githubusercontent.com/u/5675552?v=4","gravatar_id":"","url":"https://api.github.com/users/LeShadow","html_url":"https://github.com/LeShadow","followers_url":"https://api.github.com/users/LeShadow/followers","following_url":"https://api.github.com/users/LeShadow/following{/other_user}","gists_url":"https://api.github.com/users/LeShadow/gists{/gist_id}","starred_url":"https://api.github.com/users/LeShadow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LeShadow/subscriptions","organizations_url":"https://api.github.com/users/LeShadow/orgs","repos_url":"https://api.github.com/users/LeShadow/repos","events_url":"https://api.github.com/users/LeShadow/events{/privacy}","received_events_url":"https://api.github.com/users/LeShadow/received_events","type":"User","site_admin":false},"created_at":"2022-02-09T18:35:01Z","updated_at":"2022-02-09T18:35:01Z","author_association":"NONE","body":"@baentsch \r\nMy initial assessment was wrong, because of the following reasons:\r\n\r\n_(in my explanation, every time I say a function name, the name is clickable!)_\r\n\r\n- Python was using the correct compiled openssl libraries\r\n- on the function I posted above, where it says \"this is line 4331\", the function actually gives an error where it states `_setSSLError`\r\n\r\nNow I tracked down why it kept saying \"UNKNOWN GROUP\", which is an error thrown on that line.\r\n\r\nIf we have a look at that function again, [_ssl__SSLContext_set_ecdh_curve](https://github.com/python/cpython/blob/d18120cd67b4297f78bfc9bf7b36774cf0bf15f2/Modules/_ssl.c#L4316):\r\n```\r\nstatic PyObject *\r\n_ssl__SSLContext_set_ecdh_curve(PySSLContext *self, PyObject *name)\r\n/*[clinic end generated code: output=23022c196e40d7d2 input=c2bafb6f6e34726b]*/\r\n{\r\n    PyObject *name_bytes;\r\n    int nid;\r\n    EC_KEY *key;\r\n\r\n    if (!PyUnicode_FSConverter(name, &name_bytes))\r\n        return NULL;\r\n    assert(PyBytes_Check(name_bytes));\r\n    nid = OBJ_sn2nid(PyBytes_AS_STRING(name_bytes));\r\n    Py_DECREF(name_bytes);\r\n    if (nid == 0) {\r\n        PyErr_Format(PyExc_ValueError,\r\n                     \"unknown elliptic curve name %R\", name);\r\n        return NULL;\r\n    }\r\n    key = EC_KEY_new_by_curve_name(nid); ===> THIS LINE\r\n    if (key == NULL) {\r\n        _setSSLError(get_state_ctx(self), NULL, 0, __FILE__, __LINE__);\r\n        return NULL;\r\n    }\r\n    SSL_CTX_set_tmp_ecdh(self->ctx, key);\r\n    EC_KEY_free(key);\r\n    Py_RETURN_NONE;\r\n}\r\n```\r\n\r\nThe line where I say, THIS LINE, calls the openssl function [`EC_KEY_new_by_curve_name`](https://github.com/open-quantum-safe/openssl/blob/9815027fbc46a4ba3637ceb95b5b1fd7bc765a4a/crypto/ec/ec_key.c#L24). Now this function contains the following: \r\n```\r\nEC_KEY *EC_KEY_new_by_curve_name(int nid)\r\n{\r\n    EC_KEY *ret = EC_KEY_new();\r\n    if (ret == NULL)\r\n        return NULL;\r\n    ret->group = EC_GROUP_new_by_curve_name(nid);\r\n    if (ret->group == NULL) {\r\n        EC_KEY_free(ret);\r\n        return NULL;\r\n    }\r\n    if (ret->meth->set_group != NULL\r\n        && ret->meth->set_group(ret, ret->group) == 0) {\r\n        EC_KEY_free(ret);\r\n        return NULL;\r\n    }\r\n    return ret;\r\n}\r\n```\r\n\r\nWe can see it calls [`EC_GROUP_new_by_curve_name`](https://github.com/open-quantum-safe/openssl/blob/9815027fbc46a4ba3637ceb95b5b1fd7bc765a4a/crypto/ec/ec_curve.c#L3144) which in itself contains:\r\n```\r\nEC_GROUP *EC_GROUP_new_by_curve_name(int nid)\r\n{\r\n    size_t i;\r\n    EC_GROUP *ret = NULL;\r\n\r\n    if (nid <= 0)\r\n        return NULL;\r\n\r\n    for (i = 0; i < curve_list_length; i++)\r\n        if (curve_list[i].nid == nid) {\r\n            ret = ec_group_new_from_data(curve_list[i]);\r\n            break;\r\n        }\r\n\r\n    if (ret == NULL) {\r\n        ECerr(EC_F_EC_GROUP_NEW_BY_CURVE_NAME, EC_R_UNKNOWN_GROUP);\r\n        return NULL;\r\n    }\r\n\r\n    return ret;\r\n}\r\n```\r\n\r\nAs we can see, this function depends on `curve_list`, which is a defined list of curves that can be used by OpenSSL in all its functions. Since saber is missing from the list (can be found [here](https://github.com/open-quantum-safe/openssl/blob/9815027fbc46a4ba3637ceb95b5b1fd7bc765a4a/crypto/ec/ec_curve.c#L2801)), this is why it will always say \"UNKNOWN GROUP\" when we try to use saber, by using `set_ecdh_curve`.\r\n\r\nI would like to see if we can get past this, but at this moment my knowledge is quite limited on how we can achieve this. Maybe you have an idea, or anyone else for that matter, that might get me on the right path?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1034073072/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-02-09T18:35:02Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20158537139","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/351","id":1124299120,"node_id":"I_kwDOA_fpb85DA3Fw","number":351,"title":"Integrating OpenSSL & Liboqs in Python - SSL Unexpected Message","user":{"login":"LeShadow","id":5675552,"node_id":"MDQ6VXNlcjU2NzU1NTI=","avatar_url":"https://avatars.githubusercontent.com/u/5675552?v=4","gravatar_id":"","url":"https://api.github.com/users/LeShadow","html_url":"https://github.com/LeShadow","followers_url":"https://api.github.com/users/LeShadow/followers","following_url":"https://api.github.com/users/LeShadow/following{/other_user}","gists_url":"https://api.github.com/users/LeShadow/gists{/gist_id}","starred_url":"https://api.github.com/users/LeShadow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LeShadow/subscriptions","organizations_url":"https://api.github.com/users/LeShadow/orgs","repos_url":"https://api.github.com/users/LeShadow/repos","events_url":"https://api.github.com/users/LeShadow/events{/privacy}","received_events_url":"https://api.github.com/users/LeShadow/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2022-02-04T15:01:53Z","updated_at":"2022-02-09T18:52:00Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hey!\r\n\r\nSo for the last few days I have been trying to integrate liboqs and this version of OpenSSL in Python 3.8.11. \r\nThis is basically what I am doing:\r\n\r\n- Configure and compile liboqs with the following configure settings: `cmake -GNinja -DOQS_DIST_BUILD=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=../../openssl/oqs ..`\r\n- Configure and compile openssl with the following configure settings: `./Configure shared linux-x86_64 -lm --prefix=/opt/openssl_installed --openssldir=/opt/openssl_installed`\r\n\r\nNow when I compile Python, it finds that custom openssl installation, I added the paths to my PATH as well.\r\n\r\nHowever, when I then use Python, every SSL connection (even the ones without PQC) are getting an error with SSL \"UNEXPECTED MESSAGE\".\r\n\r\nExample:\r\n ```\r\nStarting new HTTPS connection (1): pypi.org:443\r\nIncremented Retry for (url='/simple/requests/'): Retry(total=4, connect=None, read=None, redirect=None, status=None)\r\nWARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLError(1, '[SSL: UNEXPECTED_MESSAGE] unexpected message (_ssl.c:1131)'))': /simple/requests/\r\n```\r\n\r\nI was wondering if anyone could give me pointers, or get me on the right path, on how to fix this?\r\n\r\nThank you!","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1034087122","html_url":"https://github.com/open-quantum-safe/openssl/issues/351#issuecomment-1034087122","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351","id":1034087122,"node_id":"IC_kwDOA_fpb849ourS","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-02-09T18:52:00Z","updated_at":"2022-02-09T18:52:00Z","author_association":"MEMBER","body":"Thanks for this summary. The moment the code goes down the \"EC\" (elliptic curve) API route, things are doomed as OQS crypto does not provide EC curves (but TLS 1.3 groups -- which in TLS 1.2 were identical with EC curves, admittedly). My hope had been that the Python code just uses the higher-level OpenSSL EVP TLS APIs (under \"the hood\" of which we hide OQS crypto in oqs-openssl). \r\n\r\nHowever, this now interests me a bit: Could you share where you obtained the python code from, what --beyond liboqs and oqs-openssl-- you compiled (and how/config options, platform, compiler, etc) and how you integrated oqs-openssl in order to trigger the tests above? I'd like to understand why Python uses these comparatively low-level APIs (and whether there may be a way around them).","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1034087122/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-02-09T18:52:00Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20161091241","type":"IssueCommentEvent","actor":{"id":5675552,"login":"LeShadow","display_login":"LeShadow","gravatar_id":"","url":"https://api.github.com/users/LeShadow","avatar_url":"https://avatars.githubusercontent.com/u/5675552?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/351","id":1124299120,"node_id":"I_kwDOA_fpb85DA3Fw","number":351,"title":"Integrating OpenSSL & Liboqs in Python - SSL Unexpected Message","user":{"login":"LeShadow","id":5675552,"node_id":"MDQ6VXNlcjU2NzU1NTI=","avatar_url":"https://avatars.githubusercontent.com/u/5675552?v=4","gravatar_id":"","url":"https://api.github.com/users/LeShadow","html_url":"https://github.com/LeShadow","followers_url":"https://api.github.com/users/LeShadow/followers","following_url":"https://api.github.com/users/LeShadow/following{/other_user}","gists_url":"https://api.github.com/users/LeShadow/gists{/gist_id}","starred_url":"https://api.github.com/users/LeShadow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LeShadow/subscriptions","organizations_url":"https://api.github.com/users/LeShadow/orgs","repos_url":"https://api.github.com/users/LeShadow/repos","events_url":"https://api.github.com/users/LeShadow/events{/privacy}","received_events_url":"https://api.github.com/users/LeShadow/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2022-02-04T15:01:53Z","updated_at":"2022-02-09T21:38:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hey!\r\n\r\nSo for the last few days I have been trying to integrate liboqs and this version of OpenSSL in Python 3.8.11. \r\nThis is basically what I am doing:\r\n\r\n- Configure and compile liboqs with the following configure settings: `cmake -GNinja -DOQS_DIST_BUILD=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=../../openssl/oqs ..`\r\n- Configure and compile openssl with the following configure settings: `./Configure shared linux-x86_64 -lm --prefix=/opt/openssl_installed --openssldir=/opt/openssl_installed`\r\n\r\nNow when I compile Python, it finds that custom openssl installation, I added the paths to my PATH as well.\r\n\r\nHowever, when I then use Python, every SSL connection (even the ones without PQC) are getting an error with SSL \"UNEXPECTED MESSAGE\".\r\n\r\nExample:\r\n ```\r\nStarting new HTTPS connection (1): pypi.org:443\r\nIncremented Retry for (url='/simple/requests/'): Retry(total=4, connect=None, read=None, redirect=None, status=None)\r\nWARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLError(1, '[SSL: UNEXPECTED_MESSAGE] unexpected message (_ssl.c:1131)'))': /simple/requests/\r\n```\r\n\r\nI was wondering if anyone could give me pointers, or get me on the right path, on how to fix this?\r\n\r\nThank you!","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1034216263","html_url":"https://github.com/open-quantum-safe/openssl/issues/351#issuecomment-1034216263","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351","id":1034216263,"node_id":"IC_kwDOA_fpb849pONH","user":{"login":"LeShadow","id":5675552,"node_id":"MDQ6VXNlcjU2NzU1NTI=","avatar_url":"https://avatars.githubusercontent.com/u/5675552?v=4","gravatar_id":"","url":"https://api.github.com/users/LeShadow","html_url":"https://github.com/LeShadow","followers_url":"https://api.github.com/users/LeShadow/followers","following_url":"https://api.github.com/users/LeShadow/following{/other_user}","gists_url":"https://api.github.com/users/LeShadow/gists{/gist_id}","starred_url":"https://api.github.com/users/LeShadow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LeShadow/subscriptions","organizations_url":"https://api.github.com/users/LeShadow/orgs","repos_url":"https://api.github.com/users/LeShadow/repos","events_url":"https://api.github.com/users/LeShadow/events{/privacy}","received_events_url":"https://api.github.com/users/LeShadow/received_events","type":"User","site_admin":false},"created_at":"2022-02-09T21:38:32Z","updated_at":"2022-02-09T21:38:32Z","author_association":"NONE","body":"@baentsch \r\n\r\nI have to apologise again, with all my focus on trying to set that **ecdh** curve, I forgot to test if it would work without setting the curve. My apologies for wasting your time before on this.\r\n\r\nSo I wrote a small script that checked which key exchange algorithms worked without any issue when using the `urllib` library in Python.\r\n\r\nThis is the list of signature algorithms and key exchange algorithms that worked without any issue:\r\n\r\n```\r\n**ecdsap256**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**rsa3072**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**dilithium2**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**dilithium3**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**dilithium5**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**dilithium2_aes**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**dilithium3_aes**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**dilithium5_aes**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**falcon512**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**falcon1024**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**picnicl1full**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**picnic3l1**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**rainbowIclassic**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**rainbowVclassic**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**sphincsharaka128frobust**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**sphincssha256128frobust**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**sphincsshake256128frobust**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p256_dilithium2**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**rsa3072_dilithium2**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p384_dilithium3**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p521_dilithium5**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p256_dilithium2_aes**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**rsa3072_dilithium2_aes**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p384_dilithium3_aes**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p521_dilithium5_aes**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p256_falcon512**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**rsa3072_falcon512**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p521_falcon1024**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p256_picnicl1full**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**rsa3072_picnicl1full**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p256_picnic3l1**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**rsa3072_picnic3l1**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p256_rainbowIclassic**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**rsa3072_rainbowIclassic**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p521_rainbowVclassic**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p256_sphincsharaka128frobust**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**rsa3072_sphincsharaka128frobust**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p256_sphincssha256128frobust**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**rsa3072_sphincssha256128frobust**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**p256_sphincsshake256128frobust**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n\r\n**rsa3072_sphincsshake256128frobust**: *,p256_frodo640aes,p256_frodo640shake,p256_kyber512,p256_ntru_hps2048509,p256_lightsaber,p256_sidhp434,p256_sidhp503,p256_sikep434,p256_sikep503,p256_bikel1,p256_kyber90s512,p256_hqc128,p256_ntrulpr653,p256_ntrulpr761,p256_sntrup653,p256_sntrup761\r\n```\r\n\r\nWhat I did to get Python (3.10.2) to work with oqs-openssl and liboqs is the following:\r\n\r\n(At this point, my oqs-openssl is installed in `/opt/openssl_installed/`)\r\n\r\n- Get Python source from: [here](https://www.python.org/ftp/python/3.10.2/Python-3.10.2.tgz)\r\n- Add the openssl library to the LD_LIBRARY_PATH: `export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/openssl_installed/lib`\r\n- Unpack `Python-3.10.2.tgz` in /opt/\r\n- `mkdir /opt/python310_installed`\r\n- Go into `/opt/Python-3.10.2`\r\n- Open file `Modules/Setup` and change line [211](https://github.com/python/cpython/blob/7445949a4399ab19fbdd5a0b0aca53a690c3251b/Modules/Setup#L211)->[217](https://github.com/python/cpython/blob/7445949a4399ab19fbdd5a0b0aca53a690c3251b/Modules/Setup#L217) to the following: \r\n```\r\n OPENSSL=/opt/openssl_installed\r\n _ssl _ssl.c \\\r\n     -I$(OPENSSL)/include -I$(OPENSSL)/include/openssl -I$(OPENSSL)/include/oqs -L$(OPENSSL)/lib \\\r\n     -lssl -lcrypto -loqs\r\n_hashlib _hashopenssl.c \\\r\n     -I$(OPENSSL)/include -I$(OPENSSL)/include/openssl -I$(OPENSSL)/include/oqs -L$(OPENSSL)/lib \\\r\n     -lcrypto -loqs\r\n```\r\n- Execute: `./configure --prefix=/opt/python310_installed/ --with-openssl=/opt/openssl_installed/ --with-ensurepip=install`\r\n- Execute: `make && make test` (Some tests will fail, the ones with urllib/https connections)\r\n- Execute: `make install`\r\n\r\nTo make this work, since I compiled liboqs and oqs-openssl with shared libs, I copied `/opt/openssl_installed/lib/*` to `/lib/x86_64-linux-gnu`.\r\n\r\nAnd then I used the following script, copied to `/opt/python310_installed/bin`, to test every connection (command: `./python3.10 main.py`): \r\n```\r\nimport json\r\nimport sys \r\nimport urllib.request \r\nimport ssl \r\n\r\ngood_dict = {}\r\nbad_dict = {}\r\nwith open('assignments.json') as json_file:\r\n    algos = json.load(json_file)\r\n\r\nsslSettings= ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)\r\nsslSettings.verify_mode = ssl.CERT_REQUIRED\r\n\r\nsslSettings.load_verify_locations(cafile=\"CA.crt\")\r\n\r\nfor sig, kexalgos in algos.items():\r\n    print(\"Testing for Signature Algorithm: \" + sig)\r\n    good_dict[sig] = []\r\n    bad_dict[sig] = []\r\n    for kexalgo, port in kexalgos.items():\r\n        try:\r\n            with urllib.request.urlopen('https://test.openquantumsafe.org:' + str(port), context=sslSettings) as response:\r\n                if response.getcode() == 200:\r\n                    good_dict[sig].append(kexalgo)\r\n                    print(\"Test successful for: \" + kexalgo)\r\n                    continue\r\n                bad_dict[sig].append(kexalgo)\r\n                print(\"Test failed with code \" + str(response.getcode()) + \" for algo: \" + kexalgo)\r\n        except urllib.error.URLError as e:\r\n            bad_dict[sig].append(kexalgo)\r\n            print(\"Failed for algo:\" + kexalgo)\r\n            #print(e)\r\n        except Exception as e:\r\n            bad_dict[sig].append(kexalgo)\r\n            print(\"General error:\" + kexalgo)\r\n            #print(e)\r\n    print(\"Done testing for: \" + sig)\r\n\r\nfor siggie,algos in good_dict.items():\r\n    print(siggie + \": \" + ','.join(algos))\r\nfor siggie,algos in bad_dict.items():\r\n    print(siggie + \": \" + ','.join(algos))\r\n```\r\n\r\nNow, this is all built with shared libraries. \r\n\r\nIf you want to do it with statically linked OpenSSL Libraries, instead of changing line [211](https://github.com/python/cpython/blob/7445949a4399ab19fbdd5a0b0aca53a690c3251b/Modules/Setup#L211)->[217](https://github.com/python/cpython/blob/7445949a4399ab19fbdd5a0b0aca53a690c3251b/Modules/Setup#L217) in Modules/Setup, change line [211](https://github.com/python/cpython/blob/7445949a4399ab19fbdd5a0b0aca53a690c3251b/Modules/Setup#L211) (the correct path to your openssl installation) and then line [220](https://github.com/python/cpython/blob/7445949a4399ab19fbdd5a0b0aca53a690c3251b/Modules/Setup#L220)->[226](https://github.com/python/cpython/blob/7445949a4399ab19fbdd5a0b0aca53a690c3251b/Modules/Setup#L226) into the following:\r\n```\r\n _ssl _ssl.c \\\r\n     -I$(OPENSSL)/include -I$(OPENSSL)/include/openssl -I$(OPENSSL)/include/oqs -L$(OPENSSL)/lib \\\r\n     -l:libssl.a -Wl,--exclude-libs,libssl.a \\\r\n     -l:libcrypto.a -Wl,--exclude-libs,libcrypto.a \\\r\n      -l:liboqs.a -Wl,--exclude-libs,liboqs.a\r\n_hashlib _hashopenssl.c \\\r\n     -I$(OPENSSL)/include -I$(OPENSSL)/include/openssl -I$(OPENSSL)/include/oqs -L$(OPENSSL)/lib \\\r\n     -l:libcrypto.a -Wl,--exclude-libs,libcrypto.a \\\r\n      -l:liboqs.a -Wl,--exclude-libs,liboqs.a\r\n```","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1034216263/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-02-09T21:38:32Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20161095007","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":397651453,"name":"open-quantum-safe/libssh","url":"https://api.github.com/repos/open-quantum-safe/libssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5","repository_url":"https://api.github.com/repos/open-quantum-safe/libssh","labels_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/comments","events_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/events","html_url":"https://github.com/open-quantum-safe/libssh/issues/5","id":1115873007,"node_id":"I_kwDOF7Ot_c5Cgt7v","number":5,"title":"Update tests to (oqs-)openssh v8","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"assignees":[{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2022-01-27T07:37:44Z","updated_at":"2022-02-09T21:38:48Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"After building [libssh v0.9.6](https://www.libssh.org/files/0.9/libssh-0.9.6.tar.xz) from scratch and using the [current, v8 openssh](https://github.com/openssh/openssh-portable) as the target for client-side testing (build libssh via `cmake -DUNIT_TESTING=ON -DCMAKE_BUILD_TYPE=Debug -DCLIENT_TESTING=ON  ..`) all tests pass, apparently indicating (upstream) libssh works/tests OK with openssh v8.\r\n\r\nThis leads me to conclude that it should be possible to upgrade oqs-libssh testing to using oqs-openssh (v8) for testing -- with the goal to eliminate continued support for oqs-openssh v7.\r\n\r\n-> Doable & sensible?\r\n\r\nAs a side note, it would be good to document which (version of) libssh oqs-libssh has been branched off from. When checking the `git log` it seems to be an intermediate commit (d1abe26be3d61156976ab9bd679a9faee6afe8fc). Related question: Why is this repo no fork of https://git.libssh.org/projects/libssh.git?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/comments/1034216454","html_url":"https://github.com/open-quantum-safe/libssh/issues/5#issuecomment-1034216454","issue_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5","id":1034216454,"node_id":"IC_kwDOF7Ot_c49pOQG","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2022-02-09T21:38:48Z","updated_at":"2022-02-09T21:38:48Z","author_association":"MEMBER","body":"So are you saying that you think the v7 and v8 branches *should* be incompatible but seem not to be?  If so, that's weird and worth investigating.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/comments/1034216454/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-02-09T21:38:48Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20161252953","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/351","id":1124299120,"node_id":"I_kwDOA_fpb85DA3Fw","number":351,"title":"Integrating OpenSSL & Liboqs in Python - SSL Unexpected Message","user":{"login":"LeShadow","id":5675552,"node_id":"MDQ6VXNlcjU2NzU1NTI=","avatar_url":"https://avatars.githubusercontent.com/u/5675552?v=4","gravatar_id":"","url":"https://api.github.com/users/LeShadow","html_url":"https://github.com/LeShadow","followers_url":"https://api.github.com/users/LeShadow/followers","following_url":"https://api.github.com/users/LeShadow/following{/other_user}","gists_url":"https://api.github.com/users/LeShadow/gists{/gist_id}","starred_url":"https://api.github.com/users/LeShadow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LeShadow/subscriptions","organizations_url":"https://api.github.com/users/LeShadow/orgs","repos_url":"https://api.github.com/users/LeShadow/repos","events_url":"https://api.github.com/users/LeShadow/events{/privacy}","received_events_url":"https://api.github.com/users/LeShadow/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2022-02-04T15:01:53Z","updated_at":"2022-02-09T21:49:52Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hey!\r\n\r\nSo for the last few days I have been trying to integrate liboqs and this version of OpenSSL in Python 3.8.11. \r\nThis is basically what I am doing:\r\n\r\n- Configure and compile liboqs with the following configure settings: `cmake -GNinja -DOQS_DIST_BUILD=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=../../openssl/oqs ..`\r\n- Configure and compile openssl with the following configure settings: `./Configure shared linux-x86_64 -lm --prefix=/opt/openssl_installed --openssldir=/opt/openssl_installed`\r\n\r\nNow when I compile Python, it finds that custom openssl installation, I added the paths to my PATH as well.\r\n\r\nHowever, when I then use Python, every SSL connection (even the ones without PQC) are getting an error with SSL \"UNEXPECTED MESSAGE\".\r\n\r\nExample:\r\n ```\r\nStarting new HTTPS connection (1): pypi.org:443\r\nIncremented Retry for (url='/simple/requests/'): Retry(total=4, connect=None, read=None, redirect=None, status=None)\r\nWARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLError(1, '[SSL: UNEXPECTED_MESSAGE] unexpected message (_ssl.c:1131)'))': /simple/requests/\r\n```\r\n\r\nI was wondering if anyone could give me pointers, or get me on the right path, on how to fix this?\r\n\r\nThank you!","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1034224701","html_url":"https://github.com/open-quantum-safe/openssl/issues/351#issuecomment-1034224701","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351","id":1034224701,"node_id":"IC_kwDOA_fpb849pQQ9","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-02-09T21:49:52Z","updated_at":"2022-02-09T21:49:52Z","author_association":"MEMBER","body":"@LeShadow Thanks very much for this very positive update! Also thanks for the build instructions. The test code looks good, too (iterating over the interop test server's assignments.json): At first glance, then, all NIST level 1 hybrid KEMS and all QSC sigs work out of the box. This begs the question: What's happening with the other KEMs? I'd have expected plain QSC KEMs to work with a higher likelihood than the hybrid versions... Did they wind up in the \"bad_dict\" (presumably not output)? Any common error messages showing why this may be so?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1034224701/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-02-09T21:49:52Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20161298640","type":"IssueCommentEvent","actor":{"id":5675552,"login":"LeShadow","display_login":"LeShadow","gravatar_id":"","url":"https://api.github.com/users/LeShadow","avatar_url":"https://avatars.githubusercontent.com/u/5675552?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/351","id":1124299120,"node_id":"I_kwDOA_fpb85DA3Fw","number":351,"title":"Integrating OpenSSL & Liboqs in Python - SSL Unexpected Message","user":{"login":"LeShadow","id":5675552,"node_id":"MDQ6VXNlcjU2NzU1NTI=","avatar_url":"https://avatars.githubusercontent.com/u/5675552?v=4","gravatar_id":"","url":"https://api.github.com/users/LeShadow","html_url":"https://github.com/LeShadow","followers_url":"https://api.github.com/users/LeShadow/followers","following_url":"https://api.github.com/users/LeShadow/following{/other_user}","gists_url":"https://api.github.com/users/LeShadow/gists{/gist_id}","starred_url":"https://api.github.com/users/LeShadow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LeShadow/subscriptions","organizations_url":"https://api.github.com/users/LeShadow/orgs","repos_url":"https://api.github.com/users/LeShadow/repos","events_url":"https://api.github.com/users/LeShadow/events{/privacy}","received_events_url":"https://api.github.com/users/LeShadow/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2022-02-04T15:01:53Z","updated_at":"2022-02-09T21:53:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hey!\r\n\r\nSo for the last few days I have been trying to integrate liboqs and this version of OpenSSL in Python 3.8.11. \r\nThis is basically what I am doing:\r\n\r\n- Configure and compile liboqs with the following configure settings: `cmake -GNinja -DOQS_DIST_BUILD=ON -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=../../openssl/oqs ..`\r\n- Configure and compile openssl with the following configure settings: `./Configure shared linux-x86_64 -lm --prefix=/opt/openssl_installed --openssldir=/opt/openssl_installed`\r\n\r\nNow when I compile Python, it finds that custom openssl installation, I added the paths to my PATH as well.\r\n\r\nHowever, when I then use Python, every SSL connection (even the ones without PQC) are getting an error with SSL \"UNEXPECTED MESSAGE\".\r\n\r\nExample:\r\n ```\r\nStarting new HTTPS connection (1): pypi.org:443\r\nIncremented Retry for (url='/simple/requests/'): Retry(total=4, connect=None, read=None, redirect=None, status=None)\r\nWARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLError(1, '[SSL: UNEXPECTED_MESSAGE] unexpected message (_ssl.c:1131)'))': /simple/requests/\r\n```\r\n\r\nI was wondering if anyone could give me pointers, or get me on the right path, on how to fix this?\r\n\r\nThank you!","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1034227236","html_url":"https://github.com/open-quantum-safe/openssl/issues/351#issuecomment-1034227236","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/351","id":1034227236,"node_id":"IC_kwDOA_fpb849pQ4k","user":{"login":"LeShadow","id":5675552,"node_id":"MDQ6VXNlcjU2NzU1NTI=","avatar_url":"https://avatars.githubusercontent.com/u/5675552?v=4","gravatar_id":"","url":"https://api.github.com/users/LeShadow","html_url":"https://github.com/LeShadow","followers_url":"https://api.github.com/users/LeShadow/followers","following_url":"https://api.github.com/users/LeShadow/following{/other_user}","gists_url":"https://api.github.com/users/LeShadow/gists{/gist_id}","starred_url":"https://api.github.com/users/LeShadow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LeShadow/subscriptions","organizations_url":"https://api.github.com/users/LeShadow/orgs","repos_url":"https://api.github.com/users/LeShadow/repos","events_url":"https://api.github.com/users/LeShadow/events{/privacy}","received_events_url":"https://api.github.com/users/LeShadow/received_events","type":"User","site_admin":false},"created_at":"2022-02-09T21:53:08Z","updated_at":"2022-02-09T21:53:08Z","author_association":"NONE","body":"@baentsch I will do more tests, and see where I need to tweak the build. I will keep you in the loop!\r\n\r\nIf I can get it all working, is it something that might be put in the liboqs-demos repo or can I blog about this? (ofcourse mentioning the entire project that your team has been working on for so long!)","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1034227236/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-02-09T21:53:08Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20161625200","type":"IssueCommentEvent","actor":{"id":18724089,"login":"kevinmkane","display_login":"kevinmkane","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","avatar_url":"https://avatars.githubusercontent.com/u/18724089?"},"repo":{"id":397651453,"name":"open-quantum-safe/libssh","url":"https://api.github.com/repos/open-quantum-safe/libssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5","repository_url":"https://api.github.com/repos/open-quantum-safe/libssh","labels_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/comments","events_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/events","html_url":"https://github.com/open-quantum-safe/libssh/issues/5","id":1115873007,"node_id":"I_kwDOF7Ot_c5Cgt7v","number":5,"title":"Update tests to (oqs-)openssh v8","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"assignees":[{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2022-01-27T07:37:44Z","updated_at":"2022-02-09T22:14:26Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"After building [libssh v0.9.6](https://www.libssh.org/files/0.9/libssh-0.9.6.tar.xz) from scratch and using the [current, v8 openssh](https://github.com/openssh/openssh-portable) as the target for client-side testing (build libssh via `cmake -DUNIT_TESTING=ON -DCMAKE_BUILD_TYPE=Debug -DCLIENT_TESTING=ON  ..`) all tests pass, apparently indicating (upstream) libssh works/tests OK with openssh v8.\r\n\r\nThis leads me to conclude that it should be possible to upgrade oqs-libssh testing to using oqs-openssh (v8) for testing -- with the goal to eliminate continued support for oqs-openssh v7.\r\n\r\n-> Doable & sensible?\r\n\r\nAs a side note, it would be good to document which (version of) libssh oqs-libssh has been branched off from. When checking the `git log` it seems to be an intermediate commit (d1abe26be3d61156976ab9bd679a9faee6afe8fc). Related question: Why is this repo no fork of https://git.libssh.org/projects/libssh.git?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/comments/1034244140","html_url":"https://github.com/open-quantum-safe/libssh/issues/5#issuecomment-1034244140","issue_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5","id":1034244140,"node_id":"IC_kwDOF7Ot_c49pVAs","user":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"created_at":"2022-02-09T22:14:26Z","updated_at":"2022-02-09T22:14:26Z","author_association":"COLLABORATOR","body":"I just realized I misread what @baentsch said. He built and ran the official libssh against OQS-OpenSSH v8, and that worked. That is not surprising. Somehow I had it in my head he ran the OQS fork against it and it worked.\r\n\r\nSo, we haven't yet experimentally verified the branches are incompatible, but this alone suggests we should expect them to be.\r\n\r\nAnd this means it looks unlikely we can use OQS-OpenSSH v8 to test against the current OQS-libssh as-is, and the latter will need updating to be compatible.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/comments/1034244140/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-02-09T22:14:26Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20163126409","type":"IssueCommentEvent","actor":{"id":18724089,"login":"kevinmkane","display_login":"kevinmkane","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","avatar_url":"https://avatars.githubusercontent.com/u/18724089?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/119","id":1129218580,"node_id":"I_kwDOBsoLV85DToIU","number":119,"title":"v8 branch pure-PQ KEMs do not use mpint representation for shared_secret in SSH KDF","user":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-09T23:57:50Z","updated_at":"2022-02-09T23:58:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When deriving the various keys in `kex_derive_keys`, the pure-PQ functions that handle encrypting and decrypting the shared secret, `kex_kem_generic_enc` and `kex_kem_generic_dec`, write only the shared secret data itself into the buffer that is later input to the KDF. They call `sshbuf_reserve` and pass a pointer directly into the buffer contents to `OQS_KEM_encaps` or `_decaps`. The SSH spec requires the shared secret input to the KDF to be in the mpint format, which has 4 bytes of length prepended to it. This causes the keys to be derived in a manner not compliant with the spec. In `kex_derive_keys`, `shared_secret` ends up being 16 bytes, for example, when it should be 20 (4 bytes length + 16 bytes secret).\r\n\r\nThe relevant code is at https://github.com/open-quantum-safe/openssh/blob/0c5eac6a3ba249f73bb953745cf109bdf281eafd/kexoqs.c#L91-L98 for encrypting, and https://github.com/open-quantum-safe/openssh/blob/0c5eac6a3ba249f73bb953745cf109bdf281eafd/kexoqs.c#L130-L135 for decrypting.\r\n\r\nThe v7.9 branch had this correct, and there's even a note calling it out at https://github.com/open-quantum-safe/openssh/blob/f41bbe652c522db1bec388f82db369e4e5f0f405/kexpqoqsc.c#L297-L310 and https://github.com/open-quantum-safe/openssh/blob/f41bbe652c522db1bec388f82db369e4e5f0f405/kexpqoqss.c#L282-L295. The shared secret data there is written into the buffer as an ssh_string, which prepends the same 4 bytes of length that makes it conform to the mpint format.\r\n\r\nAs an aside, I believe the hybrid case is correct, but I haven't been able to test it yet. `kex_kem_generic_with_ec_enc` and `kex_kem_generic_with_ec_dec` both write the shared secret to the relevant buffer with `sshbuf_put_string`, in the same way the v7.9 code does, and so the prepended length should be present. See https://github.com/open-quantum-safe/openssh/blob/0c5eac6a3ba249f73bb953745cf109bdf281eafd/kexoqsecdh.c#L337-L343 and https://github.com/open-quantum-safe/openssh/blob/0c5eac6a3ba249f73bb953745cf109bdf281eafd/kexoqsecdh.c#L262-L272.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1034329611","html_url":"https://github.com/open-quantum-safe/openssh/issues/119#issuecomment-1034329611","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119","id":1034329611,"node_id":"IC_kwDOBsoLV849pp4L","user":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"created_at":"2022-02-09T23:58:21Z","updated_at":"2022-02-09T23:58:21Z","author_association":"NONE","body":"I may have a PR for this soon, but wanted to get it written up in case anyone spots a problem with my reasoning.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1034329611/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-02-09T23:58:21Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
