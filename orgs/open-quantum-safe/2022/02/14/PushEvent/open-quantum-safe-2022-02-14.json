{"id":"20238530122","type":"PushEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"push_id":9093779353,"size":1,"distinct_size":1,"ref":"refs/heads/mb-defaultgroups","head":"ee1dbcdff492b3915848558c7e8f3e5c59ebc62c","before":"a84818afdfc13a4430659c7af08b34b518468682","commits":[{"sha":"ee1dbcdff492b3915848558c7e8f3e5c59ebc62c","author":{"email":"57787676+baentsch@users.noreply.github.com","name":"Michael"},"message":"adding test","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/ee1dbcdff492b3915848558c7e8f3e5c59ebc62c"}]},"public":true,"created_at":"2022-02-14T06:30:31Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20238744232","type":"PushEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"push_id":9093887489,"size":1,"distinct_size":1,"ref":"refs/heads/mb-defaultgroups","head":"be98c1636acfff9375377d74a0c99365356a80b1","before":"ee1dbcdff492b3915848558c7e8f3e5c59ebc62c","commits":[{"sha":"be98c1636acfff9375377d74a0c99365356a80b1","author":{"email":"57787676+baentsch@users.noreply.github.com","name":"Michael"},"message":"testing improved","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/be98c1636acfff9375377d74a0c99365356a80b1"}]},"public":true,"created_at":"2022-02-14T06:49:38Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20243886635","type":"PushEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":334511511,"name":"open-quantum-safe/oqs-provider","url":"https://api.github.com/repos/open-quantum-safe/oqs-provider"},"payload":{"push_id":9096323067,"size":1,"distinct_size":1,"ref":"refs/heads/main","head":"dafeff317286556153445832d8c52c1b1c2c5edc","before":"768ce1346bd1379563636a34f91decb724cd61a5","commits":[{"sha":"dafeff317286556153445832d8c52c1b1c2c5edc","author":{"email":"info@baentsch.ch","name":"Michael Baentsch"},"message":"follow upstream update (#48)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/oqs-provider/commits/dafeff317286556153445832d8c52c1b1c2c5edc"}]},"public":true,"created_at":"2022-02-14T11:53:37Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20246447034","type":"PushEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"push_id":9097554665,"size":1,"distinct_size":1,"ref":"refs/heads/master","head":"7f520b6f64b43b166b658afd0d187e1846db235d","before":"6d6c005a299168cdbd52fa28e1aee5e972571182","commits":[{"sha":"7f520b6f64b43b166b658afd0d187e1846db235d","author":{"email":"xvzcf@users.noreply.github.com","name":"Goutam Tamvada"},"message":"Update BoringSSL (#80)\n\n* Document that SSL_PRIVATE_KEY_METHOD should configure signing prefs.\r\n\r\nOtherwise BoringSSL may select one the private key does not support.\r\n\r\nChange-Id: Ia0a57657bd6dedaa6653c23cc850bb6b6fa8f219\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48525\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Add convenience functions to malloc EVP_HPKE_CTX and EVP_HPKE_KEY.\r\n\r\nSome callers want the value to be heap-allocated. It's a little annoying\r\nthat this returns an empty value (if we only supported heap-allocated\r\nones, I'd have merged init into new), but since we have multiple\r\nconstructor functions, this is probably the least fuss.\r\n\r\nChange-Id: I42f586e39850954fb6743f8be50a7cfffa0755ba\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48526\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Check strtoul return for overflow error in GetUnsigned()\r\n\r\nCurrently, GetUnsigned() calls strtoul and checks whether the resulting\r\nunsigned long int is greater than UINT_MAX. This implicitly assumes that\r\nUINT_MAX < ULONG_MAX.\r\n\r\nProblematically, `unsigned long int` and `unsigned` have the same size\r\non Windows [0] and on 32-bit architectures.\r\n\r\nFor correctness, we now check whether strtoul failed because it would\r\noverflow the unsigned long int before checking whether the value fits in\r\nan unsigned type.\r\n\r\n[0]: https://docs.microsoft.com/en-us/cpp/cpp/data-type-ranges?view=msvc-160\r\n\r\nChange-Id: I49702febf4543bfb7991592717443e0b2adb954f\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48545\r\nCommit-Queue: Dan McArdle <dmcardle@google.com>\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: David Benjamin <davidben@google.com>\r\n\r\n* Don't enable atomics in NO_THREADS configurations.\r\n\r\nIn configurations without threads, we're not thread-safe anyway. Instead\r\nuse the refcount_lock.c implementation which, in turn, calls into\r\nthread_none.c, so this turns into a plain refcount.\r\n\r\nThis avoids a build issue on platforms which define NO_THREADS, use C11,\r\nlack C11 atomics, and are missing a __STDC_NO_ATOMICS__ definition. The\r\nplatforms ought to define __STDC_NO_ATOMICS__ or implement them, but\r\natomics are also unnecessary overheard in NO_THREADS configurations\r\nanyway.\r\n\r\nChange-Id: I927e1825dd6474d95226b93dad704594f120450a\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48565\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nCommit-Queue: Adam Langley <agl@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Add 'generate-ech' command to bssl tool\r\n\r\nThe tool generates three files: an ECHConfig, its corresponding private\r\nkey, and the ECHConfig wrapped in an ECHConfigList.\r\n\r\nFor example, the following invocation generates the files:\r\n\r\n    bssl generate-ech \\\r\n      -out-ech-config-list ech_config_list.data \\\r\n      -out-ech-config ech_config.data \\\r\n      -out-private-key ech.key \\\r\n      -public-name foo.example \\\r\n      -config-id 0\r\n\r\nNow, we can pass the ECHConfig and private key into the 'server' and\r\n'client' commands:\r\n\r\n    bssl server -accept 4430 \\\r\n        -ech-config ech_config.data \\\r\n        -ech-key    ech.key\r\n\r\n    bssl client -connect localhost:4430 \\\r\n        -ech-config-list ech_config_list.data\r\n\r\nBug: 275\r\nChange-Id: Id4342855483fb01aa956f9aff356105c4a8ca4f6\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48466\r\nReviewed-by: David Benjamin <davidben@google.com>\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\n\r\n* acvp: add HKDF support.\r\n\r\nChange-Id: I26251ce85f2cb1b441ae415b1506161a90bd3efa\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48585\r\nReviewed-by: David Benjamin <davidben@google.com>\r\n\r\n* Revert \"Revert \"Revert \"Disable check that X.509 extensions implies v3.\"\"\"\r\n\r\nThis reverts commit be9a86f459f8e785bac42abcea5d13bd4ded251e. Let's try\r\nthis again.\r\n\r\nBug: 375\r\nChange-Id: Ie01cced8017835b2cc6d80e5e81a4508a37fbbaf\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48625\r\nReviewed-by: Adam Langley <agl@google.com>\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\n\r\n* acvp: recognise another style of JSON.\r\n\r\nSome JSON files have a header, but without a URL. Thus consider a block\r\nthat doesn't contain an algorithm to also be a header.\r\n\r\nChange-Id: Ic35a827843e9d0169ba8398df69c46a5baeffb44\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48605\r\nReviewed-by: David Benjamin <davidben@google.com>\r\n\r\n* Don't overread in poly_Rq_mul\r\n\r\nThe polynomials have 701, 16-bit values. But poly_Rq_mul was reading 32\r\nbytes at offset 1384 in order to get the last 18 of them. This silently\r\nworked for a long time, but when 7153013019 switched to keeping\r\nvariables on the stack it was noticed by Valgrind.\r\n\r\nThis change fixes the overread. Setting watchpoints at the ends of the\r\ntwo inputs (and one output) now shows no overreads nor overwrites.\r\n\r\nBUG=424\r\n\r\nChange-Id: Id86c1407ffce66593541c10feee47213f4b95c5d\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48645\r\nReviewed-by: David Benjamin <davidben@google.com>\r\n\r\n* generate_ech.cc: include needed headers\r\n\r\nChange-Id: I04c8bb68801aeb0938e5b038b98811ca4ffe50f0\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48685\r\nCommit-Queue: Adam Langley <agl@google.com>\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: David Benjamin <davidben@google.com>\r\n\r\n* Clarify BIO_new_mum_buf's lifetime rules.\r\n\r\nIt is not obvious from \"It does not take ownership of |buf|\" whether the\r\nfunction makes a copy or not. It does not make a copy (maybe it\r\nshould...), so callers are obligated to manage their lifetimes.\r\n\r\nChange-Id: I7df9a5814321fd833fcb8d009d9e0318d6668dd4\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48669\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Document another batch of functions.\r\n\r\nThis covers most of the ASN.1 time functions and a handful more of\r\nx509.h. Also remove some code under #if 0.\r\n\r\nI'm running out of a easy ones to do, which is probably a good thing.\r\n\r\nChange-Id: I085b1e2a54d191a7a5f18c801b3c135cfda7bd88\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48665\r\nReviewed-by: Adam Langley <agl@google.com>\r\nCommit-Queue: Adam Langley <agl@google.com>\r\n\r\n* Remove ASN1_STRING_FLAG_MSTRING.\r\n\r\nThis flag is set when an ASN1_STRING is created from a codepath that is\r\naware it is an \"mstring\" (CHOICE of multiple string or string-like\r\ntypes). With setters like X509_set_notBefore, it is very easy to\r\naccidentally lose the flag on some field that normally has it.\r\n\r\nThe only place the flag is checked is X509_time_adj_ex. X509_time_adj_ex\r\nusually transparently picks UTCTime vs GeneralizedTime, as in the X.509\r\nCHOICE type. But if writing to an existing object AND if the object\r\nlacks the flag, it will lock to whichever type the object was\r\npreviously. It is likely any caller hitting this codepath is doing so\r\nunintentionally and has a latent bug that won't trip until 2050.\r\n\r\nIn fact, one of the ways callers might accidentally lose the\r\nASN1_STRING_FLAG_MSTRING flag is by using X509_time_adj_ex!\r\nX509_time_adj_ex(NULL) does not use an mstring-aware constructor. This\r\nCL avoids needing such a notion in the first place.\r\n\r\nLooking through callers, the one place that wants the old behavior is a\r\ncall site within OpenSSL, to set the producedAt field in OCSP. That\r\nfield is a GeneralizedTime, rather than a UTCTime/GeneralizedTime\r\nCHOICE. We dropped that code, but I'm making a note of it to remember\r\nwhen filing upstream.\r\n\r\nUpdate-Note: ASN1_STRING_FLAG_MSTRING is no longer defined and\r\nX509_time_adj_ex now behaves more predictably. Callers that actually\r\nwanted to lock to a specific type should call ASN1_UTCTIME_adj or\r\nASN1_GENERALIZEDTIME_adj instead.\r\n\r\nChange-Id: Ib9e1c9dbd0c694e1e69f938da3992d1ffc9bd060\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48668\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Add some tests for time_t to ASN1_TIME conversions.\r\n\r\nChange-Id: I7712f66e16b761ee23292980cff039e62d29b22f\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48666\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Reject years outside 0000-9999 in ASN1_GENERALIZEDTIME_adj.\r\n\r\nThey would previously output syntax errors.\r\n\r\nChange-Id: I7817a91d0c8ed8d6ac6a5a1fd9c9ed1223c5960e\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48667\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Avoid double-expanding variables in CMake.\r\n\r\nCMake's language is rather fragile and unsound. For the most part, it is\r\na shell script with more parentheses. That is, it simply expands command\r\narguments into a list of strings and then evaluates it, complete with\r\nshell-style differences between \"${FOO}\" and ${FOO}.\r\n\r\nThe if() command is special and internally also expands variables. That\r\nis why things like if(FOO STREQUAL \"BAR\") work. CMake interprets \"FOO\"\r\nas a variable if it can find a variable, or a string otherwise. In\r\naddition to getting very confused on typos, it means that\r\nif(\"${FOO}\" STREQUAL \"BAR\") will double-expand, and it will do strange\r\nthings if BAR is a variable.\r\n\r\nCMP0054 patches this (which we set by minimum version) so that if() only\r\nexpands if the token was unquoted. This fixes\r\nif(\"${FOO}\" STREQUAL \"BAR\"). However, if(${FOO} STREQUAL \"BAR\")\r\ncontinues to double-expand FOO.\r\n\r\nWe had a mix of all three of FOO, ${FOO}, and \"${FOO}\". It's not clear\r\nwhich is the canonical spelling at this point, but CMake own files\r\n(mostly) use FOO, as do most of our lines, so I've standardized on that.\r\nIt's a little unsatisfying if we typo a variable, but I suppose ${FOO}\r\nalso silently ignores unset variables.\r\n\r\nBug: 423\r\nChange-Id: Ib6baa27f4065eed159e8fb28820b71a0c99e0db0\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48705\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Align with upstream on 'close STDOUT' lines.\r\n\r\nWhen upstreaming c1d8c5b0e0ff4177ec06eed58ebcfd5a75b7f231 as\r\nhttps://github.com/openssl/openssl/pull/10883 and then\r\nhttps://github.com/openssl/openssl/pull/10930, we ended up diverging\r\nslightly: in the upstream version, I ended up applying the same change\r\nto the xlate files. Upstream also suggested \"error closing STDOUT: $!\".\r\n\r\nApply the same changes here.\r\n\r\nChange-Id: I8a8cbc3944432e94a8844f9f628a900edfe77b30\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48725\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Update ghashv8-armx.pl from upstream.\r\n\r\nThis syncs this file up to e7ff223a20697e5a401d2d9bb7a75e699ed46633 from\r\nupstream's OpenSSL_1_1_1-stable branch. The main change of note is the\r\n4x loop from upstream's 7ff2fa4b9281232f0ca1db03d42a954c462ef77d,\r\n9ee020f8dc7813db82a119058d8f57e70e7e8904,\r\naa7bf316980259a11dcbaf6128ed86d33dc24b97, and\r\n603ebe03529101424670051aa0c616dc6e037b28.\r\n\r\nBenchmarks on a Pixel 4a.\r\n\r\nBefore:\r\nDid 14069000 AES-128-GCM (16 bytes) seal operations in 2000042us (112.5 MB/sec)\r\nDid 6768000 AES-128-GCM (256 bytes) seal operations in 2000182us (866.2 MB/sec)\r\nDid 1902000 AES-128-GCM (1350 bytes) seal operations in 2000479us (1283.5 MB/sec)\r\nDid 359000 AES-128-GCM (8192 bytes) seal operations in 2003942us (1467.6 MB/sec)\r\nDid 182000 AES-128-GCM (16384 bytes) seal operations in 2002245us (1489.3 MB/sec)\r\nDid 13388000 AES-256-GCM (16 bytes) seal operations in 2000144us (107.1 MB/sec)\r\nDid 6069000 AES-256-GCM (256 bytes) seal operations in 2000276us (776.7 MB/sec)\r\nDid 1638000 AES-256-GCM (1350 bytes) seal operations in 2001076us (1105.1 MB/sec)\r\nDid 305000 AES-256-GCM (8192 bytes) seal operations in 2000040us (1249.3 MB/sec)\r\nDid 155000 AES-256-GCM (16384 bytes) seal operations in 2009398us (1263.8 MB/sec)\r\n\r\nAfter:\r\nDid 13837000 AES-128-GCM (16 bytes) seal operations in 2000131us (110.7 MB/sec) [-1.7%]\r\nDid 7506000 AES-128-GCM (256 bytes) seal operations in 2000197us (960.7 MB/sec) [+10.9%]\r\nDid 2289000 AES-128-GCM (1350 bytes) seal operations in 2000734us (1544.5 MB/sec) [+20.3%]\r\nDid 443000 AES-128-GCM (8192 bytes) seal operations in 2000321us (1814.2 MB/sec) [+23.6%]\r\nDid 225000 AES-128-GCM (16384 bytes) seal operations in 2002308us (1841.1 MB/sec) [+23.6%]\r\nDid 13280000 AES-256-GCM (16 bytes) seal operations in 2000011us (106.2 MB/sec) [-0.8%]\r\nDid 6630000 AES-256-GCM (256 bytes) seal operations in 2000229us (848.5 MB/sec) [+9.2%]\r\nDid 1916000 AES-256-GCM (1350 bytes) seal operations in 2000373us (1293.1 MB/sec) [+17.0%]\r\nDid 365000 AES-256-GCM (8192 bytes) seal operations in 2001519us (1493.9 MB/sec) [+19.6%]\r\nDid 185000 AES-256-GCM (16384 bytes) seal operations in 2006588us (1510.5 MB/sec) [+19.5%]\r\n\r\n(See cl/387919990 for some notes I made in reviewing, though likely\r\nfuture me will find them incomprehensible anyway.)\r\n\r\nChange-Id: Id386e80143611487e07b2fbfda15d0abc54ea145\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48726\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Document ASN1_mbstring_copy.\r\n\r\nChange-Id: Ia2cb9d969b25d1815d8157dd74125d60b138138f\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48765\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Always use an ASN1_STRING_TABLE global mask of UTF8String.\r\n\r\nASN1_STRING_set_by_NID is very complex and depends on a \"global mask\"\r\nfor most NIDs. (Some NIDs use a single type and use STABLE_NO_MASK to\r\ndisable the global mask.) Historically, it defaulted to allowing all\r\ntypes, but it switched to UTF8String in OpenSSL 1.0.2.\r\n\r\nUpdating the global mask is not thread-safe, and it's 2021. Let's just\r\nalways use UTF-8. The only callers I found set it to UTF-8 anyway (with\r\nthe exception of some test script we don't use, and some code that\r\nwasn't compiled). No-op writes in the C/C++ memory model are still race\r\nconditions, so this CL fixes some bugs in those callers.\r\n\r\nUpdate-Note: The global mask for ASN1_STRING_set_by_NID is now always\r\nUTF-8. Callers that want another type should reconsider and, if UTF-8 is\r\nstill unsuitable, just pass the actual desired type into\r\nASN1_mbstring_copy, X509_NAME_ENTRY_set_data, etc\r\n\r\nChange-Id: I679e99c57da9a48c805460abcb3af5b2f938c93f\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48766\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Unexport ub_* constants.\r\n\r\nThese constants aren't suitably namespaced and, moreover, are redefined\r\nin a_strnid.c. (The constants aren't especially useful because an\r\nX509_NAME doesn't check the upper bound.)\r\n\r\nUpdate-Note: Removed some unnamespaced constants.\r\n\r\nChange-Id: I7d15ae731628d3665119081289947600e7f38065\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48768\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Unexport BIT_STRING_BITNAME.\r\n\r\nThis type does not appear in any public APIs.\r\n\r\nChange-Id: Ie57c7662e691ea05ff2133beda9760832ea0d0de\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48769\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Move X509_ALGOR to x509.h.\r\n\r\nThis matches OpenSSL and the name. Also accessors like X509_ALGOR_get0\r\nare in x509.h.\r\n\r\nChange-Id: Ic7583edcf04627cbfae822df11e75eebdd9ad7aa\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48770\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Remove OPENSSL_NO_FP_API ifdefs.\r\n\r\nWe've never tested this and plenty of files depend on FILE* APIs without\r\nifdefs.\r\n\r\nChange-Id: I8c51c043e068b30bdde1723c3810d3e890eabfca\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48771\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Implement ASN1_STRING_print_ex_fp, etc., with file BIOs.\r\n\r\nNo sense in implementing a BIO/FILE abstraction when BIO is itself a\r\nFILE abstraction. Follow-up CLs will unwind the char_io abstraction and\r\nthen split the ASN1 and X509 bits of this file.\r\n\r\nChange-Id: I00aaf2fbab44abdd88252ceb5feb071ad126a0b2\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48772\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Unwind io_ch abstraction in print functions.\r\n\r\nChange-Id: Ib342ce1acf7ea4fcff012bf149cf699807ddc0fa\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48773\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Move a_strex.c back to asn1, split X509_NAME bits out.\r\n\r\nWith io_ch unwound, X509_NAME_print_ex just calls ASN1_STRING_print_ex,\r\nso we can put all the code in the right directories. We need to\r\nduplicate maybe_write, but it's a one-line function.\r\n\r\nChange-Id: Ifaa9f1a24ee609cbaa24f93eb992f7d911f1b4a0\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48774\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Move some ASN1 printing functions to crypto/asn1.\r\n\r\nFor some reason, ASN1_STRING_print was not in the same file as\r\nASN1_STRING_print_ex, but X509_print. Although it also behaves very\r\ndifferently from ASN1_STRING_print_ex, so that's a little interesting.\r\n\r\nChange-Id: I3f88f8943c8e36426eedafa7e350a787881d0c74\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48775\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Document ASN.1 printing functions.\r\n\r\nASN1_STRING_print_ex is extremely complex and attempting to implement\r\nRFC2253, so write some tests for it. Along the way, unexport\r\nCHARTYPE_*, which are internal book-keeping used in\r\nASN1_STRING_print_ex.\r\n\r\nChange-Id: Idb27cd40fb66dc099d1fd6d039a00404608c2063\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48776\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Check i2d_ASN1_TYPE's return value in ASN1_STRING_print_ex.\r\n\r\nAlso use the simpler single-call variant.\r\n\r\nChange-Id: I3834a798549f12a9dcdec6a357d2380085baf940\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48777\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Fix ASN1_STRING_print_ex with negative integers.\r\n\r\nASN1_STRING and ASN1_TYPE type values almost line up, but not quite.\r\nNegative INTEGERs are not possible in X509_NAME (tag2bit maps INTEGER to\r\n0), but negative ENUMERATEDs are (tag2bit maps ENUMERATED to\r\nB_ASN1_UNKNOWN). See https://crbug.com/boringssl/412 for some notes on\r\nthis mess. Either way, the library will freely produce ASN1_STRING\r\nINTEGERs and ENUMERATEDs in non-MSTRING contexts, so get this case\r\nright.\r\n\r\nChange-Id: Ica537f4d683e7a6becc96e2eee3cb66e53372124\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48785\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Remove ASN1_TFLG_SET_ORDER.\r\n\r\nASN1_TFLG_SET_ORDER was used in OpenSSL's CMS and PKCS#7\r\nimplementations, which we've removed. Fields that use it not only get\r\nthe DER SET sorting but, when serialized, go back and mutate the\r\noriginal object to match.\r\n\r\nThis is unused, so remove it. This removes one of the sources of\r\nnon-const behavior in i2d functions.\r\n\r\nBug: 407\r\nChange-Id: I6b2bf8d11c30a41b53d14ad475c26a1a30dfd31f\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48786\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Add a test for ASN1_mbstring_copy and clean up.\r\n\r\nIn writing the tests, I noticed that the documentation was wrong. First,\r\nthe maximum lengths are measured in codepoints, not bytes.\r\n\r\nSecond, the TODO was wrong. We actually do handle this correctly,\r\n*almost*. Rather, the bug is that the function assumes |mask| contains\r\nno extraneous bits. If it does, all extraneous bits are interpreted as\r\nB_ASN1_UTF8STRING. This seems like a bug, so I've gone ahead and fixed\r\nthat, with a test.\r\n\r\nChange-Id: I7ba8fa700a8e21e6d25cb7ce879dace685eecf7e\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48825\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Fix negative ENUMERATED values in multi-strings.\r\n\r\nI noticed this while I was reading through the encoder. OpenSSL's ASN.1\r\nlibrary is very sloppy when it comes to reusing enums. It has...\r\n\r\n- Universal tag numbers. These are just tag numbers from ASN.1\r\n\r\n- utype. These are used in the ASN1_TYPE type field, as well as the\r\n  ASN1_ITEM utype fields They are the same as universal tag numbers,\r\n  except non-universal types map to V_ASN1_OTHER. I believe ASN1_TYPE\r\n  types and ASN1_ITEM utypes are the same, but I am not positive.\r\n\r\n- ASN1_STRING types. These are the same as utypes, except V_ASN1_OTHER\r\n  appears to only be possible when embedded inside ASN1_TYPE, and\r\n  negative INTEGER and ENUMERATED values get mapped to\r\n  V_ASN1_NEG_INTEGER and V_ASN1_NEG_ENUMERATED. Additionally, some\r\n  values like V_ASN1_OBJECT are possible in a utype but not possible in\r\n  an ASN1_STRING (and will cause lots of problems if ever placed in\r\n  one).\r\n\r\n- Sometimes one of these enums is augmented with V_ASN1_UNDEF and/or\r\n  V_ASN1_APP_CHOOSE for extra behaviors.\r\n\r\n- Probably others I'm missing.\r\n\r\nThese get mixed up all the time. asn1_ex_i2c's MSTRING path converts\r\nfrom ASN1_STRING type to utype and forgets to normalize V_ASN1_NEG_*.\r\nThis means that negative INTEGERs and ENUMERATEDs in MSTRINGs do not get\r\nencoded right.\r\n\r\nThe negative INTEGER case is unreachable (unless the caller passes\r\nthe wrong ASN1_STRING to an MSTRING i2d function, but mismatching i2d\r\nfunctions generally does wrong things), but the negative ENUMERATED case\r\nis reachable. Fix this and add a test.\r\n\r\nChange-Id: I762d482e72ebf03fd64bba291e751ab0b51af2a9\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48805\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Fix some error returns from SSL_read and SSL_write.\r\n\r\nIt's a bit of a mess, but BIO-like APIs typically return -1 on error and\r\n0 for EOF.\r\n\r\nChange-Id: Ibdcb70e1009ffebf6cc6df40804dc4a178c7199e\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48845\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Simplify built-in BIOs slightly.\r\n\r\nThe free callbacks can assume their inputs are non-NULL. They're only\r\ncalled from BIOs of the corresponding method, which means the BIO must\r\nexist. Also new callbacks that leave everything zero-initialized are\r\nno-ops and can be omitted.\r\n\r\nThis removes the weird thing where the built-in free functions were\r\nfallible. Although the int return is still necessary for compatibility\r\nwith external BIOs.\r\n\r\nChange-Id: I91e2101efc7c77c703cb649df1490bc9f515f0fd\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48846\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Add Span::first() and Span::last().\r\n\r\nabsl::Span, base::span, and std::span have first() and last() methods\r\nwhich give prefixes and suffixes. first() just saves 5 characters, but\r\nlast() is nicer to write than subspan() for suffixes.\r\n\r\nUnlike subspan(), they also do not have clipping behavior, so we're\r\nguaranteed the length is correct. The clipping behavior comes from\r\nabsl::Span::subspan() and is not present in std::span or base::span.\r\nI've left it in, in case we switch to absl::Span in the future, but I\r\nimagine absl::Span will need to migrate this at some point.\r\n\r\nChange-Id: I042dd6c566b6d753ec6de9d84e8c09ac7c270267\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48905\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Bump minimum GCC version and note impending VS2015 deprecation.\r\n\r\nGCC 6.1 was released more than five years ago, April 27, 2016. We can\r\nthus drop some bits in the CMake files.\r\n\r\nhttps://gcc.gnu.org/releases.html\r\nhttps://gcc.gnu.org/develop.html#num_scheme\r\n\r\nAlso note in BUILDING.md that VS2015 will no longer be supported next\r\nyear. Then we can cycle our CQ to testing VS2017 + VS2019. (We're\r\ncurrently not testing VS2019 at all, though so far it hasn't been an\r\nissue.) I've been running into some VS2015-only C++ issues around\r\nconversions, so once we stop testing it, I expect it'll break.\r\n\r\nChange-Id: I7a3020df2acd61d57409108aa4d99c840b5ca994\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48925\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Guard use of sdallocx with BORINGSSL_SDALLOCX\r\n\r\nSee comment in change and https://github.com/grpc/grpc/issues/25450\r\n\r\nUpdate-note: consumers may wish to define BORINGSSL_SDALLOCX if using\r\ntcmalloc.\r\n\r\nChange-Id: I123fe31a6c4013f1ce0c056f82a316c71df84939\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48885\r\nReviewed-by: David Benjamin <davidben@google.com>\r\nCommit-Queue: Adam Langley <agl@google.com>\r\n\r\n* Process the TLS 1.3 cipher suite in one place.\r\n\r\nThe cipher suite, like the version, is determined by the first server\r\nmessage, independent of whether it's ServerHello or HelloRetryRequest.\r\nWe can simplify this by just processing it before we branch on which it\r\nwas.\r\n\r\nChange-Id: I747f515e9e5b05a42cbed6e7844808d0fc79a30b\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48906\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* runner: Test session IDs over 32 bytes.\r\n\r\nThe session ID field cannot exceed 32 bytes, and we size various buffers\r\nbased on this. Test that our parsers correctly handle this.\r\n\r\nAlso fix the -wait-for-debugger flag. I broke it recently by removing\r\nthe statusShimStarted message.\r\n\r\nChange-Id: I29bb177f29a79bb4904fb5ba3cedfb0b6b856061\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48907\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Refer to RFCs consistently.\r\n\r\nWe were a mix of \"RFC1234\" and \"RFC 1234\". Apparently there is actually\r\nan answer for this, which is with a space textually and without a space\r\nin the citation/reference tag:\r\nhttps://datatracker.ietf.org/doc/html/rfc7322#section-3.5\r\n\r\nChange-Id: I0c44023163fe3a2a3ffe28cbc644d4c952dc8f1e\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48965\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Linkify RFCs in documentation.\r\n\r\nChange-Id: If42bc55c1381dc50dd1125c2780edc6cafa964cb\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48966\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Add a CBB_add_zeros helper.\r\n\r\nWe fill in placeholder values of all zeros fairly often in TLS now,\r\nas workarounds for messages being constructed in the wrong order.\r\ndraft-12 of ECH adds even more of these. Add a helper so we don't need\r\nto interrupt an || chain with a memset.\r\n\r\nChange-Id: Id4f9d988ee67598645a01637cc9515b475c1aec2\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48909\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Do not rely on ASN1_STRING being NUL-terminated.\r\n\r\nThis imports part of the fix for CVE-2021-3712, commits\r\nd9d838ddc0ed083fb4c26dd067e71aad7c65ad16,\r\n5f54e57406ca17731b9ade3afd561d3c652e07f2,\r\n23446958685a593d4d9434475734b99138902ed2,\r\nand bb4d2ed4091408404e18b3326e3df67848ef63d0 from upstream. The\r\nothers will be imported in follow-up CLs.\r\n\r\nChange-Id: Ic35aeb3895935ee94b82a295efade32782e8d1bc\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49005\r\nReviewed-by: Adam Langley <agl@google.com>\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\n\r\n* Fix i2v_GENERAL_NAME to not assume NUL terminated strings\r\n\r\nSee also 174ba8048a7f2f5e1fca31cfb93b1730d9db8300 from upstream. This\r\ndiffers from the upstream CL in that:\r\n\r\n- We don't silently drop trailing NULs.\r\n\r\n- As a NUL-terminated C string, the empty string is a non-NULL pointer\r\n  to an array containing a zero byte. Use the latter consistently.\r\n\r\nChange-Id: I99c6c4c26be5a1771c56c6ab356425f1b85be41d\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49006\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Add some tests for name constraints.\r\n\r\nChange-Id: I51606bb7e4674716ffb6688b3a8e69db3f014546\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49007\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Rewrite name constraints matching with CBS.\r\n\r\nSee also 8393de42498f8be75cf0353f5c9f906a43a748d2 from upstream and\r\nCBS-2021-3712. But rather than do that, I've rewritten it with CBS, so\r\nit's a bit clearer. The previous commit added tests.\r\n\r\nChange-Id: Ie52e28f07b9bf805c8730eab7be5d40cb5d558b6\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49008\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* OPENSSL_strndup should not return NULL given {NULL, 0}.\r\n\r\nThe NUL-terminated representation of the empty string is a non-NULL\r\none-byte array, not NULL. This fills in the last of the empty string\r\ncases in https://boringssl-review.googlesource.com/c/boringssl/+/49006/\r\n\r\nChange-Id: I66c09dc3223f762b708612987b26c90e41e27c4a\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49009\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Fix typo.\r\n\r\nSubsequent CLs will add some fuzzers, etc., that'll help with catching\r\nthis.\r\n\r\nChange-Id: I10a8e4b2f23ffd07b124e725c1f7454e7ea6f2dd\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49025\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Fix some error-handling in i2v functions.\r\n\r\nSee upstream commits:\r\n32f3b98d1302d4c0950dc1bf94b50269b6edbd95\r\n432f8688bb72e21939845ac7a69359ca718c6676\r\n7bb50cbc4af78a0c8d36fdf2c141ad1330125e2f\r\n8c74c9d1ade0fbdab5b815ddb747351b8b839641\r\n\r\nChange-Id: Iff614260c1b1582856edb4ae7a226f2e07537698\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49045\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Run X509_print in the certificate fuzzer.\r\n\r\nGiven the error handling issues in the previous CL, we'll probably be\r\nchasing down bugs in there for a while.\r\n\r\nChange-Id: I7a219e0fe2496f602d38b4bd0fcd5585ebd72cb7\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49046\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Merge in OpenSSL's X.509 corpus.\r\n\r\nRan the following command at OpenSSL commit\r\n18622c7625436d7f99c0f51895c4d3cea233c62e:\r\n\r\n./build-fuzz/fuzz/cert -merge=1 -max_len=10000 fuzz/cert_corpus/ ~/openssl/fuzz/corpora/x509\r\n\r\nChange-Id: I22c4051351138736a0fa0202c0977ca9afc6924c\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49047\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Deduplicate our three ServerHello parsers.\r\n\r\nWe do this enough that it's worth extracting a common parser. And this\r\ngives a struct we can pass around. Note this moves the server extensions\r\nblock parsing out of ssl_scan_serverhello_tlsext.\r\n\r\nI've also consolidated a few error conditions to tighten the code up a\r\nbit: the TLS 1.2 code distinguishes unknown from unadvertised cipher,\r\nwhile the TLS 1.3 code didn't. And seeing the wrong legacy version\r\nnumber in TLS 1.3 is really just a syntax error since it's not the\r\nversion field anymore. (RFC8446 specifies the value.)\r\n\r\nChange-Id: Ia2f44ff9a3899b5a594569f1b258f2b487930496\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48908\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Make ssl_parse_extensions a little easier to use.\r\n\r\nstd::initializer_list appears to work by instantiating a T[N] at the\r\ncall site (which is what we were doing anyway), so I don't believe there\r\nis a runtime dependency.\r\n\r\nThis also adds a way for individual entries to turn themselves off,\r\nwhich means we don't need to manually check for some unsolicited\r\nextensions.\r\n\r\nChange-Id: I40f79b6a0e9c005fc621f4a798fe201bfbf08411\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48910\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Avoid re-hashing the transcript multiple times.\r\n\r\ntls13_init_key_schedule calls InitHash internally, but we also call\r\nInitHash earlier at various times. On the client, we do it early to\r\nhandle HelloRetryRequest and 0-RTT. ECH draft-12 will also need to do it\r\nearly. Apparently we do it early on the server too.\r\n\r\nProbably tls13_init_key_schedule doesn't need to call InitHash, but for\r\nnow, it is an easy check in SSLTranscript.\r\n\r\nChange-Id: I5473047c1f29bdeb60901e4e6e80979e592bd6e9\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48911\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Work around yet another MSVC 2015 SFINAE bug.\r\n\r\nAlthough we defined a CBS -> Span<const uint8_t> conversion, MSVC 2015\r\nkeeps trying to call the Span(const Container&) constructor. It seems to\r\nnot correctly SFINAE the existence of data() and size() members unless\r\nthe expression is inlined into the default template argument.\r\n\r\nChange-Id: I4e88f820b78ce72ad1b014b5bae0830bc7d099d4\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48945\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Benchmark RSA private key parsing.\r\n\r\nWe do non-trivial work when parsing RSA private keys (RSA_check_key)\r\nand, in some consumers, this is performance-sensitive.\r\n\r\nBug: b/192484677\r\nChange-Id: Ic27f5f11d8bd030de77dd500a826fb2dd7c5b75d\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49105\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Make RSA_check_key more than 2x as fast.\r\n\r\nThe bulk of RSA_check_key is spent in bn_div_consttime, which is a naive\r\nbut constant-time long-division algorithm for the few places that divide\r\nby a secret even divisor: RSA keygen and RSA import. RSA import is\r\nsomewhat performance-sensitive, so pick some low-hanging fruit:\r\n\r\nThe main observation is that, in all but one call site, the bit width of\r\nthe divisor is public. That means, for an N-bit divisor, we can skip the\r\nfirst N-1 iterations of long division because an N-1-bit remainder\r\ncannot exceed the N-bit divisor.\r\n\r\nOne minor nuisance is bn_lcm_consttime, used in RSA keygen has a case\r\nthat does *not* have a public bit width. Apply the optimization there\r\nwould leak information. I've implemented this as an optional public\r\nlower bound on num_bits(divisor), which all but that call fills in.\r\n\r\nBefore:\r\nDid 5060 RSA 2048 private key parse operations in 1058526us (4780.2 ops/sec)\r\nDid 1551 RSA 4096 private key parse operations in 1082343us (1433.0 ops/sec)\r\n\r\nAfter:\r\nDid 11532 RSA 2048 private key parse operations in 1084145us (10637.0 ops/sec) [+122.5%]\r\nDid 3542 RSA 4096 private key parse operations in 1036374us (3417.7 ops/sec) [+138.5%]\r\n\r\nBug: b/192484677\r\nChange-Id: I893ebb8886aeb8200a1a365673b56c49774221a2\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49106\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* NUL is not printable.\r\n\r\nstrchr is interprets the trailing NUL as part of the string, so\r\nis_printable thought NUL was allowed. Just write the code in the obvious\r\nway and let the compiler figure it out. (It seems to make a clever\r\nbitmask or something.)\r\n\r\nUpdate-Note: ASN1_mbstring_ncopy will no longer allow PrintableString\r\nfor strings containing NUL.\r\n\r\nChange-Id: I3675191ceb44c06f0ac7b430f88272cabf392d35\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49065\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Include SHA512-256 in EVP_get_digestbyname and EVP_MD_do_all.\r\n\r\nChange-Id: I25a1a58589ec8843da4d1955d8fec38561f13ec9\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49125\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Rewrite ASN1_PRINTABLE_type and add tests.\r\n\r\nThe old loop read one byte past the length. It also stopped the loop\r\ntoo early on interior NUL. See also upstream's\r\nhttps://github.com/openssl/openssl/pull/16433, though I've opted to\r\nrewrite the function entirely rather than use their fix.\r\n\r\nAlso deduplicate the PrintableString check.\r\n\r\nChange-Id: Ia8bd282047c2a2ed1d5e71a68a3947c7c108df95\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49066\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Remove V_ASN1_APP_CHOOSE.\r\n\r\nV_ASN1_APP_CHOOSE has been discouraged by OpenSSL since 2000:\r\nhttps://git.openssl.org/gitweb/?p=openssl.git;a=blob;f=CHANGES;h=824f421b8d331ba2a2009dbda333a57493bedb1e;hb=fb047ebc87b18bdc4cf9ddee9ee1f5ed93e56aff#l10848\r\n\r\nInstead, upstream recommends an MBSTRING_* constant.\r\nhttps://www.openssl.org/docs/man1.1.1/man3/X509_NAME_add_entry_by_NID.html\r\n\r\nThis function is a bit overloaded:\r\n\r\nMBSTRING_* means \"Decode my input from this format and then re-encode it\r\nusing whatever string type best suits the NID (usually UTF8String, but\r\nsome NIDs require PrintableString)\".\r\n\r\nV_ASN1_APP_CHOOSE means \"This is a Latin-1 string. Without looking at\r\nthe NID, pick one of PrintableString, IA5String, or T61String\".\r\n\r\nThe latter is almost certainly not what callers want. If they want a\r\nparticular type, they can always force it by passing a particular\r\nV_ASN1_* constant. This removes the only use of ASN1_PRINTABLE_type\r\nwithin the library, though there is one external use still.\r\n\r\nUpdate-Note: V_ASN1_APP_CHOOSE is removed. I only found one use, which\r\nhas been fixed.\r\n\r\nChange-Id: Id36376dd0ec68559bbbb366e2305d42be5ddac67\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49067\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Make most of crypto/x509 opaque.\r\n\r\nThis unexports X509, X509_CINF, X509_NAME_ENTRY, X509_NAME, X509_OBJECT,\r\nX509_LOOKUP_METHOD, X509_STORE, X509_LOOKUP, and X509_STORE_CTX.\r\n\r\nNote this means X509_STORE_CTX can no longer be stack-allocated.\r\n\r\nUpdate-Note: Patch cl/390055173 into the roll that includes this. This\r\nunexports most of the X.509 structs, aligning with OpenSSL. Use the\r\naccessor APIs instead.\r\n\r\nBug: 425\r\nChange-Id: I53e915bfae3b8dc4b67642279d0e54dc606f2297\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48985\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Remove SSL_set_verify_result.\r\n\r\nFollow-up from https://boringssl-review.googlesource.com/10485 that I\r\nforgot about. It's been removed from netty-tcnative.\r\n\r\nChange-Id: Ic4b97b30787962b78a69911a6e3cd28647546f59\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49145\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Reword SSL_get0_ech_name_override documentation.\r\n\r\nHopefully it's a little clearer that this may be called whether or not\r\nECH is offered. (And whether or not it's a server.)\r\n\r\nBug: 275\r\nChange-Id: I39c8ce5758543a0cfda84652b3fc0a5b9669fd0a\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49165\r\nReviewed-by: Matt Mueller <mattm@google.com>\r\nReviewed-by: David Benjamin <davidben@google.com>\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\n\r\n* Update to draft-ietf-tls-esni-13.\r\n\r\nLater CLs will clean up the ClientHello construction a bit (draft-12\r\navoids computing ClientHelloOuter twice). I suspect the transcript\r\nhandling on the client can also be simpler, but I'll see what's\r\nconvenient after I've changed how ClientHelloOuter is constructed.\r\n\r\nChanges of note between draft-10 and draft-13:\r\n\r\n- There is now an ECH confirmation signal in both HRR and SH. We don't\r\n  actually make much use of this in our client right now, but it\r\n  resolves a bunch of weird issues around HRR, including edge cases if\r\n  HRR applies to one ClientHello but not the other.\r\n\r\n- The confirmation signal no longer depends on key_share and PSK, so we\r\n  don't have to work around a weird ordering issue.\r\n\r\n- ech_is_inner is now folded into the main encrypted_client_hello code\r\n  point. This works better with some stuff around HRR.\r\n\r\n- Padding is moved from the padding extension, computed with\r\n  ClientHelloInner, to something we fill in afterwards. This makes it\r\n  easier to pad up the whole thing to a multiple of 32. I've accordingly\r\n  updated to the latest recommended padding construction, and updated\r\n  the GREASE logic to match.\r\n\r\n- ech_outer_extensions is much easier to process because the order is\r\n  required to be consistent. We were doing that anyway, and now a simple\r\n  linear scan works.\r\n\r\n- ClientHelloOuterAAD now uses an all zero placeholder payload of the\r\n  same length. This lets us simplify the server code, but, for now, I've\r\n  kept the client code the same. I'll follow this up with a CL to avoid\r\n  computing ClientHelloOuter twice.\r\n\r\n- ClientHelloOuterAAD is allowed to contain a placeholder PSK. I haven't\r\n  filled that in and will do it in a follow-up CL.\r\n\r\nBug: 275\r\nChange-Id: I7464345125c53968b2fe692f9268e392120fc2eb\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48912\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Fix calculation of draft-13 ECH confirmation signal.\r\n\r\nApparently both we and Go flipped the parameter order for HKDF-Extract\r\nrelative to the HKDF spec. (The spec orders the salt before the key.)\r\nNot sure how that happened.\r\n\r\nFound doing interop testing with Stephen Farrell's implementation.\r\n\r\nhttps://pkg.go.dev/golang.org/x/crypto/hkdf#Extract\r\nhttps://datatracker.ietf.org/doc/html/rfc5869#section-2.2\r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-tls-esni-13#section-7.2\r\n\r\nBug: 275\r\nChange-Id: I40a7d53b45cb548e93e6a7ae235e98e55dec4a7a\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49185\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Revert \"Guard use of sdallocx with BORINGSSL_SDALLOCX\"\r\n\r\nThis reverts commit 80df7398ce52574801821ce7a76c031c35d6b882.\r\n\r\nSee https://github.com/grpc/grpc/issues/25450#issuecomment-910806034\r\n\r\nEven if we want to do this, turns out that we still need the weak symbol\r\nin order to work in important environments.\r\n\r\nChange-Id: I50b9aef0cfe7ed70bda433c3046d46f194636d54\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49205\r\nReviewed-by: David Benjamin <davidben@google.com>\r\nCommit-Queue: Adam Langley <agl@google.com>\r\n\r\n* Switch to the new, simpler WHATWG URL formulation.\r\n\r\nIn light of\r\nhttps://groups.google.com/a/chromium.org/g/blink-dev/c/7QN5nxjwIfM/m/q9dw9MxoAwAJ,\r\nthe WHATWG URL parser is now more restrictive about which strings are\r\nvalid DNS names. The final component may not be numeric. Align the\r\nECHConfig validator with this.\r\n\r\nBug: 275\r\nChange-Id: Iea2a3d9a7fee5bffc683da99274c54d60379be9e\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49225\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Silence a GCC false positive warning.\r\n\r\nGCC 11.2.1 reportedly warns that CTR_DRBG_init may be passed an\r\nuninitialized personalization buffer. This appears to be a false\r\npositive, because personalization_len will be zero. But it's easy enough\r\nto zero-initialize it, so silence the warning.\r\n\r\nBug: 432\r\nChange-Id: I20f6b74e09f19962e8cae37d45090ff3d1c0215d\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49245\r\nReviewed-by: Adam Langley <agl@google.com>\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\n\r\n* Update comment for ECH draft-13.\r\n\r\nBug: 275\r\nChange-Id: I66c0d099f9fe6172c60cbf1f512b90f3b2bbb897\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49285\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Check for __TRUSTY__ instead of TRUSTY.\r\n\r\nMeant to do this shortly after filing the bug but forgot.\r\n\r\nBug: 377\r\nChange-Id: Ic5a5c167a7b6745599e3a32c4792b66ebbb2dee0\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49265\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* acvptool: add hmacDRBG support\r\n\r\nChange-Id: I63ecaaaa8ec339688c586a4b2d44e4b91b910b8f\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49305\r\nCommit-Queue: Adam Langley <agl@google.com>\r\nReviewed-by: David Benjamin <davidben@google.com>\r\n\r\n* Correctly propagate errors in i2d functions.\r\n\r\ntasn_enc.c was missing lots of error checks and mixed up 0 and -1\r\nreturns. Document all the internal calling conventions, as best as I can\r\ntell, and fix things up.\r\n\r\nThere are also error cases it forgets to check (it generally does not\r\nnotice missing non-OPTIONAL fields). This CL only addresses errors it\r\nalready tries to report. Subsequent CLs will add in the missing error\r\ncases. And then if it all sticks, I'm hoping we can rewrite this with\r\nCBB. Rewriting tsan_dec.c to CBS would also be good, but that will be\r\nmore difficult as we need to clear out BER first.\r\n\r\nUpdate-Note: Some error cases which were silently misinterpreted as\r\nmissing OPTIONAL elements will now cause encoding to fail.\r\n\r\nBug: 429\r\nChange-Id: Ibbb3eba08eb8f8f878930c9456edc8c74479aade\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49345\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Fix x509_name_ex_i2d error-handling.\r\n\r\nThis function forgot to handle errors in ASN1_item_ex_i2d. It also\r\nchecked x509_name_canon for ret < 0, when x509_name_canon returns a\r\nboolean. For consistency, I've switched to x509_name_encode to return a\r\nboolean as well. It doesn't actually need to return a length because\r\nit's responsible for filling in a->bytes.\r\n\r\n(This is also far from thread-safe, but I'll figure out what to do there\r\nseparately.)\r\n\r\nBug: 429\r\nChange-Id: I1dddeab320018be4b837f95001cbeeba4e25f0a1\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49346\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Check for invalid CHOICE selectors in i2d functions.\r\n\r\nThis handles normal CHOICE types. A follow-up CL will handle MSTRING and\r\nANY types.\r\n\r\nUpdate-Note: An invalid CHOICE object (e.g. GENERAL_NAME) will now fail\r\nwhen encoded, rather than be silently omitted. In particular, CHOICE\r\nobjects are default-initialized by tasn_new.c in an empty -1 state.\r\nStructures containing a required CHOICE field can no longer be encoded\r\nwithout filling in the CHOICE.\r\n\r\nBug: 429\r\nChange-Id: I7011deadf518ddc344a56b07a0e268ceaae17fe0\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49347\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Correctly handle invalid ASN1_OBJECTs when encoding.\r\n\r\nasn1_ex_i2c actually does have an error condition, it just wasn't being\r\nhandled.\r\n\r\n628b3c7f2fdf68519c27dc087c400ca616616f4e, imported from upstream's\r\nf3f8e72f494b36d05e0d04fe418f92b692fbb261, tried to check for OID-less\r\nASN1_OBJECTs and return an error. But it and the upstream change didn't\r\nactually work. -1 in this function means to omit the object, so OpenSSL\r\nwas silently misinterpreting the input structure.\r\n\r\nThis changes the calling convention for asn1_ex_i2c to support this. It\r\nis, unfortunately, a little messy because:\r\n\r\n1. One cannot check for object presense without walking the\r\n   ASN1_ITEM/ASN1_TEMPLATE structures. You can *almost* check if *pval\r\n   is NULL, but ASN1_BOOLEAN is an int with -1 to indicate an omitted\r\n   optional. There are also FBOOLEAN/TBOOLEAN types that omit FALSE/TRUE\r\n   for DEFAULT. Thus, without more invasive changes, asn1_ex_i2c must be\r\n   able to report an omitted element.\r\n\r\n2. While the i2d functions report an omitted element by successfully\r\n   writing zero bytes, i2c only writes the contents. It thus must\r\n   distinguish between an omitted element and an element with\r\n   zero-length contents.\r\n\r\n3. i2c_ASN1_INTEGER and i2c_ASN1_BIT_STRING return zero on error rather\r\n   than -1. Those error paths are not actually reachable because they\r\n   only check for NULL. In fact, OpenSSL has even unexported them. But I\r\n   found a few callers. Rather than unwind all this and change the\r\n   calling convention, I've just made it handle 0 and map to -1 for now.\r\n   It's all a no-op anyway, and hopefully we can redo all this with CBB\r\n   later.\r\n\r\nI've just added an output parameter for now.\r\n\r\nIn writing tests, I also noticed that the hand-written i2d_ASN1_OBJECT\r\nand i2d_ASN1_BOOLEAN return the wrong value for errors, so I've fixed\r\nthat.\r\n\r\nUpdate-Note: A default-constructed object with a required ASN1_OBJECT\r\nfield can no longer be encoded without initializing the ASN1_OBJECT.\r\nNote this affects X509: the signature algorithm is an ASN1_OBJECT. Tests\r\nthat try to serialize an X509_new() must fill in all required fields.\r\n(Production code is unlikely to be affected because the output was\r\nunparsable anyway, while tests sometimes wouldn't notice.)\r\n\r\nBug: 429\r\nChange-Id: I04417f5ad6b994cc5ccca540c8a7714b9b3af33d\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49348\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Reject -1 types in ASN1_TYPE and MSTRINGs when encoding.\r\n\r\nSee https://github.com/openssl/openssl/issues/16538\r\n\r\nUpdate-Note: A default-constructed object with a required ANY or\r\nstring-like CHOICE field cannot be encoded until the field is specified.\r\nNote this affects i2d_X509: notBefore and notAfter are string-like\r\nCHOICEs in OpenSSL.\r\n\r\nBug: 429\r\nChange-Id: I97d971fa588ab72be25a4c1eb7310ed330f16c4f\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49349\r\nReviewed-by: Adam Langley <agl@google.com>\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\n\r\n* Reject missing required fields in i2d functions.\r\n\r\nSee also 006906cddda37e24a66443199444ef4476697477 from OpenSSL, though\r\nthis CL uses a different strategy from upstream. Upstream makes\r\nASN1_item_ex_i2d continue to allow optionals and checks afterwards at\r\nevery non-optional call site. This CL pushes down an optional parameter\r\nand says functions cannot omit items unless explicitly allowed.\r\n\r\nI think this is a better default, though it is a larger change. Fields\r\nare only optional when they come from an ASN1_TEMPLATE with the OPTIONAL\r\nflag. Upstream's strategy misses top-level calls.\r\n\r\nThis CL additionally adds checks for optional ASN1_TEMPLATEs in contexts\r\nwhere it doesn't make sense. Only fields of SEQUENCEs and SETs may be\r\nOPTIONAL, but the ASN1_ITEM/ASN1_TEMPLATE split doesn't quite match\r\nASN.1 itself. ASN1_TEMPLATE is additionally responsible for\r\nexplicit/implicit tagging, and SEQUENCE/SET OF. That means CHOICE arms\r\nand the occasional top-level type (ASN1_ITEM_TEMPLATE) use ASN1_TEMPLATE\r\nbut will get confused if marked optional.\r\n\r\nAs part of this, i2d_FOO(NULL) now returns -1 rather than \"successfully\"\r\nwriting 0 bytes. If we want to allow NULL at the top-level, that's not\r\ntoo hard to arrange, but our CBB-based i2d functions do not.\r\n\r\nUpdate-Note: Structures with missing mandatory fields can no longer be\r\nencoded. Note that, apart from the cases already handled by preceding\r\nCLs, tasn_new.c will fill in non-NULL empty objects everywhere. The main\r\ndownstream impact I've seen of this particular change is in combination\r\nwith other bugs. Consider a caller that does:\r\n\r\n  GENERAL_NAME *name = GENERAL_NAME_new();\r\n  name->type = GEN_DNS;\r\n  name->d.dNSName = DoSomethingComplicated(...);\r\n\r\nSuppose DoSomethingComplicated() was actually fallible and returned\r\nNULL, but the caller forgot to check. They'd now construct a\r\nGENERAL_NAME with a missing field. Previously, this would silently\r\nserialize some garbage (omitted field) or empty string. Now we fail to\r\nencode, but the true error was the uncaught DoSomethingComplicated()\r\nfailure. (Which likely was itself a bug.)\r\n\r\nBug: 429\r\nChange-Id: I37fe618761be64a619be9fdc8d416f24ecbb8c46\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49350\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Don't read it->funcs without checking it->itype.\r\n\r\nit->funcs is only an ASN1_AUX for ASN1_ITYPE_SEQUENCE and\r\nASN1_ITYPE_CHOICE. Fortunately, the other possible types for it->funcs\r\nare larger than ASN1_AUX and we don't touch the result when we\r\nshouldn't, so this is merely a strict aliasing violation.\r\n\r\nChange-Id: I29e94249e0b137fe8df0b16254366ae6705c8784\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49351\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Remove ASN1_OP_I2D_* callbacks.\r\n\r\nThese are a little odd with the ASN1_ENCODING paths. And there were some\r\nbugs previously around CHOICE types. Nothing defines them, inside or\r\noutside BoringSSL, so remove them.\r\n\r\nChange-Id: Id2954fef8ee9637f36f7511b51dc0adc2557e3ba\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49352\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Add maskHash to RSA_PSS_PARAMS for compat\r\n\r\nThis CL adds a maskHash member to the rsa_pss_params_st struct for\r\nincreased compatibility with OpenSSL: https://source.chromium.org/chromium/chromium/src/+/main:third_party/perl/c/include/openssl/rsa.h;l=282-289\r\n\r\nNode.js recently began to make use of this member in https://github.com/nodejs/node/pull/39851\r\nand without this member Electron sees compilation errors.\r\n\r\nChange-Id: Ibd18a31605b0a715edb279a3bca4b4f05e679767\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49365\r\nReviewed-by: David Benjamin <davidben@google.com>\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\n\r\n* Fix BN_prime_checks_for_validation to align with false-positive rate.\r\n\r\nThis doesn't affect RSA key generation, which uses\r\nBN_prime_checks_for_generation.\r\n\r\nChange-Id: Ibf32c0c4bc9fed369e8f8a1efea72c5bd39185a9\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49426\r\nReviewed-by: David Benjamin <davidben@google.com>\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\n\r\n* Clarify that TLS sessions are not application sessions.\r\n\r\nHaving APIs named \"session\" and \"ID\" appears to be far too tempting for\r\ndevelopers, mistaking it as some application-level notion of session.\r\nUpdate the documentation, in hopes of discouraging this mistake.\r\n\r\nChange-Id: Ifd9516287092371d4701114771eff6640df1bcb0\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49405\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Fix the TLS fuzzers for ECH draft-13.\r\n\r\nReplace the hardcoded ECH config, which wasn't updated for draft-13,\r\nwith a call to SSL_marshal_ech_config.\r\n\r\nBug: 275, oss-fuzz:38054\r\nChange-Id: I10c12b22015c9c0cb90dd6185eb375153a2531f4\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49445\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Refresh fuzzer corpus for ECH draft-13.\r\n\r\nBug: 275\r\nChange-Id: I3a89bd31b6198c9cb2e40835219fa9f248a69c9b\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49446\r\nReviewed-by: Adam Langley <agl@google.com>\r\nCommit-Queue: Adam Langley <agl@google.com>\r\n\r\n* Add FIPS counters for AES-GCM in EVP_AEAD.\r\n\r\nBUG=b/158221316\r\n\r\nChange-Id: I42693f760aa2852902d72622e109c5d9cac2c4d9\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49485\r\nCommit-Queue: Adam Langley <agl@google.com>\r\nReviewed-by: David Benjamin <davidben@google.com>\r\n\r\n* Ignore SIGPIPE in the bssl tool.\r\n\r\nBug: 435\r\nChange-Id: I0ed94d40d04ebc26c9996dfe2b947a6e2f140a89\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49465\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* acvptool: add CS3 support.\r\n\r\nCS3 is ciphertext-stealing variant three from SP 800-38A.\r\n\r\nChange-Id: I992dc22778c91efad361f25ff65ae5966fc447c6\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49505\r\nCommit-Queue: Adam Langley <agl@google.com>\r\nReviewed-by: David Benjamin <davidben@google.com>\r\n\r\n* Unwind remnants of ASN1_TFLG_NDEF.\r\n\r\nThe i2d functions internally take a tag/class pair of parameters. If tag\r\nis not -1, we override the tag with (tag, class). Otherwise, class is\r\nignored. (class is inconsistently called aclass or iclass.)\r\n\r\nHistorically, the remaning bits of class were repurposed to pass extra\r\nflags down the structure. These had to be preserved in all recursive\r\ncalls, so the functions take apart and reassemble the two halves of\r\naclass/iclass. The only such flag was ASN1_TFLG_NDEF, which on certain\r\ntypes, caused OpenSSL to encode indefinite-length encoding. We removed\r\nthis in https://boringssl-review.googlesource.com/c/boringssl/+/43889.\r\n\r\nDue to these flags, if tag == -1, class should default to zero. However,\r\nX509_NAME's callbacks pass -1, -1, instead of -1, 0, effectively setting\r\nall flags. This wasn't noticed because none of the types below X509_NAME\r\npay attention to ASN1_TFLG_NDEF.\r\n\r\nThis CL does two things: First, it unwinds the remainder of the flags\r\nmachinery. If we ever need flags, we should pass it as a distinct\r\nargument. Second, it fixes the X509_NAME calls and asserts that -1 is\r\nalways paired with 0.\r\n\r\nChange-Id: I285a73a06ad16980617fe23d5ea7f260fc5dbf16\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49385\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Speed up constant-time base64 decoding.\r\n\r\nI was inspired to look at this again recently and noticed we could do a\r\nbit better. Instead of a tower of selects, rely on all the cases being\r\nmutually exclusive and use the ret |= mask & value formulation without\r\nloss in clarity. We do need to fixup the invalid case slightly, but\r\nsince that computation is mostly independent, I'm guessing the CPU and\r\ncompiler are able to schedule it effectively.\r\n\r\nBefore:\r\nDid 251000 base64 decode operations in 2002569us (159.4 MB/sec)\r\nAfter:\r\nDid 346000 base64 decode operations in 2005426us (219.5 MB/sec) [+37.7%]\r\n\r\nChange-Id: I542167202fd4e94c93dd5a2519a97bc388072c89\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49525\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Allow PKCS7_sign to work for signing kernel modules.\r\n\r\nLinux module signing uses PKCS#7 / CMS because everything is awful and\r\nbroken. In order to make the lives of kernel developers easier, support\r\nthe calling pattern that the kernel uses to sign modules.\r\n\r\nThe kernel utility was written at a time when PKCS#7 was hard coded to\r\nuse SHA-1 for signing in OpenSSL and it reflects this: you can only\r\nspecify “sha1” on the command line, for example. As of OpenSSL 1.1.1, at\r\nleast, OpenSSL uses SHA-256 and thus so does this change.\r\n\r\nChange-Id: I32b036123a0d8b272ec9e1c0130c45bf3ed0d2c7\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49545\r\nCommit-Queue: Adam Langley <agl@google.com>\r\nReviewed-by: David Benjamin <davidben@google.com>\r\n\r\n* aarch64: Add missing LR validation in 'vpaes_cbc_encrypt'\r\n\r\nThere is an obvious bug there: upon entry to 'vpaes_cbc_encrypt'\r\nLR may get signed. However, on the 'cbc_abort' path the LR is\r\nnot going to be unsigned before 'ret' is executed.\r\n\r\nFound by manual code inspection.\r\n\r\nCo-authored-by: Russ Butler <russ.butler@arm.com>\r\n\r\nChange-Id: I646cdfaee28db59aafbbd412d4bb6ba022eff15b\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49605\r\nReviewed-by: David Benjamin <davidben@google.com>\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\n\r\n* Keep EVP_CIPHER/EVP_MD lookup and do_all functions in sync\r\n\r\nNode seems uncommonly sensitive to this, so let's write these functions\r\nin a way that stays in sync and test this. See also\r\nhttps://boringssl-review.googlesource.com/c/boringssl/+/49585\r\n\r\nThis does incur a cost across all BoringSSL consumers that use these\r\nfunctions: as a result of Node indiscriminately exposing every cipher,\r\nwe end up pulling more and more ciphers into these getters. But that\r\nship sailed long ago, so, instead, document that EVP_get_cipherby*\r\nshould not be used by size-conscious callers.\r\n\r\nEVP_get_digestby* probably should have the same warning, but I've left\r\nit alone for now because we don't quite have the same proliferation of\r\ndigests as ciphers. (Though there are things in there, like MD4, that\r\nought to be better disconnected.)\r\n\r\nChange-Id: I61ca406c146279bd05a52bed6c57200d1619c5da\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49625\r\nReviewed-by: Adam Langley <agl@google.com>\r\nCommit-Queue: Adam Langley <agl@google.com>\r\n\r\n* Fix CRYPTO_malloc, etc., definitions.\r\n\r\nIn upstream, these functions take file and line number arguments. Update\r\nours to match. Guessing almost no one uses these, or we'd have caught\r\nthis earlier.\r\n\r\nChange-Id: Ic09f8d8274065ac02efa78e70c215b87fa765b9f\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49665\r\nReviewed-by: Adam Langley <agl@google.com>\r\nReviewed-by: Benjamin Brittain <bwb@google.com>\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\n\r\n* Add log tag for Trusty.\r\n\r\nTrusty's TLOGE macro nowadays expects TLOG_TAG to be defined\r\nas the log tag to use.\r\n\r\nChange-Id: I18121287ba51698d354323027d5382c8406f0b99\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49685\r\nCommit-Queue: Pete Bentley <prb@google.com>\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nReviewed-by: David Benjamin <davidben@google.com>\r\n\r\n* Add note to HMAC test vectors from NIST\r\n\r\nAll the test vectors testing key length greater than the block length\r\nwere mislabelled as key length being equal to the block length. Add a\r\nnote to these test vectors indicating they are directly from the NIST\r\ntests with the misleading input intact.\r\n\r\nChange-Id: I9fe87971265ad48e9b835fccbe92306e1670b4d6\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49705\r\nReviewed-by: David Benjamin <davidben@google.com>\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\n\r\n* Switch x509_test.cc to modify the existing X509_VERIFY_PARAM.\r\n\r\nThere are two ways to configure an X509_STORE_CTX after\r\nX509_STORE_CTX_init. One can either modify the already initialized\r\nX509_VERIFY_PARAM or replace it. Modifying the existing one is more\r\ncommon. Replacing it actually misses some defaults. (See issue #441 for\r\ndetails.)\r\n\r\nIn preparation for actually being able to test changes to the default,\r\nswitch tests to that model. In doing so, no longer need to explicitly\r\nconfigure the depth and can test that default. (Though we should write\r\ntests for the depth at some point.)\r\n\r\nBug: 439, 441\r\nChange-Id: I254a82585d70d44eb94920f604891ebfbff4af4c\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49745\r\nCommit-Queue: David Benjamin <davidben@google.com>\r\nCommit-Queue: Adam Langley <agl@google.com>\r\nReviewed-by: Adam Langley <agl@google.com>\r\n\r\n* Enable X509_V_FLAG_TRUSTED_FIRST by default.\r\n\r\nThe OpenSSL X.509 verifier lacks a proper path builder. When there are\r\ntwo paths available for a certificate, we pick one without looking at\r\nexpiry, etc.\r\n\r\nIn scenarios like one below, X509_V_FLAG_TRUSTED_FIRST will prefer\r\nLeaf -> Intermediate -> Root1. Otherwise, we will prefer\r\nLeaf -> Intermediate -> Root1Cross -> Root2:\r\n\r\n             Root2\r\n               |\r\n Root1     Root1Cross\r\n    \\         /\r\n    Intermediate\r\n         |\r\n       Leaf\r\n\r\nIf Root2 is expired, as with Let's Encrypt, X509_V_FLAG_TRUSTED_FIRST\r\nwill find the path we want. Same if Root1Cross is expired. (Meanwhile,\r\nif Root1 is expired, TRUSTED_FIRST will break and leaving it off works.\r\nTRUSTED_FIRST does not actually select chains with validity in mind. It\r\njust changes the semi-arbitrary decision.)\r\n\r\nOpenSSL 1.1.x now defaults to X509_V_FLAG_TRUSTED_FIRST by default, so\r\nmatch them. Hopefully the shorter chain is more likely to be correct.\r\n\r\nUpdate-Note: X509_verify_cert will now build slightly different chains\r\nby default. Hopefully, this fixes more issues than it causes, but there\r\nis a risk of trusted_first breaking other scenarios. Those scenarios\r\nwill also break OpenSSL 1.1.x defaults, so hopefully this is fine.\r\n\r\nBug: 439\r\nChange-Id: Ie624f1f7e85a9e8c283f1caf24729aef9206ea16\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49746\r\nReviewed-by: Adam Langley <agl@google.com>\r\nReviewed-by: Ryan Sleevi <rsleevi@chromium.org>\r\n\r\n* Remove X509_STORE_set0_additional_untrusted.\r\n\r\nThis was added in\r\nhttps://boringssl-review.googlesource.com/c/boringssl/+/12980/, but does\r\nnot appear to be used anymore. The corresponding function does not exist\r\nin OpenSSL.\r\n\r\nThis simplifies the tests slightly, some of which were inadvertently\r\nspecifying the boolean and some weren't.\r\n\r\nChange-Id: I9b956dcd9f7151910f93f377d207c88273bd9ccf\r\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49747\r\nReviewed-by: Adam Langley <agl@google.com>\r\nCommit-Queue: Adam Langley <agl@google.com>\r\n\r\n* Extract common rotl/rotr functions.\r\n\r\nWe have a ton of per-file rotation functions, often with generic names\r\nthat do not tell you whether they are uint32_t vs uint…","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/7f520b6f64b43b166b658afd0d187e1846db235d"}]},"public":true,"created_at":"2022-02-14T14:10:30Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
