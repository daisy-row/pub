{"id":"20192536610","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1188","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1188/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1188/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1188/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1188","id":1129798582,"node_id":"I_kwDOA-eq3c5DV1u2","number":1188,"title":"Failed to build ","user":{"login":"demian91","id":17710736,"node_id":"MDQ6VXNlcjE3NzEwNzM2","avatar_url":"https://avatars.githubusercontent.com/u/17710736?v=4","gravatar_id":"","url":"https://api.github.com/users/demian91","html_url":"https://github.com/demian91","followers_url":"https://api.github.com/users/demian91/followers","following_url":"https://api.github.com/users/demian91/following{/other_user}","gists_url":"https://api.github.com/users/demian91/gists{/gist_id}","starred_url":"https://api.github.com/users/demian91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/demian91/subscriptions","organizations_url":"https://api.github.com/users/demian91/orgs","repos_url":"https://api.github.com/users/demian91/repos","events_url":"https://api.github.com/users/demian91/events{/privacy}","received_events_url":"https://api.github.com/users/demian91/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-02-10T10:34:00Z","updated_at":"2022-02-11T07:27:15Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi all, \r\n\r\nWhen i tried following the instructions from the manual, I got an error: \r\n\r\n```\r\nubuntu@asp-proxy-04:~/openssl$ git clone --branch main https://github.com/open-quantum-safe/liboqs.git\r\nCloning into 'liboqs'...\r\nremote: Enumerating objects: 25629, done.\r\nremote: Counting objects: 100% (2989/2989), done.\r\nremote: Compressing objects: 100% (1146/1146), done.\r\nremote: Total 25629 (delta 1928), reused 2687 (delta 1801), pack-reused 22640\r\nReceiving objects: 100% (25629/25629), 133.32 MiB | 6.83 MiB/s, done.\r\nResolving deltas: 100% (18100/18100), done.\r\nubuntu@asp-proxy-04:~/openssl$ cd liboqs/\r\nubuntu@asp-proxy-04:~/openssl/liboqs$  mkdir build && cd build\r\nubuntu@asp-proxy-04:~/openssl/liboqs/build$ cmake -GNinja ..\r\n-- The C compiler identification is GNU 9.3.0\r\n-- The ASM compiler identification is GNU\r\n-- Found assembler: /usr/bin/cc\r\n-- Check for working C compiler: /usr/bin/cc\r\n-- Check for working C compiler: /usr/bin/cc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Looking for pthread.h\r\n-- Looking for pthread.h - found\r\n-- Performing Test CMAKE_HAVE_LIBC_PTHREAD\r\n-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed\r\n-- Check if compiler accepts -pthread\r\n-- Check if compiler accepts -pthread - yes\r\n-- Found Threads: TRUE\r\n-- Found OpenSSL: /usr/local/lib/libcrypto.a (found suitable version \"1.1.1f\", minimum required is \"1.1.1\")\r\n-- Found Doxygen: /usr/bin/doxygen (found version \"1.8.17\") found components: doxygen dot\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /home/ubuntu/openssl/liboqs/build\r\n[2330/2353] Linking C executable tests/test_hash\r\nFAILED: tests/test_hash\r\n: && /usr/bin/cc    src/common/sha3/xkcp_low/CMakeFiles/xkcp_low_keccakp_1600_avx2.dir/KeccakP-1600/avx2/KeccakP-1600-AVX2.S.o src/common/sha3/xkcp_low/CMakeFiles/xkcp_low_keccakp_1600times4_avx2.di\r\nr/KeccakP-1600times4/avx2/KeccakP-1600-times4-SIMD256.c.o src/common/CMakeFiles/common.dir/aes/aes_ossl.c.o src/common/CMakeFiles/common.dir/sha2/sha2_ossl.c.o src/common/CMakeFiles/common.dir/sha3/\r\nxkcp_sha3.c.o src/common/CMakeFiles/common.dir/sha3/xkcp_sha3x4.c.o src/common/CMakeFiles/common.dir/common.c.o src/common/CMakeFiles/common.dir/pqclean_shims/nistseedexpander.c.o src/common/CMakeFi\r\nles/common.dir/pqclean_shims/fips202.c.o src/common/CMakeFiles/common.dir/pqclean_shims/fips202x4.c.o src/common/CMakeFiles/common.dir/rand/rand.c.o src/common/CMakeFiles/common.dir/rand/rand_nist.c\r\n.o tests/CMakeFiles/test_hash.dir/test_hash.c.o  -o tests/test_hash  /usr/local/lib/libcrypto.a  -lm && :\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_lock_new':\r\nthreads_pthread.c:(.text+0x4a): undefined reference to `pthread_rwlock_init'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_read_lock':\r\nthreads_pthread.c:(.text+0x89): undefined reference to `pthread_rwlock_rdlock'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_write_lock':\r\nthreads_pthread.c:(.text+0xa9): undefined reference to `pthread_rwlock_wrlock'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_unlock':\r\nthreads_pthread.c:(.text+0xc9): undefined reference to `pthread_rwlock_unlock'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_lock_free':\r\nthreads_pthread.c:(.text+0xee): undefined reference to `pthread_rwlock_destroy'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_run_once':\r\nthreads_pthread.c:(.text+0x129): undefined reference to `pthread_once'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_init_local':\r\nthreads_pthread.c:(.text+0x149): undefined reference to `pthread_key_create'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_set_local':\r\nthreads_pthread.c:(.text+0x17b): undefined reference to `pthread_setspecific'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_cleanup_local':\r\nthreads_pthread.c:(.text+0x19b): undefined reference to `pthread_key_delete'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `openssl_init_fork_handlers':\r\nthreads_pthread.c:(.text+0x207): undefined reference to `pthread_once'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_get_local':\r\nthreads_pthread.c:(.text+0x167): undefined reference to `pthread_getspecific'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `pkey_oqs_digestsign':\r\noqs_meth.c:(.text+0x2c2): undefined reference to `OQS_SIG_sign'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `oqs_free':\r\noqs_meth.c:(.text+0x28a2): undefined reference to `OQS_SIG_free'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `pkey_oqs_digestverify':\r\noqs_meth.c:(.text+0x2fa1): undefined reference to `OQS_SIG_verify'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `oqs_key_init':\r\noqs_meth.c:(.text+0x3802): undefined reference to `OQS_SIG_alg_is_enabled'\r\n/usr/bin/ld: oqs_meth.c:(.text+0x380e): undefined reference to `OQS_SIG_new'\r\n/usr/bin/ld: oqs_meth.c:(.text+0x3958): undefined reference to `OQS_SIG_free'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `pkey_oqs_keygen':\r\noqs_meth.c:(.text+0x3ae2): undefined reference to `OQS_SIG_keypair'\r\n/usr/bin/ld: oqs_meth.c:(.text+0x3b6a): undefined reference to `OQS_SIG_free'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `oqs_priv_decode':\r\noqs_meth.c:(.text+0x40ee): undefined reference to `OQS_SIG_free'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `oqs_pub_decode':\r\noqs_meth.c:(.text+0x44fe): undefined reference to `OQS_SIG_free'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `OQSKEM_options':\r\noqs_meth.c:(.text+0x4623): undefined reference to `OQS_KEM_alg_is_enabled'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `OQSSIG_options':\r\noqs_meth.c:(.text+0x46e3): undefined reference to `OQS_SIG_alg_is_enabled'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(dso_dlfcn.o): in function `dlfcn_globallookup':\r\ndso_dlfcn.c:(.text+0x17): undefined reference to `dlopen'\r\n/usr/bin/ld: dso_dlfcn.c:(.text+0x2a): undefined reference to `dlsym'\r\n/usr/bin/ld: dso_dlfcn.c:(.text+0x35): undefined reference to `dlclose'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(dso_dlfcn.o): in function `dlfcn_bind_func':\r\ndso_dlfcn.c:(.text+0x1b7): undefined reference to `dlsym'\r\n/usr/bin/ld: dso_dlfcn.c:(.text+0x282): undefined reference to `dlerror'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(dso_dlfcn.o): in function `dlfcn_load':\r\ndso_dlfcn.c:(.text+0x2f5): undefined reference to `dlopen'\r\n/usr/bin/ld: dso_dlfcn.c:(.text+0x369): undefined reference to `dlclose'\r\n/usr/bin/ld: dso_dlfcn.c:(.text+0x3a5): undefined reference to `dlerror'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(dso_dlfcn.o): in function `dlfcn_pathbyaddr':\r\ndso_dlfcn.c:(.text+0x466): undefined reference to `dladdr'\r\n/usr/bin/ld: dso_dlfcn.c:(.text+0x4d7): undefined reference to `dlerror'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(dso_dlfcn.o): in function `dlfcn_unload':\r\ndso_dlfcn.c:(.text+0x6b8): undefined reference to `dlclose'\r\ncollect2: error: ld returned 1 exit status\r\n[2332/2353] Linking C executable tests/test_aes\r\nFAILED: tests/test_aes\r\n: && /usr/bin/cc    src/common/sha3/xkcp_low/CMakeFiles/xkcp_low_keccakp_1600_avx2.dir/KeccakP-1600/avx2/KeccakP-1600-AVX2.S.o src/common/sha3/xkcp_low/CMakeFiles/xkcp_low_keccakp_1600times4_avx2.di\r\nr/KeccakP-1600times4/avx2/KeccakP-1600-times4-SIMD256.c.o src/common/CMakeFiles/common.dir/aes/aes_ossl.c.o src/common/CMakeFiles/common.dir/sha2/sha2_ossl.c.o src/common/CMakeFiles/common.dir/sha3/\r\nxkcp_sha3.c.o src/common/CMakeFiles/common.dir/sha3/xkcp_sha3x4.c.o src/common/CMakeFiles/common.dir/common.c.o src/common/CMakeFiles/common.dir/pqclean_shims/nistseedexpander.c.o src/common/CMakeFi\r\nles/common.dir/pqclean_shims/fips202.c.o src/common/CMakeFiles/common.dir/pqclean_shims/fips202x4.c.o src/common/CMakeFiles/common.dir/rand/rand.c.o src/common/CMakeFiles/common.dir/rand/rand_nist.c\r\n.o tests/CMakeFiles/test_aes.dir/test_aes.c.o  -o tests/test_aes  /usr/local/lib/libcrypto.a  -lm && :\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_lock_new':\r\nthreads_pthread.c:(.text+0x4a): undefined reference to `pthread_rwlock_init'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_read_lock':\r\nthreads_pthread.c:(.text+0x89): undefined reference to `pthread_rwlock_rdlock'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_write_lock':\r\nthreads_pthread.c:(.text+0xa9): undefined reference to `pthread_rwlock_wrlock'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_unlock':\r\nthreads_pthread.c:(.text+0xc9): undefined reference to `pthread_rwlock_unlock'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_lock_free':\r\nthreads_pthread.c:(.text+0xee): undefined reference to `pthread_rwlock_destroy'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_run_once':\r\nthreads_pthread.c:(.text+0x129): undefined reference to `pthread_once'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_init_local':\r\nthreads_pthread.c:(.text+0x149): undefined reference to `pthread_key_create'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_set_local':\r\nthreads_pthread.c:(.text+0x17b): undefined reference to `pthread_setspecific'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_cleanup_local':\r\nthreads_pthread.c:(.text+0x19b): undefined reference to `pthread_key_delete'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `openssl_init_fork_handlers':\r\nthreads_pthread.c:(.text+0x207): undefined reference to `pthread_once'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(threads_pthread.o): in function `CRYPTO_THREAD_get_local':\r\nthreads_pthread.c:(.text+0x167): undefined reference to `pthread_getspecific'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `pkey_oqs_digestsign':\r\noqs_meth.c:(.text+0x2c2): undefined reference to `OQS_SIG_sign'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `oqs_free':\r\noqs_meth.c:(.text+0x28a2): undefined reference to `OQS_SIG_free'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `pkey_oqs_digestverify':\r\noqs_meth.c:(.text+0x2fa1): undefined reference to `OQS_SIG_verify'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `oqs_key_init':\r\noqs_meth.c:(.text+0x3802): undefined reference to `OQS_SIG_alg_is_enabled'\r\n/usr/bin/ld: oqs_meth.c:(.text+0x380e): undefined reference to `OQS_SIG_new'\r\n/usr/bin/ld: oqs_meth.c:(.text+0x3958): undefined reference to `OQS_SIG_free'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `pkey_oqs_keygen':\r\noqs_meth.c:(.text+0x3ae2): undefined reference to `OQS_SIG_keypair'\r\n/usr/bin/ld: oqs_meth.c:(.text+0x3b6a): undefined reference to `OQS_SIG_free'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `oqs_priv_decode':\r\noqs_meth.c:(.text+0x40ee): undefined reference to `OQS_SIG_free'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `oqs_pub_decode':\r\noqs_meth.c:(.text+0x44fe): undefined reference to `OQS_SIG_free'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `OQSKEM_options':\r\noqs_meth.c:(.text+0x4623): undefined reference to `OQS_KEM_alg_is_enabled'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `OQSSIG_options':\r\noqs_meth.c:(.text+0x46e3): undefined reference to `OQS_SIG_alg_is_enabled'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(dso_dlfcn.o): in function `dlfcn_globallookup':\r\ndso_dlfcn.c:(.text+0x17): undefined reference to `dlopen'\r\n/usr/bin/ld: dso_dlfcn.c:(.text+0x2a): undefined reference to `dlsym'\r\n/usr/bin/ld: dso_dlfcn.c:(.text+0x35): undefined reference to `dlclose'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(dso_dlfcn.o): in function `dlfcn_bind_func':\r\ndso_dlfcn.c:(.text+0x1b7): undefined reference to `dlsym'\r\n/usr/bin/ld: dso_dlfcn.c:(.text+0x282): undefined reference to `dlerror'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(dso_dlfcn.o): in function `dlfcn_load':\r\ndso_dlfcn.c:(.text+0x2f5): undefined reference to `dlopen'\r\n/usr/bin/ld: dso_dlfcn.c:(.text+0x369): undefined reference to `dlclose'\r\n/usr/bin/ld: dso_dlfcn.c:(.text+0x3a5): undefined reference to `dlerror'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(dso_dlfcn.o): in function `dlfcn_pathbyaddr':\r\ndso_dlfcn.c:(.text+0x466): undefined reference to `dladdr'\r\n/usr/bin/ld: dso_dlfcn.c:(.text+0x4d7): undefined reference to `dlerror'\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(dso_dlfcn.o): in function `dlfcn_unload':\r\ndso_dlfcn.c:(.text+0x6b8): undefined reference to `dlclose'\r\ncollect2: error: ld returned 1 exit status\r\n[2339/2353] Building C object tests/CMakeFiles/test_sig_mem.dir/test_sig_mem.c.o\r\nninja: build stopped: subcommand failed.\r\n```\r\n\r\nAll the dependencies were already installed! \r\n\r\n```\r\nubuntu@asp-proxy-04:~/openssl/liboqs/build$   sudo apt install astyle cmake gcc ninja-build libssl-dev python3-pytest python3-pytest-xdist unzip xsltproc doxygen graphviz python3-yaml\r\nReading package lists... Done\r\nBuilding dependency tree\r\nReading state information... Done\r\ncmake is already the newest version (3.16.3-1ubuntu1).\r\ngcc is already the newest version (4:9.3.0-1ubuntu2).\r\nunzip is already the newest version (6.0-25ubuntu1).\r\nxsltproc is already the newest version (1.1.34-4).\r\nastyle is already the newest version (3.1-2build1).\r\ndoxygen is already the newest version (1.8.17-0ubuntu2).\r\ngraphviz is already the newest version (2.42.2-3build2).\r\nninja-build is already the newest version (1.10.0-1build1).\r\npython3-pytest is already the newest version (4.6.9-1).\r\npython3-pytest-xdist is already the newest version (1.31.0-1).\r\nlibssl-dev is already the newest version (1.1.1f-1ubuntu2.10).\r\npython3-yaml is already the newest version (5.3.1-1ubuntu0.1).\r\n0 upgraded, 0 newly installed, 0 to remove and 30 not upgraded.\r\n```\r\n\r\nCould you please help me with this?\r\nThanks in advance!","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1188/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1188/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1035941686","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1188#issuecomment-1035941686","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1188","id":1035941686,"node_id":"IC_kwDOA-eq3c49vzc2","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-02-11T07:27:14Z","updated_at":"2022-02-11T07:27:14Z","author_association":"MEMBER","body":"Thanks for the update. The library using during linking looks \"fishy\" to me: `/usr/local/lib/libcrypto.a`: Did you create (and install) this while building (oqs-)openssl? It seems to contain unlinked OQS symbols:\r\n```\r\n/usr/bin/ld: /usr/local/lib/libcrypto.a(oqs_meth.o): in function `pkey_oqs_digestsign':\r\noqs_meth.c:(.text+0x2c2): undefined reference to `OQS_SIG_sign'\r\n```\r\n\r\n-> Is it possible that you previously ran `make install` in (oqs-)openssl without first successfully building and installing `liboqs`? \r\n\r\nIn any case, please try building `liboqs` again without the library `/usr/local/lib/libcrypto.a` in that system location (remove or rename if you're not sure where it comes from). Please ensure `libcrypto` is taken from a `/usr/lib...` location: The link stage failing in your case should look similar to this:\r\n\r\n```\r\n/usr/bin/cc    src/common/sha3/xkcp_low/CMakeFiles/xkcp_low_keccakp_1600_plain64.dir/KeccakP-1600/plain-64bits/KeccakP-1600-opt64.c.o src/common/sha3/xkcp_low/CMakeFiles/xkcp_low_keccakp_1600times4_serial.dir/KeccakP-1600times4/serial/KeccakP-1600-times4-on1.c.o src/common/CMakeFiles/common.dir/aes/aes_ossl.c.o src/common/CMakeFiles/common.dir/sha2/sha2_ossl.c.o src/common/CMakeFiles/common.dir/sha3/xkcp_sha3.c.o src/common/CMakeFiles/common.dir/sha3/xkcp_sha3x4.c.o src/common/CMakeFiles/common.dir/common.c.o src/common/CMakeFiles/common.dir/pqclean_shims/nistseedexpander.c.o src/common/CMakeFiles/common.dir/pqclean_shims/fips202.c.o src/common/CMakeFiles/common.dir/pqclean_shims/fips202x4.c.o src/common/CMakeFiles/common.dir/rand/rand.c.o src/common/CMakeFiles/common.dir/rand/rand_nist.c.o tests/CMakeFiles/test_hash.dir/test_hash.c.o  -o tests/test_hash  /usr/lib/x86_64-linux-gnu/libcrypto.so  -lm \r\n```","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1035941686/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-02-11T07:27:15Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20192677906","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":397651453,"name":"open-quantum-safe/libssh","url":"https://api.github.com/repos/open-quantum-safe/libssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5","repository_url":"https://api.github.com/repos/open-quantum-safe/libssh","labels_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/comments","events_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/events","html_url":"https://github.com/open-quantum-safe/libssh/issues/5","id":1115873007,"node_id":"I_kwDOF7Ot_c5Cgt7v","number":5,"title":"Update tests to (oqs-)openssh v8","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"assignees":[{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2022-01-27T07:37:44Z","updated_at":"2022-02-11T07:36:54Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"After building [libssh v0.9.6](https://www.libssh.org/files/0.9/libssh-0.9.6.tar.xz) from scratch and using the [current, v8 openssh](https://github.com/openssh/openssh-portable) as the target for client-side testing (build libssh via `cmake -DUNIT_TESTING=ON -DCMAKE_BUILD_TYPE=Debug -DCLIENT_TESTING=ON  ..`) all tests pass, apparently indicating (upstream) libssh works/tests OK with openssh v8.\r\n\r\nThis leads me to conclude that it should be possible to upgrade oqs-libssh testing to using oqs-openssh (v8) for testing -- with the goal to eliminate continued support for oqs-openssh v7.\r\n\r\n-> Doable & sensible?\r\n\r\nAs a side note, it would be good to document which (version of) libssh oqs-libssh has been branched off from. When checking the `git log` it seems to be an intermediate commit (d1abe26be3d61156976ab9bd679a9faee6afe8fc). Related question: Why is this repo no fork of https://git.libssh.org/projects/libssh.git?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/comments/1035946745","html_url":"https://github.com/open-quantum-safe/libssh/issues/5#issuecomment-1035946745","issue_url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/5","id":1035946745,"node_id":"IC_kwDOF7Ot_c49v0r5","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-02-11T07:36:54Z","updated_at":"2022-02-11T07:36:54Z","author_association":"MEMBER","body":"> He built and ran the official libssh against OQS-OpenSSH v8, and that worked. \r\n\r\nLittle correction: I built and ran the official libssh against openssh v8 and that worked. No OQS involved. My goal was to ascertain that (current) libssh tests OK against (current) openssh. Hence the question whether it shouldn't be possible to (successfully) test oqs-libssh against oqs-openssh (v8).\r\n\r\n> the latter will need updating to be compatible.\r\n\r\nThis surely is right -- so maybe it would be more correct to re-title this issue to read \"update libssh to current upstream libssh code base\" (and expecting the test cases afterwards to immediately work OK with oqs-openssh (v8)). ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/libssh/issues/comments/1035946745/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-02-11T07:36:54Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20199970756","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/119","id":1129218580,"node_id":"I_kwDOBsoLV85DToIU","number":119,"title":"v8 branch pure-PQ KEMs do not use mpint representation for shared_secret in SSH KDF","user":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-02-09T23:57:50Z","updated_at":"2022-02-11T14:22:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When deriving the various keys in `kex_derive_keys`, the pure-PQ functions that handle encrypting and decrypting the shared secret, `kex_kem_generic_enc` and `kex_kem_generic_dec`, write only the shared secret data itself into the buffer that is later input to the KDF. They call `sshbuf_reserve` and pass a pointer directly into the buffer contents to `OQS_KEM_encaps` or `_decaps`. The SSH spec requires the shared secret input to the KDF to be in the mpint format, which has 4 bytes of length prepended to it. This causes the keys to be derived in a manner not compliant with the spec. In `kex_derive_keys`, `shared_secret` ends up being 16 bytes, for example, when it should be 20 (4 bytes length + 16 bytes secret).\r\n\r\nThe relevant code is at https://github.com/open-quantum-safe/openssh/blob/0c5eac6a3ba249f73bb953745cf109bdf281eafd/kexoqs.c#L91-L98 for encrypting, and https://github.com/open-quantum-safe/openssh/blob/0c5eac6a3ba249f73bb953745cf109bdf281eafd/kexoqs.c#L130-L135 for decrypting.\r\n\r\nThe v7.9 branch had this correct, and there's even a note calling it out at https://github.com/open-quantum-safe/openssh/blob/f41bbe652c522db1bec388f82db369e4e5f0f405/kexpqoqsc.c#L297-L310 and https://github.com/open-quantum-safe/openssh/blob/f41bbe652c522db1bec388f82db369e4e5f0f405/kexpqoqss.c#L282-L295. The shared secret data there is written into the buffer as an ssh_string, which prepends the same 4 bytes of length that makes it conform to the mpint format.\r\n\r\nAs an aside, I believe the hybrid case is correct, but I haven't been able to test it yet. `kex_kem_generic_with_ec_enc` and `kex_kem_generic_with_ec_dec` both write the shared secret to the relevant buffer with `sshbuf_put_string`, in the same way the v7.9 code does, and so the prepended length should be present. See https://github.com/open-quantum-safe/openssh/blob/0c5eac6a3ba249f73bb953745cf109bdf281eafd/kexoqsecdh.c#L337-L343 and https://github.com/open-quantum-safe/openssh/blob/0c5eac6a3ba249f73bb953745cf109bdf281eafd/kexoqsecdh.c#L262-L272.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1036262334","html_url":"https://github.com/open-quantum-safe/openssh/issues/119#issuecomment-1036262334","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119","id":1036262334,"node_id":"IC_kwDOBsoLV849xBu-","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2022-02-11T14:22:06Z","updated_at":"2022-02-11T14:22:06Z","author_association":"MEMBER","body":"> > I'm a bit confused by this point. Are you saying that in the places where our implementations are saying they're using mpint's, they are actually not dropping leading zeros?\r\n> \r\n> For PQ and hybrid KEMs, that’s correct. Internally they’re handled as byte arrays and written out as SSH strings.\r\n\r\nOkay, we should fix that to be consistent with what the current drafts / specs say, and then indeed deal with whether mpint or string is a safer choice later.  Are you working on a PR for any of this?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1036262334/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-02-11T14:22:06Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"20203396955","type":"IssueCommentEvent","actor":{"id":18724089,"login":"kevinmkane","display_login":"kevinmkane","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","avatar_url":"https://avatars.githubusercontent.com/u/18724089?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/119","id":1129218580,"node_id":"I_kwDOBsoLV85DToIU","number":119,"title":"v8 branch pure-PQ KEMs do not use mpint representation for shared_secret in SSH KDF","user":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2022-02-09T23:57:50Z","updated_at":"2022-02-11T17:27:14Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When deriving the various keys in `kex_derive_keys`, the pure-PQ functions that handle encrypting and decrypting the shared secret, `kex_kem_generic_enc` and `kex_kem_generic_dec`, write only the shared secret data itself into the buffer that is later input to the KDF. They call `sshbuf_reserve` and pass a pointer directly into the buffer contents to `OQS_KEM_encaps` or `_decaps`. The SSH spec requires the shared secret input to the KDF to be in the mpint format, which has 4 bytes of length prepended to it. This causes the keys to be derived in a manner not compliant with the spec. In `kex_derive_keys`, `shared_secret` ends up being 16 bytes, for example, when it should be 20 (4 bytes length + 16 bytes secret).\r\n\r\nThe relevant code is at https://github.com/open-quantum-safe/openssh/blob/0c5eac6a3ba249f73bb953745cf109bdf281eafd/kexoqs.c#L91-L98 for encrypting, and https://github.com/open-quantum-safe/openssh/blob/0c5eac6a3ba249f73bb953745cf109bdf281eafd/kexoqs.c#L130-L135 for decrypting.\r\n\r\nThe v7.9 branch had this correct, and there's even a note calling it out at https://github.com/open-quantum-safe/openssh/blob/f41bbe652c522db1bec388f82db369e4e5f0f405/kexpqoqsc.c#L297-L310 and https://github.com/open-quantum-safe/openssh/blob/f41bbe652c522db1bec388f82db369e4e5f0f405/kexpqoqss.c#L282-L295. The shared secret data there is written into the buffer as an ssh_string, which prepends the same 4 bytes of length that makes it conform to the mpint format.\r\n\r\nAs an aside, I believe the hybrid case is correct, but I haven't been able to test it yet. `kex_kem_generic_with_ec_enc` and `kex_kem_generic_with_ec_dec` both write the shared secret to the relevant buffer with `sshbuf_put_string`, in the same way the v7.9 code does, and so the prepended length should be present. See https://github.com/open-quantum-safe/openssh/blob/0c5eac6a3ba249f73bb953745cf109bdf281eafd/kexoqsecdh.c#L337-L343 and https://github.com/open-quantum-safe/openssh/blob/0c5eac6a3ba249f73bb953745cf109bdf281eafd/kexoqsecdh.c#L262-L272.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1036442633","html_url":"https://github.com/open-quantum-safe/openssh/issues/119#issuecomment-1036442633","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/119","id":1036442633,"node_id":"IC_kwDOBsoLV849xtwJ","user":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"created_at":"2022-02-11T17:27:14Z","updated_at":"2022-02-11T17:27:14Z","author_association":"NONE","body":"> Okay, we should fix that to be consistent with what the current drafts / specs say, and then indeed deal with whether mpint or string is a safer choice later. Are you working on a PR for any of this?\r\n\r\nI have a PR in progress to change pure PQ KEMs to behave the same way as hybrids do, and as both did in v7: technically an mpint, but leading zeroes are not dropped because it's really an SSH string. I have not yet looked at dropping leading zeroes.\r\n\r\nIf it's acceptable to you, I'd prefer to only make this change now to OpenSSH, so OpenSSH doesn't change any more than it has to, just because there are a number of other changes I'm making to libssh to match how the v8 branch works in other ways. Then once I have interop between those two, we can update both to drop leading zeroes and conform fully to the mpint spec.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/1036442633/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-02-11T17:27:15Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
