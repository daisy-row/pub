{"id":"22502189346","type":"IssueCommentEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1221","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1221/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1221/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1221/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1221","id":1264621276,"node_id":"PR_kwDOA-eq3c45UCLt","number":1221,"title":"Integrates pqcrystals with common-aes / extends common code AES CTR-API","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-06-08T11:49:53Z","updated_at":"2022-06-23T12:48:15Z","closed_at":"2022-06-23T12:44:36Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1221","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1221","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1221.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1221.patch","merged_at":"2022-06-23T12:44:36Z"},"body":"- Integrates pqcrystals (ref and avx2) with liboqs common AES code (for Kyber-90s and Dilithium-AES).\r\n- Extends libOQS AES-CTR with Incremental API: `OQS_AES256_CTR_inc_init`, `OQS_AES256_CTR_inc_iv`, `OQS_AES256_CTR_inc_ivu64`, `OQS_AES256_CTR_inc_stream_iv`, `OQS_AES256_CTR_inc_stream_blks`.\r\n- Adds some AES-CTR shim API.\r\n- Faster AESNI CTR code (improved iv handling, 4x interleaved blocks for higher throughput).\r\n- OpenSSL AES supporting CTR API.\r\n- Updated pqcrystals patches (API, context releases).\r\n- Removes redundant AES implementations from Kyber and Dilithium.\r\n- Copy-from-upstream with updated patches.\r\n- Uses internal AES on x86_64 (dist & AES) because of increased performance with the internal AESNI code.\r\n- Adds AES-CTR benchmarks to speed_common\r\n\r\nFixes #973 \r\n\r\n<!-- Please give a brief explanation of the purpose of this pull request. -->\r\n\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the the list of algorithms available -- either adding, removing, or renaming?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1221/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1221/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1164366806","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1221#issuecomment-1164366806","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1221","id":1164366806,"node_id":"IC_kwDOA-eq3c5FZtPW","user":{"login":"bhess","id":149199,"node_id":"MDQ6VXNlcjE0OTE5OQ==","avatar_url":"https://avatars.githubusercontent.com/u/149199?v=4","gravatar_id":"","url":"https://api.github.com/users/bhess","html_url":"https://github.com/bhess","followers_url":"https://api.github.com/users/bhess/followers","following_url":"https://api.github.com/users/bhess/following{/other_user}","gists_url":"https://api.github.com/users/bhess/gists{/gist_id}","starred_url":"https://api.github.com/users/bhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bhess/subscriptions","organizations_url":"https://api.github.com/users/bhess/orgs","repos_url":"https://api.github.com/users/bhess/repos","events_url":"https://api.github.com/users/bhess/events{/privacy}","received_events_url":"https://api.github.com/users/bhess/received_events","type":"User","site_admin":false},"created_at":"2022-06-23T12:48:15Z","updated_at":"2022-06-23T12:48:15Z","author_association":"CONTRIBUTOR","body":"> Thanks for this common code improvement! Thanks also for the various updates as per feedback. Now LGTM.\r\n> Related question (to anyone reading): Would it be reasonable to add the (particularly common code) performance testing (as now also added for AES CTR) to CI to guard against regressions?\r\n\r\nThanks for the review! Yes I think it would be reasonable to add some test for the common code. Either as part of CI or as part of profiling.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1164366806/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-06-23T12:48:15Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
