{"id":"19863588563","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1179","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1179/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1179/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1179/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1179","id":1109483582,"node_id":"I_kwDOA-eq3c5CIWA-","number":1179,"title":"BIKE test failures on Debian armhf","user":{"login":"sebastinas","id":114613,"node_id":"MDQ6VXNlcjExNDYxMw==","avatar_url":"https://avatars.githubusercontent.com/u/114613?v=4","gravatar_id":"","url":"https://api.github.com/users/sebastinas","html_url":"https://github.com/sebastinas","followers_url":"https://api.github.com/users/sebastinas/followers","following_url":"https://api.github.com/users/sebastinas/following{/other_user}","gists_url":"https://api.github.com/users/sebastinas/gists{/gist_id}","starred_url":"https://api.github.com/users/sebastinas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sebastinas/subscriptions","organizations_url":"https://api.github.com/users/sebastinas/orgs","repos_url":"https://api.github.com/users/sebastinas/repos","events_url":"https://api.github.com/users/sebastinas/events{/privacy}","received_events_url":"https://api.github.com/users/sebastinas/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2022-01-20T16:03:06Z","updated_at":"2022-01-22T06:47:37Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"The tests for BIKE fail when building for Debian's armhf architecture:\r\n```\r\n=================================== FAILURES ===================================\r\n______________________________ test_kem[BIKE-L1] _______________________________\r\n\r\nkem_name = 'BIKE-L1'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess(\r\n            [helpers.path_to_executable('test_kem'), kem_name],\r\n        )\r\n\r\ntests/test_cmdline.py:19: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem', 'BIKE-L1']\r\nworking_dir = '.'\r\nenv = {'APT_CONFIG': '/var/lib/sbuild/apt.conf', 'ASFLAGS': '', 'CFLAGS': '-g -O2 -ffile-prefix-map=/<<BUILDDIR>>/lib...0.7.1=. -fstack-protector-strong -Wformat -Werror=format-security', 'CPPFLAGS': '-Wdate-time -D_FORTIFY_SOURCE=2', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code 1\r\n\r\ntests/helpers.py:41: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem BIKE-L1\r\nERROR: shared secrets are not equal\r\nConfiguration info\r\n==================\r\nTarget platform:  Unknown\r\nCompiler:         gcc (11.2.0)\r\nCompile options:  [-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.1\r\nGit commit:       unknown\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1l  24 Aug 2021)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  BUILD_SHARED_LIBS OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=None \r\nCPU exts compile-time: \r\n\r\n================================================================================\r\nSample computation for KEM BIKE-L1\r\n================================================================================\r\nshared_secret_e      (  32 bytes):  F2C37EB674534C6475BD6418190AF0E7059A8DE358E711A7220063C38969B114\r\nshared_secret_d      (  32 bytes):  FF79497AB8FF657818E9E451C06741E092DA3887910FBE874D83673349C1832A\r\n\r\n______________________________ test_kem[BIKE-L3] _______________________________\r\n\r\nkem_name = 'BIKE-L3'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess(\r\n            [helpers.path_to_executable('test_kem'), kem_name],\r\n        )\r\n\r\ntests/test_cmdline.py:19: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem', 'BIKE-L3']\r\nworking_dir = '.'\r\nenv = {'APT_CONFIG': '/var/lib/sbuild/apt.conf', 'ASFLAGS': '', 'CFLAGS': '-g -O2 -ffile-prefix-map=/<<BUILDDIR>>/lib...0.7.1=. -fstack-protector-strong -Wformat -Werror=format-security', 'CPPFLAGS': '-Wdate-time -D_FORTIFY_SOURCE=2', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code 1\r\n\r\ntests/helpers.py:41: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem BIKE-L3\r\nERROR: shared secrets are not equal\r\nConfiguration info\r\n==================\r\nTarget platform:  Unknown\r\nCompiler:         gcc (11.2.0)\r\nCompile options:  [-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.1\r\nGit commit:       unknown\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1l  24 Aug 2021)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  BUILD_SHARED_LIBS OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=None \r\nCPU exts compile-time: \r\n\r\n================================================================================\r\nSample computation for KEM BIKE-L3\r\n================================================================================\r\nshared_secret_e      (  32 bytes):  CAE4E31F703B6E78D0418C1086F2DD2106145D8E3F4E4B2C07F72C84F3C7BD5E\r\nshared_secret_d      (  32 bytes):  5913158CBD3465B149187D94FBBC98427956913E03D85FC5FFE5AE31609313C5\r\n\r\n______________________________ test_kem[BIKE-L1] _______________________________\r\n\r\nkem_name = 'BIKE-L1'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        kats = helpers.get_kats(\"kem\")\r\n        if kem_name.startswith('SIDH'): pytest.skip('KATs not available for SIDH')\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       output = helpers.run_subprocess(\r\n            [helpers.path_to_executable('kat_kem'), kem_name],\r\n        )\r\n\r\ntests/test_kat.py:16: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/kat_kem', 'BIKE-L1']\r\nworking_dir = '.'\r\nenv = {'APT_CONFIG': '/var/lib/sbuild/apt.conf', 'ASFLAGS': '', 'CFLAGS': '-g -O2 -ffile-prefix-map=/<<BUILDDIR>>/lib...0.7.1=. -fstack-protector-strong -Wformat -Werror=format-security', 'CPPFLAGS': '-Wdate-time -D_FORTIFY_SOURCE=2', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code 1\r\n\r\ntests/helpers.py:41: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/kat_kem BIKE-L1\r\ncount = 0\r\nseed = 061550234D158C5EC95595FE04EF7A25767F2E24CC2BC479D09D86DC9ABCFDE7056A8C266F9EF97ED08541DBD2E1FFA1\r\npkr\nskr\nct = F3822B8B3B29DF1CB4DCE526118C710662567743B0F154D2A7E0DFB7251EA2E30DE92467A2269BE2005C39E7B62155141739257FAD421BCCB191CD7690D02431DC38BE04BABC2A8DA6ACF4A2688B14493758A9FED98D04369007B2380986308D052FDD9E77C4E6574EC923A4949F697405BBDB58D79631963EF2E422D0E5F4AF5033B233100C71CF139AF23B1F5BC96B9374472A7BACBCFC559251E664D2F6AE49AD0700BC26B304E2B846DF7856432FB19527D419331F16B0FB5DB297F3BED24C5483A5715EF08BBA901AC8D454D015551C6E5D7DD640551DE7387DEEAAF4DC7EC236E2CA6931872E44F90ADE56760E8D0D6C57E01B5BF643542CACF75C1BD7036A8504C1929D0CE842D178677933E9786A425A852E8D93206763975C248DC5C7012424FB9E9FEF8AF71B8C3B22C3D0E1CC56CE1A760994B042A815BB69D948557C0F333DC4B5071A0256E71807430091ED11C5E592CA97A4D891C413B609D3EB88F3004463CBE65669A3F0768762B9C4C450B7BCA9495B655CEE7D7A4AFE96D3B4B092843CF04C88B72BAEDE5FC5F97D7C67DA606BE7379626CE7F47FF40A01583D65159E14E53CE016171BFDD74678E19F7EAF87A0FB85F3BEC370F8A69246ECAB06304C3CEA060154004148E41BCB597C9D454839C6435CB61D19BD34A1A541AAE4E519E23B805FC158C1DE8C710884E8A21AB759EB967833C958396E9287FD80A010BFEBAD2F21BE7DC794345DC3A524AACA845BD19681390AEB70A462FFDEF0B44DB3535CBCAFE92E1C230106A1884486501A868433420C07A4231B9C12524EA2BAFE1B320CADED7B0BB2C4180A1B017F9D8BBC5B6EA723345039F3B8F7855DFCA331A89B01C217542E5C959D83F426284001DA57B2E4303A91D819318BC4ED27BDD57D7DF923218A9442012FA24DEFE98CDAC061FE7357F55ECE0EF04ADF92283AA4020E6DF01AD93945CC0D0DF2B2957720BCE9F98A5AF444F17F1169AF1D3564E7C384F6596371603FF3CFA60729BE6AD57AB58E3E1C6C7B3555243A71D79ABDEE62E314BBA5E9946EA09F9368CFB8BDA9B4BB922DD1C5354439A37F0728C8623F55BB902EE6C15704EB99F6AA2859B339044E15BD6CC4B53EA5E83CC3FCADB182856CFE4DD7955591C2FE417EA3948554D602C948493A6BAFE97CC4FF4F89020B08842E5356441F396416E54530BBB5C798C6402D5B0B08833005EF67ADCA3C97CCB7D52306397446D073E1F20D12AE39267DB83F79FBF928D213A0EF7F106049AC38EDC05B4F977E66EE7816BBAF11B8FDE0879100A4A763DFF7CB9DD2D29DF7674E8E1F15FBE8BC170DBE714DF0D773329427D45B6DCF4AEDD6F6B651C959F0DF0EE75A613C43F4BE8BCFA074636130973D8F9FF669DBEB765969E10EAE095FA74B828DCCF3DDE177F3B9AF2F2AAF47AF615F413A432A509254BF77C3710AA18337B9CE3792ECE9AF3B9BA46FD2D98A4CAE3E813DE922B8CD6F4884B4E93C023D35490EB957BCF3037511F01DCA96E2D04D730A3B21592446FAB399187B88C72392188C79BB6C6A8912EF74FEB5517F7D9F2FAA0438C86B6F562FDEA0CE3CD0FB6AE7264D41D7CBF0512F60494EDDF5A997D06034DB7041E0D0055CB7075B6E6AF9C209BBE92C3A389163EE77FF946882ADC0DC2A6714ECF9EB6B6CC26130F6A7A01074914DCC42CCD79EED78B76D06F9DEE1338FAE65B7BB8D7FF92CA499F0A2CF8EB735D4DB3850E89A3080A82F82005C4722E6CDCE9A836726A73DD47DE015CE0E209553C5FFDEC167106B8B2EBFEE3D93D7E386629380CFEED53CE801AD4CB33EDF7E0D2A7952A3F21E0DEBB911106B3B1902F8D553FA7E16740EC963908AB01F2FD238F041ED64CFF01DD6938B893C432DA41B23C00E4A9A795B7A25EF9650061DB39BA678DAE38EA543[kat_kem] BIKE-L1 ERROR: shared secrets are not equal\r\n5D4EC25F371DF14F37630B73410B035D873D82F0B9B47778DDA9D16842BA330402D2A55F34A3E42830954022BDEC01EFE23381902BD1805DF756A68E91FBFD9C7B43FE0F278435E710264FADB68854D4B6E3884F5FB3D5BFD439F377E5A2659396512AE9B2563E71DDCC7D761B39F64562A4D0D50854003C691A5C6C22D99F3A0938794BD35269EFAC3C0AB59EA91D2BA7D8B8D9A02B6766F2BA2FBE2E12A916F8B81D77D33B0F75E558039402997E7C4FA0293406E28A9CBDF6426B7F097963E5F54320FF5CF7BCEA94B321CA5A373D1E548\r\nss = 395802B39969356B389DD977AF251980DA6E3B95D750B9A0FD351D9299F6B47B\r\nshared_secret_e      (  32 bytes):  395802B39969356B389DD977AF251980DA6E3B95D750B9A0FD351D9299F6B47B\r\nshared_secret_d      (  32 bytes):  AE4276FEEDAED06FE6623A09E99549F8A209D5610DBD3ECA1994F1738A2DB9EE\r\n\r\n______________________________ test_kem[BIKE-L3] _______________________________\r\n\r\nkem_name = 'BIKE-L3'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        kats = helpers.get_kats(\"kem\")\r\n        if kem_name.startswith('SIDH'): pytest.skip('KATs not available for SIDH')\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       output = helpers.run_subprocess(\r\n            [helpers.path_to_executable('kat_kem'), kem_name],\r\n        )\r\n\r\ntests/test_kat.py:16: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/kat_kem', 'BIKE-L3']\r\nworking_dir = '.'\r\nenv = {'APT_CONFIG': '/var/lib/sbuild/apt.conf', 'ASFLAGS': '', 'CFLAGS': '-g -O2 -ffile-prefix-map=/<<BUILDDIR>>/lib...0.7.1=. -fstack-protector-strong -Wformat -Werror=format-security', 'CPPFLAGS': '-Wdate-time -D_FORTIFY_SOURCE=2', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code 1\r\n\r\ntests/helpers.py:41: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/kat_kem BIKE-L3\r\ncount = 0\r\nseed = 061550234D158C5EC95595FE04EF7A25767F2E24CC2BC479D09D86DC9ABCFDE7056A8C266F9EF97ED08541DBD2E1FFA1\r\npk = F3FD736DCA32919104C53D463E0F4981034650820A0DABA81F2AE65D24FB33A149DCCAD19CC6F7B04571E244B68EBFCA9EC9E04E3848403330F9CA4B4552104F92FBF9836F3886F61C9F5CF3A2DAF29CC6C2A82154B737E242AB546218A31676506CBED468C9801111C071AF5ACC635619E13947893D15BD8A1F474E01B87EC66D61C3C39BB45E7895F6C53EE81595EAB334424BB8685C9653F4FFBCA5ADD22FC28A1EBD217781864983E5E7494B8C605B21CD7093A61D91DEE5241652BC5096059F5F572D469C85CB0C21BD53CB97C1433292795CDD30B459AB16B708935CBC51073CA239E0E1E0FEA37F96A89666BB65D67CB2BACC0F15B6D96E238B14D3FCF6F3559E2993FA82BF0B13A9550C92C4916D8CEF981A658573C80B59C4FFBF576EDB56F744435DB8558AA5CD0F438DB8E193AEC04C4E9B0CDE68CEC90BCDB06D7466F7235B3204116620792646EAB59EC232E244567AEE9C1231BC03B7EED488034D7797B1EC0D0916154E55F8D179590E6588F57517B45BBA2011289B62813870D68671A71EA39380C5612CF738BB7EFB0B03739ABD49B249A8038C82A5CAB7376748999DBC843A5B64319D2C924ED0846092141A57ACEB040B8046F7B8603524908DD8DE5EC741AF244A4893C975678F252EC41B57F73E278B153B9BF8AFDFF93EFD6BAACB80A86BAC9F68D16B9D2D70BA3E3805D9D64411D23F49A231B1E6A78482E3928B87EC340D99D6788B0F515C8CEE4A1C104DC7B381D7E3006136CBB6716758F0DF8BF09108CD8AD04176441BDB32E1E8D63C6BB54BC3DC57E9CF9E3B93C1679B82B18CABF4E044B51A8AF62036EAA74E975FEA555FFF8E176CCCD5556959C32C3043692BE6F78D0AA805FBDD7B2598920ED41D3E195DAD93035475373A85AABCA26F04BF4DCD3D002DA8C46926B4F99D87A9633D4130E24EA3B6CA0832651A014699352B8492004404E8CA2F4D2F4A39980AA3AE66952D2F8CCECF6FE62A87CE9DFF71B7A6DCC8A9D4F2FF7B05317AF9FAABBB4D2D6C0E460AB09DA8FC2073B8A5C05DECD03E8E970D84F8F7483693CD6BA1D35D16B6B0EDDDD1C5FB1BF0073DDE40B41BC3DBC38284F9EB436A3B4A70A3C205E02CF6F98F701D594E4E7392B7B4B1671BB080AEC4C5F5BAFD217A8061EDC9F652D26842630A7CD7DCB8D5815422159EF5824F8934A34213335CB497A9BF2C6BCBC2E053AED3C51517E36987DEB51978CA079F1FD7B412E6E594FF86306144FF31B90F2CE91967FBD558828E79BFEC207F60B73626E0C7FA93629C6949DF5B2C0FAA07B6997D1273505D502736252F6ACF1BFFB7815191DBB59EC1A750367FF13CBE20500BB7AFF780DBAFA6FE85A86225DF6EC8CBC04B753C92C26048CBB56F9C90289584CABF00F86F42EDB1CE55B71C3C5120411E715AF5281E364BD6793098061AFF6754A5871FC351986B922512C8796DA5E291A013C7C95BDDCA67AB397E89A3D452602012A41C0CFD4D5B4DDC044236C289EB19414CDC3EF91F8387F9C24FAE60E0A67D739EEFA76B4CA546F1A0B3651DAAB04BBB2FCFF2AB0C0B62FC4016CA359F442CE7A5480C9522441FAF80792745502296F1D9E46FA12B58E871ADB8BECB21340A08BE1C0032AC8EF86AB035891DE1DB8664108C32AF11CB4E1117074168DCD60E780479127E3D00F0AEDA16D125E74E5AA5119D04DFF64024E34F225B1B397252DFEF1C49B247310BD4743C0ECD383A909492BA8482484F31A4C501E60D87A3A17F93B99B77D30433C199B3CA7FA9179BCF68A66DDA46EE170D9FDAA736C8FA49332D80B3602F1CE0DFB0E9A17AE8930F5882968F991A2395D5C565195F749AC7AD24DFB79007D9502EC895A424282A5E1A5AE2D448156D82833E05865EA822D1986BA2EC2EA42BC72BD3EA5E2486798457D41A48F560B98CA3D441C3B917101CD9ADB3B05FFE21E6512509F82477EC702E367503E3DBBBF257B44D3B018B946208E7E87F30E848DF3C4B03C713C4DAE88DBA91F33F88BE5F382E9C077E19ABA80AB14A013FF06980F4D9ED9CB1559C587420F4A80C787BFD57CBF5AF08AEA80B881FB3992A52C5621A8D4295ED2750F5528F5AA9B4672BB49C603BE9CBA8C4D29090930F655C22B6FE89AF622A3FC55334D32774AD169737EE8ED22CDEA0CEA0BD5C2C1B52465D06F7E34AC3C256319B5985A592A6E98BE3EE639BBD733D00BA54FD73ABF029D0DB71B37253C93C1B20A81467B34901083DBFB7897034939E2CDD5EC6DA43A58638E9220962D827927EEE60D2AB74455000C62C76B66C4A3C0E6112B3ACECFABA4CA9C44F7F4D1B6A92CDA25E8D309FCC77C65EB0B5202C6FA94C702054F55D00EB1F6AE36D283F67C2B2484BB90B439A6D0809950657702BDCC4C039BFBE870B430D1A989026F194CAC4CA8CC5CC2867CE513B6F4EAACF66435D9F39C57533F59C58D92DE7167ECD0C721D0F6C1F7950D48F38FC6C823D0C33E2EC9E67283CB2BEB315674711BB3B6785B9782845B59E6E38DF2937B8FF484C734B10F0C1FBCE17AE04ED6C02F031CC9A520CA0E99F4018A61F3C88CF33831EB3AF8266C260A73CC5A393D70EA56B241577AB0FF82A89FB9288FE6951FFE37C6E55633544E8F034789A39B59DB0E7FF41063B9A9C9F8DF07CA8D560445086125DE3D325FFD8632E17AA5AD2C9F1DF1D6F354B7917C730A9B5604C7F0BE773B4D9639C3CB90CF6C40AD129F48D192D28E5E84CDF3C6BBFA9C025955A6E92D2D586E182F857921087445ECEF3BFD73ACE2DDAC85B0C7F3CF4F5EDB1FBC20148021A21364B1B6931D600A8DAC20E367A317F44A6E2E03E5F861389605D5DAD29DDD0F2CD8C0E52A5529F9EB984DC8008516E9346527D6D9B697A5364BDDB661572F708A0EFA190C580BB1E95A2B326F90F5AE453FE93F9091FA2D32BCE3BC346B044B20CD60DE3057AE0874B1829505BCEFC844EBAF3F4434D585C6413C7A8BDCE84DE899C4682EE62EA5DF43BAD60FF9643DE5DD0F3F8910D971CF987E521FC52C461B9B69F5A960A5882BC81B0F6A6FB3BBA93F7AD185CD914BE0E4AA7426C01EEE92F47B9225A76CE8A33DBB1246FA0794B002EB915750CCB4556ED2FD9D3F55E0591CB7598D87AA6763B51059DF570353C223D8BB9170E9C0ADC19A68AEC20C044B49A2F195149693B51185AB3D23F56F76A9FC9EEBA368A60D64A850FC8FDA8EA97E1221BAA02C836EF601C01C401F4355F6B679A30FA4B3AD703DE716191FDC1C9E1622FEE0E4726752BF7D31CEA0C2DB39B1F2B26A12FB6C5355E8E0C29612D3D85A12F7A8B097F05F0871C016D5A4E4432FBA5481742665C17BB79C16B8EC6ED4624028D5C3C1D4E8DB5F05E06374A882D59937DC3BD793D04BE6B64D1B05ADCCFFE48DDEDC4F3D29D339981E15DACB2FE5E3F2F655C577DB45B8AECE607225F9EA0BAC815AA8DB24C2BF7A1774C7BE5498CD81267CCFA7496BF45804308D71B4341F94DDBA41D03DEAEC39DE2CAF637303C4ED7E24928B428254365899A3C818CEEBBE0F9B3451AD05A5F6ED947FC7B80850718DDA80686F0BB3520DDF619B304F63092064842D83241E0501DE2CAE58724A5F1C88A093E9CF30C16D62DE878686973D445B263F1423FA86B4E78B8CBB741F9BA95B624CCF00047DC5EE8995DF365E83EE5B1749EA1911D8562CA0C8111E465DF0EE4E57A79B1B19F50153B17FDDB1C3465BB51FFCD683B2DB53C2DC054AD5FC69E04118E5EF6954CC80F88F26073DCECC52880AEF2E94D1CEEDAD9D8B2501AD1763CEE0A5ADA8BA6FDD12BF7B17FD813BF7CF7E3E6C0FDD559FD64BA9B9D8CB36A4F727FEF8F0620D33ED103E2F99C9BCD1C3EB0B871FCAE4687053C210B8794761EDA1E8EA6B13522C84E0C7E88242541337DE7F32760ECDE93D71110936A53A8D892D74B0FA0E5E62663D557C44CE338BFC6F7264D92AB8F8A0C5648E76B42DFB46816829E54EC296FCBC2AD143FD7F7DB0A0DC306948589F0418264B5627613102F1016AB035CCA371B618975F0B9FC23248566D7B61821D281858422E45BA8FFC89CE5914C4CA7016F8853FE844B216FF0B33CB6DC5CDFA9E350C7AB8A3D2EC61D7F8B8D42AEBE1824033E44B45C6C90A73EA16C2F6CF6B7257CA6E5B6E3B32ECA1454D5680BE12C887B2C990CA3C723F42BCD54C5A52AB2A740E6D4AB24D494BD8D1AED8E116788F57A90FF34F3983ED9631BCEF158335BF7F28FAB845F011EF90395F7B999824DFB05948578BF3B48BB8E32C7B2D93B3A9F475789A91A084E99539B4A8DC41EC98769BD29290804BBF373ADEA3B57A60123CC3C820BD5BE9B4B585E758A7F3DF45A0ABB9704E9B1D95E9803\r\nskr\nct = 1E3E08806F725EC3703400FE14CF226ABD43E90B26A56E4FA431A2436C28052BA85BF45131EAD489C207DAADDAB13049325C43173B7D2BF9D89FF888D9232B5B81338C069F536DA6DC9165E3BE2503988550055F055BE4B58AA9C8DAD8B482D6CBBD51B66C01D5D147EFE0E158DF7B780457F4ADF6C189A313E28113B406D06012B6D1B28E624296C4EFD9FC899B6100562DD68C4262B30C3BC6C0C5193F23607216AE740E33085C5C501C77CF5BCFD8EDC73F563BAC02528F58E61C53CD32D93F3A773A9B4E63867665F0195EF984C3356C94FA7C50170C1AF734AA10F9D7D7C4803F4EEAD770CC26BA0732A55CD59530CB49A9F679DA8B726A671AF3DD8A2799390EA84343523AF9B798390F6D6420182A3A6029134EE19A06ACF2E138B613885C7CC52B2025848229F41F2313F34F511A3F29BDF96D298367819EB9CCBC483312FDF925482A281CC9BE8ED46C225599C89B4CB6A84DF2920B14B49E1B88FBA06E2431D7CF8225A07A39B633ED7F18F5274B5478694263E82AE27E6A930B57AD5EED86DE9D9B060B688EA6D0E31D394CF53860B53B60CDCB5FD9C002A0CD8590DAF113660200AFB350ECBC3A29E15E3EFE05DD92D1CD9F59442BBA106FA7C37D65FA4DE9F09AA864FEEB2C5ABA7B0A2FCE71D7DEEA30D19378595623E2CBD7A86ADE09B29765CEC905465678238020D59CB91FDE53B4A3229F5D51816FEED5E68CCE5D96EB4A0C80C58E57C9836D51E7900165677E009EF8A069E4AD1972F120154EA25D92ED7F0C84861410CDF2766AB4B9AFC29BFE7DCCCC793F4502EC3F339C9F2281B5D48C778D11607B6EF466837CA4604DAFDE2C24808B72B06736545CDD042E5AF1CADFFF1FD0E3FAB5C258EEB78C1CD79686CF50F9A506A63E057F80A9702D7D07CA5F33157E3AC55AD547F5A847AF86326D22958D3AEB61E06C9D42D6D7C227F09344D94ABD2CFADAF3167E635A9F4D1A3C3EF3CE8DDFDF72CFE597072A7182F1260D310CE6C927610C238716107CE9A1C315FBFABFEA62240B7205F942E4C00DFF5C272DD6C5A654DB103B380DD3ADAF6AF9461D324050BBAF10BEDE59EAE09FC85EDD9078A8E9D101F9BC021C478EF2755FBE7B52BFE39914C4E290EFFBDA611E0CD3504D540B93E8F1672F80999AD5A6E6995106C46618BF1514966DBDFDCFE1A75147019184A8A69EF54A5E93B0ABB530EF82F2F9F069F6827887859B507A329E3B7A21D65C39121BB91EF23287FAEECAFF1682ACC0D7414A8CA00A59B274FB7ABA6B6C4BDC48DBCED2F361CA1BB8F1EC4BE9121B5E143F6F21D33067B9556B8E0DC923ED70FA501FE0B9640F1C6E37509B0C2056A78F53461FCDC101288429A415B9E8D337CD41602480E3956612C76474ED18081E5AACC97992390633AD24359BFC6B9DB3B06544FEC2BB4244E0340A8DF9CB9CE58BB2438D6464237213CCECD1AF9E07E54186730F1606CBFD2E6EFAAC9FBA1AD4FBC469A27CFD078053FEED37EC83A67698387191D22890012A0F378AAD4C66048925DB6A9B3532E6295025E6DC1C8F55E0F3A3EEF2ADCE643EECAEEF28FC504D34FC3766D0378402AC70BD18972A7F0714839A5F933674004A6E7C0873B5BC0E83E2368B4A32F2B5C9223E6970FBB6B93343EF56FF2D1572BF14C0DB424C24407AA4B4534D2B2474924CF09B4223C290ABD4AE356D28B346244E4B5114718E4A2DAA25DCCB17BC31796AB38875653FD67535DD7D48E42031C2A6C7A34A75972F6CD42BF36E44CE03CFBCEC93C78B1A591A18A4340B5744DC8D1B0524999D83FCEF7BC7B25ACCC40256620AE7E9FD9CB04261EF8B9BA16AF5B02A375AE8C4DB77554994FB27132C66A1195C1D456733A088086207E673733874DEE404417F861913BCE0CD6A193B65417B144DB2E0CE62A3212FD27CAC6357104CE39AA0BA2CC0DC7065C806C28160D296EE6A300B0D0F2459AD01C862F8FC0DEEA5F19698446B623F9D01804D46DD4A8936C28E875ED5C288188175496D6DD4D5AF0BA0E2A7E7D672501D84698F5B4B2C67BE1A48221CE6158B5C77320BD3EFDE0ABD1F7631FFB0772F1DFBAED7C41434BBEC887549022AD1762B7B50BB9599B33762C7035D3C7BC77D7A521D15CBD8A8739A0C5E56A12C6D1D3E3CE4086C91FFC9DFBE178146FE5B93DC53714924E290FEA07533DA815C83F4B56E8DFD40CDAAFE185B99609FF99BDA132C9F8EDD4BD878B912357CF039058450C1FA9E33DF2259CB7B0D73B8834C177481AE451F0CA16D5C1711973F0B8BED33B298AE399A552CA180B178BD77049EAE3171213E8E418B885BE3196E586D32728826447E58FFD7493CD85CF5A9D240D76D46EB423A46C5FCC6AD1411A2DE628D2D4DA99DF7CEC9BE8214C144BF328C936D9AA14B97B146D88369F52B04722904AAB404E72ECAB51D84E169A4F044BBF91577AB83D76ED6AE4F89D17EA97F8199CDA2025FF6BD37407A1AED3302918FD7DE9AAA1C0B0693C5785A1AF58FA5576400ECBFB6C0EE21BB0CED4974285764B9DE561C6589585DB3A658CA9727078E1EDEA51386BE6484E005E11FA4D6F469EAF518F375620DE419007CEB99A6BA84C28EB60AEE98B91B8C5C1CEF06AC0036509F19A323EFE55852C737C8AE7FC0365AA27A3D6E89A1C9F73F4910983CE92EEA45C1C42AEC68537BC60B7B83FF0EE4E0DD3263359709C5D8A49DC9AC79238B58A16184C41565E899E72E1BA21F55E32226957AEEC5EFB57DC563862F0E43313357F011AD36FB752503D114E2B3245B7504A99068DFFE4A009B1832F0462AB1A4A996785F284B645CB52F07CF45432BDE4D21DF28DA160F724AEEBE3498D5B5551B3D8371DC2600309EC38AAB60F286894ACDE561A2787B34F8C67887F06E435BE06A40F5E1C08FBB29002DF4C65F7D2D605971507A9B56DE9A5EBE506B12B16990B4FFA497509B7843767B7CBD53FA3C2F4DDAFA264E9FC73887697CE0F7C5749276B000C4265F549E1E25B51AE1F8158C3D1DB118CEDA199717D828B3190A8D158120EF3F1EA5D2890D62F06974A7EB661F87053850E193821DD800EB7A87FB0465D4CE6FFFDF38F3E6985DC0ED25BEE0684A78D2EEE0789E86321FBE8DD3CA27572D92FB39C31EB571693F89F61D0C81A10BCA02B51DA8EDDAD72FC50EA9CFE2D7C4D182977B5CF86EF8606E2B56E07E46BD2E8DA0E84145500E88CF6F0622D85567E27F5FBC599ACD08713FB2F97DF343379C6432AFBEF577F8D5A5A6AC62DAAA167F212EBDD12EDD304481643C2B764631AC37C50D1DF84EBCDFD828F8B142C4C6609BE81AF250BD6481D25C276D9CC2FC455C7AAADF64B66FDA9B27AEEE54AA0F5E4E2740CE5ACF3E375BE71B1A97F51E0AF4E35E537307296CBB6B8CAA0E715EB466FAEBAE916A39D1FB3A6C085D333A307E83B41E6E12A98DEC6F745A92AF754B70EA57B2DC28790DCD5F54E1EB2A4B993E0112A353E37D8EC1FF0B0CFEB16044549B439D658AE0F44C0025C853427CF99CB99184E6874FA2CA4917D50A8C5AD02A5B889E7CBC1400E87E05EE5927411AC7139B4FDD6E2D8E4B2CC8A121E2245C2D558F3EC3A4D7BC8FB5E0026B1AB3B11421F8F78D005E410317D663A190F090DF527839D59D57DEBC93F84594250882DCE2C66154A4242D7F6D5A9F822E8F4843F3BAB8E4B1C9908A35C2E265571A18F4E61D5C211F7D076FCC77A3C2883A7EE8BD1D7D3791E9C552E744BC26284FF82981A37C21D6DE35A0E6CA68A5AAD696164F8C56ADF3449CDFB9EBE2819207B795DAAAB581BCF2611CB4AE36A3068E18386B735CB5C1E91AFB6129F61BB0821852B191888D805209EA512FAD7AB044DD5C3857382F35EC48280E6D17981D26F3649370952EEC978A6A1D8F205B82FFDF1C8CA5C2CA8712E7816D62B12048DB8F50293CD4CE6F95AD6B3EEF99961C07E2105C86BCE9868FBE4E08DBCA881EA429D785B46A353F80CB35DFA9C548EF4E3C8DB59720A6C4B3AEDABCE2131C22D417F43D64904719C2E40DEB71824BF683726BF0804312B8FE052685A2F9053E6F771E640A42A1F58CABA867D5583BDF0FB90613A73C0C70752CF987813AD30F80FDFCF7B043EECBAE7F6C24CAD45769C5EF138A773082A5D2B60145E36376B03754F230901BF2115C1BFC7EBFC19980CA10DE8ED4296CD64DE2D56A3EFFADDEDBF8C669343EADC6D9788E5D4BFC4514BD595FB2C8353723EA6E26A9D632B529AB45814B8573A228AEB638D69DAE23485AC1FADB8A13FC5D621BEF78BE7BDF0D0F2026AECFF766181257087691AA8BB019B27FBE64B7169956B46D62F9CF8DE883EACF4E2D1B9B7D7B3B5B5947B16A6058BDFB988001070452F5E71F4760842E05CEDFD519DF01CD4D91D0CFBEDFC9F1609AEDEFC7C1576E\r\nss = EC56413E75F66FEDDCD026D5D[kat_kem] BIKE-L3 ERROR: shared secrets are not equal\r\n3FBBFDAA98A3EDE9C0F21F199EF7FB5365B86ED\r\nshared_secret_e      (  32 bytes):  EC56413E75F66FEDDCD026D5D3FBBFDAA98A3EDE9C0F21F199EF7FB5365B86ED\r\nshared_secret_d      (  32 bytes):  9E2C99E6C194E005E6929348A3127202B0970A1BE17C5BB44ABFEB99FD03FECF\r\n\r\n____________________________ test_mem_kem[BIKE-L1] _____________________________\r\n\r\nkem_name = 'BIKE-L1'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_mem_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)):\r\n            pytest.skip('Not enabled')\r\n    \r\n        Path(helpers.get_current_build_dir_name()+'/mem-benchmark').mkdir(parents=True, exist_ok=True)\r\n    \r\n        for i in range(3):\r\n>          helpers.run_subprocess([helpers.path_to_executable('test_kem_mem'), kem_name, str(i)])\r\n\r\ntests/test_mem.py:16: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem', 'BIKE-L1', '2']\r\nworking_dir = '.'\r\nenv = {'APT_CONFIG': '/var/lib/sbuild/apt.conf', 'ASFLAGS': '', 'CFLAGS': '-g -O2 -ffile-prefix-map=/<<BUILDDIR>>/lib...0.7.1=. -fstack-protector-strong -Wformat -Werror=format-security', 'CPPFLAGS': '-Wdate-time -D_FORTIFY_SOURCE=2', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code 1\r\n\r\ntests/helpers.py:41: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem BIKE-L1 0\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem BIKE-L1 1\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem BIKE-L1 2\r\nERROR: shared secrets are not equal\r\nConfiguration info\r\n==================\r\nTarget platform:  Unknown\r\nCompiler:         gcc (11.2.0)\r\nCompile options:  [-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.1\r\nGit commit:       unknown\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1l  24 Aug 2021)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  BUILD_SHARED_LIBS OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=None \r\nCPU exts compile-time: \r\n\r\n================================================================================\r\nExecuting decaps for KEM BIKE-L1\r\n================================================================================\r\nshared_secret_e      (  32 bytes):  D8016E3D2366EA3DBBBA59E5BD1691CCEADCAF4E588F94855E61C26C9F971409\r\nshared_secret_d      (  32 bytes):  6794BC9BEB99C060D57FD8B2D4DC5093277788D37A9C85236FC7AADF550D7D21\r\n\r\n____________________________ test_mem_kem[BIKE-L3] _____________________________\r\n\r\nkem_name = 'BIKE-L3'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_mem_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)):\r\n            pytest.skip('Not enabled')\r\n    \r\n        Path(helpers.get_current_build_dir_name()+'/mem-benchmark').mkdir(parents=True, exist_ok=True)\r\n    \r\n        for i in range(3):\r\n>          helpers.run_subprocess([helpers.path_to_executable('test_kem_mem'), kem_name, str(i)])\r\n\r\ntests/test_mem.py:16: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem', 'BIKE-L3', '2']\r\nworking_dir = '.'\r\nenv = {'APT_CONFIG': '/var/lib/sbuild/apt.conf', 'ASFLAGS': '', 'CFLAGS': '-g -O2 -ffile-prefix-map=/<<BUILDDIR>>/lib...0.7.1=. -fstack-protector-strong -Wformat -Werror=format-security', 'CPPFLAGS': '-Wdate-time -D_FORTIFY_SOURCE=2', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code 1\r\n\r\ntests/helpers.py:41: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem BIKE-L3 0\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem BIKE-L3 1\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem BIKE-L3 2\r\nERROR: shared secrets are not equal\r\nConfiguration info\r\n==================\r\nTarget platform:  Unknown\r\nCompiler:         gcc (11.2.0)\r\nCompile options:  [-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.1\r\nGit commit:       unknown\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1l  24 Aug 2021)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  BUILD_SHARED_LIBS OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=None \r\nCPU exts compile-time: \r\n\r\n================================================================================\r\nExecuting decaps for KEM BIKE-L3\r\n================================================================================\r\nshared_secret_e      (  32 bytes):  001B40F1FED39CF6AD8B11F77632372B8F3E6FEFC533653F7DB37493B3AB1706\r\nshared_secret_d      (  32 bytes):  D23E3168B72726F072B1DB66B01A859AED856E0B5049E9ABE7B7E080EC873B64\r\n\r\n=========================== short test summary info ============================\r\nFAILED tests/test_cmdline.py::test_kem[BIKE-L1] - AssertionError: Got unexpec...\r\nFAILED tests/test_cmdline.py::test_kem[BIKE-L3] - AssertionError: Got unexpec...\r\nFAILED tests/test_kat.py::test_kem[BIKE-L1] - AssertionError: Got unexpected ...\r\nFAILED tests/test_kat.py::test_kem[BIKE-L3] - AssertionError: Got unexpected ...\r\nFAILED tests/test_mem.py::test_mem_kem[BIKE-L1] - AssertionError: Got unexpec...\r\nFAILED tests/test_mem.py::test_mem_kem[BIKE-L3] - AssertionError: Got unexpec...\r\n=========== 6 failed, 575 passed, 315 skipped in 1105.74s (0:18:25) ============\r\nFAILED: tests/CMakeFiles/test /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/CMakeFiles/test \r\n```\r\nThe full build log is available at https://buildd.debian.org/status/fetch.php?pkg=liboqs&arch=armhf&ver=0.7.1-1&stamp=1639746131&raw=0.\r\n\r\narmhf corresponds to armv7 with VFPv3-D16 floating point, but NEON is not guaranteed.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1179/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1179/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1019077600","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1179#issuecomment-1019077600","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1179","id":1019077600,"node_id":"IC_kwDOA-eq3c48vePg","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-01-22T06:47:37Z","updated_at":"2022-01-22T06:47:37Z","author_association":"MEMBER","body":"> Personally, I think it would be nice to disable just the unsupported features in each of the architectures, as opposed to disabling entire architectures. This way there could probably be a list of core features supported in all architectures.\r\n\r\nYup - that's a very reasonable goal. We are somewhat limited by the number of platforms we have set up in CI, though, as we don't want to \"over-promise\". \r\n\r\nIt might be an idea to keep using the more complete platform test matrix in Debian (via the \"OQS_PERMIT_UNSUPPORTED_ARCHITECTURE\" flag) to see limitations such as those of BIKE on platforms `liboqs` doesn't test in CI: Would that be acceptable to everyone reading (surely @merkys @dstebila)? If so, please keep things as-is in the Debian build. For `liboqs` there's now #1180 to fix this issue: No platform to test in liboqs, but with the Debian test matrix to ascertain it's OK.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1019077600/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-01-22T06:47:38Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"19867067544","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1179","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1179/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1179/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1179/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1179","id":1109483582,"node_id":"I_kwDOA-eq3c5CIWA-","number":1179,"title":"BIKE test failures on Debian armhf","user":{"login":"sebastinas","id":114613,"node_id":"MDQ6VXNlcjExNDYxMw==","avatar_url":"https://avatars.githubusercontent.com/u/114613?v=4","gravatar_id":"","url":"https://api.github.com/users/sebastinas","html_url":"https://github.com/sebastinas","followers_url":"https://api.github.com/users/sebastinas/followers","following_url":"https://api.github.com/users/sebastinas/following{/other_user}","gists_url":"https://api.github.com/users/sebastinas/gists{/gist_id}","starred_url":"https://api.github.com/users/sebastinas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sebastinas/subscriptions","organizations_url":"https://api.github.com/users/sebastinas/orgs","repos_url":"https://api.github.com/users/sebastinas/repos","events_url":"https://api.github.com/users/sebastinas/events{/privacy}","received_events_url":"https://api.github.com/users/sebastinas/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2022-01-20T16:03:06Z","updated_at":"2022-01-22T15:28:08Z","closed_at":"2022-01-22T15:27:47Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"The tests for BIKE fail when building for Debian's armhf architecture:\r\n```\r\n=================================== FAILURES ===================================\r\n______________________________ test_kem[BIKE-L1] _______________________________\r\n\r\nkem_name = 'BIKE-L1'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess(\r\n            [helpers.path_to_executable('test_kem'), kem_name],\r\n        )\r\n\r\ntests/test_cmdline.py:19: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem', 'BIKE-L1']\r\nworking_dir = '.'\r\nenv = {'APT_CONFIG': '/var/lib/sbuild/apt.conf', 'ASFLAGS': '', 'CFLAGS': '-g -O2 -ffile-prefix-map=/<<BUILDDIR>>/lib...0.7.1=. -fstack-protector-strong -Wformat -Werror=format-security', 'CPPFLAGS': '-Wdate-time -D_FORTIFY_SOURCE=2', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code 1\r\n\r\ntests/helpers.py:41: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem BIKE-L1\r\nERROR: shared secrets are not equal\r\nConfiguration info\r\n==================\r\nTarget platform:  Unknown\r\nCompiler:         gcc (11.2.0)\r\nCompile options:  [-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.1\r\nGit commit:       unknown\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1l  24 Aug 2021)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  BUILD_SHARED_LIBS OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=None \r\nCPU exts compile-time: \r\n\r\n================================================================================\r\nSample computation for KEM BIKE-L1\r\n================================================================================\r\nshared_secret_e      (  32 bytes):  F2C37EB674534C6475BD6418190AF0E7059A8DE358E711A7220063C38969B114\r\nshared_secret_d      (  32 bytes):  FF79497AB8FF657818E9E451C06741E092DA3887910FBE874D83673349C1832A\r\n\r\n______________________________ test_kem[BIKE-L3] _______________________________\r\n\r\nkem_name = 'BIKE-L3'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       helpers.run_subprocess(\r\n            [helpers.path_to_executable('test_kem'), kem_name],\r\n        )\r\n\r\ntests/test_cmdline.py:19: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem', 'BIKE-L3']\r\nworking_dir = '.'\r\nenv = {'APT_CONFIG': '/var/lib/sbuild/apt.conf', 'ASFLAGS': '', 'CFLAGS': '-g -O2 -ffile-prefix-map=/<<BUILDDIR>>/lib...0.7.1=. -fstack-protector-strong -Wformat -Werror=format-security', 'CPPFLAGS': '-Wdate-time -D_FORTIFY_SOURCE=2', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code 1\r\n\r\ntests/helpers.py:41: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem BIKE-L3\r\nERROR: shared secrets are not equal\r\nConfiguration info\r\n==================\r\nTarget platform:  Unknown\r\nCompiler:         gcc (11.2.0)\r\nCompile options:  [-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.1\r\nGit commit:       unknown\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1l  24 Aug 2021)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  BUILD_SHARED_LIBS OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=None \r\nCPU exts compile-time: \r\n\r\n================================================================================\r\nSample computation for KEM BIKE-L3\r\n================================================================================\r\nshared_secret_e      (  32 bytes):  CAE4E31F703B6E78D0418C1086F2DD2106145D8E3F4E4B2C07F72C84F3C7BD5E\r\nshared_secret_d      (  32 bytes):  5913158CBD3465B149187D94FBBC98427956913E03D85FC5FFE5AE31609313C5\r\n\r\n______________________________ test_kem[BIKE-L1] _______________________________\r\n\r\nkem_name = 'BIKE-L1'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        kats = helpers.get_kats(\"kem\")\r\n        if kem_name.startswith('SIDH'): pytest.skip('KATs not available for SIDH')\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       output = helpers.run_subprocess(\r\n            [helpers.path_to_executable('kat_kem'), kem_name],\r\n        )\r\n\r\ntests/test_kat.py:16: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/kat_kem', 'BIKE-L1']\r\nworking_dir = '.'\r\nenv = {'APT_CONFIG': '/var/lib/sbuild/apt.conf', 'ASFLAGS': '', 'CFLAGS': '-g -O2 -ffile-prefix-map=/<<BUILDDIR>>/lib...0.7.1=. -fstack-protector-strong -Wformat -Werror=format-security', 'CPPFLAGS': '-Wdate-time -D_FORTIFY_SOURCE=2', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code 1\r\n\r\ntests/helpers.py:41: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/kat_kem BIKE-L1\r\ncount = 0\r\nseed = 061550234D158C5EC95595FE04EF7A25767F2E24CC2BC479D09D86DC9ABCFDE7056A8C266F9EF97ED08541DBD2E1FFA1\r\npkr\nskr\nct = F3822B8B3B29DF1CB4DCE526118C710662567743B0F154D2A7E0DFB7251EA2E30DE92467A2269BE2005C39E7B62155141739257FAD421BCCB191CD7690D02431DC38BE04BABC2A8DA6ACF4A2688B14493758A9FED98D04369007B2380986308D052FDD9E77C4E6574EC923A4949F697405BBDB58D79631963EF2E422D0E5F4AF5033B233100C71CF139AF23B1F5BC96B9374472A7BACBCFC559251E664D2F6AE49AD0700BC26B304E2B846DF7856432FB19527D419331F16B0FB5DB297F3BED24C5483A5715EF08BBA901AC8D454D015551C6E5D7DD640551DE7387DEEAAF4DC7EC236E2CA6931872E44F90ADE56760E8D0D6C57E01B5BF643542CACF75C1BD7036A8504C1929D0CE842D178677933E9786A425A852E8D93206763975C248DC5C7012424FB9E9FEF8AF71B8C3B22C3D0E1CC56CE1A760994B042A815BB69D948557C0F333DC4B5071A0256E71807430091ED11C5E592CA97A4D891C413B609D3EB88F3004463CBE65669A3F0768762B9C4C450B7BCA9495B655CEE7D7A4AFE96D3B4B092843CF04C88B72BAEDE5FC5F97D7C67DA606BE7379626CE7F47FF40A01583D65159E14E53CE016171BFDD74678E19F7EAF87A0FB85F3BEC370F8A69246ECAB06304C3CEA060154004148E41BCB597C9D454839C6435CB61D19BD34A1A541AAE4E519E23B805FC158C1DE8C710884E8A21AB759EB967833C958396E9287FD80A010BFEBAD2F21BE7DC794345DC3A524AACA845BD19681390AEB70A462FFDEF0B44DB3535CBCAFE92E1C230106A1884486501A868433420C07A4231B9C12524EA2BAFE1B320CADED7B0BB2C4180A1B017F9D8BBC5B6EA723345039F3B8F7855DFCA331A89B01C217542E5C959D83F426284001DA57B2E4303A91D819318BC4ED27BDD57D7DF923218A9442012FA24DEFE98CDAC061FE7357F55ECE0EF04ADF92283AA4020E6DF01AD93945CC0D0DF2B2957720BCE9F98A5AF444F17F1169AF1D3564E7C384F6596371603FF3CFA60729BE6AD57AB58E3E1C6C7B3555243A71D79ABDEE62E314BBA5E9946EA09F9368CFB8BDA9B4BB922DD1C5354439A37F0728C8623F55BB902EE6C15704EB99F6AA2859B339044E15BD6CC4B53EA5E83CC3FCADB182856CFE4DD7955591C2FE417EA3948554D602C948493A6BAFE97CC4FF4F89020B08842E5356441F396416E54530BBB5C798C6402D5B0B08833005EF67ADCA3C97CCB7D52306397446D073E1F20D12AE39267DB83F79FBF928D213A0EF7F106049AC38EDC05B4F977E66EE7816BBAF11B8FDE0879100A4A763DFF7CB9DD2D29DF7674E8E1F15FBE8BC170DBE714DF0D773329427D45B6DCF4AEDD6F6B651C959F0DF0EE75A613C43F4BE8BCFA074636130973D8F9FF669DBEB765969E10EAE095FA74B828DCCF3DDE177F3B9AF2F2AAF47AF615F413A432A509254BF77C3710AA18337B9CE3792ECE9AF3B9BA46FD2D98A4CAE3E813DE922B8CD6F4884B4E93C023D35490EB957BCF3037511F01DCA96E2D04D730A3B21592446FAB399187B88C72392188C79BB6C6A8912EF74FEB5517F7D9F2FAA0438C86B6F562FDEA0CE3CD0FB6AE7264D41D7CBF0512F60494EDDF5A997D06034DB7041E0D0055CB7075B6E6AF9C209BBE92C3A389163EE77FF946882ADC0DC2A6714ECF9EB6B6CC26130F6A7A01074914DCC42CCD79EED78B76D06F9DEE1338FAE65B7BB8D7FF92CA499F0A2CF8EB735D4DB3850E89A3080A82F82005C4722E6CDCE9A836726A73DD47DE015CE0E209553C5FFDEC167106B8B2EBFEE3D93D7E386629380CFEED53CE801AD4CB33EDF7E0D2A7952A3F21E0DEBB911106B3B1902F8D553FA7E16740EC963908AB01F2FD238F041ED64CFF01DD6938B893C432DA41B23C00E4A9A795B7A25EF9650061DB39BA678DAE38EA543[kat_kem] BIKE-L1 ERROR: shared secrets are not equal\r\n5D4EC25F371DF14F37630B73410B035D873D82F0B9B47778DDA9D16842BA330402D2A55F34A3E42830954022BDEC01EFE23381902BD1805DF756A68E91FBFD9C7B43FE0F278435E710264FADB68854D4B6E3884F5FB3D5BFD439F377E5A2659396512AE9B2563E71DDCC7D761B39F64562A4D0D50854003C691A5C6C22D99F3A0938794BD35269EFAC3C0AB59EA91D2BA7D8B8D9A02B6766F2BA2FBE2E12A916F8B81D77D33B0F75E558039402997E7C4FA0293406E28A9CBDF6426B7F097963E5F54320FF5CF7BCEA94B321CA5A373D1E548\r\nss = 395802B39969356B389DD977AF251980DA6E3B95D750B9A0FD351D9299F6B47B\r\nshared_secret_e      (  32 bytes):  395802B39969356B389DD977AF251980DA6E3B95D750B9A0FD351D9299F6B47B\r\nshared_secret_d      (  32 bytes):  AE4276FEEDAED06FE6623A09E99549F8A209D5610DBD3ECA1994F1738A2DB9EE\r\n\r\n______________________________ test_kem[BIKE-L3] _______________________________\r\n\r\nkem_name = 'BIKE-L3'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_kem(kem_name):\r\n        kats = helpers.get_kats(\"kem\")\r\n        if kem_name.startswith('SIDH'): pytest.skip('KATs not available for SIDH')\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)): pytest.skip('Not enabled')\r\n>       output = helpers.run_subprocess(\r\n            [helpers.path_to_executable('kat_kem'), kem_name],\r\n        )\r\n\r\ntests/test_kat.py:16: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/kat_kem', 'BIKE-L3']\r\nworking_dir = '.'\r\nenv = {'APT_CONFIG': '/var/lib/sbuild/apt.conf', 'ASFLAGS': '', 'CFLAGS': '-g -O2 -ffile-prefix-map=/<<BUILDDIR>>/lib...0.7.1=. -fstack-protector-strong -Wformat -Werror=format-security', 'CPPFLAGS': '-Wdate-time -D_FORTIFY_SOURCE=2', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code 1\r\n\r\ntests/helpers.py:41: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/kat_kem BIKE-L3\r\ncount = 0\r\nseed = 061550234D158C5EC95595FE04EF7A25767F2E24CC2BC479D09D86DC9ABCFDE7056A8C266F9EF97ED08541DBD2E1FFA1\r\npk = F3FD736DCA32919104C53D463E0F4981034650820A0DABA81F2AE65D24FB33A149DCCAD19CC6F7B04571E244B68EBFCA9EC9E04E3848403330F9CA4B4552104F92FBF9836F3886F61C9F5CF3A2DAF29CC6C2A82154B737E242AB546218A31676506CBED468C9801111C071AF5ACC635619E13947893D15BD8A1F474E01B87EC66D61C3C39BB45E7895F6C53EE81595EAB334424BB8685C9653F4FFBCA5ADD22FC28A1EBD217781864983E5E7494B8C605B21CD7093A61D91DEE5241652BC5096059F5F572D469C85CB0C21BD53CB97C1433292795CDD30B459AB16B708935CBC51073CA239E0E1E0FEA37F96A89666BB65D67CB2BACC0F15B6D96E238B14D3FCF6F3559E2993FA82BF0B13A9550C92C4916D8CEF981A658573C80B59C4FFBF576EDB56F744435DB8558AA5CD0F438DB8E193AEC04C4E9B0CDE68CEC90BCDB06D7466F7235B3204116620792646EAB59EC232E244567AEE9C1231BC03B7EED488034D7797B1EC0D0916154E55F8D179590E6588F57517B45BBA2011289B62813870D68671A71EA39380C5612CF738BB7EFB0B03739ABD49B249A8038C82A5CAB7376748999DBC843A5B64319D2C924ED0846092141A57ACEB040B8046F7B8603524908DD8DE5EC741AF244A4893C975678F252EC41B57F73E278B153B9BF8AFDFF93EFD6BAACB80A86BAC9F68D16B9D2D70BA3E3805D9D64411D23F49A231B1E6A78482E3928B87EC340D99D6788B0F515C8CEE4A1C104DC7B381D7E3006136CBB6716758F0DF8BF09108CD8AD04176441BDB32E1E8D63C6BB54BC3DC57E9CF9E3B93C1679B82B18CABF4E044B51A8AF62036EAA74E975FEA555FFF8E176CCCD5556959C32C3043692BE6F78D0AA805FBDD7B2598920ED41D3E195DAD93035475373A85AABCA26F04BF4DCD3D002DA8C46926B4F99D87A9633D4130E24EA3B6CA0832651A014699352B8492004404E8CA2F4D2F4A39980AA3AE66952D2F8CCECF6FE62A87CE9DFF71B7A6DCC8A9D4F2FF7B05317AF9FAABBB4D2D6C0E460AB09DA8FC2073B8A5C05DECD03E8E970D84F8F7483693CD6BA1D35D16B6B0EDDDD1C5FB1BF0073DDE40B41BC3DBC38284F9EB436A3B4A70A3C205E02CF6F98F701D594E4E7392B7B4B1671BB080AEC4C5F5BAFD217A8061EDC9F652D26842630A7CD7DCB8D5815422159EF5824F8934A34213335CB497A9BF2C6BCBC2E053AED3C51517E36987DEB51978CA079F1FD7B412E6E594FF86306144FF31B90F2CE91967FBD558828E79BFEC207F60B73626E0C7FA93629C6949DF5B2C0FAA07B6997D1273505D502736252F6ACF1BFFB7815191DBB59EC1A750367FF13CBE20500BB7AFF780DBAFA6FE85A86225DF6EC8CBC04B753C92C26048CBB56F9C90289584CABF00F86F42EDB1CE55B71C3C5120411E715AF5281E364BD6793098061AFF6754A5871FC351986B922512C8796DA5E291A013C7C95BDDCA67AB397E89A3D452602012A41C0CFD4D5B4DDC044236C289EB19414CDC3EF91F8387F9C24FAE60E0A67D739EEFA76B4CA546F1A0B3651DAAB04BBB2FCFF2AB0C0B62FC4016CA359F442CE7A5480C9522441FAF80792745502296F1D9E46FA12B58E871ADB8BECB21340A08BE1C0032AC8EF86AB035891DE1DB8664108C32AF11CB4E1117074168DCD60E780479127E3D00F0AEDA16D125E74E5AA5119D04DFF64024E34F225B1B397252DFEF1C49B247310BD4743C0ECD383A909492BA8482484F31A4C501E60D87A3A17F93B99B77D30433C199B3CA7FA9179BCF68A66DDA46EE170D9FDAA736C8FA49332D80B3602F1CE0DFB0E9A17AE8930F5882968F991A2395D5C565195F749AC7AD24DFB79007D9502EC895A424282A5E1A5AE2D448156D82833E05865EA822D1986BA2EC2EA42BC72BD3EA5E2486798457D41A48F560B98CA3D441C3B917101CD9ADB3B05FFE21E6512509F82477EC702E367503E3DBBBF257B44D3B018B946208E7E87F30E848DF3C4B03C713C4DAE88DBA91F33F88BE5F382E9C077E19ABA80AB14A013FF06980F4D9ED9CB1559C587420F4A80C787BFD57CBF5AF08AEA80B881FB3992A52C5621A8D4295ED2750F5528F5AA9B4672BB49C603BE9CBA8C4D29090930F655C22B6FE89AF622A3FC55334D32774AD169737EE8ED22CDEA0CEA0BD5C2C1B52465D06F7E34AC3C256319B5985A592A6E98BE3EE639BBD733D00BA54FD73ABF029D0DB71B37253C93C1B20A81467B34901083DBFB7897034939E2CDD5EC6DA43A58638E9220962D827927EEE60D2AB74455000C62C76B66C4A3C0E6112B3ACECFABA4CA9C44F7F4D1B6A92CDA25E8D309FCC77C65EB0B5202C6FA94C702054F55D00EB1F6AE36D283F67C2B2484BB90B439A6D0809950657702BDCC4C039BFBE870B430D1A989026F194CAC4CA8CC5CC2867CE513B6F4EAACF66435D9F39C57533F59C58D92DE7167ECD0C721D0F6C1F7950D48F38FC6C823D0C33E2EC9E67283CB2BEB315674711BB3B6785B9782845B59E6E38DF2937B8FF484C734B10F0C1FBCE17AE04ED6C02F031CC9A520CA0E99F4018A61F3C88CF33831EB3AF8266C260A73CC5A393D70EA56B241577AB0FF82A89FB9288FE6951FFE37C6E55633544E8F034789A39B59DB0E7FF41063B9A9C9F8DF07CA8D560445086125DE3D325FFD8632E17AA5AD2C9F1DF1D6F354B7917C730A9B5604C7F0BE773B4D9639C3CB90CF6C40AD129F48D192D28E5E84CDF3C6BBFA9C025955A6E92D2D586E182F857921087445ECEF3BFD73ACE2DDAC85B0C7F3CF4F5EDB1FBC20148021A21364B1B6931D600A8DAC20E367A317F44A6E2E03E5F861389605D5DAD29DDD0F2CD8C0E52A5529F9EB984DC8008516E9346527D6D9B697A5364BDDB661572F708A0EFA190C580BB1E95A2B326F90F5AE453FE93F9091FA2D32BCE3BC346B044B20CD60DE3057AE0874B1829505BCEFC844EBAF3F4434D585C6413C7A8BDCE84DE899C4682EE62EA5DF43BAD60FF9643DE5DD0F3F8910D971CF987E521FC52C461B9B69F5A960A5882BC81B0F6A6FB3BBA93F7AD185CD914BE0E4AA7426C01EEE92F47B9225A76CE8A33DBB1246FA0794B002EB915750CCB4556ED2FD9D3F55E0591CB7598D87AA6763B51059DF570353C223D8BB9170E9C0ADC19A68AEC20C044B49A2F195149693B51185AB3D23F56F76A9FC9EEBA368A60D64A850FC8FDA8EA97E1221BAA02C836EF601C01C401F4355F6B679A30FA4B3AD703DE716191FDC1C9E1622FEE0E4726752BF7D31CEA0C2DB39B1F2B26A12FB6C5355E8E0C29612D3D85A12F7A8B097F05F0871C016D5A4E4432FBA5481742665C17BB79C16B8EC6ED4624028D5C3C1D4E8DB5F05E06374A882D59937DC3BD793D04BE6B64D1B05ADCCFFE48DDEDC4F3D29D339981E15DACB2FE5E3F2F655C577DB45B8AECE607225F9EA0BAC815AA8DB24C2BF7A1774C7BE5498CD81267CCFA7496BF45804308D71B4341F94DDBA41D03DEAEC39DE2CAF637303C4ED7E24928B428254365899A3C818CEEBBE0F9B3451AD05A5F6ED947FC7B80850718DDA80686F0BB3520DDF619B304F63092064842D83241E0501DE2CAE58724A5F1C88A093E9CF30C16D62DE878686973D445B263F1423FA86B4E78B8CBB741F9BA95B624CCF00047DC5EE8995DF365E83EE5B1749EA1911D8562CA0C8111E465DF0EE4E57A79B1B19F50153B17FDDB1C3465BB51FFCD683B2DB53C2DC054AD5FC69E04118E5EF6954CC80F88F26073DCECC52880AEF2E94D1CEEDAD9D8B2501AD1763CEE0A5ADA8BA6FDD12BF7B17FD813BF7CF7E3E6C0FDD559FD64BA9B9D8CB36A4F727FEF8F0620D33ED103E2F99C9BCD1C3EB0B871FCAE4687053C210B8794761EDA1E8EA6B13522C84E0C7E88242541337DE7F32760ECDE93D71110936A53A8D892D74B0FA0E5E62663D557C44CE338BFC6F7264D92AB8F8A0C5648E76B42DFB46816829E54EC296FCBC2AD143FD7F7DB0A0DC306948589F0418264B5627613102F1016AB035CCA371B618975F0B9FC23248566D7B61821D281858422E45BA8FFC89CE5914C4CA7016F8853FE844B216FF0B33CB6DC5CDFA9E350C7AB8A3D2EC61D7F8B8D42AEBE1824033E44B45C6C90A73EA16C2F6CF6B7257CA6E5B6E3B32ECA1454D5680BE12C887B2C990CA3C723F42BCD54C5A52AB2A740E6D4AB24D494BD8D1AED8E116788F57A90FF34F3983ED9631BCEF158335BF7F28FAB845F011EF90395F7B999824DFB05948578BF3B48BB8E32C7B2D93B3A9F475789A91A084E99539B4A8DC41EC98769BD29290804BBF373ADEA3B57A60123CC3C820BD5BE9B4B585E758A7F3DF45A0ABB9704E9B1D95E9803\r\nskr\nct = 1E3E08806F725EC3703400FE14CF226ABD43E90B26A56E4FA431A2436C28052BA85BF45131EAD489C207DAADDAB13049325C43173B7D2BF9D89FF888D9232B5B81338C069F536DA6DC9165E3BE2503988550055F055BE4B58AA9C8DAD8B482D6CBBD51B66C01D5D147EFE0E158DF7B780457F4ADF6C189A313E28113B406D06012B6D1B28E624296C4EFD9FC899B6100562DD68C4262B30C3BC6C0C5193F23607216AE740E33085C5C501C77CF5BCFD8EDC73F563BAC02528F58E61C53CD32D93F3A773A9B4E63867665F0195EF984C3356C94FA7C50170C1AF734AA10F9D7D7C4803F4EEAD770CC26BA0732A55CD59530CB49A9F679DA8B726A671AF3DD8A2799390EA84343523AF9B798390F6D6420182A3A6029134EE19A06ACF2E138B613885C7CC52B2025848229F41F2313F34F511A3F29BDF96D298367819EB9CCBC483312FDF925482A281CC9BE8ED46C225599C89B4CB6A84DF2920B14B49E1B88FBA06E2431D7CF8225A07A39B633ED7F18F5274B5478694263E82AE27E6A930B57AD5EED86DE9D9B060B688EA6D0E31D394CF53860B53B60CDCB5FD9C002A0CD8590DAF113660200AFB350ECBC3A29E15E3EFE05DD92D1CD9F59442BBA106FA7C37D65FA4DE9F09AA864FEEB2C5ABA7B0A2FCE71D7DEEA30D19378595623E2CBD7A86ADE09B29765CEC905465678238020D59CB91FDE53B4A3229F5D51816FEED5E68CCE5D96EB4A0C80C58E57C9836D51E7900165677E009EF8A069E4AD1972F120154EA25D92ED7F0C84861410CDF2766AB4B9AFC29BFE7DCCCC793F4502EC3F339C9F2281B5D48C778D11607B6EF466837CA4604DAFDE2C24808B72B06736545CDD042E5AF1CADFFF1FD0E3FAB5C258EEB78C1CD79686CF50F9A506A63E057F80A9702D7D07CA5F33157E3AC55AD547F5A847AF86326D22958D3AEB61E06C9D42D6D7C227F09344D94ABD2CFADAF3167E635A9F4D1A3C3EF3CE8DDFDF72CFE597072A7182F1260D310CE6C927610C238716107CE9A1C315FBFABFEA62240B7205F942E4C00DFF5C272DD6C5A654DB103B380DD3ADAF6AF9461D324050BBAF10BEDE59EAE09FC85EDD9078A8E9D101F9BC021C478EF2755FBE7B52BFE39914C4E290EFFBDA611E0CD3504D540B93E8F1672F80999AD5A6E6995106C46618BF1514966DBDFDCFE1A75147019184A8A69EF54A5E93B0ABB530EF82F2F9F069F6827887859B507A329E3B7A21D65C39121BB91EF23287FAEECAFF1682ACC0D7414A8CA00A59B274FB7ABA6B6C4BDC48DBCED2F361CA1BB8F1EC4BE9121B5E143F6F21D33067B9556B8E0DC923ED70FA501FE0B9640F1C6E37509B0C2056A78F53461FCDC101288429A415B9E8D337CD41602480E3956612C76474ED18081E5AACC97992390633AD24359BFC6B9DB3B06544FEC2BB4244E0340A8DF9CB9CE58BB2438D6464237213CCECD1AF9E07E54186730F1606CBFD2E6EFAAC9FBA1AD4FBC469A27CFD078053FEED37EC83A67698387191D22890012A0F378AAD4C66048925DB6A9B3532E6295025E6DC1C8F55E0F3A3EEF2ADCE643EECAEEF28FC504D34FC3766D0378402AC70BD18972A7F0714839A5F933674004A6E7C0873B5BC0E83E2368B4A32F2B5C9223E6970FBB6B93343EF56FF2D1572BF14C0DB424C24407AA4B4534D2B2474924CF09B4223C290ABD4AE356D28B346244E4B5114718E4A2DAA25DCCB17BC31796AB38875653FD67535DD7D48E42031C2A6C7A34A75972F6CD42BF36E44CE03CFBCEC93C78B1A591A18A4340B5744DC8D1B0524999D83FCEF7BC7B25ACCC40256620AE7E9FD9CB04261EF8B9BA16AF5B02A375AE8C4DB77554994FB27132C66A1195C1D456733A088086207E673733874DEE404417F861913BCE0CD6A193B65417B144DB2E0CE62A3212FD27CAC6357104CE39AA0BA2CC0DC7065C806C28160D296EE6A300B0D0F2459AD01C862F8FC0DEEA5F19698446B623F9D01804D46DD4A8936C28E875ED5C288188175496D6DD4D5AF0BA0E2A7E7D672501D84698F5B4B2C67BE1A48221CE6158B5C77320BD3EFDE0ABD1F7631FFB0772F1DFBAED7C41434BBEC887549022AD1762B7B50BB9599B33762C7035D3C7BC77D7A521D15CBD8A8739A0C5E56A12C6D1D3E3CE4086C91FFC9DFBE178146FE5B93DC53714924E290FEA07533DA815C83F4B56E8DFD40CDAAFE185B99609FF99BDA132C9F8EDD4BD878B912357CF039058450C1FA9E33DF2259CB7B0D73B8834C177481AE451F0CA16D5C1711973F0B8BED33B298AE399A552CA180B178BD77049EAE3171213E8E418B885BE3196E586D32728826447E58FFD7493CD85CF5A9D240D76D46EB423A46C5FCC6AD1411A2DE628D2D4DA99DF7CEC9BE8214C144BF328C936D9AA14B97B146D88369F52B04722904AAB404E72ECAB51D84E169A4F044BBF91577AB83D76ED6AE4F89D17EA97F8199CDA2025FF6BD37407A1AED3302918FD7DE9AAA1C0B0693C5785A1AF58FA5576400ECBFB6C0EE21BB0CED4974285764B9DE561C6589585DB3A658CA9727078E1EDEA51386BE6484E005E11FA4D6F469EAF518F375620DE419007CEB99A6BA84C28EB60AEE98B91B8C5C1CEF06AC0036509F19A323EFE55852C737C8AE7FC0365AA27A3D6E89A1C9F73F4910983CE92EEA45C1C42AEC68537BC60B7B83FF0EE4E0DD3263359709C5D8A49DC9AC79238B58A16184C41565E899E72E1BA21F55E32226957AEEC5EFB57DC563862F0E43313357F011AD36FB752503D114E2B3245B7504A99068DFFE4A009B1832F0462AB1A4A996785F284B645CB52F07CF45432BDE4D21DF28DA160F724AEEBE3498D5B5551B3D8371DC2600309EC38AAB60F286894ACDE561A2787B34F8C67887F06E435BE06A40F5E1C08FBB29002DF4C65F7D2D605971507A9B56DE9A5EBE506B12B16990B4FFA497509B7843767B7CBD53FA3C2F4DDAFA264E9FC73887697CE0F7C5749276B000C4265F549E1E25B51AE1F8158C3D1DB118CEDA199717D828B3190A8D158120EF3F1EA5D2890D62F06974A7EB661F87053850E193821DD800EB7A87FB0465D4CE6FFFDF38F3E6985DC0ED25BEE0684A78D2EEE0789E86321FBE8DD3CA27572D92FB39C31EB571693F89F61D0C81A10BCA02B51DA8EDDAD72FC50EA9CFE2D7C4D182977B5CF86EF8606E2B56E07E46BD2E8DA0E84145500E88CF6F0622D85567E27F5FBC599ACD08713FB2F97DF343379C6432AFBEF577F8D5A5A6AC62DAAA167F212EBDD12EDD304481643C2B764631AC37C50D1DF84EBCDFD828F8B142C4C6609BE81AF250BD6481D25C276D9CC2FC455C7AAADF64B66FDA9B27AEEE54AA0F5E4E2740CE5ACF3E375BE71B1A97F51E0AF4E35E537307296CBB6B8CAA0E715EB466FAEBAE916A39D1FB3A6C085D333A307E83B41E6E12A98DEC6F745A92AF754B70EA57B2DC28790DCD5F54E1EB2A4B993E0112A353E37D8EC1FF0B0CFEB16044549B439D658AE0F44C0025C853427CF99CB99184E6874FA2CA4917D50A8C5AD02A5B889E7CBC1400E87E05EE5927411AC7139B4FDD6E2D8E4B2CC8A121E2245C2D558F3EC3A4D7BC8FB5E0026B1AB3B11421F8F78D005E410317D663A190F090DF527839D59D57DEBC93F84594250882DCE2C66154A4242D7F6D5A9F822E8F4843F3BAB8E4B1C9908A35C2E265571A18F4E61D5C211F7D076FCC77A3C2883A7EE8BD1D7D3791E9C552E744BC26284FF82981A37C21D6DE35A0E6CA68A5AAD696164F8C56ADF3449CDFB9EBE2819207B795DAAAB581BCF2611CB4AE36A3068E18386B735CB5C1E91AFB6129F61BB0821852B191888D805209EA512FAD7AB044DD5C3857382F35EC48280E6D17981D26F3649370952EEC978A6A1D8F205B82FFDF1C8CA5C2CA8712E7816D62B12048DB8F50293CD4CE6F95AD6B3EEF99961C07E2105C86BCE9868FBE4E08DBCA881EA429D785B46A353F80CB35DFA9C548EF4E3C8DB59720A6C4B3AEDABCE2131C22D417F43D64904719C2E40DEB71824BF683726BF0804312B8FE052685A2F9053E6F771E640A42A1F58CABA867D5583BDF0FB90613A73C0C70752CF987813AD30F80FDFCF7B043EECBAE7F6C24CAD45769C5EF138A773082A5D2B60145E36376B03754F230901BF2115C1BFC7EBFC19980CA10DE8ED4296CD64DE2D56A3EFFADDEDBF8C669343EADC6D9788E5D4BFC4514BD595FB2C8353723EA6E26A9D632B529AB45814B8573A228AEB638D69DAE23485AC1FADB8A13FC5D621BEF78BE7BDF0D0F2026AECFF766181257087691AA8BB019B27FBE64B7169956B46D62F9CF8DE883EACF4E2D1B9B7D7B3B5B5947B16A6058BDFB988001070452F5E71F4760842E05CEDFD519DF01CD4D91D0CFBEDFC9F1609AEDEFC7C1576E\r\nss = EC56413E75F66FEDDCD026D5D[kat_kem] BIKE-L3 ERROR: shared secrets are not equal\r\n3FBBFDAA98A3EDE9C0F21F199EF7FB5365B86ED\r\nshared_secret_e      (  32 bytes):  EC56413E75F66FEDDCD026D5D3FBBFDAA98A3EDE9C0F21F199EF7FB5365B86ED\r\nshared_secret_d      (  32 bytes):  9E2C99E6C194E005E6929348A3127202B0970A1BE17C5BB44ABFEB99FD03FECF\r\n\r\n____________________________ test_mem_kem[BIKE-L1] _____________________________\r\n\r\nkem_name = 'BIKE-L1'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_mem_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)):\r\n            pytest.skip('Not enabled')\r\n    \r\n        Path(helpers.get_current_build_dir_name()+'/mem-benchmark').mkdir(parents=True, exist_ok=True)\r\n    \r\n        for i in range(3):\r\n>          helpers.run_subprocess([helpers.path_to_executable('test_kem_mem'), kem_name, str(i)])\r\n\r\ntests/test_mem.py:16: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem', 'BIKE-L1', '2']\r\nworking_dir = '.'\r\nenv = {'APT_CONFIG': '/var/lib/sbuild/apt.conf', 'ASFLAGS': '', 'CFLAGS': '-g -O2 -ffile-prefix-map=/<<BUILDDIR>>/lib...0.7.1=. -fstack-protector-strong -Wformat -Werror=format-security', 'CPPFLAGS': '-Wdate-time -D_FORTIFY_SOURCE=2', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code 1\r\n\r\ntests/helpers.py:41: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem BIKE-L1 0\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem BIKE-L1 1\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem BIKE-L1 2\r\nERROR: shared secrets are not equal\r\nConfiguration info\r\n==================\r\nTarget platform:  Unknown\r\nCompiler:         gcc (11.2.0)\r\nCompile options:  [-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.1\r\nGit commit:       unknown\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1l  24 Aug 2021)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  BUILD_SHARED_LIBS OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=None \r\nCPU exts compile-time: \r\n\r\n================================================================================\r\nExecuting decaps for KEM BIKE-L1\r\n================================================================================\r\nshared_secret_e      (  32 bytes):  D8016E3D2366EA3DBBBA59E5BD1691CCEADCAF4E588F94855E61C26C9F971409\r\nshared_secret_d      (  32 bytes):  6794BC9BEB99C060D57FD8B2D4DC5093277788D37A9C85236FC7AADF550D7D21\r\n\r\n____________________________ test_mem_kem[BIKE-L3] _____________________________\r\n\r\nkem_name = 'BIKE-L3'\r\n\r\n    @helpers.filtered_test\r\n    @pytest.mark.parametrize('kem_name', helpers.available_kems_by_name())\r\n    def test_mem_kem(kem_name):\r\n        if not(helpers.is_kem_enabled_by_name(kem_name)):\r\n            pytest.skip('Not enabled')\r\n    \r\n        Path(helpers.get_current_build_dir_name()+'/mem-benchmark').mkdir(parents=True, exist_ok=True)\r\n    \r\n        for i in range(3):\r\n>          helpers.run_subprocess([helpers.path_to_executable('test_kem_mem'), kem_name, str(i)])\r\n\r\ntests/test_mem.py:16: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\ncommand = ['/<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem', 'BIKE-L3', '2']\r\nworking_dir = '.'\r\nenv = {'APT_CONFIG': '/var/lib/sbuild/apt.conf', 'ASFLAGS': '', 'CFLAGS': '-g -O2 -ffile-prefix-map=/<<BUILDDIR>>/lib...0.7.1=. -fstack-protector-strong -Wformat -Werror=format-security', 'CPPFLAGS': '-Wdate-time -D_FORTIFY_SOURCE=2', ...}\r\nexpected_returncode = 0, input = None, ignore_returncode = False\r\n\r\n    def run_subprocess(command, working_dir='.', env=None, expected_returncode=0, input=None, ignore_returncode=False):\r\n        \"\"\"\r\n        Helper function to run a shell command and report success/failure\r\n        depending on the exit status of the shell command.\r\n        \"\"\"\r\n        env_ = os.environ.copy()\r\n        if env is not None:\r\n            env_.update(env)\r\n        env = env_\r\n    \r\n        # Note we need to capture stdout/stderr from the subprocess,\r\n        # then print it, which pytest will then capture and\r\n        # buffer appropriately\r\n        print(working_dir + \" > \" + \" \".join(command))\r\n    \r\n        result = subprocess.run(\r\n                command,\r\n                input=input,\r\n                stdout=subprocess.PIPE,\r\n                stderr=subprocess.STDOUT,\r\n                cwd=working_dir,\r\n                env=env,\r\n            )\r\n    \r\n        if not(ignore_returncode) and (result.returncode != expected_returncode):\r\n            print(result.stdout.decode('utf-8'))\r\n>           assert False, \"Got unexpected return code {}\".format(result.returncode)\r\nE           AssertionError: Got unexpected return code 1\r\n\r\ntests/helpers.py:41: AssertionError\r\n----------------------------- Captured stdout call -----------------------------\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem BIKE-L3 0\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem BIKE-L3 1\r\n. > /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/test_kem_mem BIKE-L3 2\r\nERROR: shared secrets are not equal\r\nConfiguration info\r\n==================\r\nTarget platform:  Unknown\r\nCompiler:         gcc (11.2.0)\r\nCompile options:  [-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-O3;-fomit-frame-pointer;-fdata-sections;-ffunction-sections;-Wl,--gc-sections;-Wbad-function-cast]\r\nOQS version:      0.7.1\r\nGit commit:       unknown\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1l  24 Aug 2021)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  BUILD_SHARED_LIBS OQS_OPT_TARGET=auto CMAKE_BUILD_TYPE=None \r\nCPU exts compile-time: \r\n\r\n================================================================================\r\nExecuting decaps for KEM BIKE-L3\r\n================================================================================\r\nshared_secret_e      (  32 bytes):  001B40F1FED39CF6AD8B11F77632372B8F3E6FEFC533653F7DB37493B3AB1706\r\nshared_secret_d      (  32 bytes):  D23E3168B72726F072B1DB66B01A859AED856E0B5049E9ABE7B7E080EC873B64\r\n\r\n=========================== short test summary info ============================\r\nFAILED tests/test_cmdline.py::test_kem[BIKE-L1] - AssertionError: Got unexpec...\r\nFAILED tests/test_cmdline.py::test_kem[BIKE-L3] - AssertionError: Got unexpec...\r\nFAILED tests/test_kat.py::test_kem[BIKE-L1] - AssertionError: Got unexpected ...\r\nFAILED tests/test_kat.py::test_kem[BIKE-L3] - AssertionError: Got unexpected ...\r\nFAILED tests/test_mem.py::test_mem_kem[BIKE-L1] - AssertionError: Got unexpec...\r\nFAILED tests/test_mem.py::test_mem_kem[BIKE-L3] - AssertionError: Got unexpec...\r\n=========== 6 failed, 575 passed, 315 skipped in 1105.74s (0:18:25) ============\r\nFAILED: tests/CMakeFiles/test /<<PKGBUILDDIR>>/obj-arm-linux-gnueabihf/tests/CMakeFiles/test \r\n```\r\nThe full build log is available at https://buildd.debian.org/status/fetch.php?pkg=liboqs&arch=armhf&ver=0.7.1-1&stamp=1639746131&raw=0.\r\n\r\narmhf corresponds to armv7 with VFPv3-D16 floating point, but NEON is not guaranteed.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1179/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1179/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1019292098","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1179#issuecomment-1019292098","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1179","id":1019292098,"node_id":"IC_kwDOA-eq3c48wSnC","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2022-01-22T15:28:08Z","updated_at":"2022-01-22T15:28:08Z","author_association":"MEMBER","body":"Makes sense. I've approved and merged #1180.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1019292098/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-01-22T15:28:09Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
