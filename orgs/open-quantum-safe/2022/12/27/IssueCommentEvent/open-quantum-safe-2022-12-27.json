{"id":"26107824569","type":"IssueCommentEvent","actor":{"id":16247285,"login":"christianpaquin","display_login":"christianpaquin","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","avatar_url":"https://avatars.githubusercontent.com/u/16247285?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/420","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/420/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/420/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/420/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/420","id":1507616164,"node_id":"I_kwDOA_fpb85Z3GWk","number":420,"title":"Gracefully handle algorithm enablement","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-12-22T10:23:38Z","updated_at":"2022-12-27T15:24:49Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"As soon as https://github.com/open-quantum-safe/liboqs/issues/1331 lands, tests for algorithms disabled in oqs-openssl would fail if only an algorithm subset is enabled, e.g., STD. This issue is to collect options how to handle this: \r\nInitial ideas:\r\n1) Don't care, i.e., do not support/perform (CI) testing with \"standard-only\" algorithm selections.\r\n2) Create a possibly convoluted script to filter algorithms under test in https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/oqs-test/common.py using information from \"oqsconfig.h\" (un-set #defines).\r\n3) Add code throughout oqs-openssl to explicitly permit unavailability of an algorithm, possibly guarded by an environment variable \"OQS_TEST_ONLY\".\r\n\r\nPreferences? Further alternatives? @xvzcf @dstebila @christianpaquin ?\r\n\r\nOptions 1 (not testing what is actually deployed) and 3 (possibly extensive code changes for test-only behaviour changes) have such undesirable consequences that I personally think 2 ought to be implemented. But I'm all ears for alternatives.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/420/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/420/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1365980810","html_url":"https://github.com/open-quantum-safe/openssl/issues/420#issuecomment-1365980810","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/420","id":1365980810,"node_id":"IC_kwDOA_fpb85RazaK","user":{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false},"created_at":"2022-12-27T15:24:49Z","updated_at":"2022-12-27T15:24:49Z","author_association":"NONE","body":"Option 2 indeed sounds more robust. Meanwhile, a README warning to explain the failure should be added (option 1-ish).\r\n\r\nDoes OpenSSL support a mechanism to deal with non-always present algs (like GOST)?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1365980810/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-12-27T15:24:49Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"26108256333","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/420","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/420/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/420/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/420/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/420","id":1507616164,"node_id":"I_kwDOA_fpb85Z3GWk","number":420,"title":"Gracefully handle algorithm enablement","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-12-22T10:23:38Z","updated_at":"2022-12-27T15:55:56Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"As soon as https://github.com/open-quantum-safe/liboqs/issues/1331 lands, tests for algorithms disabled in oqs-openssl would fail if only an algorithm subset is enabled, e.g., STD. This issue is to collect options how to handle this: \r\nInitial ideas:\r\n1) Don't care, i.e., do not support/perform (CI) testing with \"standard-only\" algorithm selections.\r\n2) Create a possibly convoluted script to filter algorithms under test in https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/oqs-test/common.py using information from \"oqsconfig.h\" (un-set #defines).\r\n3) Add code throughout oqs-openssl to explicitly permit unavailability of an algorithm, possibly guarded by an environment variable \"OQS_TEST_ONLY\".\r\n\r\nPreferences? Further alternatives? @xvzcf @dstebila @christianpaquin ?\r\n\r\nOptions 1 (not testing what is actually deployed) and 3 (possibly extensive code changes for test-only behaviour changes) have such undesirable consequences that I personally think 2 ought to be implemented. But I'm all ears for alternatives.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/420/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/420/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1366006589","html_url":"https://github.com/open-quantum-safe/openssl/issues/420#issuecomment-1366006589","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/420","id":1366006589,"node_id":"IC_kwDOA_fpb85Ra5s9","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-12-27T15:55:55Z","updated_at":"2022-12-27T15:55:55Z","author_association":"MEMBER","body":"> Does OpenSSL support a mechanism to deal with non-always present algs (like GOST)?\r\n\r\nOpenSSL is built with or without algs, i.e., things are compiled (by defines) to handle alg absence/presence gracefully (incl.GOST). The same is valid for oqs-provider (as it statically links in available algorithms). This is only not true for oqs-openssl as it dynamically links to liboqs -- and then such \"surprises\" can occur.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1366006589/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-12-27T15:55:56Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
