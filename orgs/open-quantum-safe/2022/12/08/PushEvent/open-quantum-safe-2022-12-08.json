{"id":"25742237092","type":"PushEvent","actor":{"id":149199,"login":"bhess","display_login":"bhess","gravatar_id":"","url":"https://api.github.com/users/bhess","avatar_url":"https://avatars.githubusercontent.com/u/149199?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"push_id":11924786574,"size":1,"distinct_size":1,"ref":"refs/heads/ppc-jammy","head":"85eb7d9ca1266f14d49226c9f5be87f516bfb2ad","before":"a393871ef5452d08798a5ae98f261cb79cbcfcd9","commits":[{"sha":"85eb7d9ca1266f14d49226c9f5be87f516bfb2ad","author":{"email":"bhe@zurich.ibm.com","name":"Basil Hess"},"message":"update travisci ppc64le to jammy","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs/commits/85eb7d9ca1266f14d49226c9f5be87f516bfb2ad"}]},"public":true,"created_at":"2022-12-08T07:09:21Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"25762601790","type":"PushEvent","actor":{"id":16247285,"login":"christianpaquin","display_login":"christianpaquin","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","avatar_url":"https://avatars.githubusercontent.com/u/16247285?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"push_id":11934628552,"size":516,"distinct_size":1,"ref":"refs/heads/master","head":"2b839eb8c354d3c8c98a35e05cc4a513370f589d","before":"371cbb91df24ba3dec754baee99f3f189aa67d8e","commits":[{"sha":"6191cc95a1ef9a7b0a3f79ac23cbbbba85698c0f","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Document that SSL_PRIVATE_KEY_METHOD should configure signing prefs.\n\nOtherwise BoringSSL may select one the private key does not support.\n\nChange-Id: Ia0a57657bd6dedaa6653c23cc850bb6b6fa8f219\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48525\nReviewed-by: Adam Langley <agl@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/6191cc95a1ef9a7b0a3f79ac23cbbbba85698c0f"},{"sha":"897a2ca3f184b34278641138c726ef902ab1fab2","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Add convenience functions to malloc EVP_HPKE_CTX and EVP_HPKE_KEY.\n\nSome callers want the value to be heap-allocated. It's a little annoying\nthat this returns an empty value (if we only supported heap-allocated\nones, I'd have merged init into new), but since we have multiple\nconstructor functions, this is probably the least fuss.\n\nChange-Id: I42f586e39850954fb6743f8be50a7cfffa0755ba\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48526\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/897a2ca3f184b34278641138c726ef902ab1fab2"},{"sha":"17be3872ab3243fff6014f66d196d77b79d18119","author":{"email":"dmcardle@google.com","name":"Dan McArdle"},"message":"Check strtoul return for overflow error in GetUnsigned()\n\nCurrently, GetUnsigned() calls strtoul and checks whether the resulting\nunsigned long int is greater than UINT_MAX. This implicitly assumes that\nUINT_MAX < ULONG_MAX.\n\nProblematically, `unsigned long int` and `unsigned` have the same size\non Windows [0] and on 32-bit architectures.\n\nFor correctness, we now check whether strtoul failed because it would\noverflow the unsigned long int before checking whether the value fits in\nan unsigned type.\n\n[0]: https://docs.microsoft.com/en-us/cpp/cpp/data-type-ranges?view=msvc-160\n\nChange-Id: I49702febf4543bfb7991592717443e0b2adb954f\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48545\nCommit-Queue: Dan McArdle <dmcardle@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: David Benjamin <davidben@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/17be3872ab3243fff6014f66d196d77b79d18119"},{"sha":"e38cf79cdf47606f6768fb85dc066d7ebce304ac","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Don't enable atomics in NO_THREADS configurations.\n\nIn configurations without threads, we're not thread-safe anyway. Instead\nuse the refcount_lock.c implementation which, in turn, calls into\nthread_none.c, so this turns into a plain refcount.\n\nThis avoids a build issue on platforms which define NO_THREADS, use C11,\nlack C11 atomics, and are missing a __STDC_NO_ATOMICS__ definition. The\nplatforms ought to define __STDC_NO_ATOMICS__ or implement them, but\natomics are also unnecessary overheard in NO_THREADS configurations\nanyway.\n\nChange-Id: I927e1825dd6474d95226b93dad704594f120450a\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48565\nCommit-Queue: David Benjamin <davidben@google.com>\nCommit-Queue: Adam Langley <agl@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/e38cf79cdf47606f6768fb85dc066d7ebce304ac"},{"sha":"7a817f48bafee508b2d23ad278f892ee1cb32b91","author":{"email":"dmcardle@google.com","name":"Dan McArdle"},"message":"Add 'generate-ech' command to bssl tool\n\nThe tool generates three files: an ECHConfig, its corresponding private\nkey, and the ECHConfig wrapped in an ECHConfigList.\n\nFor example, the following invocation generates the files:\n\n    bssl generate-ech \\\n      -out-ech-config-list ech_config_list.data \\\n      -out-ech-config ech_config.data \\\n      -out-private-key ech.key \\\n      -public-name foo.example \\\n      -config-id 0\n\nNow, we can pass the ECHConfig and private key into the 'server' and\n'client' commands:\n\n    bssl server -accept 4430 \\\n        -ech-config ech_config.data \\\n        -ech-key    ech.key\n\n    bssl client -connect localhost:4430 \\\n        -ech-config-list ech_config_list.data\n\nBug: 275\nChange-Id: Id4342855483fb01aa956f9aff356105c4a8ca4f6\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48466\nReviewed-by: David Benjamin <davidben@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/7a817f48bafee508b2d23ad278f892ee1cb32b91"},{"sha":"c1571feb5faf5cce844354c63d0f3e842464bea3","author":{"email":"alangley@gmail.com","name":"Adam Langley"},"message":"acvp: add HKDF support.\n\nChange-Id: I26251ce85f2cb1b441ae415b1506161a90bd3efa\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48585\nReviewed-by: David Benjamin <davidben@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/c1571feb5faf5cce844354c63d0f3e842464bea3"},{"sha":"d422d2c4aada2218b12916d6989424ee0bee7907","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Revert \"Revert \"Revert \"Disable check that X.509 extensions implies v3.\"\"\"\n\nThis reverts commit be9a86f459f8e785bac42abcea5d13bd4ded251e. Let's try\nthis again.\n\nBug: 375\nChange-Id: Ie01cced8017835b2cc6d80e5e81a4508a37fbbaf\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48625\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/d422d2c4aada2218b12916d6989424ee0bee7907"},{"sha":"5799ebfe5f895ecd29fcd699789854fc1790d6cd","author":{"email":"alangley@gmail.com","name":"Adam Langley"},"message":"acvp: recognise another style of JSON.\n\nSome JSON files have a header, but without a URL. Thus consider a block\nthat doesn't contain an algorithm to also be a header.\n\nChange-Id: Ic35a827843e9d0169ba8398df69c46a5baeffb44\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48605\nReviewed-by: David Benjamin <davidben@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/5799ebfe5f895ecd29fcd699789854fc1790d6cd"},{"sha":"f1d153dc3619eaea7fac176716c53824f5584830","author":{"email":"alangley@gmail.com","name":"Adam Langley"},"message":"Don't overread in poly_Rq_mul\n\nThe polynomials have 701, 16-bit values. But poly_Rq_mul was reading 32\nbytes at offset 1384 in order to get the last 18 of them. This silently\nworked for a long time, but when 7153013019 switched to keeping\nvariables on the stack it was noticed by Valgrind.\n\nThis change fixes the overread. Setting watchpoints at the ends of the\ntwo inputs (and one output) now shows no overreads nor overwrites.\n\nBUG=424\n\nChange-Id: Id86c1407ffce66593541c10feee47213f4b95c5d\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48645\nReviewed-by: David Benjamin <davidben@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/f1d153dc3619eaea7fac176716c53824f5584830"},{"sha":"0768d42c283dcf077520c8fc9ad952309950fa48","author":{"email":"alangley@gmail.com","name":"Adam Langley"},"message":"generate_ech.cc: include needed headers\n\nChange-Id: I04c8bb68801aeb0938e5b038b98811ca4ffe50f0\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48685\nCommit-Queue: Adam Langley <agl@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: David Benjamin <davidben@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/0768d42c283dcf077520c8fc9ad952309950fa48"},{"sha":"e9fae77c06df5dfa7d30545bcd0b3e357e586bc9","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Clarify BIO_new_mum_buf's lifetime rules.\n\nIt is not obvious from \"It does not take ownership of |buf|\" whether the\nfunction makes a copy or not. It does not make a copy (maybe it\nshould...), so callers are obligated to manage their lifetimes.\n\nChange-Id: I7df9a5814321fd833fcb8d009d9e0318d6668dd4\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48669\nReviewed-by: Adam Langley <agl@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/e9fae77c06df5dfa7d30545bcd0b3e357e586bc9"},{"sha":"116d9250a996c6627bda53b7f1e4cba503785b86","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Document another batch of functions.\n\nThis covers most of the ASN.1 time functions and a handful more of\nx509.h. Also remove some code under #if 0.\n\nI'm running out of a easy ones to do, which is probably a good thing.\n\nChange-Id: I085b1e2a54d191a7a5f18c801b3c135cfda7bd88\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48665\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: Adam Langley <agl@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/116d9250a996c6627bda53b7f1e4cba503785b86"},{"sha":"046fc130d1cd8c78365e00f4781f4c94eb159188","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Remove ASN1_STRING_FLAG_MSTRING.\n\nThis flag is set when an ASN1_STRING is created from a codepath that is\naware it is an \"mstring\" (CHOICE of multiple string or string-like\ntypes). With setters like X509_set_notBefore, it is very easy to\naccidentally lose the flag on some field that normally has it.\n\nThe only place the flag is checked is X509_time_adj_ex. X509_time_adj_ex\nusually transparently picks UTCTime vs GeneralizedTime, as in the X.509\nCHOICE type. But if writing to an existing object AND if the object\nlacks the flag, it will lock to whichever type the object was\npreviously. It is likely any caller hitting this codepath is doing so\nunintentionally and has a latent bug that won't trip until 2050.\n\nIn fact, one of the ways callers might accidentally lose the\nASN1_STRING_FLAG_MSTRING flag is by using X509_time_adj_ex!\nX509_time_adj_ex(NULL) does not use an mstring-aware constructor. This\nCL avoids needing such a notion in the first place.\n\nLooking through callers, the one place that wants the old behavior is a\ncall site within OpenSSL, to set the producedAt field in OCSP. That\nfield is a GeneralizedTime, rather than a UTCTime/GeneralizedTime\nCHOICE. We dropped that code, but I'm making a note of it to remember\nwhen filing upstream.\n\nUpdate-Note: ASN1_STRING_FLAG_MSTRING is no longer defined and\nX509_time_adj_ex now behaves more predictably. Callers that actually\nwanted to lock to a specific type should call ASN1_UTCTIME_adj or\nASN1_GENERALIZEDTIME_adj instead.\n\nChange-Id: Ib9e1c9dbd0c694e1e69f938da3992d1ffc9bd060\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48668\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/046fc130d1cd8c78365e00f4781f4c94eb159188"},{"sha":"46e0523ead99c4417c7933caae829691563d5c72","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Add some tests for time_t to ASN1_TIME conversions.\n\nChange-Id: I7712f66e16b761ee23292980cff039e62d29b22f\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48666\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/46e0523ead99c4417c7933caae829691563d5c72"},{"sha":"ead57c3004fea4dede45a4005d7789eef7d18749","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Reject years outside 0000-9999 in ASN1_GENERALIZEDTIME_adj.\n\nThey would previously output syntax errors.\n\nChange-Id: I7817a91d0c8ed8d6ac6a5a1fd9c9ed1223c5960e\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48667\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/ead57c3004fea4dede45a4005d7789eef7d18749"},{"sha":"7e265971c0b9188261fe6e2b7526535e95d9badc","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Avoid double-expanding variables in CMake.\n\nCMake's language is rather fragile and unsound. For the most part, it is\na shell script with more parentheses. That is, it simply expands command\narguments into a list of strings and then evaluates it, complete with\nshell-style differences between \"${FOO}\" and ${FOO}.\n\nThe if() command is special and internally also expands variables. That\nis why things like if(FOO STREQUAL \"BAR\") work. CMake interprets \"FOO\"\nas a variable if it can find a variable, or a string otherwise. In\naddition to getting very confused on typos, it means that\nif(\"${FOO}\" STREQUAL \"BAR\") will double-expand, and it will do strange\nthings if BAR is a variable.\n\nCMP0054 patches this (which we set by minimum version) so that if() only\nexpands if the token was unquoted. This fixes\nif(\"${FOO}\" STREQUAL \"BAR\"). However, if(${FOO} STREQUAL \"BAR\")\ncontinues to double-expand FOO.\n\nWe had a mix of all three of FOO, ${FOO}, and \"${FOO}\". It's not clear\nwhich is the canonical spelling at this point, but CMake own files\n(mostly) use FOO, as do most of our lines, so I've standardized on that.\nIt's a little unsatisfying if we typo a variable, but I suppose ${FOO}\nalso silently ignores unset variables.\n\nBug: 423\nChange-Id: Ib6baa27f4065eed159e8fb28820b71a0c99e0db0\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48705\nReviewed-by: Adam Langley <agl@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/7e265971c0b9188261fe6e2b7526535e95d9badc"},{"sha":"549e4e7995a90964e92f22af6229d92c1283693b","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Align with upstream on 'close STDOUT' lines.\n\nWhen upstreaming c1d8c5b0e0ff4177ec06eed58ebcfd5a75b7f231 as\nhttps://github.com/openssl/openssl/pull/10883 and then\nhttps://github.com/openssl/openssl/pull/10930, we ended up diverging\nslightly: in the upstream version, I ended up applying the same change\nto the xlate files. Upstream also suggested \"error closing STDOUT: $!\".\n\nApply the same changes here.\n\nChange-Id: I8a8cbc3944432e94a8844f9f628a900edfe77b30\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48725\nReviewed-by: Adam Langley <agl@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/549e4e7995a90964e92f22af6229d92c1283693b"},{"sha":"47c5f9d2f6c294622baf07c3373de752fd518b03","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Update ghashv8-armx.pl from upstream.\n\nThis syncs this file up to e7ff223a20697e5a401d2d9bb7a75e699ed46633 from\nupstream's OpenSSL_1_1_1-stable branch. The main change of note is the\n4x loop from upstream's 7ff2fa4b9281232f0ca1db03d42a954c462ef77d,\n9ee020f8dc7813db82a119058d8f57e70e7e8904,\naa7bf316980259a11dcbaf6128ed86d33dc24b97, and\n603ebe03529101424670051aa0c616dc6e037b28.\n\nBenchmarks on a Pixel 4a.\n\nBefore:\nDid 14069000 AES-128-GCM (16 bytes) seal operations in 2000042us (112.5 MB/sec)\nDid 6768000 AES-128-GCM (256 bytes) seal operations in 2000182us (866.2 MB/sec)\nDid 1902000 AES-128-GCM (1350 bytes) seal operations in 2000479us (1283.5 MB/sec)\nDid 359000 AES-128-GCM (8192 bytes) seal operations in 2003942us (1467.6 MB/sec)\nDid 182000 AES-128-GCM (16384 bytes) seal operations in 2002245us (1489.3 MB/sec)\nDid 13388000 AES-256-GCM (16 bytes) seal operations in 2000144us (107.1 MB/sec)\nDid 6069000 AES-256-GCM (256 bytes) seal operations in 2000276us (776.7 MB/sec)\nDid 1638000 AES-256-GCM (1350 bytes) seal operations in 2001076us (1105.1 MB/sec)\nDid 305000 AES-256-GCM (8192 bytes) seal operations in 2000040us (1249.3 MB/sec)\nDid 155000 AES-256-GCM (16384 bytes) seal operations in 2009398us (1263.8 MB/sec)\n\nAfter:\nDid 13837000 AES-128-GCM (16 bytes) seal operations in 2000131us (110.7 MB/sec) [-1.7%]\nDid 7506000 AES-128-GCM (256 bytes) seal operations in 2000197us (960.7 MB/sec) [+10.9%]\nDid 2289000 AES-128-GCM (1350 bytes) seal operations in 2000734us (1544.5 MB/sec) [+20.3%]\nDid 443000 AES-128-GCM (8192 bytes) seal operations in 2000321us (1814.2 MB/sec) [+23.6%]\nDid 225000 AES-128-GCM (16384 bytes) seal operations in 2002308us (1841.1 MB/sec) [+23.6%]\nDid 13280000 AES-256-GCM (16 bytes) seal operations in 2000011us (106.2 MB/sec) [-0.8%]\nDid 6630000 AES-256-GCM (256 bytes) seal operations in 2000229us (848.5 MB/sec) [+9.2%]\nDid 1916000 AES-256-GCM (1350 bytes) seal operations in 2000373us (1293.1 MB/sec) [+17.0%]\nDid 365000 AES-256-GCM (8192 bytes) seal operations in 2001519us (1493.9 MB/sec) [+19.6%]\nDid 185000 AES-256-GCM (16384 bytes) seal operations in 2006588us (1510.5 MB/sec) [+19.5%]\n\n(See cl/387919990 for some notes I made in reviewing, though likely\nfuture me will find them incomprehensible anyway.)\n\nChange-Id: Id386e80143611487e07b2fbfda15d0abc54ea145\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48726\nReviewed-by: Adam Langley <agl@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/47c5f9d2f6c294622baf07c3373de752fd518b03"},{"sha":"6d84569802d8f164b85cc31750b3e379f23d6711","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Document ASN1_mbstring_copy.\n\nChange-Id: Ia2cb9d969b25d1815d8157dd74125d60b138138f\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48765\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/6d84569802d8f164b85cc31750b3e379f23d6711"},{"sha":"f8b3961b0209d85382ea2b19609d787dd7c50c08","author":{"email":"davidben@google.com","name":"David Benjamin"},"message":"Always use an ASN1_STRING_TABLE global mask of UTF8String.\n\nASN1_STRING_set_by_NID is very complex and depends on a \"global mask\"\nfor most NIDs. (Some NIDs use a single type and use STABLE_NO_MASK to\ndisable the global mask.) Historically, it defaulted to allowing all\ntypes, but it switched to UTF8String in OpenSSL 1.0.2.\n\nUpdating the global mask is not thread-safe, and it's 2021. Let's just\nalways use UTF-8. The only callers I found set it to UTF-8 anyway (with\nthe exception of some test script we don't use, and some code that\nwasn't compiled). No-op writes in the C/C++ memory model are still race\nconditions, so this CL fixes some bugs in those callers.\n\nUpdate-Note: The global mask for ASN1_STRING_set_by_NID is now always\nUTF-8. Callers that want another type should reconsider and, if UTF-8 is\nstill unsuitable, just pass the actual desired type into\nASN1_mbstring_copy, X509_NAME_ENTRY_set_data, etc\n\nChange-Id: I679e99c57da9a48c805460abcb3af5b2f938c93f\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/48766\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":false,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/f8b3961b0209d85382ea2b19609d787dd7c50c08"}]},"public":true,"created_at":"2022-12-08T21:57:23Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
