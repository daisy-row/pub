{"id":"23292642952","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275","id":1327479465,"node_id":"PR_kwDOA-eq3c48lz53","number":1275,"title":"Addition of stateful hash-based signatures","user":{"login":"kj3moraes","id":25700338,"node_id":"MDQ6VXNlcjI1NzAwMzM4","avatar_url":"https://avatars.githubusercontent.com/u/25700338?v=4","gravatar_id":"","url":"https://api.github.com/users/kj3moraes","html_url":"https://github.com/kj3moraes","followers_url":"https://api.github.com/users/kj3moraes/followers","following_url":"https://api.github.com/users/kj3moraes/following{/other_user}","gists_url":"https://api.github.com/users/kj3moraes/gists{/gist_id}","starred_url":"https://api.github.com/users/kj3moraes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kj3moraes/subscriptions","organizations_url":"https://api.github.com/users/kj3moraes/orgs","repos_url":"https://api.github.com/users/kj3moraes/repos","events_url":"https://api.github.com/users/kj3moraes/events{/privacy}","received_events_url":"https://api.github.com/users/kj3moraes/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-08-03T16:14:21Z","updated_at":"2022-08-06T04:17:38Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1275","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1275.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1275.patch","merged_at":null},"body":" ## Addition of XMSS to the codebase\r\n\r\nI have added code for ![XMSS](https://datatracker.ietf.org/doc/html/rfc8391) into the `src/sig_stateful` directory. The algorithm variants supported are :- \r\n* all the XMSS variants (SHA256, SHA512, SHAKE256, SHAKE512)\r\n* all the RFC recommended ![XMSS^MT variants](https://datatracker.ietf.org/doc/html/rfc8391#section-8). \r\n\r\nThe continuous integration tests pass and I have made the respective test files for testing the SIG_STFL API.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1207142940","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275#issuecomment-1207142940","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275","id":1207142940,"node_id":"IC_kwDOA-eq3c5H84oc","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-08-06T04:17:38Z","updated_at":"2022-08-06T04:17:38Z","author_association":"MEMBER","body":"> I don't know how to exclude certain variants from being tested.\r\n\r\nGood point: My pointer only would have permitted exclusion of whole tests. Thankfully, @dstebila just added the general mechanism to exclude single algorithms in #1282: Maybe you want to rebase to that and set \"SKIP_ALGS\" suitably as per your suggestion.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1207142940/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-08-06T04:17:38Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23293812189","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1279","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1279/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1279/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1279/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1279","id":1329351397,"node_id":"I_kwDOA-eq3c5PPErl","number":1279,"title":"Dilithium AVX failing constant time tests","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/19","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/19","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/19/labels","id":7503904,"node_id":"MI_kwDOA-eq3c4AcoAg","number":19,"title":"0.7.2","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":3,"closed_issues":18,"state":"open","created_at":"2021-12-20T15:58:32Z","updated_at":"2022-08-05T15:53:00Z","due_on":null,"closed_at":null},"comments":7,"created_at":"2022-08-05T02:02:46Z","updated_at":"2022-08-06T08:27:22Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"In preparation for the 0.7.2 release, I ran the Valgrind constant time tests. Dlithium's AVX code is failing them. We previously had suppression files in `tests/constant_time/kem/passes/dilithium*` but something must have changed in the Dliithium implementation that makes those suppressions no longer match.\r\n\r\nTo reproduce:\r\n```bash\r\ndocker run -dti openquantumsafe/ci-ubuntu-focal-x86_64 /bin/bash\r\ndocker attach (output of docker run command)\r\ncd\r\ngit clone https://github.com/open-quantum-safe/liboqs\r\ncd liboqs\r\nmkdir build\r\ncd build\r\ncmake -GNinja -DOQS_OPT_TARGET=generic -DCMAKE_BUILD_TYPE=Debug -DOQS_ENABLE_TEST_CONSTANT_TIME=ON ..\r\ncmake -GNinja -DCMAKE_BUILD_TYPE=Debug -DOQS_ENABLE_TEST_CONSTANT_TIME=ON ..\r\nninja\r\ncd ..\r\nSKIP_ALGS='BIKE*,Classic*,Frodo*,HQC*,Kyber*,NTRU*,sntru*,ntru*,LightSaber,Saber,FireSaber,Falcon*,picnic*,Rainbow*,SPHINCS*' python3 tests/test_constant_time.py  --verbose\r\n```\r\n\r\nThis yields the output in the attached file [dilithium_failures.txt](https://github.com/open-quantum-safe/liboqs/files/9264650/dilithium_failures.txt), with a few excerpts below:\r\n\r\n```\r\n. > valgrind --tool=memcheck --gen-suppressions=all --error-exitcode=1 --max-stackframe=20480000 --num-callers=20 --suppressions=tests/constant_time/sig/passes/dilithium --suppressions=tests/constant_time/sig/passes/dilithium-avx2 --suppressions=tests/constant_time/sig/passes/dilithium-aarch64 ./build/tests/test_sig Dilithium2\r\n==13982== Memcheck, a memory error detector\r\n==13982== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==13982== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info\r\n==13982== Command: ./build/tests/test_sig Dilithium2\r\n==13982== \r\n==13982== Thread 2:\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x12EA8D: pqcrystals_dilithium2_avx2_signature (sign.c:290)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x12EB90: pqcrystals_dilithium2_avx2_signature (sign.c:305)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x12EC8C: pqcrystals_dilithium2_avx2_signature (sign.c:317)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x48429FA: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842B6E: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842A11: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842A20: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842B08: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842B0E: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Use of uninitialised value of size 8\r\n==13982==    at 0x4842B33: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Value8\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842B3F: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842B55: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842A55: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842ABC: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Use of uninitialised value of size 8\r\n==13982==    at 0x4842AD9: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Value8\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842AE4: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842AFD: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Use of uninitialised value of size 8\r\n==13982==    at 0x4842B30: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Value8\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Use of uninitialised value of size 8\r\n==13982==    at 0x4842B60: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Value8\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Use of uninitialised value of size 8\r\n==13982==    at 0x4842B63: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Value8\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1279/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1279/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1207174133","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1279#issuecomment-1207174133","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1279","id":1207174133,"node_id":"IC_kwDOA-eq3c5H9AP1","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-08-06T08:27:22Z","updated_at":"2022-08-06T08:27:22Z","author_association":"MEMBER","body":">  I can't tell from the previous suppression files and the commit history exactly how the line numbers of the past map on to the current, so I'm reluctant to just blindly change things without understanding the code.\r\n\r\nAgreed, so I did a manual code comparison (see #1283), no automation or blind `valgrind` output line-number acceptance. After updating the passes file this way, all tests ran OK again, so there is a _very high_ likelihood this has been done right. If you'd have time to merge this today, @dstebila , we should see the weekly tests go green again. No need to bother undoubtely sleepless @bhess :-)","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1207174133/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-08-06T08:27:22Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23296378479","type":"IssueCommentEvent","actor":{"id":13417604,"login":"mnemocron","display_login":"mnemocron","gravatar_id":"","url":"https://api.github.com/users/mnemocron","avatar_url":"https://avatars.githubusercontent.com/u/13417604?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1059","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1059/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1059/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1059/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1059","id":956546850,"node_id":"MDU6SXNzdWU5NTY1NDY4NTA=","number":1059,"title":"Cross-compiling for `avr32-gcc`","user":{"login":"mnemocron","id":13417604,"node_id":"MDQ6VXNlcjEzNDE3NjA0","avatar_url":"https://avatars.githubusercontent.com/u/13417604?v=4","gravatar_id":"","url":"https://api.github.com/users/mnemocron","html_url":"https://github.com/mnemocron","followers_url":"https://api.github.com/users/mnemocron/followers","following_url":"https://api.github.com/users/mnemocron/following{/other_user}","gists_url":"https://api.github.com/users/mnemocron/gists{/gist_id}","starred_url":"https://api.github.com/users/mnemocron/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mnemocron/subscriptions","organizations_url":"https://api.github.com/users/mnemocron/orgs","repos_url":"https://api.github.com/users/mnemocron/repos","events_url":"https://api.github.com/users/mnemocron/events{/privacy}","received_events_url":"https://api.github.com/users/mnemocron/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2021-07-30T08:53:38Z","updated_at":"2022-08-06T16:37:48Z","closed_at":"2021-07-31T05:59:15Z","author_association":"NONE","active_lock_reason":null,"body":"I am compiling the liboqs using the waf/wscript building system for the `ave32-gcc` compiler.\r\nNow I encounter the following errors during linking:\r\n\r\n```\r\n[218/220] Linking build/nanomind.elf\r\nlib/liboqs/src/kem/frodokem/kem_frodokem640shake.c.2.o: In function `OQS_KEM_frodokem_640_shake_new':\r\n/home/simon/workspace/OBC-devboard-1.2.1/build/../lib/liboqs/src/kem/frodokem/kem_frodokem640shake.c:9: undefined reference to `OQS_KEM_frodokem_640_shake_keypair'\r\n/home/simon/workspace/OBC-devboard-1.2.1/build/../lib/liboqs/src/kem/frodokem/kem_frodokem640shake.c:9: undefined reference to `OQS_KEM_frodokem_640_shake_encaps'\r\n/home/simon/workspace/OBC-devboard-1.2.1/build/../lib/liboqs/src/kem/frodokem/kem_frodokem640shake.c:9: undefined reference to `OQS_KEM_frodokem_640_shake_decaps'\r\n```\r\n\r\nI tried to search for the source file of the definition but I cannot find the implementation of these 3 funcitons.\r\nA [search in the github repo](https://github.com/open-quantum-safe/liboqs/search?q=OQS_KEM_frodokem_976_aes_encaps) also only shows the 3 results.\r\n\r\n```bash\r\n> pwd\r\n/home/simon/workspace/liboqs\r\n> grep -rn . -e 'OQS_KEM_frodokem_976_aes_encaps'\r\n./src/kem/frodokem/external/frodo976aes_params.h:29:#define crypto_kem_enc                OQS_KEM_frodokem_976_aes_encaps\r\n./src/kem/frodokem/kem_frodokem.h:37:OQS_API OQS_STATUS OQS_KEM_frodokem_976_aes_encaps(uint8_t *ciphertext, uint8_t *shared_secret, const uint8_t *public_key);\r\n./src/kem/frodokem/kem_frodokem976aes.c:27:\tkem->encaps = OQS_KEM_frodokem_976_aes_encaps;\r\nBinary file ./build/lib/liboqs.a matches\r\n./build/include/oqs/kem_frodokem.h:37:OQS_API OQS_STATUS OQS_KEM_frodokem_976_aes_encaps(uint8_t *ciphertext, uint8_t *shared_secret, const uint8_t *public_key);\r\nBinary file ./build/src/kem/frodokem/CMakeFiles/frodokem.dir/kem_frodokem976aes.c.o matches\r\nBinary file ./build/src/kem/frodokem/CMakeFiles/frodokem.dir/external/frodo976aes.c.o matches\r\nBinary file ./build/tests/test_kem_mem matches\r\nBinary file ./build/tests/kat_kem matches\r\nBinary file ./build/tests/test_kem matches\r\nBinary file ./build/tests/speed_kem matches\r\nBinary file ./build/tests/example_kem matches\r\n```\r\n\r\nWhere are those functions implemented?\r\nThe binary files in the build directory are of no use to me since I use a different compiler.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1059/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1059/timeline","performed_via_github_app":null,"state_reason":"completed"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1207244258","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1059#issuecomment-1207244258","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1059","id":1207244258,"node_id":"IC_kwDOA-eq3c5H9RXi","user":{"login":"mnemocron","id":13417604,"node_id":"MDQ6VXNlcjEzNDE3NjA0","avatar_url":"https://avatars.githubusercontent.com/u/13417604?v=4","gravatar_id":"","url":"https://api.github.com/users/mnemocron","html_url":"https://github.com/mnemocron","followers_url":"https://api.github.com/users/mnemocron/followers","following_url":"https://api.github.com/users/mnemocron/following{/other_user}","gists_url":"https://api.github.com/users/mnemocron/gists{/gist_id}","starred_url":"https://api.github.com/users/mnemocron/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mnemocron/subscriptions","organizations_url":"https://api.github.com/users/mnemocron/orgs","repos_url":"https://api.github.com/users/mnemocron/repos","events_url":"https://api.github.com/users/mnemocron/events{/privacy}","received_events_url":"https://api.github.com/users/mnemocron/received_events","type":"User","site_admin":false},"created_at":"2022-08-06T16:37:48Z","updated_at":"2022-08-06T16:37:48Z","author_association":"NONE","body":"Follow up for the interested reader:\r\nOur work using kyber on AVR32 will be presented & published at the 2022 [smallsat](https://smallsat.org/) conference.\r\n- Arxiv [Link](https://arxiv.org/abs/2206.00978)\r\n- AVR32 version of kyber: [kyber-avr32](https://github.com/fhnw-ise-qcrypt/kyber-avr32)\r\n- in context with satellite firmware: [PQKEX-nanosat-src](https://github.com/fhnw-ise-qcrypt/PQKEX-nanosat-src)\r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1207244258/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-08-06T16:37:48Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23297855888","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1279","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1279/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1279/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1279/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1279","id":1329351397,"node_id":"I_kwDOA-eq3c5PPErl","number":1279,"title":"Dilithium AVX failing constant time tests","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/19","html_url":"https://github.com/open-quantum-safe/liboqs/milestone/19","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/milestones/19/labels","id":7503904,"node_id":"MI_kwDOA-eq3c4AcoAg","number":19,"title":"0.7.2","description":"","creator":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"open_issues":2,"closed_issues":19,"state":"open","created_at":"2021-12-20T15:58:32Z","updated_at":"2022-08-06T21:43:25Z","due_on":null,"closed_at":null},"comments":8,"created_at":"2022-08-05T02:02:46Z","updated_at":"2022-08-06T21:43:48Z","closed_at":"2022-08-06T21:43:25Z","author_association":"MEMBER","active_lock_reason":null,"body":"In preparation for the 0.7.2 release, I ran the Valgrind constant time tests. Dlithium's AVX code is failing them. We previously had suppression files in `tests/constant_time/kem/passes/dilithium*` but something must have changed in the Dliithium implementation that makes those suppressions no longer match.\r\n\r\nTo reproduce:\r\n```bash\r\ndocker run -dti openquantumsafe/ci-ubuntu-focal-x86_64 /bin/bash\r\ndocker attach (output of docker run command)\r\ncd\r\ngit clone https://github.com/open-quantum-safe/liboqs\r\ncd liboqs\r\nmkdir build\r\ncd build\r\ncmake -GNinja -DOQS_OPT_TARGET=generic -DCMAKE_BUILD_TYPE=Debug -DOQS_ENABLE_TEST_CONSTANT_TIME=ON ..\r\ncmake -GNinja -DCMAKE_BUILD_TYPE=Debug -DOQS_ENABLE_TEST_CONSTANT_TIME=ON ..\r\nninja\r\ncd ..\r\nSKIP_ALGS='BIKE*,Classic*,Frodo*,HQC*,Kyber*,NTRU*,sntru*,ntru*,LightSaber,Saber,FireSaber,Falcon*,picnic*,Rainbow*,SPHINCS*' python3 tests/test_constant_time.py  --verbose\r\n```\r\n\r\nThis yields the output in the attached file [dilithium_failures.txt](https://github.com/open-quantum-safe/liboqs/files/9264650/dilithium_failures.txt), with a few excerpts below:\r\n\r\n```\r\n. > valgrind --tool=memcheck --gen-suppressions=all --error-exitcode=1 --max-stackframe=20480000 --num-callers=20 --suppressions=tests/constant_time/sig/passes/dilithium --suppressions=tests/constant_time/sig/passes/dilithium-avx2 --suppressions=tests/constant_time/sig/passes/dilithium-aarch64 ./build/tests/test_sig Dilithium2\r\n==13982== Memcheck, a memory error detector\r\n==13982== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==13982== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info\r\n==13982== Command: ./build/tests/test_sig Dilithium2\r\n==13982== \r\n==13982== Thread 2:\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x12EA8D: pqcrystals_dilithium2_avx2_signature (sign.c:290)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x12EB90: pqcrystals_dilithium2_avx2_signature (sign.c:305)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x12EC8C: pqcrystals_dilithium2_avx2_signature (sign.c:317)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x48429FA: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842B6E: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842A11: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842A20: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842B08: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842B0E: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Use of uninitialised value of size 8\r\n==13982==    at 0x4842B33: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Value8\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842B3F: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842B55: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842A55: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842ABC: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Use of uninitialised value of size 8\r\n==13982==    at 0x4842AD9: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Value8\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842AE4: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Conditional jump or move depends on uninitialised value(s)\r\n==13982==    at 0x4842AFD: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Use of uninitialised value of size 8\r\n==13982==    at 0x4842B30: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Value8\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Use of uninitialised value of size 8\r\n==13982==    at 0x4842B60: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Value8\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n==13982== Use of uninitialised value of size 8\r\n==13982==    at 0x4842B63: memmove (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==13982==    by 0x12ECBA: pqcrystals_dilithium2_avx2_signature (sign.c:321)\r\n==13982==    by 0x12E09E: OQS_SIG_dilithium_2_sign (sig_dilithium_2.c:79)\r\n==13982==    by 0x10E16F: OQS_SIG_sign (sig.c:872)\r\n==13982==    by 0x10BEDB: sig_test_correctness (test_sig.c:95)\r\n==13982==    by 0x10C450: test_wrapper (test_sig.c:179)\r\n==13982==    by 0x4B30608: start_thread (pthread_create.c:477)\r\n==13982==    by 0x4C6A132: clone (clone.S:95)\r\n==13982== \r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Value8\r\n   fun:memmove\r\n   fun:pqcrystals_dilithium2_avx2_signature\r\n   fun:OQS_SIG_dilithium_2_sign\r\n   fun:OQS_SIG_sign\r\n   fun:sig_test_correctness\r\n   fun:test_wrapper\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1279/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1279/timeline","performed_via_github_app":null,"state_reason":"completed"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1207287029","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1279#issuecomment-1207287029","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1279","id":1207287029,"node_id":"IC_kwDOA-eq3c5H9bz1","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2022-08-06T21:43:48Z","updated_at":"2022-08-06T21:43:48Z","author_association":"MEMBER","body":"> > I can't tell from the previous suppression files and the commit history exactly how the line numbers of the past map on to the current, so I'm reluctant to just blindly change things without understanding the code.\r\n> \r\n> Agreed, so I did a manual code comparison (see #1283), no automation or blind `valgrind` output line-number acceptance. After updating the passes file this way, all tests ran OK again, so there is a _very high_ likelihood this has been done right. If you'd have time to merge this today, @dstebila , we should see the weekly tests go green again. No need to bother undoubtely sleepless @bhess :-)\r\n\r\nThanks Michael! You made it look so easy -- I must have had a mental block.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1207287029/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-08-06T21:43:48Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
