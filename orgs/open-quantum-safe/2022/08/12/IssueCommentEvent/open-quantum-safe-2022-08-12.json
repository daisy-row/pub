{"id":"23398676000","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/388","id":1336491721,"node_id":"I_kwDOA_fpb85PqT7J","number":388,"title":"Hybrid key exchange with x25519","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"labels":[{"id":431027944,"node_id":"MDU6TGFiZWw0MzEwMjc5NDQ=","url":"https://api.github.com/repos/open-quantum-safe/openssl/labels/question","name":"question","color":"cc317c","default":true,"description":"Further information is requested"},{"id":1135734043,"node_id":"MDU6TGFiZWwxMTM1NzM0MDQz","url":"https://api.github.com/repos/open-quantum-safe/openssl/labels/OpenSSL-111","name":"OpenSSL-111","color":"c918c0","default":false,"description":"Changes specific to OQS-OpenSSL_1_1_1-stable branch"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-08-11T21:07:25Z","updated_at":"2022-08-12T04:45:46Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Do we have support for hybrid key exchange with x25519?  Looking at https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/oqs-template/generate.yml#L75, for example, we list a NID for x25519+kyber512 in the configuration file, but then searching the generated code in the `ssl` directory or in https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/qsc.h, I don't see any reference to x25519 with Kyber or the specific NID in question.  @baentsch any idea?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1212725228","html_url":"https://github.com/open-quantum-safe/openssl/issues/388#issuecomment-1212725228","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388","id":1212725228,"node_id":"IC_kwDOA_fpb85ISLfs","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-08-12T04:45:46Z","updated_at":"2022-08-12T04:45:46Z","author_association":"MEMBER","body":"The listing above is due to the agreement that https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/oqs-template/generate.yml should be **the** central (algorithm/combination) ID definitions file (until there is a standards doc).\r\n\r\nThe reason for those IDs to be listed there is that oqs-provider supports those hybrids: https://github.com/open-quantum-safe/oqs-provider#status and sources that file when generating its code.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1212725228/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-08-12T04:45:46Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23406608619","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/388","id":1336491721,"node_id":"I_kwDOA_fpb85PqT7J","number":388,"title":"Hybrid key exchange with x25519","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"labels":[{"id":431027944,"node_id":"MDU6TGFiZWw0MzEwMjc5NDQ=","url":"https://api.github.com/repos/open-quantum-safe/openssl/labels/question","name":"question","color":"cc317c","default":true,"description":"Further information is requested"},{"id":1135734043,"node_id":"MDU6TGFiZWwxMTM1NzM0MDQz","url":"https://api.github.com/repos/open-quantum-safe/openssl/labels/OpenSSL-111","name":"OpenSSL-111","color":"c918c0","default":false,"description":"Changes specific to OQS-OpenSSL_1_1_1-stable branch"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-08-11T21:07:25Z","updated_at":"2022-08-12T13:26:24Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Do we have support for hybrid key exchange with x25519?  Looking at https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/oqs-template/generate.yml#L75, for example, we list a NID for x25519+kyber512 in the configuration file, but then searching the generated code in the `ssl` directory or in https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/qsc.h, I don't see any reference to x25519 with Kyber or the specific NID in question.  @baentsch any idea?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1213108499","html_url":"https://github.com/open-quantum-safe/openssl/issues/388#issuecomment-1213108499","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388","id":1213108499,"node_id":"IC_kwDOA_fpb85ITpET","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2022-08-12T13:26:23Z","updated_at":"2022-08-12T13:26:23Z","author_association":"MEMBER","body":"But at this point we don't have code generation in OQS-OpenSSL111 that does the x25519 variant, but it is present in oqs-provider?  Indeed the motivation was to be able to test interoperability with Cloudflare's implementation (which does use different group identifiers).","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1213108499/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-08-12T13:26:24Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23407789651","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275","id":1327479465,"node_id":"PR_kwDOA-eq3c48lz53","number":1275,"title":"Addition of stateful hash-based signatures","user":{"login":"kj3moraes","id":25700338,"node_id":"MDQ6VXNlcjI1NzAwMzM4","avatar_url":"https://avatars.githubusercontent.com/u/25700338?v=4","gravatar_id":"","url":"https://api.github.com/users/kj3moraes","html_url":"https://github.com/kj3moraes","followers_url":"https://api.github.com/users/kj3moraes/followers","following_url":"https://api.github.com/users/kj3moraes/following{/other_user}","gists_url":"https://api.github.com/users/kj3moraes/gists{/gist_id}","starred_url":"https://api.github.com/users/kj3moraes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kj3moraes/subscriptions","organizations_url":"https://api.github.com/users/kj3moraes/orgs","repos_url":"https://api.github.com/users/kj3moraes/repos","events_url":"https://api.github.com/users/kj3moraes/events{/privacy}","received_events_url":"https://api.github.com/users/kj3moraes/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2022-08-03T16:14:21Z","updated_at":"2022-08-12T14:25:57Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1275","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1275.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1275.patch","merged_at":null},"body":" ## Addition of XMSS to the codebase\r\n\r\nI have added code for ![XMSS](https://datatracker.ietf.org/doc/html/rfc8391) into the `src/sig_stateful` directory. The algorithm variants supported are :- \r\n* all the XMSS variants (SHA256, SHA512, SHAKE256, SHAKE512)\r\n* all the RFC recommended ![XMSS^MT variants](https://datatracker.ietf.org/doc/html/rfc8391#section-8). \r\n\r\nThe continuous integration tests pass and I have made the respective test files for testing the SIG_STFL API.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1213171002","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275#issuecomment-1213171002","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275","id":1213171002,"node_id":"IC_kwDOA-eq3c5IT4U6","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2022-08-12T14:25:57Z","updated_at":"2022-08-12T14:25:57Z","author_association":"MEMBER","body":"> Would I need to change the names of the verification functions from `sign_open` to `verify` ? The sign_open functions are only used internally by the code in `external/`. I can change the `xmss_namespace.h` file. The reason I'm relunctant is because it would involve a lot of refactoring of the code.\r\n\r\nOkay, if it involves a lot of refactoring then okay to leave it as is. Maybe add a comment noting that it's called sign_open but we've changed the functionality to have detached signatures like in verify.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1213171002/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-08-12T14:25:57Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23408623305","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/388","id":1336491721,"node_id":"I_kwDOA_fpb85PqT7J","number":388,"title":"Hybrid key exchange with x25519","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"labels":[{"id":431027944,"node_id":"MDU6TGFiZWw0MzEwMjc5NDQ=","url":"https://api.github.com/repos/open-quantum-safe/openssl/labels/question","name":"question","color":"cc317c","default":true,"description":"Further information is requested"},{"id":1135734043,"node_id":"MDU6TGFiZWwxMTM1NzM0MDQz","url":"https://api.github.com/repos/open-quantum-safe/openssl/labels/OpenSSL-111","name":"OpenSSL-111","color":"c918c0","default":false,"description":"Changes specific to OQS-OpenSSL_1_1_1-stable branch"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-08-11T21:07:25Z","updated_at":"2022-08-12T15:07:55Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Do we have support for hybrid key exchange with x25519?  Looking at https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/oqs-template/generate.yml#L75, for example, we list a NID for x25519+kyber512 in the configuration file, but then searching the generated code in the `ssl` directory or in https://github.com/open-quantum-safe/openssl/blob/OQS-OpenSSL_1_1_1-stable/qsc.h, I don't see any reference to x25519 with Kyber or the specific NID in question.  @baentsch any idea?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1213215691","html_url":"https://github.com/open-quantum-safe/openssl/issues/388#issuecomment-1213215691","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/388","id":1213215691,"node_id":"IC_kwDOA_fpb85IUDPL","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-08-12T15:07:55Z","updated_at":"2022-08-12T15:07:55Z","author_association":"MEMBER","body":"> we don't have code generation in OQS-OpenSSL111 that does the x25519 variant,\r\n\r\nCorrect.\r\n\r\n> it is present in oqs-provider?\r\n\r\nYes, it is.\r\n\r\n>  Indeed the motivation was to be able to test interoperability with Cloudflare's implementation (which does use different group identifiers).\r\n\r\nYup: I'd also have been curious about such interop (tests) --which would be possible with the provider-- but, as you point out, different IDs makes this a non-starter --> Sounds like it _is_ time to standardize in this space...","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1213215691/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-08-12T15:07:55Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23408797811","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275","id":1327479465,"node_id":"PR_kwDOA-eq3c48lz53","number":1275,"title":"Addition of stateful hash-based signatures","user":{"login":"kj3moraes","id":25700338,"node_id":"MDQ6VXNlcjI1NzAwMzM4","avatar_url":"https://avatars.githubusercontent.com/u/25700338?v=4","gravatar_id":"","url":"https://api.github.com/users/kj3moraes","html_url":"https://github.com/kj3moraes","followers_url":"https://api.github.com/users/kj3moraes/followers","following_url":"https://api.github.com/users/kj3moraes/following{/other_user}","gists_url":"https://api.github.com/users/kj3moraes/gists{/gist_id}","starred_url":"https://api.github.com/users/kj3moraes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kj3moraes/subscriptions","organizations_url":"https://api.github.com/users/kj3moraes/orgs","repos_url":"https://api.github.com/users/kj3moraes/repos","events_url":"https://api.github.com/users/kj3moraes/events{/privacy}","received_events_url":"https://api.github.com/users/kj3moraes/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2022-08-03T16:14:21Z","updated_at":"2022-08-12T15:17:11Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1275","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1275.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1275.patch","merged_at":null},"body":" ## Addition of XMSS to the codebase\r\n\r\nI have added code for ![XMSS](https://datatracker.ietf.org/doc/html/rfc8391) into the `src/sig_stateful` directory. The algorithm variants supported are :- \r\n* all the XMSS variants (SHA256, SHA512, SHAKE256, SHAKE512)\r\n* all the RFC recommended ![XMSS^MT variants](https://datatracker.ietf.org/doc/html/rfc8391#section-8). \r\n\r\nThe continuous integration tests pass and I have made the respective test files for testing the SIG_STFL API.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1213224248","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275#issuecomment-1213224248","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275","id":1213224248,"node_id":"IC_kwDOA-eq3c5IUFU4","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-08-12T15:17:11Z","updated_at":"2022-08-12T15:17:11Z","author_association":"MEMBER","body":"> Would I need to change the names of the verification functions from `sign_open` to `verify` ? The sign_open functions are only used internally by the code in `external/`. I can change the `xmss_namespace.h` file. The reason I'm relunctant is because it would involve a lot of refactoring of the code.\r\n\r\n> Okay, if it involves a lot of refactoring then okay to leave it as is. Maybe add a comment noting that it's called sign_open but we've changed the functionality to have detached signatures like in verify.\r\n\r\nI admit I have not looked in detail at stateful hash-based signatures, so please take my comment with a grain of salt, but it strikes me as unsatisfactory to retain the name \"sign\" for what is (if it is) a \"verify\" operation: Even with a comment (if read) this is confusing. Why would re-naming call for re-factoring? Wouldn't running a simple recursive `sed` (along the lines of `-i 'g/sign_open/sign_verify/g'`) operation over all new code do the trick?\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1213224248/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-08-12T15:17:11Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23408945606","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1288","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1288/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1288/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1288/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1288","id":1335360080,"node_id":"I_kwDOA-eq3c5Pl_pQ","number":1288,"title":"Falcon tests hang on ARM32 when compiled with GCC-12","user":{"login":"vt-alt","id":36664211,"node_id":"MDQ6VXNlcjM2NjY0MjEx","avatar_url":"https://avatars.githubusercontent.com/u/36664211?v=4","gravatar_id":"","url":"https://api.github.com/users/vt-alt","html_url":"https://github.com/vt-alt","followers_url":"https://api.github.com/users/vt-alt/followers","following_url":"https://api.github.com/users/vt-alt/following{/other_user}","gists_url":"https://api.github.com/users/vt-alt/gists{/gist_id}","starred_url":"https://api.github.com/users/vt-alt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vt-alt/subscriptions","organizations_url":"https://api.github.com/users/vt-alt/orgs","repos_url":"https://api.github.com/users/vt-alt/repos","events_url":"https://api.github.com/users/vt-alt/events{/privacy}","received_events_url":"https://api.github.com/users/vt-alt/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2022-08-11T01:13:37Z","updated_at":"2022-08-12T15:25:15Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"On `armv7hf` architecture `0.7.1` and later tests hang more than hour than time out. There are such processes in `ps` output:\r\n```\r\n /usr/src/RPM/BUILD/liboqs-0.7.2/build/tests/test_sig_mem Falcon-1024 0\r\n /usr/src/RPM/BUILD/liboqs-0.7.2/build/tests/kat_sig Falcon-1024\r\n /usr/src/RPM/BUILD/liboqs-0.7.2/build/tests/kat_sig Falcon-512\r\n /usr/src/RPM/BUILD/liboqs-0.7.2/build/tests/test_sig_mem Falcon-512 0\r\n /usr/src/RPM/BUILD/liboqs-0.7.2/build/tests/test_sig Falcon-512\r\n /usr/src/RPM/BUILD/liboqs-0.7.2/build/tests/test_sig Falcon-1024\r\n```\r\nI am unable to see backtraces yet, because our build system does not allow `gdb` to work properly there (becasue of reead-only `/proc`, which I'm requested admins to change later and I will report results). \r\n\r\nps. Raw output is like this:\r\n```\r\nbuilder@armh:~/RPM/BUILD/liboqs-0.7.2$ /usr/src/RPM/BUILD/liboqs-0.7.2/build/tests/test_sig Falcon-512\r\nTesting signature algorithms using liboqs version 0.7.2-rc2\r\nConfiguration info\r\n==================\r\nTarget platform:  armv8l-Linux-5.15.59-std-def-alt1\r\nCompiler:         gcc (12.1.1)\r\nCompile options:  [-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]\r\nOQS version:      0.7.2-rc2\r\nGit commit:       unknown\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1q  5 Jul 2022)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  BUILD_SHARED_LIBS OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=RelWithDebInfo\r\nCPU exts active:\r\n================================================================================\r\nSample computation for signature Falcon-512\r\n================================================================================\r\n```\r\nHangs there.\r\n\r\npps. BTW, there is no GCC warnings when compiling on this arch,","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1288/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1288/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1213231446","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1288#issuecomment-1213231446","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1288","id":1213231446,"node_id":"IC_kwDOA-eq3c5IUHFW","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-08-12T15:25:15Z","updated_at":"2022-08-12T15:25:15Z","author_association":"MEMBER","body":"> adding specific -fno-ipa-modref -fno-ipa-pure-const worked OK\r\n\r\nAny objections/drawbacks for `liboqs` adding these flags to all ARM `gcc` builds to avoid others falling into this trap again? @dstebila ?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1213231446/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-08-12T15:25:15Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23409427521","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1288","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1288/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1288/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1288/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1288","id":1335360080,"node_id":"I_kwDOA-eq3c5Pl_pQ","number":1288,"title":"Falcon tests hang on ARM32 when compiled with GCC-12","user":{"login":"vt-alt","id":36664211,"node_id":"MDQ6VXNlcjM2NjY0MjEx","avatar_url":"https://avatars.githubusercontent.com/u/36664211?v=4","gravatar_id":"","url":"https://api.github.com/users/vt-alt","html_url":"https://github.com/vt-alt","followers_url":"https://api.github.com/users/vt-alt/followers","following_url":"https://api.github.com/users/vt-alt/following{/other_user}","gists_url":"https://api.github.com/users/vt-alt/gists{/gist_id}","starred_url":"https://api.github.com/users/vt-alt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vt-alt/subscriptions","organizations_url":"https://api.github.com/users/vt-alt/orgs","repos_url":"https://api.github.com/users/vt-alt/repos","events_url":"https://api.github.com/users/vt-alt/events{/privacy}","received_events_url":"https://api.github.com/users/vt-alt/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2022-08-11T01:13:37Z","updated_at":"2022-08-12T15:51:50Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"On `armv7hf` architecture `0.7.1` and later tests hang more than hour than time out. There are such processes in `ps` output:\r\n```\r\n /usr/src/RPM/BUILD/liboqs-0.7.2/build/tests/test_sig_mem Falcon-1024 0\r\n /usr/src/RPM/BUILD/liboqs-0.7.2/build/tests/kat_sig Falcon-1024\r\n /usr/src/RPM/BUILD/liboqs-0.7.2/build/tests/kat_sig Falcon-512\r\n /usr/src/RPM/BUILD/liboqs-0.7.2/build/tests/test_sig_mem Falcon-512 0\r\n /usr/src/RPM/BUILD/liboqs-0.7.2/build/tests/test_sig Falcon-512\r\n /usr/src/RPM/BUILD/liboqs-0.7.2/build/tests/test_sig Falcon-1024\r\n```\r\nI am unable to see backtraces yet, because our build system does not allow `gdb` to work properly there (becasue of reead-only `/proc`, which I'm requested admins to change later and I will report results). \r\n\r\nps. Raw output is like this:\r\n```\r\nbuilder@armh:~/RPM/BUILD/liboqs-0.7.2$ /usr/src/RPM/BUILD/liboqs-0.7.2/build/tests/test_sig Falcon-512\r\nTesting signature algorithms using liboqs version 0.7.2-rc2\r\nConfiguration info\r\n==================\r\nTarget platform:  armv8l-Linux-5.15.59-std-def-alt1\r\nCompiler:         gcc (12.1.1)\r\nCompile options:  [-Werror;-Wall;-Wextra;-Wpedantic;-Wstrict-prototypes;-Wshadow;-Wformat=2;-Wfloat-equal;-Wwrite-strings;-Wstrict-overflow;-ggdb3;-Wbad-function-cast]\r\nOQS version:      0.7.2-rc2\r\nGit commit:       unknown\r\nOpenSSL enabled:  Yes (OpenSSL 1.1.1q  5 Jul 2022)\r\nAES:              OpenSSL\r\nSHA-2:            OpenSSL\r\nSHA-3:            C\r\nOQS build flags:  BUILD_SHARED_LIBS OQS_DIST_BUILD OQS_OPT_TARGET=generic CMAKE_BUILD_TYPE=RelWithDebInfo\r\nCPU exts active:\r\n================================================================================\r\nSample computation for signature Falcon-512\r\n================================================================================\r\n```\r\nHangs there.\r\n\r\npps. BTW, there is no GCC warnings when compiling on this arch,","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1288/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1288/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1213262229","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1288#issuecomment-1213262229","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1288","id":1213262229,"node_id":"IC_kwDOA-eq3c5IUOmV","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2022-08-12T15:51:50Z","updated_at":"2022-08-12T15:51:50Z","author_association":"MEMBER","body":"> > adding specific -fno-ipa-modref -fno-ipa-pure-const worked OK\r\n> \r\n> Any objections/drawbacks for `liboqs` adding these flags to all ARM `gcc` builds to avoid others falling into this trap again? @dstebila ?\r\n\r\nI don't know enough to have an opinion, but if you guys are fine with it, then go ahead.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1213262229/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-08-12T15:51:51Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23412173702","type":"IssueCommentEvent","actor":{"id":25700338,"login":"kj3moraes","display_login":"kj3moraes","gravatar_id":"","url":"https://api.github.com/users/kj3moraes","avatar_url":"https://avatars.githubusercontent.com/u/25700338?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275","id":1327479465,"node_id":"PR_kwDOA-eq3c48lz53","number":1275,"title":"Addition of stateful hash-based signatures","user":{"login":"kj3moraes","id":25700338,"node_id":"MDQ6VXNlcjI1NzAwMzM4","avatar_url":"https://avatars.githubusercontent.com/u/25700338?v=4","gravatar_id":"","url":"https://api.github.com/users/kj3moraes","html_url":"https://github.com/kj3moraes","followers_url":"https://api.github.com/users/kj3moraes/followers","following_url":"https://api.github.com/users/kj3moraes/following{/other_user}","gists_url":"https://api.github.com/users/kj3moraes/gists{/gist_id}","starred_url":"https://api.github.com/users/kj3moraes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kj3moraes/subscriptions","organizations_url":"https://api.github.com/users/kj3moraes/orgs","repos_url":"https://api.github.com/users/kj3moraes/repos","events_url":"https://api.github.com/users/kj3moraes/events{/privacy}","received_events_url":"https://api.github.com/users/kj3moraes/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2022-08-03T16:14:21Z","updated_at":"2022-08-12T18:49:39Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1275","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1275.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1275.patch","merged_at":null},"body":" ## Addition of XMSS to the codebase\r\n\r\nI have added code for ![XMSS](https://datatracker.ietf.org/doc/html/rfc8391) into the `src/sig_stateful` directory. The algorithm variants supported are :- \r\n* all the XMSS variants (SHA256, SHA512, SHAKE256, SHAKE512)\r\n* all the RFC recommended ![XMSS^MT variants](https://datatracker.ietf.org/doc/html/rfc8391#section-8). \r\n\r\nThe continuous integration tests pass and I have made the respective test files for testing the SIG_STFL API.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1213418014","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275#issuecomment-1213418014","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275","id":1213418014,"node_id":"IC_kwDOA-eq3c5IU0oe","user":{"login":"kj3moraes","id":25700338,"node_id":"MDQ6VXNlcjI1NzAwMzM4","avatar_url":"https://avatars.githubusercontent.com/u/25700338?v=4","gravatar_id":"","url":"https://api.github.com/users/kj3moraes","html_url":"https://github.com/kj3moraes","followers_url":"https://api.github.com/users/kj3moraes/followers","following_url":"https://api.github.com/users/kj3moraes/following{/other_user}","gists_url":"https://api.github.com/users/kj3moraes/gists{/gist_id}","starred_url":"https://api.github.com/users/kj3moraes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kj3moraes/subscriptions","organizations_url":"https://api.github.com/users/kj3moraes/orgs","repos_url":"https://api.github.com/users/kj3moraes/repos","events_url":"https://api.github.com/users/kj3moraes/events{/privacy}","received_events_url":"https://api.github.com/users/kj3moraes/received_events","type":"User","site_admin":false},"created_at":"2022-08-12T18:49:39Z","updated_at":"2022-08-12T18:49:39Z","author_association":"COLLABORATOR","body":"> Why would re-naming call for re-factoring? Wouldn't running a simple recursive `sed` (along the lines of `-i 'g/sign_open/sign_verify/g'`) operation over all new code do the trick?\r\n\r\nI will try doing this. Thank you @baentsch. Should the name be changed from `sign_open` to `verify` or `sign_open` to `sign_verify` ?\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1213418014/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-08-12T18:49:39Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23412817775","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275","id":1327479465,"node_id":"PR_kwDOA-eq3c48lz53","number":1275,"title":"Addition of stateful hash-based signatures","user":{"login":"kj3moraes","id":25700338,"node_id":"MDQ6VXNlcjI1NzAwMzM4","avatar_url":"https://avatars.githubusercontent.com/u/25700338?v=4","gravatar_id":"","url":"https://api.github.com/users/kj3moraes","html_url":"https://github.com/kj3moraes","followers_url":"https://api.github.com/users/kj3moraes/followers","following_url":"https://api.github.com/users/kj3moraes/following{/other_user}","gists_url":"https://api.github.com/users/kj3moraes/gists{/gist_id}","starred_url":"https://api.github.com/users/kj3moraes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kj3moraes/subscriptions","organizations_url":"https://api.github.com/users/kj3moraes/orgs","repos_url":"https://api.github.com/users/kj3moraes/repos","events_url":"https://api.github.com/users/kj3moraes/events{/privacy}","received_events_url":"https://api.github.com/users/kj3moraes/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2022-08-03T16:14:21Z","updated_at":"2022-08-12T19:35:31Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1275","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1275.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1275.patch","merged_at":null},"body":" ## Addition of XMSS to the codebase\r\n\r\nI have added code for ![XMSS](https://datatracker.ietf.org/doc/html/rfc8391) into the `src/sig_stateful` directory. The algorithm variants supported are :- \r\n* all the XMSS variants (SHA256, SHA512, SHAKE256, SHAKE512)\r\n* all the RFC recommended ![XMSS^MT variants](https://datatracker.ietf.org/doc/html/rfc8391#section-8). \r\n\r\nThe continuous integration tests pass and I have made the respective test files for testing the SIG_STFL API.\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275/timeline","performed_via_github_app":null,"state_reason":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1213451636","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1275#issuecomment-1213451636","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1275","id":1213451636,"node_id":"IC_kwDOA-eq3c5IU810","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2022-08-12T19:35:30Z","updated_at":"2022-08-12T19:35:30Z","author_association":"MEMBER","body":"> I will try doing this. Thank you @baentsch. Should the name be changed from `sign_open` to `verify` or `sign_open` to `sign_verify` ?\r\n\r\n`verify`","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1213451636/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-08-12T19:35:31Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
