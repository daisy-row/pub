{"id":"21846146268","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1210","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1210/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1210/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1210/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1210","id":1235294703,"node_id":"PR_kwDOA-eq3c43ydiv","number":1210,"title":"Adding aarch64 CPU feature detection for FreeBSD","user":{"login":"Martyrshot","id":6541356,"node_id":"MDQ6VXNlcjY1NDEzNTY=","avatar_url":"https://avatars.githubusercontent.com/u/6541356?v=4","gravatar_id":"","url":"https://api.github.com/users/Martyrshot","html_url":"https://github.com/Martyrshot","followers_url":"https://api.github.com/users/Martyrshot/followers","following_url":"https://api.github.com/users/Martyrshot/following{/other_user}","gists_url":"https://api.github.com/users/Martyrshot/gists{/gist_id}","starred_url":"https://api.github.com/users/Martyrshot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Martyrshot/subscriptions","organizations_url":"https://api.github.com/users/Martyrshot/orgs","repos_url":"https://api.github.com/users/Martyrshot/repos","events_url":"https://api.github.com/users/Martyrshot/events{/privacy}","received_events_url":"https://api.github.com/users/Martyrshot/received_events","type":"User","site_admin":false},"labels":[{"id":423520874,"node_id":"MDU6TGFiZWw0MjM1MjA4NzQ=","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/bug","name":"bug","color":"ee0701","default":true,"description":"Something isn't working"},{"id":1168141259,"node_id":"MDU6TGFiZWwxMTY4MTQxMjU5","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/help%20wanted","name":"help wanted","color":"008672","default":true,"description":"Extra attention is needed"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-05-13T14:08:04Z","updated_at":"2022-05-18T05:07:17Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/1210","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1210","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/1210.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/1210.patch","merged_at":null},"body":"<!-- Please give a brief explanation of the purpose of this pull request. -->\r\nThis PR adds aarch64 CPU feature detection support when compiling for FreeBSD.\r\n<!-- Does this PR resolve any issue?  If so, please reference it using automatic-closing keywords like \"Fixes #123.\" -->\r\n\r\n<!-- Please answer the following questions to help manage version and changes across projects. -->\r\n\r\n* [ ] Does this PR change the input/output behaviour of a cryptographic algorithm (i.e., does it change known answer test values)?  (If so, a version bump will be required from *x.y.z* to *x.(y+1).0*.)\r\n* [ ] Does this PR change the the list of algorithms available -- either adding, removing, or renaming?  (If so, PRs in OQS-OpenSSL, OQS-BoringSSL, and OQS-OpenSSH will also be required by the time this is merged.)\r\n\r\n<!-- Once your pull request is ready for review and passing continuous integration tests, please convert from a draft PR to a normal PR, and request a review from one of the OQS core team members. -->\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1210/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1210/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1129571015","html_url":"https://github.com/open-quantum-safe/liboqs/pull/1210#issuecomment-1129571015","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1210","id":1129571015,"node_id":"IC_kwDOA-eq3c5DU-LH","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-05-18T05:07:17Z","updated_at":"2022-05-18T05:07:17Z","author_association":"MEMBER","body":"> It looks like __FreeBSD__ is set (verified by compiling my test c program), so I updated the branch to use that variable. Hopefully that resolves the issue you are experiencing.\r\n\r\nThanks! It does: Unlike `__FREEBSD__` the define `__FreeBSD__` indeed is set so your new code gets compiled now. Unfortunately, compilation now fails like this:\r\n\r\n```\r\nFAILED: src/common/CMakeFiles/common.dir/common.c.o \r\n/usr/bin/cc  -I/usr/ports/security/liboqs/work/.build/include -I/usr/local/include -O2 -pipe  -fstack-protector-strong -fno-strict-aliasing -O2 -pipe  -fstack-protector-strong -fno-strict-aliasing -fPIC -fvisibility=hidden -Werror -Wall -Wextra -Wpedantic -Wno-unused-command-line-argument -O3 -fomit-frame-pointer -Wbad-function-cast -Wcast-qual -Wnarrowing -Wconversion -std=gnu11 -MD -MT src/common/CMakeFiles/common.dir/common.c.o -MF src/common/CMakeFiles/common.dir/common.c.o.d -o src/common/CMakeFiles/common.dir/common.c.o -c /usr/ports/security/liboqs/work/liboqs-0.7.1/src/common/common.c\r\n/usr/ports/security/liboqs/work/liboqs-0.7.1/src/common/common.c:99:19: error: use of GNU statement expression extension [-Werror,-Wgnu-statement-expression]\r\n        uint64_t isar0 = READ_SPECIALREG(id_aa64isar0_el1);\r\n                         ^\r\n/usr/include/machine/armreg.h:63:2: note: expanded from macro 'READ_SPECIALREG'\r\n({      uint64_t _val;                                                  \\\r\n ^\r\n/usr/ports/security/liboqs/work/liboqs-0.7.1/src/common/common.c:106:38: error: use of undeclared identifier 'ID_AA64ISAR0_SHA3_BASE'\r\n        if (ID_AA64ISAR0_SHA3_VAL(isar0) >= ID_AA64ISAR0_SHA3_BASE) {\r\n                                            ^\r\n/usr/ports/security/liboqs/work/liboqs-0.7.1/src/common/common.c:109:6: error: implicit declaration of function 'ID_AA64ISAR0_AdvSIMD_VAL' is invalid in C99 [-Werror,-Wimplicit-function-declaration]\r\n        if (ID_AA64ISAR0_AdvSIMD_VAL(isar0) >= ID_AA64ISAR0_AdvSIMD_BASE) {\r\n            ^\r\n/usr/ports/security/liboqs/work/liboqs-0.7.1/src/common/common.c:109:41: error: use of undeclared identifier 'ID_AA64ISAR0_AdvSIMD_BASE'; did you mean 'ID_AA64ISAR0_AdvSIMD_VAL'?\r\n        if (ID_AA64ISAR0_AdvSIMD_VAL(isar0) >= ID_AA64ISAR0_AdvSIMD_BASE) {\r\n                                               ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n                                               ID_AA64ISAR0_AdvSIMD_VAL\r\n/usr/ports/security/liboqs/work/liboqs-0.7.1/src/common/common.c:109:6: note: 'ID_AA64ISAR0_AdvSIMD_VAL' declared here\r\n        if (ID_AA64ISAR0_AdvSIMD_VAL(isar0) >= ID_AA64ISAR0_AdvSIMD_BASE) {\r\n            ^\r\n4 errors generated.\r\n\r\n```\r\n\r\n--> Looks like the proposed solution is GNU-specific and `-Wall` flags this code.... Have you tried with `clang`?\r\n\r\n```\r\nroot@freebsd:/usr/ports/security/liboqs # cc --version\r\nFreeBSD clang version 13.0.0 (git@github.com:llvm/llvm-project.git llvmorg-13.0.0-0-gd7b669b3a303)\r\nTarget: aarch64-unknown-freebsd13.1\r\nThread model: posix\r\nInstalledDir: /usr/bin\r\n```\r\n\r\nIf you'd want to log in to this VM to have access to the ready-made environment, please send me your ssh public key (or ask @dstebila to add you to the ACL for the OQS-AWS VM named \"Dev-FreeBSD-ARM64\").","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1129571015/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-05-18T05:07:18Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"21854146639","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1213","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1213/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1213/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1213/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1213","id":1238931588,"node_id":"I_kwDOA-eq3c5J2JiE","number":1213,"title":"Add Valgrind to github actions CI/CD","user":{"login":"tbraun96","id":38082993,"node_id":"MDQ6VXNlcjM4MDgyOTkz","avatar_url":"https://avatars.githubusercontent.com/u/38082993?v=4","gravatar_id":"","url":"https://api.github.com/users/tbraun96","html_url":"https://github.com/tbraun96","followers_url":"https://api.github.com/users/tbraun96/followers","following_url":"https://api.github.com/users/tbraun96/following{/other_user}","gists_url":"https://api.github.com/users/tbraun96/gists{/gist_id}","starred_url":"https://api.github.com/users/tbraun96/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tbraun96/subscriptions","organizations_url":"https://api.github.com/users/tbraun96/orgs","repos_url":"https://api.github.com/users/tbraun96/repos","events_url":"https://api.github.com/users/tbraun96/events{/privacy}","received_events_url":"https://api.github.com/users/tbraun96/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-05-17T17:08:12Z","updated_at":"2022-05-18T12:41:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"See example here: https://github.com/tokio-rs/tokio/blob/052355f0649bf54ee1850060a636d045eb7e2bf1/.github/workflows/ci.yml#L127-L160\r\n\r\nBy adding valgrind to the PR merge process, it would ensure that no memory leaks or invalid memory accesses/instructions occur. \r\n\r\nNote: when using the rust `oqs` rust crate that references this core library, I ran valgrind on a binary that attempted all the KEMs, and found that there were memory issues associated with these algorithms.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1213/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1213/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1129957065","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1213#issuecomment-1129957065","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1213","id":1129957065,"node_id":"IC_kwDOA-eq3c5DWcbJ","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-05-18T12:41:09Z","updated_at":"2022-05-18T12:41:09Z","author_association":"MEMBER","body":"Can you list which algorithms cause issues? We already have an open \"memory issue\" with [SPHINCS](https://github.com/open-quantum-safe/liboqs/issues/1038) but probably don't look into it as we don't know whether this algorithm \"survives\" the NIST downselection... But it's nothing one can \"feel good\" about, so your proposal sounds reasonable.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1129957065/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-05-18T12:41:10Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
