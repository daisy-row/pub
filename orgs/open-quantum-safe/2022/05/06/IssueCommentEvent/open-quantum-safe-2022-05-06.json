{"id":"21647380039","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/367","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/367/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/367/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/367/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/367","id":1219737265,"node_id":"I_kwDOA_fpb85Is7ax","number":367,"title":"performance testing of hybrid signature algorithm","user":{"login":"judowha","id":60347669,"node_id":"MDQ6VXNlcjYwMzQ3NjY5","avatar_url":"https://avatars.githubusercontent.com/u/60347669?v=4","gravatar_id":"","url":"https://api.github.com/users/judowha","html_url":"https://github.com/judowha","followers_url":"https://api.github.com/users/judowha/followers","following_url":"https://api.github.com/users/judowha/following{/other_user}","gists_url":"https://api.github.com/users/judowha/gists{/gist_id}","starred_url":"https://api.github.com/users/judowha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/judowha/subscriptions","organizations_url":"https://api.github.com/users/judowha/orgs","repos_url":"https://api.github.com/users/judowha/repos","events_url":"https://api.github.com/users/judowha/events{/privacy}","received_events_url":"https://api.github.com/users/judowha/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2022-04-29T03:42:25Z","updated_at":"2022-05-06T04:48:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi,\r\nI am testing the performance of mutual connection using OpenSSL 1.1.1n on Ubuntu 18.04. Here is my OS information:\r\n`Linux version 5.4.0-109-generic (buildd@ubuntu) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #123~18.04.1-Ubuntu SMP Fri Apr 8 09:48:52 UTC 2022`\r\n\r\nThe certificate chain of a test group is created in this way:\r\n```\r\nRootCA\r\n├── server\r\n│   \r\n└── client\r\n```\r\nIn a test group, both server and client will be signed by the same signature algorithm.\r\n\r\nHere is some of my test result:\r\n- p521_dilithium5\r\n\r\n  > 1475 connections in 20.49s; 71.99 connections/user sec, bytes read 0\r\n  > 1475 connections in 31 real seconds, 0 bytes read per connection\r\n\r\n- p521\r\n\r\n  > 1170 connections in 14.99s; 78.05 connections/user sec, bytes read 0\r\n  > 1170 connections in 31 real seconds, 0 bytes read per connection\r\n\r\nThe result is not as my expectation. In theory, the total connection times of p521_dilithium5 should be less than p521 since p521 has a better performance than p521_dilithium5. Another point is that the user seconds spent should be less than 15s because the server and the client are doing a similar thing during the connection. But here p521_dilithium5 spends 20.49s on the client-side. \r\n\r\nTo be more convinced I reproduce the test on an AWS VM. Here is the VM information:\r\n`Linux version 5.4.0-1071-aws (buildd@lcy02-amd64-020) (gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04)) #76~18.04.1-Ubuntu SMP Mon Mar 28 17:49:57 UTC 2022`\r\n- p521_dilithium5\r\n\r\n  > 1106 connections in 12.92s; 85.60 connections/user sec, bytes read 0\r\n  > 1106 connections in 31 real seconds, 0 bytes read per connection\r\n- p521\r\n\r\n  > 1246 connections in 13.16s; 94.68 connections/user sec, bytes read 0\r\n  > 1246 connections in 31 real seconds, 0 bytes read per connection\r\n\r\nHere the result seems to be much more reasonable. \r\n\r\nNow I am not sure does this problem happens only on my ubuntu system or is it a general problem? I only have one computer with the Ubuntu system so could anyone please help me to reproduce the test on your ubuntu system?  \r\n\r\nHere is my test file: [testFile.zip](https://github.com/open-quantum-safe/openssl/files/8587935/testFile.zip)\r\n\r\nTo run the shell file, you may need to run `chmod777 start_server` and `chmod777 start_test` first\r\n\r\nTo start the server, run:\r\n`./start_server ALGO PROT` e.g. `./start_server prime521v1 4433`\r\n\r\nThen start the test:\r\n`./start_test ALGO PROT` e.g. `./start_test prime521v1 4433`\r\n\r\nThanks a lot if anyone would like to help me! \r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/367/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/367/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1119257394","html_url":"https://github.com/open-quantum-safe/openssl/issues/367#issuecomment-1119257394","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/367","id":1119257394,"node_id":"IC_kwDOA_fpb85CtoMy","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-05-06T04:48:29Z","updated_at":"2022-05-06T04:48:29Z","author_association":"MEMBER","body":"> While in AWS VM, both server and client need to run in the same core so the user seconds for both of them is less than 15s\r\n\r\nIf the VM you use indeed only had 1 core, this is logical. What still somewhat surprises me is that there is parallel processing going on in the handshake execution: I assumed so far it's a lock-step process where one side has to wait for the other to complete. The tests show that this clearly is not the case, though. But this is no OQS-specific issue but a general openssl implementation property. What remains a big question is why more hybrid connections can be established when comparing with the classical algorithm only: The former requires more computing, so should be slower.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/1119257394/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-05-06T04:48:30Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
