{"id":"21723876293","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1209","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1209/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1209/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1209/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1209","id":1231825664,"node_id":"I_kwDOA-eq3c5JbCsA","number":1209,"title":"Timing attacks for unsupported processors ","user":{"login":"DevelopDaily","id":54299975,"node_id":"MDQ6VXNlcjU0Mjk5OTc1","avatar_url":"https://avatars.githubusercontent.com/u/54299975?v=4","gravatar_id":"","url":"https://api.github.com/users/DevelopDaily","html_url":"https://github.com/DevelopDaily","followers_url":"https://api.github.com/users/DevelopDaily/followers","following_url":"https://api.github.com/users/DevelopDaily/following{/other_user}","gists_url":"https://api.github.com/users/DevelopDaily/gists{/gist_id}","starred_url":"https://api.github.com/users/DevelopDaily/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DevelopDaily/subscriptions","organizations_url":"https://api.github.com/users/DevelopDaily/orgs","repos_url":"https://api.github.com/users/DevelopDaily/repos","events_url":"https://api.github.com/users/DevelopDaily/events{/privacy}","received_events_url":"https://api.github.com/users/DevelopDaily/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-05-10T23:56:23Z","updated_at":"2022-05-11T05:08:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"https://github.com/open-quantum-safe/liboqs/blob/9dea0430ed764af2f0728793e783f04e5c0cd32d/CMakeLists.txt#L77\r\n\r\nThat suggests some processor specific code has taken care of timing attacks if the processor is known, say,  `if(CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64|amd64|AMD64\")`\r\n\r\nInstead of reading all the code, I would appreciate very much if you could show me the code of how the timing attacks are avoided if the processor is `x86_64`.\r\n\r\nThe motivation here is to make the `oqs `WASM build, which currently falls under `OQS_PERMIT_UNSUPPORTED_ARCHITECTURE`, as secure as possible.\r\n\r\nThe known limitation of WASM is that it cannot support assembly language. But, I'd like to find out if the assembly-free version of `oqs `would lead to timing attacks inevitably or not.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1209/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1209/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1123191773","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1209#issuecomment-1123191773","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1209","id":1123191773,"node_id":"IC_kwDOA-eq3c5C8ovd","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-05-11T05:08:49Z","updated_at":"2022-05-11T05:08:49Z","author_association":"MEMBER","body":"> That suggests some processor specific code has taken care of timing attacks if the processor is known\r\n\r\nThis seems like an overly broad interpretation: This warning message arguably is just a warning but not a(n implied) guarantee: With the \"standard\"/supported compilers and processors it is a \"known art\" how to generate timing-attack-resistant code. Such statement simply cannot be made for unknown compilers&platforms. @jschanck and @dstebila may want to correct my interpretation, of course.\r\n\r\nIn general, the question whether all code / each algorithm indeed is timing-attack resistant is not something [liboqs guarantees](https://github.com/open-quantum-safe/liboqs#limitations-and-security) let alone can be done by specific code \"avoiding timing attacks\" but indeed must be ensured throughout the code base and within each algorithm. The property is [tested to some degree](https://github.com/open-quantum-safe/liboqs/blob/main/tests/test_constant_time.py) which could suggest a way forward for you: Is it possible to run `test_constant_time.py` under WASM? But then again, a pass only would be a positive indication, not a guarantee along the lines of\r\n\r\n> if the assembly-free version of oqs would lead to timing attacks inevitably or not.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1123191773/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-05-11T05:08:50Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"21731646229","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1209","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1209/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1209/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1209/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1209","id":1231825664,"node_id":"I_kwDOA-eq3c5JbCsA","number":1209,"title":"Timing attacks for unsupported processors ","user":{"login":"DevelopDaily","id":54299975,"node_id":"MDQ6VXNlcjU0Mjk5OTc1","avatar_url":"https://avatars.githubusercontent.com/u/54299975?v=4","gravatar_id":"","url":"https://api.github.com/users/DevelopDaily","html_url":"https://github.com/DevelopDaily","followers_url":"https://api.github.com/users/DevelopDaily/followers","following_url":"https://api.github.com/users/DevelopDaily/following{/other_user}","gists_url":"https://api.github.com/users/DevelopDaily/gists{/gist_id}","starred_url":"https://api.github.com/users/DevelopDaily/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DevelopDaily/subscriptions","organizations_url":"https://api.github.com/users/DevelopDaily/orgs","repos_url":"https://api.github.com/users/DevelopDaily/repos","events_url":"https://api.github.com/users/DevelopDaily/events{/privacy}","received_events_url":"https://api.github.com/users/DevelopDaily/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-05-10T23:56:23Z","updated_at":"2022-05-11T12:32:19Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"https://github.com/open-quantum-safe/liboqs/blob/9dea0430ed764af2f0728793e783f04e5c0cd32d/CMakeLists.txt#L77\r\n\r\nThat suggests some processor specific code has taken care of timing attacks if the processor is known, say,  `if(CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64|amd64|AMD64\")`\r\n\r\nInstead of reading all the code, I would appreciate very much if you could show me the code of how the timing attacks are avoided if the processor is `x86_64`.\r\n\r\nThe motivation here is to make the `oqs `WASM build, which currently falls under `OQS_PERMIT_UNSUPPORTED_ARCHITECTURE`, as secure as possible.\r\n\r\nThe known limitation of WASM is that it cannot support assembly language. But, I'd like to find out if the assembly-free version of `oqs `would lead to timing attacks inevitably or not.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1209/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1209/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1123698917","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1209#issuecomment-1123698917","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1209","id":1123698917,"node_id":"IC_kwDOA-eq3c5C-kjl","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2022-05-11T12:32:19Z","updated_at":"2022-05-11T12:32:19Z","author_association":"MEMBER","body":"> Instead of reading all the code, I would appreciate very much if you could show me the code of how the timing attacks are avoided if the processor is `x86_64`.\r\n\r\nThere's no single method or place where this is done, as there are dozens of algorithms with more implementations, each of which has to handle this issue.\r\n\r\n> The known limitation of WASM is that it cannot support assembly language. But, I'd like to find out if the assembly-free version of `oqs `would lead to timing attacks inevitably or not.\r\n\r\nOur existing toolchain, with `test_constant_time.py` which Michael refers to above, can be used to check for secret-dependent branching in compiled version of the reference implementation, which would be a good first step. But I don't know what promises the compilation process to WASM makes with respect to maintaining such properties.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1123698917/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-05-11T12:32:19Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
