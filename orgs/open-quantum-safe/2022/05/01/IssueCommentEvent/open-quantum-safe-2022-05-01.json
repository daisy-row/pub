{"id":"21561150846","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1206","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1206/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1206/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1206/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1206","id":1217903263,"node_id":"I_kwDOA-eq3c5Il7qf","number":1206,"title":"Adding a DeriveKeyPair functionality","user":{"login":"tedeaton","id":7863838,"node_id":"MDQ6VXNlcjc4NjM4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/7863838?v=4","gravatar_id":"","url":"https://api.github.com/users/tedeaton","html_url":"https://github.com/tedeaton","followers_url":"https://api.github.com/users/tedeaton/followers","following_url":"https://api.github.com/users/tedeaton/following{/other_user}","gists_url":"https://api.github.com/users/tedeaton/gists{/gist_id}","starred_url":"https://api.github.com/users/tedeaton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tedeaton/subscriptions","organizations_url":"https://api.github.com/users/tedeaton/orgs","repos_url":"https://api.github.com/users/tedeaton/repos","events_url":"https://api.github.com/users/tedeaton/events{/privacy}","received_events_url":"https://api.github.com/users/tedeaton/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-04-27T21:30:19Z","updated_at":"2022-05-01T07:08:42Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"When a KEM keypair is derived in liboqs, it relies on randomness using [rand.h](https://github.com/open-quantum-safe/liboqs/blob/main/src/common/rand/rand.h). In some situations, it's useful to generate keypairs deterministically from a seed. When [RFC9180](https://www.rfc-editor.org/rfc/rfc9180#name-cryptographic-dependencies) defines a KEM, they include a `DeriveKeyPair` option to generate keypairs deterministically from a seed. As an example use case, [Messaging Layer Security](https://messaginglayersecurity.rocks/mls-protocol/draft-ietf-mls-protocol.html) makes extensive use of functionality to share multiple keypairs by communicating seeds. I think it would be nice to match RFC9180 and add a functionality to deterministically derive a keypair from a seed.\r\n\r\nThis is kind of possible in liboqs currently. You can set the randomness to use `OQS_RAND_alg_nist_kat`, and derive all the randomness used from a seed, but this is a somewhat imperfect solution for a few reasons:\r\n\r\n- The seed must be exactly 48 bytes\r\n- It references a global variable, resulting in concurrency issues\r\n- Modifying the randomness used is (to my knowledge) not available with any of the liboqs language wrappers\r\n\r\nI'm curious if others think this is a functionality worth adding and if so, what the proper way to tackle it might be. Some schemes, like Kyber, are already constructed in such a way that everything is derived from a seed, but liboqs provides limited ability to set that seed. I suspect the situation for other schemes is much more complex.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1206/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1206/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1114153847","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1206#issuecomment-1114153847","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1206","id":1114153847,"node_id":"IC_kwDOA-eq3c5CaKN3","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-05-01T07:08:42Z","updated_at":"2022-05-01T07:08:42Z","author_association":"MEMBER","body":"> I'm curious if others think this is a functionality worth adding and if so, what the proper way to tackle it might be. \r\n\r\nFor reproducibility of any tests, IMO this is a functionality worth having. But then again, this is what `OQS_randombytes_nist_kat` provides. If this is too limited (48 bytes, concurrency issues), couldn't one simply call `OQS_randombytes_custom_algorithm` with an algorithm of personal choice to get around those issues?\r\n\r\nFinally, if such new RFC-compliant and multicore-capable rand provider is needed (?) and available, why not discuss adding it to the pre-existing rand-sources with a new name and thus make it available to all language-wrappers (assuming `OQS_randombytes_switch_algorithm` is available in all language wrappers)?\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1114153847/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-05-01T07:08:42Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"21562315539","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":288761656,"name":"open-quantum-safe/profiling","url":"https://api.github.com/repos/open-quantum-safe/profiling"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/73","repository_url":"https://api.github.com/repos/open-quantum-safe/profiling","labels_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/73/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/73/comments","events_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/73/events","html_url":"https://github.com/open-quantum-safe/profiling/pull/73","id":1212463375,"node_id":"PR_kwDOETYnOM42oUfO","number":73,"title":"Initial M1 changes","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-04-22T14:53:49Z","updated_at":"2022-05-01T10:55:20Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"draft":true,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/pulls/73","html_url":"https://github.com/open-quantum-safe/profiling/pull/73","diff_url":"https://github.com/open-quantum-safe/profiling/pull/73.diff","patch_url":"https://github.com/open-quantum-safe/profiling/pull/73.patch","merged_at":null},"body":"Fixes (somewhat) #72 -- subject to problems stated there and [here](https://github.com/open-quantum-safe/liboqs/issues/1201)","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/73/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/73/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/comments/1114200699","html_url":"https://github.com/open-quantum-safe/profiling/pull/73#issuecomment-1114200699","issue_url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/73","id":1114200699,"node_id":"IC_kwDOETYnOM5CaVp7","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-05-01T10:55:20Z","updated_at":"2022-05-01T10:55:20Z","author_association":"MEMBER","body":"![grafik](https://user-images.githubusercontent.com/57787676/166142045-0fef5755-1f0c-4ffe-b6a2-1bdc57e1c0ff.png)\r\n\r\nconfirms that different run types (-ref, -noport) are not delivering markedly different results on M1, justifying running only one profiling type on that platform (done/commencing as per May 1, 2022). The same small/nonexistent performance differential can be observed for all algorithms, see [full JSON report](http://localhost:8000/2022-04-29/speed_kem.json). https://github.com/open-quantum-safe/profiling/pull/73/commits/77a392e17c34043fd24d1fcfa69b0878313b3778 contains that logic. The Dockerfile has to be built on an M1 platform and lacking this platform support on CCI requires doing this manually.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/profiling/issues/comments/1114200699/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-05-01T10:55:20Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"21566700490","type":"IssueCommentEvent","actor":{"id":54299975,"login":"DevelopDaily","display_login":"DevelopDaily","gravatar_id":"","url":"https://api.github.com/users/DevelopDaily","avatar_url":"https://avatars.githubusercontent.com/u/54299975?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1199","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1199/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1199/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1199/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1199","id":1194869331,"node_id":"I_kwDOA-eq3c5HOEJT","number":1199,"title":"WASM compatibillity","user":{"login":"tpbraun96","id":93542359,"node_id":"U_kgDOBZNX1w","avatar_url":"https://avatars.githubusercontent.com/u/93542359?v=4","gravatar_id":"","url":"https://api.github.com/users/tpbraun96","html_url":"https://github.com/tpbraun96","followers_url":"https://api.github.com/users/tpbraun96/followers","following_url":"https://api.github.com/users/tpbraun96/following{/other_user}","gists_url":"https://api.github.com/users/tpbraun96/gists{/gist_id}","starred_url":"https://api.github.com/users/tpbraun96/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tpbraun96/subscriptions","organizations_url":"https://api.github.com/users/tpbraun96/orgs","repos_url":"https://api.github.com/users/tpbraun96/repos","events_url":"https://api.github.com/users/tpbraun96/events{/privacy}","received_events_url":"https://api.github.com/users/tpbraun96/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":22,"created_at":"2022-04-06T16:51:35Z","updated_at":"2022-05-01T23:54:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Ideally, this project should be compilable via emscripten to WASM. Adding compatibility and documentation to make this possible should exist.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1199/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1199/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1114370786","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1199#issuecomment-1114370786","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1199","id":1114370786,"node_id":"IC_kwDOA-eq3c5Ca_Li","user":{"login":"DevelopDaily","id":54299975,"node_id":"MDQ6VXNlcjU0Mjk5OTc1","avatar_url":"https://avatars.githubusercontent.com/u/54299975?v=4","gravatar_id":"","url":"https://api.github.com/users/DevelopDaily","html_url":"https://github.com/DevelopDaily","followers_url":"https://api.github.com/users/DevelopDaily/followers","following_url":"https://api.github.com/users/DevelopDaily/following{/other_user}","gists_url":"https://api.github.com/users/DevelopDaily/gists{/gist_id}","starred_url":"https://api.github.com/users/DevelopDaily/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DevelopDaily/subscriptions","organizations_url":"https://api.github.com/users/DevelopDaily/orgs","repos_url":"https://api.github.com/users/DevelopDaily/repos","events_url":"https://api.github.com/users/DevelopDaily/events{/privacy}","received_events_url":"https://api.github.com/users/DevelopDaily/received_events","type":"User","site_admin":false},"created_at":"2022-05-01T23:54:38Z","updated_at":"2022-05-01T23:54:38Z","author_association":"NONE","body":"@baentsch \r\n>... compile openssl (3) for WASM? We could then run classic and QS crypto \"head-to-head\".\r\n\r\nI have built the openssl perfectly. Unfortunately, however, I am afraid a \"head-to-head\" comparison won't be useful because the WASM` openssl speed` is excruciatingly slow (up to minutes and hours) for three reasons: \r\n\r\n- openssl uses assembly language too. After it is disabled, that presumably makes the system very slow\r\n- The openssl benchmark program `speed `itself may contain bugs. They may have manifested themselves spectacularly in WASM runtime.\r\n- openssl may be very old-fashioned - simply not cut out for a modern runtime like WASM\r\n\r\n>... this looks like 5-15% of native performance: Is that expected for WASM code? [Some papers claim the gap should be smaller](https://github.com/WebAssembly/spec/blob/master/papers/pldi2017.pdf).\r\n\r\nPerformance benchmark is a very complex issue, on which I am not an expert. Here is my understanding. The near-native performance claim of WASM is based on pure C/C++ code, which must be well-written and straightforward enough to give a modern compiler a chance to apply its optimization strategy to produce high quality assembly code. It may never beat hand-crafted assembly code in some occasions, but, in most cases, it should outperform its hand-crafted counterparts. I usually refine my C/C++ as much as possible, unless I have to write assembly, as a last resort.\r\n\r\nFor pure C/C++, I did some casual benchmarking on this code:\r\n```\r\n#include <vector>\r\n#include <algorithm>\r\nint main()\r\n{\r\n    std::vector<size_t> v(50000000, 0);\r\n    std::sort(v.begin(), v.end());    \r\n    return 0;\r\n}\r\n```\r\n\r\nNative build and run:\r\n\r\n```\r\nc++ -O3 sort.cpp\r\ntime ./a.out\r\n\r\nreal\t0m5.090s\r\nuser\t0m3.870s\r\nsys\t0m0.678s\r\n```\r\n\r\nWASM build and run:\r\n\r\n```\r\nemcc -O3 -s TOTAL_MEMORY=167772160 -s ALLOW_MEMORY_GROWTH=1 sort.cpp\r\ntime node a.out.js \r\n\r\nreal\t0m1.496s\r\nuser\t0m0.906s\r\nsys\t0m0.367s\r\n```\r\n\r\nAs you can see, the WASM run is actually much faster.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1114370786/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-05-01T23:54:38Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
