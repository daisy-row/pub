{"id":"21605390663","type":"IssueCommentEvent","actor":{"id":54299975,"login":"DevelopDaily","display_login":"DevelopDaily","gravatar_id":"","url":"https://api.github.com/users/DevelopDaily","avatar_url":"https://avatars.githubusercontent.com/u/54299975?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1199","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1199/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1199/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1199/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1199","id":1194869331,"node_id":"I_kwDOA-eq3c5HOEJT","number":1199,"title":"WASM compatibillity","user":{"login":"tpbraun96","id":93542359,"node_id":"U_kgDOBZNX1w","avatar_url":"https://avatars.githubusercontent.com/u/93542359?v=4","gravatar_id":"","url":"https://api.github.com/users/tpbraun96","html_url":"https://github.com/tpbraun96","followers_url":"https://api.github.com/users/tpbraun96/followers","following_url":"https://api.github.com/users/tpbraun96/following{/other_user}","gists_url":"https://api.github.com/users/tpbraun96/gists{/gist_id}","starred_url":"https://api.github.com/users/tpbraun96/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tpbraun96/subscriptions","organizations_url":"https://api.github.com/users/tpbraun96/orgs","repos_url":"https://api.github.com/users/tpbraun96/repos","events_url":"https://api.github.com/users/tpbraun96/events{/privacy}","received_events_url":"https://api.github.com/users/tpbraun96/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":24,"created_at":"2022-04-06T16:51:35Z","updated_at":"2022-05-04T01:44:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Ideally, this project should be compilable via emscripten to WASM. Adding compatibility and documentation to make this possible should exist.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1199/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1199/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1116857586","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1199#issuecomment-1116857586","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1199","id":1116857586,"node_id":"IC_kwDOA-eq3c5CkeTy","user":{"login":"DevelopDaily","id":54299975,"node_id":"MDQ6VXNlcjU0Mjk5OTc1","avatar_url":"https://avatars.githubusercontent.com/u/54299975?v=4","gravatar_id":"","url":"https://api.github.com/users/DevelopDaily","html_url":"https://github.com/DevelopDaily","followers_url":"https://api.github.com/users/DevelopDaily/followers","following_url":"https://api.github.com/users/DevelopDaily/following{/other_user}","gists_url":"https://api.github.com/users/DevelopDaily/gists{/gist_id}","starred_url":"https://api.github.com/users/DevelopDaily/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DevelopDaily/subscriptions","organizations_url":"https://api.github.com/users/DevelopDaily/orgs","repos_url":"https://api.github.com/users/DevelopDaily/repos","events_url":"https://api.github.com/users/DevelopDaily/events{/privacy}","received_events_url":"https://api.github.com/users/DevelopDaily/received_events","type":"User","site_admin":false},"created_at":"2022-05-04T01:44:48Z","updated_at":"2022-05-04T01:44:48Z","author_association":"NONE","body":"@baentsch \r\n>If you use the commands above, it should allow you to compare non-assembly crypto implementations\r\n\r\nWASM run:\r\n```\r\nnode openssl speed -seconds 5 rsa\r\nRSA sign setup failure.  No RSA sign will be done.\r\n00000000:error:020C0100:rsa routines:rsa_ossl_private_encrypt:malloc failure:crypto/rsa/rsa_ossl.c:265:\r\n00000000:error:1C880004:Provider routines:rsa_sign:RSA lib:providers/implementations/signature/rsa_sig.c:652:\r\nRSA verify setup failure.  No RSA verify will be done.\r\nversion: 3.1.0-dev\r\nbuilt on: Tue May  3 02:42:02 2022 UTC\r\noptions: bn(32,32)\r\ncompiler: /home/t/emsdk/upstream/emscripten/emcc  -Wall -O3 -DOPENSSL_USE_NODELETE -DOPENSSL_BUILDING_OPENSSL -DNDEBUG -DOPENSSL_SYS_NETWARE -DSIG_DFL=0 -DSIG_IGN=0 -DHAVE_FORK=0 -DNO_SYSLOG\r\nCPUINFO: N/A\r\n```\r\n\r\n```\r\nopenssl speed -seconds 5 dilithium3\r\nspeed: Unknown algorithm dilithium3\r\n```\r\n\r\nNative run:\r\n```\r\n./openssl speed -seconds 5 rsa\r\nDoing 512 bits private rsa's for 5s: 47362 512 bits private RSA's in 4.92s\r\nDoing 512 bits public rsa's for 5s: 659252 512 bits public RSA's in 4.88s\r\nDoing 1024 bits private rsa's for 5s: 12780 1024 bits private RSA's in 4.91s\r\nDoing 1024 bits public rsa's for 5s: 221195 1024 bits public RSA's in 4.92s\r\nDoing 2048 bits private rsa's for 5s: 2504 2048 bits private RSA's in 4.93s\r\nDoing 2048 bits public rsa's for 5s: 67720 2048 bits public RSA's in 4.95s\r\nDoing 3072 bits private rsa's for 5s: 615 3072 bits private RSA's in 4.92s\r\nDoing 3072 bits public rsa's for 5s: 29578 3072 bits public RSA's in 4.92s\r\nDoing 4096 bits private rsa's for 5s: 271 4096 bits private RSA's in 4.95s\r\nDoing 4096 bits public rsa's for 5s: 17182 4096 bits public RSA's in 4.90s\r\nDoing 7680 bits private rsa's for 5s: 34 7680 bits private RSA's in 4.99s\r\nDoing 7680 bits public rsa's for 5s: 5108 7680 bits public RSA's in 4.95s\r\nDoing 15360 bits private rsa's for 5s: 6 15360 bits private RSA's in 5.49s\r\nDoing 15360 bits public rsa's for 5s: 1295 15360 bits public RSA's in 4.91s\r\nversion: 3.1.0-dev\r\nbuilt on: Sun May  1 18:35:59 2022 UTC\r\noptions: bn(64,64)\r\ncompiler: gcc -fPIC -pthread -m64 -Wa,--noexecstack -Wall -O3 -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_BUILDING_OPENSSL -DNDEBUG\r\nCPUINFO: OPENSSL_ia32cap=0xdef8220b078bffff:0x21\r\n                  sign    verify    sign/s verify/s\r\nrsa  512 bits 0.000104s 0.000007s   9626.4 135092.6\r\nrsa 1024 bits 0.000384s 0.000022s   2602.9  44958.3\r\nrsa 2048 bits 0.001969s 0.000073s    507.9  13680.8\r\nrsa 3072 bits 0.008000s 0.000166s    125.0   6011.8\r\nrsa 4096 bits 0.018266s 0.000285s     54.7   3506.5\r\nrsa 7680 bits 0.146765s 0.000969s      6.8   1031.9\r\nrsa 15360 bits 0.915000s 0.003792s      1.1    263.7\r\n```\r\n\r\n```\r\n./openssl speed -seconds 5 dilithium3\r\nspeed: Unknown algorithm dilithium3\r\n```\r\n\r\nBoth tests failed on the WASM openssl. If you have some other specific commands to run, I can do it. I update the docker file and you can build your own as well.\r\n\r\nDockerfile\r\n```\r\nFROM emscripten/emsdk:latest \r\nRUN apt -y update\r\nRUN apt -y install astyle cmake gcc ninja-build libssl-dev python3-pytest python3-pytest-xdist unzip xsltproc doxygen graphviz python3-yaml\r\nRUN git clone https://github.com/open-quantum-safe/liboqs.git \r\nRUN git clone https://github.com/openssl/openssl.git\r\n```\r\n\r\nIn the docker image, follow this procedure to build:\r\n```\r\ncd /src/liboqs/\r\nmkdir build && cd build\r\nemcmake cmake -GNinja -DOQS_USE_OPENSSL=OFF -DOQS_PERMIT_UNSUPPORTED_ARCHITECTURE=ON ..\r\nemmake ninja\r\ncd /src/openssl/\r\nemconfigure ./Configure linux-generic64 -no-asm -no-threads -static -no-afalgeng -DOPENSSL_SYS_NETWARE -DSIG_DFL=0 -DSIG_IGN=0 -DHAVE_FORK=0 -DNO_SYSLOG\r\nsed -i 's|^CROSS_COMPILE.*$|CROSS_COMPILE=|g' Makefile\r\nemmake make\r\n\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1116857586/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-05-04T01:44:51Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"21617649921","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1201","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1201/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1201/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1201/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1201","id":1206821821,"node_id":"I_kwDOA-eq3c5H7qO9","number":1201,"title":"OQS_DIST_BUILD with strange results on M1","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-04-18T08:37:59Z","updated_at":"2022-05-04T15:55:58Z","closed_at":"2022-05-04T15:55:58Z","author_association":"MEMBER","active_lock_reason":null,"body":"When looking at the performance results at https://openquantumsafe.org/benchmarking/visualization/speed_kem.html, filtering for `aarch64` and `Kyber` (as an algorithm supporting run-time switching), it becomes apparent that setting OQS_DIST_BUILD yields the slowest-running code on that architecture; At first blush I attributed that to \"weak\" CPU features available by the AWS ARM VMs we use for profiling. However, now the same becomes visible when [trying things for M1](https://github.com/open-quantum-safe/profiling/issues/72).\r\n\r\nIsn't this counterintuitive, as this flag should dynamically select the fastest-running code? Especially on M1 silicon not having any optimizations that are _not_ supported, shouldn't code with this flag set be expected to yield performance as high as code with the `OQS_OPT_TARGET=auto` and `OQS_DIST_BUILD=OFF` (the \"-noport\" option in the [benchmarking suite](https://openquantumsafe.org/benchmarking/))?\r\n\r\nOn \"x86_64\" the performance behaviour is as expected: On machines/VMs with CPU features available, code built with `OQS_DIST_BUILD=ON` runs as fast as code with `OQS_OPT_TARGET=auto` (or skylake) and `OQS_DIST_BUILD=OFF`. The slowest performance is visible if `OQS_DIST_BUILD=OFF` and `OQS_OPT_TARGET=generic` (ie., the \"-ref\" setting).\r\n\r\nOn \"aarch64\", to the opposite, as long as `OQS_DIST_BUILD=OFF`, no performance difference can be observed, regardless of the choice of OQS_OPT_TARGET. This in turn means that \"-ref\" and \"-noport\" benchmark numbers are basically the same -- which also is confusing --at least to me--, as one was meant to display performance of reference implementation and the other that of the best optimized code. This then also debunks my initial thought that AWS aarch64 machines do not have all ARM performance features: They clearly do as the performance numbers are (much) higher than with `OQS_DIST_BUILD=ON`.\r\n\r\nThis issue is a continuation of #1146 making me wonder whether #1148 is a correct fix.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1201/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1201/timeline","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1117523291","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1201#issuecomment-1117523291","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1201","id":1117523291,"node_id":"IC_kwDOA-eq3c5CnA1b","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2022-05-04T15:55:58Z","updated_at":"2022-05-04T15:55:58Z","author_association":"MEMBER","body":"As decided in our call: Leave semantics as-is: DIST_BUILD basically behaves as `-mnative` for M1; thus, run profiling only with this setting.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/1117523291/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}},"public":true,"created_at":"2022-05-04T15:55:58Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
