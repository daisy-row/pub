{"id":"23025403368","type":"IssuesEvent","actor":{"id":2735246,"login":"mcarrickscott","display_login":"mcarrickscott","gravatar_id":"","url":"https://api.github.com/users/mcarrickscott","avatar_url":"https://avatars.githubusercontent.com/u/2735246?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/379","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/379/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/379/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/379/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/379","id":1314687842,"node_id":"I_kwDOA_fpb85OXIti","number":379,"title":"Why the \"4 bytes encoding the size of the classical artefact\"","user":{"login":"mcarrickscott","id":2735246,"node_id":"MDQ6VXNlcjI3MzUyNDY=","avatar_url":"https://avatars.githubusercontent.com/u/2735246?v=4","gravatar_id":"","url":"https://api.github.com/users/mcarrickscott","html_url":"https://github.com/mcarrickscott","followers_url":"https://api.github.com/users/mcarrickscott/followers","following_url":"https://api.github.com/users/mcarrickscott/following{/other_user}","gists_url":"https://api.github.com/users/mcarrickscott/gists{/gist_id}","starred_url":"https://api.github.com/users/mcarrickscott/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcarrickscott/subscriptions","organizations_url":"https://api.github.com/users/mcarrickscott/orgs","repos_url":"https://api.github.com/users/mcarrickscott/repos","events_url":"https://api.github.com/users/mcarrickscott/events{/privacy}","received_events_url":"https://api.github.com/users/mcarrickscott/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-07-22T08:50:23Z","updated_at":"2022-07-22T08:50:23Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"In the hybrid case signatures and keys are prefixed with a 4-byte length field, being the length of the \"classical artifact\". So for a p256-dilithium2 hybrid the classical artifact would be p256. However given that we know the overall length, and the fixed length for dilithium2, the encoding length for p256 can already be determined. So the 4-byte field is redundant. Also in the simple non-hybrid case for p256 such a length field was never required, so why is it needed here?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/379/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/379/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2022-07-22T08:50:23Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23026326397","type":"IssuesEvent","actor":{"id":2735246,"login":"mcarrickscott","display_login":"mcarrickscott","gravatar_id":"","url":"https://api.github.com/users/mcarrickscott","avatar_url":"https://avatars.githubusercontent.com/u/2735246?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/380","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/380/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/380/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/380/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/380","id":1314768288,"node_id":"I_kwDOA_fpb85OXcWg","number":380,"title":"p256-Dilithium2 hash function","user":{"login":"mcarrickscott","id":2735246,"node_id":"MDQ6VXNlcjI3MzUyNDY=","avatar_url":"https://avatars.githubusercontent.com/u/2735246?v=4","gravatar_id":"","url":"https://api.github.com/users/mcarrickscott","html_url":"https://github.com/mcarrickscott","followers_url":"https://api.github.com/users/mcarrickscott/followers","following_url":"https://api.github.com/users/mcarrickscott/following{/other_user}","gists_url":"https://api.github.com/users/mcarrickscott/gists{/gist_id}","starred_url":"https://api.github.com/users/mcarrickscott/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcarrickscott/subscriptions","organizations_url":"https://api.github.com/users/mcarrickscott/orgs","repos_url":"https://api.github.com/users/mcarrickscott/repos","events_url":"https://api.github.com/users/mcarrickscott/events{/privacy}","received_events_url":"https://api.github.com/users/mcarrickscott/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-07-22T09:33:13Z","updated_at":"2022-07-22T09:33:13Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"From the documentation* this hybrid should be using SHA2-256 to hash the data before it is signed by p256, but in fact it uses SHA2-384. This may have something to do with the issue around labelling Dilithium2 as level 1 rather than level 2? Personally I would have thought it was level 1, but am happy to be corrected.\r\n\r\n*   In addition to post-quantum (PQ) signatures; we also support classical/PQ hybrids. In that case, a classical and a PQ signature\r\n   are generated on the same data, and the resulting signatures are concatenated; the classical and PQ keys are also concatenated\r\n   when serialized. The signed data is first hashed using the SHA-2 hash function matching the security level of the OQS scheme\r\n   (SHA256 for L1, SHA384 for L2/L3, SHA512 for L4/L5) before being signed by the classical algorithm (which can't support\r\n   arbitrarily long messages), and is passed directly to the OQS signature API.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/380/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/380/timeline","performed_via_github_app":null,"state_reason":null}},"public":true,"created_at":"2022-07-22T09:33:14Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23031621461","type":"IssuesEvent","actor":{"id":82881725,"login":"evil-user","display_login":"evil-user","gravatar_id":"","url":"https://api.github.com/users/evil-user","avatar_url":"https://avatars.githubusercontent.com/u/82881725?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1246","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1246/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1246/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1246/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/1246","id":1293288028,"node_id":"I_kwDOA-eq3c5NFgJc","number":1246,"title":"Unable to compile liboqs as shared library in Openbsd 7.1","user":{"login":"evil-user","id":82881725,"node_id":"MDQ6VXNlcjgyODgxNzI1","avatar_url":"https://avatars.githubusercontent.com/u/82881725?v=4","gravatar_id":"","url":"https://api.github.com/users/evil-user","html_url":"https://github.com/evil-user","followers_url":"https://api.github.com/users/evil-user/followers","following_url":"https://api.github.com/users/evil-user/following{/other_user}","gists_url":"https://api.github.com/users/evil-user/gists{/gist_id}","starred_url":"https://api.github.com/users/evil-user/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evil-user/subscriptions","organizations_url":"https://api.github.com/users/evil-user/orgs","repos_url":"https://api.github.com/users/evil-user/repos","events_url":"https://api.github.com/users/evil-user/events{/privacy}","received_events_url":"https://api.github.com/users/evil-user/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-07-04T15:02:15Z","updated_at":"2022-07-22T14:25:53Z","closed_at":"2022-07-22T14:25:53Z","author_association":"NONE","active_lock_reason":null,"body":"I am following documentation from https://github.com/open-quantum-safe/liboqs/wiki/Platform-specific-notes-for-building-liboqs#cross-compiling and https://openquantumsafe.org/liboqs/getting-started.html.\r\n\r\ni have installed all required dependencies but i get the following error.\r\n\r\n[1/11] Linking C executable tests/speed_sig\r\nFAILED: tests/speed_sig \r\n: && /usr/bin/cc   tests/CMakeFiles/speed_sig.dir/speed_sig.c.o -o tests/speed_sig -L/root/liboqs/build/lib -Wl,-z,origin,-rpath,/root/liboqs/build/lib  -lliboqs.so.0.7.2-dev  -lm  -Wl,-rpath-link,/usr/X11R6/lib:/usr/local/lib && :\r\nld: error: unable to find library -lliboqs.so.0.7.2-dev\r\ncc: error: linker command failed with exit code 1 (use -v to see invocation)\r\n[2/11] Linking C executable tests/test_sig_mem\r\nFAILED: tests/test_sig_mem \r\n: && /usr/bin/cc   tests/CMakeFiles/test_sig_mem.dir/test_sig_mem.c.o -o tests/test_sig_mem -L/root/liboqs/build/lib -Wl,-z,origin,-rpath,/root/liboqs/build/lib  -lliboqs.so.0.7.2-dev  -lm  -Wl,-rpath-link,/usr/X11R6/lib:/usr/local/lib && :\r\nld: error: unable to find library -lliboqs.so.0.7.2-dev\r\ncc: error: linker command failed with exit code 1 (use -v to see invocation)\r\n[3/11] Linking C executable tests/test_kem\r\nFAILED: tests/test_kem \r\n: && /usr/bin/cc   tests/CMakeFiles/test_kem.dir/test_kem.c.o -o tests/test_kem -L/root/liboqs/build/lib -Wl,-z,origin,-rpath,/root/liboqs/build/lib  -lliboqs.so.0.7.2-dev  -lm  -pthread  -Wl,-rpath-link,/usr/X11R6/lib:/usr/local/lib && :\r\nld: error: unable to find library -lliboqs.so.0.7.2-dev\r\ncc: error: linker command failed with exit code 1 (use -v to see invocation)\r\n[4/11] Linking C executable tests/example_sig\r\nFAILED: tests/example_sig \r\n: && /usr/bin/cc   tests/CMakeFiles/example_sig.dir/example_sig.c.o -o tests/example_sig -L/root/liboqs/build/lib -Wl,-z,origin,-rpath,/root/liboqs/build/lib  -lliboqs.so.0.7.2-dev  -lm  -Wl,-rpath-link,/usr/X11R6/lib:/usr/local/lib && :\r\nld: error: unable to find library -lliboqs.so.0.7.2-dev\r\ncc: error: linker command failed with exit code 1 (use -v to see invocation)\r\n[5/11] Linking C executable tests/dump_alg_info\r\nFAILED: tests/dump_alg_info \r\n: && /usr/bin/cc   tests/CMakeFiles/dump_alg_info.dir/dump_alg_info.c.o -o tests/dump_alg_info -L/root/liboqs/build/lib -Wl,-z,origin,-rpath,/root/liboqs/build/lib  -lliboqs.so.0.7.2-dev  -lm  -Wl,-rpath-link,/usr/X11R6/lib:/usr/local/lib && :\r\nld: error: unable to find library -lliboqs.so.0.7.2-dev\r\ncc: error: linker command failed with exit code 1 (use -v to see invocation)\r\n[6/11] Linking C executable tests/test_sig\r\nFAILED: tests/test_sig \r\n: && /usr/bin/cc   tests/CMakeFiles/test_sig.dir/test_sig.c.o -o tests/test_sig -L/root/liboqs/build/lib -Wl,-z,origin,-rpath,/root/liboqs/build/lib  -lliboqs.so.0.7.2-dev  -lm  -pthread  -Wl,-rpath-link,/usr/X11R6/lib:/usr/local/lib && :\r\nld: error: unable to find library -lliboqs.so.0.7.2-dev\r\ncc: error: linker command failed with exit code 1 (use -v to see invocation)\r\nninja: build stopped: subcommand failed.\r\n\r\nI can provide any additional logs if required i am currently using openbsd 7.1 as root user to test liboqs ","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1246/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/1246/timeline","performed_via_github_app":null,"state_reason":"completed"}},"public":true,"created_at":"2022-07-22T14:25:53Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23038453191","type":"IssuesEvent","actor":{"id":2735246,"login":"mcarrickscott","display_login":"mcarrickscott","gravatar_id":"","url":"https://api.github.com/users/mcarrickscott","avatar_url":"https://avatars.githubusercontent.com/u/2735246?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/379","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/379/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/379/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/379/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/379","id":1314687842,"node_id":"I_kwDOA_fpb85OXIti","number":379,"title":"Why the \"4 bytes encoding the size of the classical artefact\"","user":{"login":"mcarrickscott","id":2735246,"node_id":"MDQ6VXNlcjI3MzUyNDY=","avatar_url":"https://avatars.githubusercontent.com/u/2735246?v=4","gravatar_id":"","url":"https://api.github.com/users/mcarrickscott","html_url":"https://github.com/mcarrickscott","followers_url":"https://api.github.com/users/mcarrickscott/followers","following_url":"https://api.github.com/users/mcarrickscott/following{/other_user}","gists_url":"https://api.github.com/users/mcarrickscott/gists{/gist_id}","starred_url":"https://api.github.com/users/mcarrickscott/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcarrickscott/subscriptions","organizations_url":"https://api.github.com/users/mcarrickscott/orgs","repos_url":"https://api.github.com/users/mcarrickscott/repos","events_url":"https://api.github.com/users/mcarrickscott/events{/privacy}","received_events_url":"https://api.github.com/users/mcarrickscott/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-07-22T08:50:23Z","updated_at":"2022-07-22T22:10:26Z","closed_at":"2022-07-22T22:10:26Z","author_association":"NONE","active_lock_reason":null,"body":"In the hybrid case signatures and keys are prefixed with a 4-byte length field, being the length of the \"classical artifact\". So for a p256-dilithium2 hybrid the classical artifact would be p256. However given that we know the overall length, and the fixed length for dilithium2, the encoding length for p256 can already be determined. So the 4-byte field is redundant. Also in the simple non-hybrid case for p256 such a length field was never required, so why is it needed here?","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/379/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/379/timeline","performed_via_github_app":null,"state_reason":"completed"}},"public":true,"created_at":"2022-07-22T22:10:26Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"23038482702","type":"IssuesEvent","actor":{"id":2735246,"login":"mcarrickscott","display_login":"mcarrickscott","gravatar_id":"","url":"https://api.github.com/users/mcarrickscott","avatar_url":"https://avatars.githubusercontent.com/u/2735246?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/380","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/380/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/380/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/380/events","html_url":"https://github.com/open-quantum-safe/openssl/issues/380","id":1314768288,"node_id":"I_kwDOA_fpb85OXcWg","number":380,"title":"p256-Dilithium2 hash function","user":{"login":"mcarrickscott","id":2735246,"node_id":"MDQ6VXNlcjI3MzUyNDY=","avatar_url":"https://avatars.githubusercontent.com/u/2735246?v=4","gravatar_id":"","url":"https://api.github.com/users/mcarrickscott","html_url":"https://github.com/mcarrickscott","followers_url":"https://api.github.com/users/mcarrickscott/followers","following_url":"https://api.github.com/users/mcarrickscott/following{/other_user}","gists_url":"https://api.github.com/users/mcarrickscott/gists{/gist_id}","starred_url":"https://api.github.com/users/mcarrickscott/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mcarrickscott/subscriptions","organizations_url":"https://api.github.com/users/mcarrickscott/orgs","repos_url":"https://api.github.com/users/mcarrickscott/repos","events_url":"https://api.github.com/users/mcarrickscott/events{/privacy}","received_events_url":"https://api.github.com/users/mcarrickscott/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-07-22T09:33:13Z","updated_at":"2022-07-22T22:13:24Z","closed_at":"2022-07-22T22:13:24Z","author_association":"NONE","active_lock_reason":null,"body":"From the documentation* this hybrid should be using SHA2-256 to hash the data before it is signed by p256, but in fact it uses SHA2-384. This may have something to do with the issue around labelling Dilithium2 as level 1 rather than level 2? Personally I would have thought it was level 1, but am happy to be corrected.\r\n\r\n*   In addition to post-quantum (PQ) signatures; we also support classical/PQ hybrids. In that case, a classical and a PQ signature\r\n   are generated on the same data, and the resulting signatures are concatenated; the classical and PQ keys are also concatenated\r\n   when serialized. The signed data is first hashed using the SHA-2 hash function matching the security level of the OQS scheme\r\n   (SHA256 for L1, SHA384 for L2/L3, SHA512 for L4/L5) before being signed by the classical algorithm (which can't support\r\n   arbitrarily long messages), and is passed directly to the OQS signature API.","reactions":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/380/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/380/timeline","performed_via_github_app":null,"state_reason":"completed"}},"public":true,"created_at":"2022-07-22T22:13:24Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
