{"id":"12519069401","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"push_id":5170725535,"size":317,"distinct_size":317,"ref":"refs/heads/master","head":"c2abfb764443c24779daefbd9e6cf7c815e440d0","before":"79dc720f57639aacc09eaa02b3ab1cc4b393b240","commits":[{"sha":"356a9a0895bbda5e78f5627dd546d4f09c380166","author":{"name":"Alexei Lozovsky","email":"7b9769c9c63db7b456a556857e9f88090ee9c9a2@cossacklabs.com"},"message":"Support compilation via emscripten\n\nIt turns out that emcc does not like \"-ggdb\" flag. Disable it if we\ndetect that we're being compiled by Emscripten toolchain (e.g., when\ncompiling to WebAssembly).\n\nChange-Id: Ic6a11251a79cdb370c1bdce48aec5428b2f2f306\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37344\nReviewed-by: Adam Langley <alangley@gmail.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/356a9a0895bbda5e78f5627dd546d4f09c380166"},{"sha":"f7b830d8df9f5578c748aa0283d44c59ea7eeb25","author":{"name":"Adam Langley","email":"db68fba232b2c49ed3e9d3081df349dde7b61dfd@google.com"},"message":"Revert \"Fix VS build when assembler is enabled\"\n\nThis reverts commit 791f2822b25da0f69afc2aaa3d13c865af06fa82.\n\nThe use of $<COMPILE_LANGUAGE:CXX> causes issues for the Visual Studio\noutput of CMake[1] and the original CMake bug[2] was fixed in 3.13.0.\n\n[1] https://github.com/grpc/grpc/pull/20100#issuecomment-528817457\n[2] https://gitlab.kitware.com/cmake/cmake/merge_requests/2179\n\nChange-Id: I74ec9d258d2c068e0c58d97deda8aa3794d387e5\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37364\nCommit-Queue: Adam Langley <agl@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/f7b830d8df9f5578c748aa0283d44c59ea7eeb25"},{"sha":"5ce7022394055e183c12368778d361461fe90a6e","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Const-correct EC_KEY_set_public_key_affine_coordinates.\n\nChange-Id: I8f4dd4b0164ec93b6134e406017a74e49e805b02\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37384\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/5ce7022394055e183c12368778d361461fe90a6e"},{"sha":"e60b080dda138e1dd02d99fb34641ac22e46c85d","author":{"name":"Pete Bentley","email":"4ad6ef1507c646b7bd8f3d71664e20545e19fcc7@google.com"},"message":"Only write self test flag files if an environment variable is set.\n\nPrevents arbitrary processes linked against libcrypto, which run\nbefore the self test binaries, from triggering SELinux audit logs.\n\nFails safe. I.e. default is not to write a flag file which in turn\nwill mean all processes loading libcrypto run a full set of KAT tests\nuntil the variable is set.\n\nAlternative considered:  Use a weak gloabl symbol containing the flag\n(defaulting to \"don't write\") and override in the self test binaries.\nHowever at the very least this would need to be in a separate object\nfile other than bcm.o to prevent local symbol resolution, so unsure\nif that would be acceptable.\n\nChange-Id: I32b20699bdd7ecaff06fc5f79b213d9a9d5f6253\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37404\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/e60b080dda138e1dd02d99fb34641ac22e46c85d"},{"sha":"25e36da50fe74b8b44b3ba5018d5d554d72e7813","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Add benchmarks for AES block operations.\n\nWhile not the most important operation, it is used in QUIC packet number\nencryption.\n\nChange-Id: I13a04e7a24d90c30804bb6020547d6060e1e7e87\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37424\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/25e36da50fe74b8b44b3ba5018d5d554d72e7813"},{"sha":"5588ec7a8bab22a9a7abff8584bcb9e2552c0697","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Correct comments for x86_64 _vpaes_encrypt_core_2x.\n\nThe prose and the register listing didn't match. (I suspect I wrote the\nregister listing before I decided which preheat registers to preserve.)\n\nChange-Id: Ib461573ea50fdf5a806266c22805f6ba3470a6ec\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37425\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/5588ec7a8bab22a9a7abff8584bcb9e2552c0697"},{"sha":"68fb23864515a93dbc2783e518db1a91a4d6d45b","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Add vpaes-armv7.pl and replace non-parallel modes.\n\nThis is translated from vpaes-armv8.pl. See top of the new file for\ndetails. Unfortunately, vpaes's performance is disappointing here. The\nvpaes paper notes NEON's vector permutation instructions are not very\nfast. But this is now constant-time.\n\nParallel modes, notably CTR derivatives, are performance-sensitive and\nworth further work. (They currently use bsaes.) Thus this CL only\nreplaces non-parallel uses, which currently use a variable-time\ntable-based implementation.\n\nNote QUIC packet number encryption will do a single one-off AES block\noperation per packet and use this file. But the single-block speeds\nbelow should be fine for a per-packet operation.\n\nAlternatives considered: I toyed with BearSSL's 32-bit C bitsliced\nimplementation, but it appears to be slower than this implementation.\n\nCortex-A53 (Raspberry Pi 3 Model B+)\nBefore:\nDid 124000 AES-128-CBC-SHA1 (16 bytes) seal operations in 1005644us (123304.1 ops/sec): 2.0 MB/s\nDid 45000 AES-128-CBC-SHA1 (256 bytes) seal operations in 1009513us (44575.9 ops/sec): 11.4 MB/s\nDid 12000 AES-128-CBC-SHA1 (1350 bytes) seal operations in 1009735us (11884.3 ops/sec): 16.0 MB/s\nDid 2266 AES-128-CBC-SHA1 (8192 bytes) seal operations in 1060631us (2136.5 ops/sec): 17.5 MB/s\nDid 1078 AES-128-CBC-SHA1 (16384 bytes) seal operations in 1002268us (1075.6 ops/sec): 17.6 MB/s\nDid 114000 AES-256-CBC-SHA1 (16 bytes) seal operations in 1004576us (113480.7 ops/sec): 1.8 MB/s\nDid 38000 AES-256-CBC-SHA1 (256 bytes) seal operations in 1001777us (37932.6 ops/sec): 9.7 MB/s\nDid 9999 AES-256-CBC-SHA1 (1350 bytes) seal operations in 1028518us (9721.8 ops/sec): 13.1 MB/s\nDid 1892 AES-256-CBC-SHA1 (8192 bytes) seal operations in 1095702us (1726.7 ops/sec): 14.1 MB/s\nDid 902 AES-256-CBC-SHA1 (16384 bytes) seal operations in 1038989us (868.2 ops/sec): 14.2 MB/s\nDid 2094000 AES-128 encrypt setup operations in 1000296us (2093380.4 ops/sec)\nDid 1505000 AES-128 encrypt operations in 1000596us (1504103.6 ops/sec)\nDid 465000 AES-128 decrypt setup operations in 1000354us (464835.4 ops/sec)\nDid 1468000 AES-128 decrypt operations in 1000178us (1467738.7 ops/sec)\nDid 1751000 AES-256 encrypt setup operations in 1000189us (1750669.1 ops/sec)\nDid 1113000 AES-256 encrypt operations in 1000004us (1112995.5 ops/sec)\nDid 339000 AES-256 decrypt setup operations in 1002970us (337996.2 ops/sec)\nDid 1103000 AES-256 decrypt operations in 1000882us (1102028.0 ops/sec)\n\nAfter:\nDid 119000 AES-128-CBC-SHA1 (16 bytes) seal operations in 1000259us (118969.2 ops/sec): 1.9 MB/s [-5.0%]\nDid 39000 AES-128-CBC-SHA1 (256 bytes) seal operations in 1001341us (38947.8 ops/sec): 10.0 MB/s [-12.3%]\nDid 10571 AES-128-CBC-SHA1 (1350 bytes) seal operations in 1067614us (9901.5 ops/sec): 13.4 MB/s [-16.3%]\nDid 1903 AES-128-CBC-SHA1 (8192 bytes) seal operations in 1090907us (1744.4 ops/sec): 14.3 MB/s [-18.3%]\nDid 957 AES-128-CBC-SHA1 (16384 bytes) seal operations in 1093380us (875.3 ops/sec): 14.3 MB/s [-18.8%]\nDid 108000 AES-256-CBC-SHA1 (16 bytes) seal operations in 1005090us (107453.1 ops/sec): 1.7 MB/s [-5.6%]\nDid 33000 AES-256-CBC-SHA1 (256 bytes) seal operations in 1026530us (32147.1 ops/sec): 8.2 MB/s [-15.5%]\nDid 8393 AES-256-CBC-SHA1 (1350 bytes) seal operations in 1064768us (7882.5 ops/sec): 10.6 MB/s [-19.1%]\nDid 1496 AES-256-CBC-SHA1 (8192 bytes) seal operations in 1090316us (1372.1 ops/sec): 11.2 MB/s [-20.6%]\nDid 737 AES-256-CBC-SHA1 (16384 bytes) seal operations in 1070396us (688.5 ops/sec): 11.3 MB/s [-20.4%]\nDid 695000 AES-128 encrypt setup operations in 1000325us (694774.2 ops/sec) [-66.8%]\nDid 1043000 AES-128 encrypt operations in 1000568us (1042407.9 ops/sec) [-30.7%]\nDid 495000 AES-128 decrypt setup operations in 1000680us (494663.6 ops/sec) [-6.4%]\nDid 743000 AES-128 decrypt operations in 1000892us (742337.8 ops/sec) [-49.4%]\nDid 550000 AES-256 encrypt setup operations in 1000228us (549874.6 ops/sec) [-68.6%]\nDid 786000 AES-256 encrypt operations in 1000978us (785232.0 ops/sec) [-29.4%]\nDid 377000 AES-256 decrypt setup operations in 1002252us (376152.9 ops/sec) [-11.3%]\nDid 547000 AES-256 decrypt operations in 1000168us (546908.1 ops/sec) [-50.3%]\n\nBug: 266\nChange-Id: Ia5f9c90bcf5e713e40cacc954c604a6ffb432d6c\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37426\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/68fb23864515a93dbc2783e518db1a91a4d6d45b"},{"sha":"7d4b13b445b1e505c45b0f927b3221dbf8c47c4a","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Add NEON vpaes-to-bsaes key converters.\n\nThis was translated from\nhttps://boringssl-review.googlesource.com/c/boringssl/+/33588\n\nvpaes is disappointing on NEON, but we have no constant-time key\nschedule functions for bsaes. Implement key conversion functions.\n\nBug: 256\nChange-Id: Icf5fd6a9a948b8fb18f7a0cdd60a1c4d57bb9332\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37427\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/7d4b13b445b1e505c45b0f927b3221dbf8c47c4a"},{"sha":"701d95a2a83aaaa9a75741202867ce3f8a3bf8aa","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Use vpaes + conversion to setup CBC decrypt on NEON.\n\nOur bsaes CBC decrypt implementation does not need a block128_f, so we\ncan just convert the key once and move on.\n\nBug: 256\nChange-Id: Ie96571a479c74734a12318c2210066eb7be0971c\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37428\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/701d95a2a83aaaa9a75741202867ce3f8a3bf8aa"},{"sha":"ccaee0a64c053bcc799f00bde42e7e29bda02dec","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Use a mix of bsaes and vpaes for CTR on NEON.\n\ntl;dr: AES is now constant-time on 32-bit ARM with NEON. Combined with\nall the past work, we now have constant-time AES and GHASH on ARM and\nx86 chips, 32-bit and 64-bit, provided NEON (required by Chrome on\nAndroid, aside from https://crbug.com/341598) or SSSE3 (almost all\nChrome on Windows users) is available!\n\nCTR-like bsaes modes is harder to resolve than CBC decryption. They use\nboth bulk (ctr128_f) and one-off (block128_f) operations. We currently\nuse ctr128_f of bsaes and block128_f of aes_nohw (not constant-time),\nwhich hits 22.0 MB/s on my test chip.\n\nImplement a vpaes/bsaes hybrid to get the best of both worlds. The key\nis kept in vpaes form and, when the input is large enough, we convert\nthe key to bsaes on-demand. This retains bsaes performance, but with no\nvariable-time gaps.\n\nAlternatives considered:\n\n- Convert to bsaes form immediately and only use bsaes. This makes the\n  one-off block128_f calls very expensive. One 8-block batch of\n  bsaes_ctr32_encrypt_blocks costs as much as 5.76 vpaes_encrypt calls.\n\n- Do the above, but fold the one-off calls into bsaes batches because\n  GCM is parallelizable. This is a mess with the current internal\n  structure and doesn't apply to, e.g., CCM.\n\n- Drop bsaes in favor of vpaes. However, even with\n  vpaes_ctr32_encrypt_blocks, vpaes is 15.5 MB/s. The hybrid is a 40%\n  win on an important platform.\n\n- Try to narrow the gap, as we did for x86_64, with a \"2x\" optimization.\n  I attempted this here but the register pressure was tricky. (x86_64\n  was already tight and NEON can't address memory in vtbl.) If I ignored\n  this (gives wrong answer), the gap was still 20-25%. Perf here is\n  slower overall (20 MB/s for old ARM vs 120-140 MB/s for old x86_64),\n  so that gap is scarier.\n\nI retained vpaes_ctr32_encrypt_blocks because it's fairly compact (only\n84 bytes assembled), though it's less important in the bsaes hybrid.\n\nCortex-A53 (Raspberry Pi 3 Model B+)\nBefore:\nDid 267000 AES-128-GCM (16 bytes) seal operations in 2004871us (133175.7 ops/sec): 2.1 MB/s\nDid 135000 AES-128-GCM (256 bytes) seal operations in 2013825us (67036.6 ops/sec): 17.2 MB/s\nDid 31000 AES-128-GCM (1350 bytes) seal operations in 2059039us (15055.6 ops/sec): 20.3 MB/s\nDid 5565 AES-128-GCM (8192 bytes) seal operations in 2073607us (2683.7 ops/sec): 22.0 MB/s\nDid 2709 AES-128-GCM (16384 bytes) seal operations in 2020264us (1340.9 ops/sec): 22.0 MB/s\nDid 209000 AES-256-GCM (16 bytes) seal operations in 2005654us (104205.4 ops/sec): 1.7 MB/s\nDid 109000 AES-256-GCM (256 bytes) seal operations in 2011293us (54194.0 ops/sec): 13.9 MB/s\nDid 25000 AES-256-GCM (1350 bytes) seal operations in 2082385us (12005.5 ops/sec): 16.2 MB/s\nDid 4452 AES-256-GCM (8192 bytes) seal operations in 2080729us (2139.6 ops/sec): 17.5 MB/s\nDid 2226 AES-256-GCM (16384 bytes) seal operations in 2079819us (1070.3 ops/sec): 17.5 MB/s\n\nAfter:\nDid 542000 AES-128-GCM (16 bytes) seal operations in 2003408us (270539.0 ops/sec): 4.3 MB/s [+104.8%]\nDid 124000 AES-128-GCM (256 bytes) seal operations in 2012579us (61612.5 ops/sec): 15.8 MB/s [-8.1%]\nDid 30000 AES-128-GCM (1350 bytes) seal operations in 2020636us (14846.8 ops/sec): 20.0 MB/s [-1.5%]\nDid 5502 AES-128-GCM (8192 bytes) seal operations in 2068807us (2659.5 ops/sec): 21.8 MB/s [-0.9%]\nDid 2772 AES-128-GCM (16384 bytes) seal operations in 2085176us (1329.4 ops/sec): 21.8 MB/s [-0.9%]\nDid 459000 AES-256-GCM (16 bytes) seal operations in 2003587us (229089.1 ops/sec): 3.7 MB/s [+117.6%]\nDid 100000 AES-256-GCM (256 bytes) seal operations in 2018311us (49546.4 ops/sec): 12.7 MB/s [-8.6%]\nDid 24000 AES-256-GCM (1350 bytes) seal operations in 2026975us (11840.3 ops/sec): 16.0 MB/s [-1.2%]\nDid 4410 AES-256-GCM (8192 bytes) seal operations in 2079581us (2120.6 ops/sec): 17.4 MB/s [-0.6%]\nDid 2226 AES-256-GCM (16384 bytes) seal operations in 2099318us (1060.3 ops/sec): 17.4 MB/s [-0.6%]\n\nBug: 256\nChange-Id: Ib74ab7e63974d3ddae8ce5fc35c9b44e73dce305\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37429\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/ccaee0a64c053bcc799f00bde42e7e29bda02dec"},{"sha":"f4d8b969200f1ee2dd872ffb85802e6a0976afe7","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Use ScopedEVP_AEAD_CTX in ImplDispatchTest.AEAD_AES_GCM.\n\nEVP_AEAD_CTX_cleanup is often a no-op now that the data is embedded, but\nbest to be tidy.\n\nChange-Id: I1ba56e5e36d6e69ae1ba07e40c4a7bda7329fa79\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37430\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/f4d8b969200f1ee2dd872ffb85802e6a0976afe7"},{"sha":"68489e6da597cd7e1507124ed776a23a1a5525ae","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Update build tools.\n\nChange-Id: Ifce1fc2802e3d3badb3f08ae65c2bbf3c9434d07\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37464\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/68489e6da597cd7e1507124ed776a23a1a5525ae"},{"sha":"b82f945ebcc9252ea79d2df9e38ee45afae9535c","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Use the Go 1.13 standard library ed25519.\n\nLess code to carry around.\n\nChange-Id: Ia5397f992e3cbaf0a868ed51c02154c6f5805205\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37465\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/b82f945ebcc9252ea79d2df9e38ee45afae9535c"},{"sha":"ec92ec471cd78b236613151d5cd8a43b260a286c","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Parse explicit EC curves more strictly.\n\nWycheproof has a series of ECDH tests for whether we reject misspelled\nexplicit versions of named curves in public keys, including the wrong\ncofactor. We pass those tests easily because we reject those in public\nkeys altogether, consistent with RFC 5480.\n\nHowever, we do parse explicit curves for private keys, for compatibility\nwith keys produced by older OpenSSLs with unfortunate defaults. Were\nthat parser enabled for public keys too, we would trip some of these\nWycheproof tests because we ignore the cofactor.\n\nTighten the parser up. If the cofactor is not one, ignore the curve.\nAlso syntax-check the seed, even though we ignore it.\n\nChange-Id: I39936e027a72d2dc5532beb2407575ad8042d4c9\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37484\nCommit-Queue: Adam Langley <agl@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/ec92ec471cd78b236613151d5cd8a43b260a286c"},{"sha":"012a4442658e8f1393f8835e01937cdaf4b30235","author":{"name":"Shelley Vohr","email":"538074086ff53bf5b857e9515c16f69c965be33f@gmail.com"},"message":"Add AES-256 CFB to libdecrepit.\n\nElectron builds Node.js with BoringSSL. They want to match OpenSSL as\nmuch as possible and thus have a patch[1] that adds AES-256 CFB mode.\nHowever, that patch makes libcrypto depend on libdecrepit, which can't\nbe done in general. This change lands the AES-256 CFB support in\nlibdecrepit without the libcrypto bit and, in order for BoringSSL to\nremain consistent, without advertising support in\nEVP_CIPHER_do_all_sorted. This will let Electron reduce the size of\ntheir patch a bit.\n\n[1] https://github.com/electron/electron/blob/master/patches/boringssl/expose_aes-cfb.patch\n\nChange-Id: If628d22a595b354623439c587542e414e43e4045\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37264\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/012a4442658e8f1393f8835e01937cdaf4b30235"},{"sha":"0142c87a2627e01170052952e142601e029eefcf","author":{"name":"Adam Langley","email":"db68fba232b2c49ed3e9d3081df349dde7b61dfd@google.com"},"message":"Add AES-192-GCM support to EVP_AEAD.\n\n(But don't use it for anything new; interop only.)\n\nChange-Id: I59dfb0d3fd4745b5f8d75aa38f7846431d3348c3\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37444\nReviewed-by: David Benjamin <davidben@google.com>\nCommit-Queue: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/0142c87a2627e01170052952e142601e029eefcf"},{"sha":"053880d3f77e8ae04dfeecacd08260267269cf76","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Fix vpaes-armv7.pl in ARM mode.\n\nThis file runs against the limit of ARMv7's ADR pseudo-instruction. ADR\nexpands to an ADD or SUB of the pc register to find an address. That\nimmediate must fit in ARM's encoding scheme: 8 bits of constant and 4\nbits of rotation. This means larger values must be more aligned.\n\nARM additionally has two encodings, ARM and Thumb mode. Our assembly\nfiles may use either encoding (do we actually need to support this?). In\nARM mode, the distances get large enough to require 16-byte alignment.\nMoving constants closer to their use resolves most of this, but common\nconstants in _vpaes_consts are used by the whole file. Affected ADR\ninstructions must be placed at 8 mod 16 (the pc register is 8 ahead).\nInstructions with this constraint have been commented.\n\nFor details on ARM's immediate value encoding scheme, see\nhttps://alisdair.mcdiarmid.org/arm-immediate-value-encoding/\n\nUpdate-Note: See b/141080375\nChange-Id: Iadac36d800bb45901b513055fcc28a3a60f9060c\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37524\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/053880d3f77e8ae04dfeecacd08260267269cf76"},{"sha":"a7d9ac2af4684747c4524cbeba9737b04dce3e3e","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Trigger a build on the ARM mode builder.\n\nChecking that it works right.\n\nChange-Id: If27b127bc3d78dc96d6636ba5b4b3c0316366939\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37527\nReviewed-by: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/a7d9ac2af4684747c4524cbeba9737b04dce3e3e"},{"sha":"0c4d013916f854e5cc3df1689f6f2ca18a8f8424","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Replace BIO_printf with ASN1_STRING_print in GENERAL_NAME_print\n\n(Imported from upstream's 8479e9e97354add3c562670db66b5f8151dc3b2e.)\n\nChange-Id: I55843a519b9b361de1b175c09382bbf18d4acfff\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37584\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/0c4d013916f854e5cc3df1689f6f2ca18a8f8424"},{"sha":"98e848aa3428b640a9dbcf181fb94f0edf3d38a1","author":{"name":"Shelley Vohr","email":"538074086ff53bf5b857e9515c16f69c965be33f@gmail.com"},"message":"Add XOF compilation compatibility flags\n\nThis CL adds compatibility flags for XOF digests in service of easing\ncompatibility between OpenSSL and BoringSSL. See this logic in Node:\nhttps://github.com/nodejs/node/blob/master/src/node_crypto.cc#L4599-L4611\n\nChange-Id: I7f12bed8fb1ea2d9e49dba14ed0c4c819596c70d\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37564\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/98e848aa3428b640a9dbcf181fb94f0edf3d38a1"}]},"public":true,"created_at":"2020-06-03T13:55:08Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"12519076802","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":218087071,"name":"open-quantum-safe/oqs-demos","url":"https://api.github.com/repos/open-quantum-safe/oqs-demos"},"payload":{"push_id":5170729403,"size":1,"distinct_size":1,"ref":"refs/heads/master","head":"591d240366966fa670c748fa9215006acde5788c","before":"028c0e7a39fe77bb5256014fabf189272eba44fe","commits":[{"sha":"591d240366966fa670c748fa9215006acde5788c","author":{"name":"xvzcf","email":"0d09a926d00eb6e4de1be873a121117412a307d0@users.noreply.github.com"},"message":"Updated Chromium instructions. (#32)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/commits/591d240366966fa670c748fa9215006acde5788c"}]},"public":true,"created_at":"2020-06-03T13:55:47Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"12520402338","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"push_id":5171411761,"size":1,"distinct_size":1,"ref":"refs/heads/fixes","head":"8cf50d35137115686e640674c87d208db9149406","before":"a76ae690d9ee257e3fa61f28d7f73ac8a1d2f5db","commits":[{"sha":"8cf50d35137115686e640674c87d208db9149406","author":{"name":"xvzcf","email":"0d09a926d00eb6e4de1be873a121117412a307d0@users.noreply.github.com"},"message":"Moving away from busy waits.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/8cf50d35137115686e640674c87d208db9149406"}]},"public":true,"created_at":"2020-06-03T15:48:52Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"12520583869","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"push_id":5171505037,"size":1,"distinct_size":1,"ref":"refs/heads/fixes","head":"16f10fb9fdbb19f29aa91aa7018128aac8c0a92c","before":"8cf50d35137115686e640674c87d208db9149406","commits":[{"sha":"16f10fb9fdbb19f29aa91aa7018128aac8c0a92c","author":{"name":"xvzcf","email":"0d09a926d00eb6e4de1be873a121117412a307d0@users.noreply.github.com"},"message":"Moving away from busy waits.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/16f10fb9fdbb19f29aa91aa7018128aac8c0a92c"}]},"public":true,"created_at":"2020-06-03T16:05:12Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"12521122294","type":"PushEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":218087071,"name":"open-quantum-safe/oqs-demos","url":"https://api.github.com/repos/open-quantum-safe/oqs-demos"},"payload":{"push_id":5171779836,"size":1,"distinct_size":1,"ref":"refs/heads/master","head":"4916628fbdfc762d3f35f63ceeba3d2fea96f084","before":"591d240366966fa670c748fa9215006acde5788c","commits":[{"sha":"4916628fbdfc762d3f35f63ceeba3d2fea96f084","author":{"name":"Michael Baentsch","email":"89a7750c63a2a70a7f0f74740e03cfc4501a2bdb@users.noreply.github.com"},"message":"httpd switched to alpine (#31)\n\n* httpd switched to alpine\r\n\r\n* further optimized size: Thanks @dstebila!","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/commits/4916628fbdfc762d3f35f63ceeba3d2fea96f084"}]},"public":true,"created_at":"2020-06-03T16:59:00Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"12521530457","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"push_id":5171949563,"size":1,"distinct_size":1,"ref":"refs/heads/fixes","head":"6b9c0eaaed04322524394c20d171d6e9c37766c2","before":"16f10fb9fdbb19f29aa91aa7018128aac8c0a92c","commits":[{"sha":"6b9c0eaaed04322524394c20d171d6e9c37766c2","author":{"name":"xvzcf","email":"0d09a926d00eb6e4de1be873a121117412a307d0@users.noreply.github.com"},"message":"Fixing interop tests.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/6b9c0eaaed04322524394c20d171d6e9c37766c2"}]},"public":true,"created_at":"2020-06-03T17:32:49Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"12521834244","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"push_id":5172106035,"size":1,"distinct_size":1,"ref":"refs/heads/fixes","head":"b539f836b7b7be1b6e72ac52044b3b15196dc916","before":"6b9c0eaaed04322524394c20d171d6e9c37766c2","commits":[{"sha":"b539f836b7b7be1b6e72ac52044b3b15196dc916","author":{"name":"xvzcf","email":"0d09a926d00eb6e4de1be873a121117412a307d0@users.noreply.github.com"},"message":"Fixing interop tests.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/b539f836b7b7be1b6e72ac52044b3b15196dc916"}]},"public":true,"created_at":"2020-06-03T18:05:22Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"12521930459","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"push_id":5172156282,"size":1,"distinct_size":1,"ref":"refs/heads/fixes","head":"45a32dd2daec29fe8e0be3503496c5d773b1cd49","before":"b539f836b7b7be1b6e72ac52044b3b15196dc916","commits":[{"sha":"45a32dd2daec29fe8e0be3503496c5d773b1cd49","author":{"name":"xvzcf","email":"0d09a926d00eb6e4de1be873a121117412a307d0@users.noreply.github.com"},"message":"Fixing interop tests.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/45a32dd2daec29fe8e0be3503496c5d773b1cd49"}]},"public":true,"created_at":"2020-06-03T18:15:37Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"12522492039","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"push_id":5172444010,"size":2,"distinct_size":2,"ref":"refs/heads/fixes","head":"a72030d022e557c6d2cfb69c40a70bb6543e32bd","before":"45a32dd2daec29fe8e0be3503496c5d773b1cd49","commits":[{"sha":"d325a8d10e621c7b30857f67fdd71a18c6013928","author":{"name":"xvzcf","email":"0d09a926d00eb6e4de1be873a121117412a307d0@users.noreply.github.com"},"message":"Moved macOS job to nightly because of how long it takes","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/d325a8d10e621c7b30857f67fdd71a18c6013928"},{"sha":"a72030d022e557c6d2cfb69c40a70bb6543e32bd","author":{"name":"xvzcf","email":"0d09a926d00eb6e4de1be873a121117412a307d0@users.noreply.github.com"},"message":"Slight refactoring.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/a72030d022e557c6d2cfb69c40a70bb6543e32bd"}]},"public":true,"created_at":"2020-06-03T19:16:27Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"12522963884","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"push_id":5172690419,"size":1,"distinct_size":1,"ref":"refs/heads/OQS-OpenSSL_1_1_1-stable","head":"ad81ab99ca5704c64dbb4145cd2b3705b87ffbd1","before":"9666eda687817fe4776054c981bbbb61dc5afd47","commits":[{"sha":"ad81ab99ca5704c64dbb4145cd2b3705b87ffbd1","author":{"name":"xvzcf","email":"0d09a926d00eb6e4de1be873a121117412a307d0@users.noreply.github.com"},"message":"Refactored test suite (#208).","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/ad81ab99ca5704c64dbb4145cd2b3705b87ffbd1"}]},"public":true,"created_at":"2020-06-03T20:09:47Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"12523385341","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"push_id":5172905856,"size":1,"distinct_size":1,"ref":"refs/heads/master","head":"7cdc19c51a590c0a953dfe1faac6e17edc28fcd9","before":"c2abfb764443c24779daefbd9e6cf7c815e440d0","commits":[{"sha":"7cdc19c51a590c0a953dfe1faac6e17edc28fcd9","author":{"name":"xvzcf","email":"0d09a926d00eb6e4de1be873a121117412a307d0@users.noreply.github.com"},"message":"NTRU-HRSS-701 has level 3 security, not level 1.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/7cdc19c51a590c0a953dfe1faac6e17edc28fcd9"}]},"public":true,"created_at":"2020-06-03T20:57:59Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"12523910379","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"push_id":5173176600,"size":1,"distinct_size":1,"ref":"refs/heads/OQS-OpenSSL_1_1_1-stable","head":"13a128fe342636993d62622b87dc60dfe7801d7d","before":"ad81ab99ca5704c64dbb4145cd2b3705b87ffbd1","commits":[{"sha":"13a128fe342636993d62622b87dc60dfe7801d7d","author":{"name":"Michael Baentsch","email":"89a7750c63a2a70a7f0f74740e03cfc4501a2bdb@users.noreply.github.com"},"message":"Introduced NIST security level dependent KEM hybrids (#207).","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/13a128fe342636993d62622b87dc60dfe7801d7d"}]},"public":true,"created_at":"2020-06-03T22:04:28Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
