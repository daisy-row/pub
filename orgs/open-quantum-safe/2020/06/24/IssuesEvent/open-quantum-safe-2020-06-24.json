{"id":"12723230796","type":"IssuesEvent","actor":{"id":6188943,"login":"vsoftco","display_login":"vsoftco","gravatar_id":"","url":"https://api.github.com/users/vsoftco","avatar_url":"https://avatars.githubusercontent.com/u/6188943?"},"repo":{"id":215630242,"name":"open-quantum-safe/liboqs-go","url":"https://api.github.com/repos/open-quantum-safe/liboqs-go"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/4","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/4/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/4/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs-go/issues/4/events","html_url":"https://github.com/open-quantum-safe/liboqs-go/issues/4","id":638211765,"node_id":"MDU6SXNzdWU2MzgyMTE3NjU=","number":4,"title":"Add \"interface\" to oqs.go for easy KEMS/Signature management","user":{"login":"saholmes","id":41784476,"node_id":"MDQ6VXNlcjQxNzg0NDc2","avatar_url":"https://avatars3.githubusercontent.com/u/41784476?v=4","gravatar_id":"","url":"https://api.github.com/users/saholmes","html_url":"https://github.com/saholmes","followers_url":"https://api.github.com/users/saholmes/followers","following_url":"https://api.github.com/users/saholmes/following{/other_user}","gists_url":"https://api.github.com/users/saholmes/gists{/gist_id}","starred_url":"https://api.github.com/users/saholmes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/saholmes/subscriptions","organizations_url":"https://api.github.com/users/saholmes/orgs","repos_url":"https://api.github.com/users/saholmes/repos","events_url":"https://api.github.com/users/saholmes/events{/privacy}","received_events_url":"https://api.github.com/users/saholmes/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-06-13T18:47:54Z","updated_at":"2020-06-24T15:30:24Z","closed_at":"2020-06-24T15:30:24Z","author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\n\r\nI have been using ECDSA.go and elliptic.curve.  In these libraries there is an interface to enable easier usage of public and private keys.  This could be useful to allow coding irrespective of the size and types of input for public and private keys.\r\n\r\ncrypto/eliptic\r\n\r\ntype Curve interface {\r\n    // Params returns the parameters for the curve.\r\n    Params() *CurveParams\r\n    // IsOnCurve reports whether the given (x,y) lies on the curve.\r\n    IsOnCurve(x, y *big.Int) bool\r\n    // Add returns the sum of (x1,y1) and (x2,y2)\r\n    Add(x1, y1, x2, y2 *big.Int) (x, y *big.Int)\r\n    // Double returns 2*(x,y)\r\n    Double(x1, y1 *big.Int) (x, y *big.Int)\r\n    // ScalarMult returns k*(Bx,By) where k is a number in big-endian form.\r\n    ScalarMult(x1, y1 *big.Int, k []byte) (x, y *big.Int)\r\n    // ScalarBaseMult returns k*G, where G is the base point of the group\r\n    // and k is an integer in big-endian form.\r\n    ScalarBaseMult(k []byte) (x, y *big.Int)\r\n}\r\n\r\nECDSA\r\n\r\nimport \"crypto/ecdsa\"\r\n\r\ntype PublicKey struct {\r\n    elliptic.Curve\r\n    X, Y *big.Int\r\n}\r\n\r\nCould add interface to oqs.go\r\n\r\n"}},"public":true,"created_at":"2020-06-24T15:30:24Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
