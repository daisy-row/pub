{"id":"14359071995","type":"IssuesEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/73","id":750232166,"node_id":"MDU6SXNzdWU3NTAyMzIxNjY=","number":73,"title":"ssh-keygen generates P-256 keys for p384_rainbowiiicclassic and p521_rainbowvcclassic when referring to them by short name","user":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars3.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2020-11-25T01:16:42Z","updated_at":"2020-11-30T15:11:29Z","closed_at":"2020-11-30T15:11:29Z","author_association":"NONE","active_lock_reason":null,"body":"Keys of these two types generated by ssh-keygen cause ssh to complain \"invalid format\" when provided for client authentication. Keys for the pure-PQ versions of these algorithms work fine, as do keys for p256_rainbowiaclassic.\r\n\r\nSetup for the experiment:\r\n\r\n1. `ssh-keygen -t RAINBOWIACLASSIC -q -N \"\" -f id_rainbowiaclassic`\r\n2. `ssh-keygen -t RAINBOWIIICCLASSIC -q -N \"\" -f id_rainbowiiicclassic`\r\n3. `ssh-keygen -t RAINBOWVCCLASSIC -q -N \"\" -f id_rainbowvcclassic`\r\n4. `ssh-keygen -t P256_RAINBOWIACLASSIC -q -N \"\" -f id_p256_rainbowiaclassic`\r\n5. `ssh-keygen -t P384_RAINBOWIIICCLASSIC -q -N \"\" -f id_p384_rainbowiiicclassic`\r\n6. `ssh-keygen -t P521_RAINBOWVCCLASSIC -q -N \"\" -f id_p521_rainbowvcclassic`\r\n7. `cat id_*.pub >/tmp/authorized_keys`\r\n\r\nOQS-OpenSSH is installed in ~/build/openssh. \r\n\r\nI first attempted this with liboqs built at the 0.4.0 tag (open-quantum-safe/liboqs@02fddd93) and openssh is built at \"Added NTRU-Prime. #68\" (0e49ae9c). I then attempted it with liboqs at its current tip \"Sync with PQClean\" (open-quantum-safe/liboqs@1ad950ac) and openssh at its current tip \"Add HQC round 3\" (0f0b045b). Both exhibited the same results given below.\r\n\r\nServer command line: \r\n`~/build/openssh/sbin/sshd -d -d -d -p 1234 -f ~/build/openssh/sshd_config -o AuthorizedKeysFile=/tmp/authorized_keys -o PubkeyAcceptedKeyTypes=ssh-rainbowiaclassic,ssh-rainbowiiicclassic,ssh-rainbowvcclassic,ssh-p256-rainbowiaclassic,ssh-p384-rainbowiiicclassic,ssh-p521-rainbowvcclassic -o StrictModes=no -h ~/build/openssh/ssh_host_rsa_key`\r\n\r\nClient command line (in directory where ssh-keygen outputs are present): \r\n`ssh -v -p 1234 127.0.0.1 -F ~/build/openssh/ssh_config -o PubkeyAcceptedKeyTypes=ssh-rainbowiaclassic,ssh-rainbowiiicclassic,ssh-rainbowvcclassic,ssh-p256-rainbowiaclassic,ssh-p384-rainbowiiicclassic,ssh-p521-rainbowvcclassic -o StrictHostKeyChecking=no -i ${KEY} ls` \r\nwhere `${KEY}` is one of: `./id_rainbowiaclassic` `./id_rainbowiiicclassic` `./id_rainbowvcclassic` `./id_p256_rainbowiaclassic` `./id_p384_rainbowiiicclassic` `./id_p521_rainbowvcclassic`\r\n\r\nExpected results: key is accepted each time, and `ls` command is executed. In particular, note this snippet from the client debug output (output for p256_rainbowiaclassic shown):\r\n```\r\ndebug1: Will attempt key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: publickey\r\ndebug1: Offering public key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: Server accepts key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: Authentication succeeded (publickey).\r\nAuthenticated to 127.0.0.1 ([127.0.0.1]:1234).\r\n```\r\n\r\nActual results for p384_rainbowiiicclassic and p521_rainbowvcclassic (output is for p521_rainbowvcclassic, but p384_rainbowiiiclassic exhibits the same behavior with just the filenames different):\r\n```\r\ndebug1: Will attempt key: ./id_p521_rainbowvcclassic  explicit\r\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: publickey\r\ndebug1: Trying private key: ./id_p521_rainbowvcclassic\r\nLoad key \"./id_p521_rainbowvcclassic\": invalid format\r\ndebug1: Next authentication method: keyboard-interactive\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: password\r\nkkane@127.0.0.1's password: \r\n```\r\n\r\nInterestingly, a hash fingerprint is shown for the key types that do work, but not for the ones that do not. There is also a noticeable delay of a few seconds after it prints `debug1: Trying private key: ./id_p521_rainbowvcclassic` which is a line that does not appear in the successful trace. ","performed_via_github_app":null}},"public":true,"created_at":"2020-11-30T15:11:30Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
