{"id":"14153964636","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/624","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/624/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/624/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/624/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/624","id":568081903,"node_id":"MDU6SXNzdWU1NjgwODE5MDM=","number":624,"title":"Graceful runtime CPU feature handling","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars1.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[{"id":423520878,"node_id":"MDU6TGFiZWw0MjM1MjA4Nzg=","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":"New feature or request"},{"id":1876026231,"node_id":"MDU6TGFiZWwxODc2MDI2MjMx","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/future-work","name":"future-work","color":"cccccc","default":false,"description":"Will not be fixed in current release cycle"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2020-02-20T06:32:28Z","updated_at":"2020-11-11T10:33:08Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Ensure all code is designed such that it can not only be configured at compile time to deal with different CPU feature sets (e.g., presence/absence of AVX2) but also handle those gracefully at runtime, e.g, by automatically falling back to a non-optimised version of the same functionality.\r\n\r\nIn other words, all code compiled with, e.g., `-mavx2` should also run without error on CPUs that do *not* have support for all features (AVX2 in this example).\r\n\r\nTo help with this, we will integrate the [CPU features](https://github.com/google/cpu_features) library and for starters will add warnings if the library is running on a CPU with a feature set different from the one encountered during build (reducing the surprise when one encounters an `illegal instruction exception` during execution until this issue is fully addressed :-)\r\n\r\nEdited by @dstebila to add:\r\n\r\n- [X] Use cpu\\_features instead of \\_\\_builtin\\_cpu\r\n- [X] Update copy-from-pqclean schemes to do runtime detection\r\n- [ ] Runtime detection for SHA-3 using  [XKCP](https://github.com/XKCP/XKCP)\r\n- [ ] Runtime detection for Frodo\r\n- [ ] Runtime detection for SIKE\r\n- [ ] Runtime detection for BIKE\r\n- [ ] Runtime detection for qTesla\r\n- [ ] Runtime detection for Picnic\r\n- [x] Runtime detection for AES","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/725343582","html_url":"https://github.com/open-quantum-safe/liboqs/issues/624#issuecomment-725343582","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/624","id":725343582,"node_id":"MDEyOklzc3VlQ29tbWVudDcyNTM0MzU4Mg==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars1.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2020-11-11T10:33:07Z","updated_at":"2020-11-11T10:33:07Z","author_association":"MEMBER","body":"As agreed in last week's discussion with @xvzcf and @dstebila, I reviewed whether it'd be straightforward to do runtime CPU feature \"guarding\" as done for the PQClean algorithms for the remaining algorithms listed above. The answer is: \"Not really\": In some cases I do not see a single place where such switch could easily be introduced (picnic: various places exist that are #ifdef'd to CPU features; BIKE: It seems the method there is to simply use different functions with the same symbol for optimized/\"hot\" functions (activating the right one for the given feature set). In both cases, I'd consider it hard-to-impossible to create a variant containing both types of code, optimized and ref, to enable the feature this issue calls for). In some cases performance improvement by CPU-feature activation doesn't really yield significant improvements (SIKE, SIDH, Frodo), further making this effort pretty much futile.\r\nIn sum, I'd argue we leave things as they are right now, communicate to the teams whose algorithms could benefit from such \"portability enhancement\" a link to this issue as well as a link to the [Wiki article](https://github.com/open-quantum-safe/liboqs/wiki/Customizing-liboqs#oqs_portable_build) asking for their interest to provide this feature also for their algorithms and either close or put this issue into \"future work\" state.","performed_via_github_app":null}},"public":true,"created_at":"2020-11-11T10:33:08Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
