{"id":"14313678419","type":"IssueCommentEvent","actor":{"id":974662,"login":"thomwiggers","display_login":"thomwiggers","gravatar_id":"","url":"https://api.github.com/users/thomwiggers","avatar_url":"https://avatars.githubusercontent.com/u/974662?"},"repo":{"id":252143304,"name":"open-quantum-safe/liboqs-rust","url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/12","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/12/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/12/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/12/events","html_url":"https://github.com/open-quantum-safe/liboqs-rust/issues/12","id":746743958,"node_id":"MDU6SXNzdWU3NDY3NDM5NTg=","number":12,"title":"Make Result<> versions of deserializing functions","user":{"login":"thomwiggers","id":974662,"node_id":"MDQ6VXNlcjk3NDY2Mg==","avatar_url":"https://avatars1.githubusercontent.com/u/974662?v=4","gravatar_id":"","url":"https://api.github.com/users/thomwiggers","html_url":"https://github.com/thomwiggers","followers_url":"https://api.github.com/users/thomwiggers/followers","following_url":"https://api.github.com/users/thomwiggers/following{/other_user}","gists_url":"https://api.github.com/users/thomwiggers/gists{/gist_id}","starred_url":"https://api.github.com/users/thomwiggers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thomwiggers/subscriptions","organizations_url":"https://api.github.com/users/thomwiggers/orgs","repos_url":"https://api.github.com/users/thomwiggers/repos","events_url":"https://api.github.com/users/thomwiggers/events{/privacy}","received_events_url":"https://api.github.com/users/thomwiggers/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-11-19T16:40:25Z","updated_at":"2020-11-25T13:02:26Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Functions like `ciphertext_from_bytes` should really not panic on user input.","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/comments/733693246","html_url":"https://github.com/open-quantum-safe/liboqs-rust/issues/12#issuecomment-733693246","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs-rust/issues/12","id":733693246,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzY5MzI0Ng==","user":{"login":"thomwiggers","id":974662,"node_id":"MDQ6VXNlcjk3NDY2Mg==","avatar_url":"https://avatars1.githubusercontent.com/u/974662?v=4","gravatar_id":"","url":"https://api.github.com/users/thomwiggers","html_url":"https://github.com/thomwiggers","followers_url":"https://api.github.com/users/thomwiggers/followers","following_url":"https://api.github.com/users/thomwiggers/following{/other_user}","gists_url":"https://api.github.com/users/thomwiggers/gists{/gist_id}","starred_url":"https://api.github.com/users/thomwiggers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thomwiggers/subscriptions","organizations_url":"https://api.github.com/users/thomwiggers/orgs","repos_url":"https://api.github.com/users/thomwiggers/repos","events_url":"https://api.github.com/users/thomwiggers/events{/privacy}","received_events_url":"https://api.github.com/users/thomwiggers/received_events","type":"User","site_admin":false},"created_at":"2020-11-25T13:02:26Z","updated_at":"2020-11-25T13:02:26Z","author_association":"MEMBER","body":"Implemented by #13 ","performed_via_github_app":null}},"public":true,"created_at":"2020-11-25T13:02:26Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14315752621","type":"IssueCommentEvent","actor":{"id":10732757,"login":"crest42","display_login":"crest42","gravatar_id":"","url":"https://api.github.com/users/crest42","avatar_url":"https://avatars.githubusercontent.com/u/10732757?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/257","id":747756242,"node_id":"MDExOlB1bGxSZXF1ZXN0NTI0OTIwMDYx","number":257,"title":"Fixes duplicate curve_list check with OQS algorithms","user":{"login":"crest42","id":10732757,"node_id":"MDQ6VXNlcjEwNzMyNzU3","avatar_url":"https://avatars3.githubusercontent.com/u/10732757?v=4","gravatar_id":"","url":"https://api.github.com/users/crest42","html_url":"https://github.com/crest42","followers_url":"https://api.github.com/users/crest42/followers","following_url":"https://api.github.com/users/crest42/following{/other_user}","gists_url":"https://api.github.com/users/crest42/gists{/gist_id}","starred_url":"https://api.github.com/users/crest42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/crest42/subscriptions","organizations_url":"https://api.github.com/users/crest42/orgs","repos_url":"https://api.github.com/users/crest42/repos","events_url":"https://api.github.com/users/crest42/events{/privacy}","received_events_url":"https://api.github.com/users/crest42/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-11-20T19:55:48Z","updated_at":"2020-11-25T15:42:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/257","html_url":"https://github.com/open-quantum-safe/openssl/pull/257","diff_url":"https://github.com/open-quantum-safe/openssl/pull/257.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/257.patch"},"body":"Fixes #256\r\n\r\nAs stated in the issue, I've tried to preserve compatibility by keeping the curve_id in the returned groups for OQS algos\r\n\r\nUsing an array for the dup_list is far from optimal, but allows to keep the changes simple while preserving the duplicate check. \r\n\r\nI am happy for any suggestions on how to solve this in a better way.\r\n\r\nRobin","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/733784518","html_url":"https://github.com/open-quantum-safe/openssl/pull/257#issuecomment-733784518","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257","id":733784518,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzc4NDUxOA==","user":{"login":"crest42","id":10732757,"node_id":"MDQ6VXNlcjEwNzMyNzU3","avatar_url":"https://avatars3.githubusercontent.com/u/10732757?v=4","gravatar_id":"","url":"https://api.github.com/users/crest42","html_url":"https://github.com/crest42","followers_url":"https://api.github.com/users/crest42/followers","following_url":"https://api.github.com/users/crest42/following{/other_user}","gists_url":"https://api.github.com/users/crest42/gists{/gist_id}","starred_url":"https://api.github.com/users/crest42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/crest42/subscriptions","organizations_url":"https://api.github.com/users/crest42/orgs","repos_url":"https://api.github.com/users/crest42/repos","events_url":"https://api.github.com/users/crest42/events{/privacy}","received_events_url":"https://api.github.com/users/crest42/received_events","type":"User","site_admin":false},"created_at":"2020-11-25T15:42:44Z","updated_at":"2020-11-25T15:42:44Z","author_association":"NONE","body":"Rebased to current OQS-OpenSSL_1_1_1-stable","performed_via_github_app":null}},"public":true,"created_at":"2020-11-25T15:42:44Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14315776175","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/257","id":747756242,"node_id":"MDExOlB1bGxSZXF1ZXN0NTI0OTIwMDYx","number":257,"title":"Fixes duplicate curve_list check with OQS algorithms","user":{"login":"crest42","id":10732757,"node_id":"MDQ6VXNlcjEwNzMyNzU3","avatar_url":"https://avatars3.githubusercontent.com/u/10732757?v=4","gravatar_id":"","url":"https://api.github.com/users/crest42","html_url":"https://github.com/crest42","followers_url":"https://api.github.com/users/crest42/followers","following_url":"https://api.github.com/users/crest42/following{/other_user}","gists_url":"https://api.github.com/users/crest42/gists{/gist_id}","starred_url":"https://api.github.com/users/crest42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/crest42/subscriptions","organizations_url":"https://api.github.com/users/crest42/orgs","repos_url":"https://api.github.com/users/crest42/repos","events_url":"https://api.github.com/users/crest42/events{/privacy}","received_events_url":"https://api.github.com/users/crest42/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-11-20T19:55:48Z","updated_at":"2020-11-25T15:44:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/257","html_url":"https://github.com/open-quantum-safe/openssl/pull/257","diff_url":"https://github.com/open-quantum-safe/openssl/pull/257.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/257.patch"},"body":"Fixes #256\r\n\r\nAs stated in the issue, I've tried to preserve compatibility by keeping the curve_id in the returned groups for OQS algos\r\n\r\nUsing an array for the dup_list is far from optimal, but allows to keep the changes simple while preserving the duplicate check. \r\n\r\nI am happy for any suggestions on how to solve this in a better way.\r\n\r\nRobin","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/733785603","html_url":"https://github.com/open-quantum-safe/openssl/pull/257#issuecomment-733785603","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257","id":733785603,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzc4NTYwMw==","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars0.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2020-11-25T15:44:29Z","updated_at":"2020-11-25T15:44:29Z","author_association":"MEMBER","body":"In terms of the \"unauthorized\" CI builds, this is because you're on a fork, and the CI is configured to not pass build secrets to forks.  Looking into what the right way to resolve this...","performed_via_github_app":null}},"public":true,"created_at":"2020-11-25T15:44:29Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14315811057","type":"IssueCommentEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/42","repository_url":"https://api.github.com/repos/open-quantum-safe/boringssl","labels_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/42/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/42/comments","events_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/42/events","html_url":"https://github.com/open-quantum-safe/boringssl/issues/42","id":743064022,"node_id":"MDU6SXNzdWU3NDMwNjQwMjI=","number":42,"title":"Boringssl client and server error ","user":{"login":"prchander","id":54725951,"node_id":"MDQ6VXNlcjU0NzI1OTUx","avatar_url":"https://avatars1.githubusercontent.com/u/54725951?v=4","gravatar_id":"","url":"https://api.github.com/users/prchander","html_url":"https://github.com/prchander","followers_url":"https://api.github.com/users/prchander/followers","following_url":"https://api.github.com/users/prchander/following{/other_user}","gists_url":"https://api.github.com/users/prchander/gists{/gist_id}","starred_url":"https://api.github.com/users/prchander/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/prchander/subscriptions","organizations_url":"https://api.github.com/users/prchander/orgs","repos_url":"https://api.github.com/users/prchander/repos","events_url":"https://api.github.com/users/prchander/events{/privacy}","received_events_url":"https://api.github.com/users/prchander/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"xvzcf","id":21228961,"node_id":"MDQ6VXNlcjIxMjI4OTYx","avatar_url":"https://avatars3.githubusercontent.com/u/21228961?v=4","gravatar_id":"","url":"https://api.github.com/users/xvzcf","html_url":"https://github.com/xvzcf","followers_url":"https://api.github.com/users/xvzcf/followers","following_url":"https://api.github.com/users/xvzcf/following{/other_user}","gists_url":"https://api.github.com/users/xvzcf/gists{/gist_id}","starred_url":"https://api.github.com/users/xvzcf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xvzcf/subscriptions","organizations_url":"https://api.github.com/users/xvzcf/orgs","repos_url":"https://api.github.com/users/xvzcf/repos","events_url":"https://api.github.com/users/xvzcf/events{/privacy}","received_events_url":"https://api.github.com/users/xvzcf/received_events","type":"User","site_admin":false},"assignees":[{"login":"xvzcf","id":21228961,"node_id":"MDQ6VXNlcjIxMjI4OTYx","avatar_url":"https://avatars3.githubusercontent.com/u/21228961?v=4","gravatar_id":"","url":"https://api.github.com/users/xvzcf","html_url":"https://github.com/xvzcf","followers_url":"https://api.github.com/users/xvzcf/followers","following_url":"https://api.github.com/users/xvzcf/following{/other_user}","gists_url":"https://api.github.com/users/xvzcf/gists{/gist_id}","starred_url":"https://api.github.com/users/xvzcf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xvzcf/subscriptions","organizations_url":"https://api.github.com/users/xvzcf/orgs","repos_url":"https://api.github.com/users/xvzcf/repos","events_url":"https://api.github.com/users/xvzcf/events{/privacy}","received_events_url":"https://api.github.com/users/xvzcf/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2020-11-14T19:24:23Z","updated_at":"2020-11-25T15:47:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello, I used a script in OpenSSL to generate a dilithium2 private key and certificate and I tested them with OpenSSL client and server where they were functional. In boringSSL, when I initiate the server, I get the following error:\r\nFailed to load private key: key_srv.key\r\n94525136107832:error:06000066:public key routines:OPENSSL_internal:DECODE_ERROR:../crypto/evp/p_oqs_asn1.c:257:\r\n94525136107832:error:13000068:PKCS8 routines:OPENSSL_internal:DECODE_ERROR:../crypto/pkcs8/pkcs8_x509.c:128:\r\n94525136107832:error:0900000c:PEM routines:OPENSSL_internal:ASN.1 encoding routines:../crypto/pem/pem_pkey.c:138:\r\n94525136107832:error:10000009:SSL routines:OPENSSL_internal:PEM routines:../ssl/ssl_file.cc:487:\r\n\r\nI have included my key and cert generation script and the boringssl client and server scripts. Please let me know where I am making an error.\r\n\r\nThank you\r\n[boringssl files.zip](https://github.com/open-quantum-safe/boringssl/files/5541334/boringssl.files.zip)\r\n","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/comments/733787450","html_url":"https://github.com/open-quantum-safe/boringssl/issues/42#issuecomment-733787450","issue_url":"https://api.github.com/repos/open-quantum-safe/boringssl/issues/42","id":733787450,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzc4NzQ1MA==","user":{"login":"xvzcf","id":21228961,"node_id":"MDQ6VXNlcjIxMjI4OTYx","avatar_url":"https://avatars3.githubusercontent.com/u/21228961?v=4","gravatar_id":"","url":"https://api.github.com/users/xvzcf","html_url":"https://github.com/xvzcf","followers_url":"https://api.github.com/users/xvzcf/followers","following_url":"https://api.github.com/users/xvzcf/following{/other_user}","gists_url":"https://api.github.com/users/xvzcf/gists{/gist_id}","starred_url":"https://api.github.com/users/xvzcf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xvzcf/subscriptions","organizations_url":"https://api.github.com/users/xvzcf/orgs","repos_url":"https://api.github.com/users/xvzcf/repos","events_url":"https://api.github.com/users/xvzcf/events{/privacy}","received_events_url":"https://api.github.com/users/xvzcf/received_events","type":"User","site_admin":false},"created_at":"2020-11-25T15:47:09Z","updated_at":"2020-11-25T15:47:09Z","author_association":"MEMBER","body":"There are some bugs [here](https://github.com/open-quantum-safe/boringssl/blob/master/crypto/evp/p_oqs_asn1.c) that are most likely the root cause of this problem. I will aim to start working on a fix in 1-2 weeks.","performed_via_github_app":null}},"public":true,"created_at":"2020-11-25T15:47:09Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14315902827","type":"IssueCommentEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/73","id":750232166,"node_id":"MDU6SXNzdWU3NTAyMzIxNjY=","number":73,"title":"p384_rainbowiiicclassic and p521_rainbowvcclassic keys cause \"invalid format\" error when supplied for user publickey authentication","user":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars3.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-11-25T01:16:42Z","updated_at":"2020-11-25T15:54:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Keys of these two types generated by ssh-keygen cause ssh to complain \"invalid format\" when provided for client authentication. Keys for the pure-PQ versions of these algorithms work fine, as do keys for p256_rainbowiaclassic.\r\n\r\nSetup for the experiment:\r\n\r\n1. `ssh-keygen -t RAINBOWIACLASSIC -q -N \"\" -f id_rainbowiaclassic`\r\n2. `ssh-keygen -t RAINBOWIIICCLASSIC -q -N \"\" -f id_rainbowiiicclassic`\r\n3. `ssh-keygen -t RAINBOWVCCLASSIC -q -N \"\" -f id_rainbowvcclassic`\r\n4. `ssh-keygen -t P256_RAINBOWIACLASSIC -q -N \"\" -f id_p256_rainbowiaclassic`\r\n5. `ssh-keygen -t P384_RAINBOWIIICCLASSIC -q -N \"\" -f id_p384_rainbowiiicclassic`\r\n6. `ssh-keygen -t P521_RAINBOWVCCLASSIC -q -N \"\" -f id_p521_rainbowvcclassic`\r\n7. `cat id_*.pub >/tmp/authorized_keys`\r\n\r\nOQS-OpenSSH is installed in ~/build/openssh. \r\n\r\nI first attempted this with liboqs built at the 0.4.0 tag (open-quantum-safe/liboqs@02fddd93) and openssh is built at \"Added NTRU-Prime. #68\" (0e49ae9c). I then attempted it with liboqs at its current tip \"Sync with PQClean\" (open-quantum-safe/liboqs@1ad950ac) and openssh at its current tip \"Add HQC round 3\" (0f0b045b). Both exhibited the same results given below.\r\n\r\nServer command line: \r\n`~/build/openssh/sbin/sshd -d -d -d -p 1234 -f ~/build/openssh/sshd_config -o AuthorizedKeysFile=/tmp/authorized_keys -o PubkeyAcceptedKeyTypes=ssh-rainbowiaclassic,ssh-rainbowiiicclassic,ssh-rainbowvcclassic,ssh-p256-rainbowiaclassic,ssh-p384-rainbowiiicclassic,ssh-p521-rainbowvcclassic -o StrictModes=no -h ~/build/openssh/ssh_host_rsa_key`\r\n\r\nClient command line (in directory where ssh-keygen outputs are present): \r\n`ssh -v -p 1234 127.0.0.1 -F ~/build/openssh/ssh_config -o PubkeyAcceptedKeyTypes=ssh-rainbowiaclassic,ssh-rainbowiiicclassic,ssh-rainbowvcclassic,ssh-p256-rainbowiaclassic,ssh-p384-rainbowiiicclassic,ssh-p521-rainbowvcclassic -o StrictHostKeyChecking=no -i ${KEY} ls` \r\nwhere `${KEY}` is one of: `./id_rainbowiaclassic` `./id_rainbowiiicclassic` `./id_rainbowvcclassic` `./id_p256_rainbowiaclassic` `./id_p384_rainbowiiicclassic` `./id_p521_rainbowvcclassic`\r\n\r\nExpected results: key is accepted each time, and `ls` command is executed. In particular, note this snippet from the client debug output (output for p256_rainbowiaclassic shown):\r\n```\r\ndebug1: Will attempt key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: publickey\r\ndebug1: Offering public key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: Server accepts key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: Authentication succeeded (publickey).\r\nAuthenticated to 127.0.0.1 ([127.0.0.1]:1234).\r\n```\r\n\r\nActual results for p384_rainbowiiicclassic and p521_rainbowvcclassic (output is for p521_rainbowvcclassic, but p384_rainbowiiiclassic exhibits the same behavior with just the filenames different):\r\n```\r\ndebug1: Will attempt key: ./id_p521_rainbowvcclassic  explicit\r\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: publickey\r\ndebug1: Trying private key: ./id_p521_rainbowvcclassic\r\nLoad key \"./id_p521_rainbowvcclassic\": invalid format\r\ndebug1: Next authentication method: keyboard-interactive\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: password\r\nkkane@127.0.0.1's password: \r\n```\r\n\r\nInterestingly, a hash fingerprint is shown for the key types that do work, but not for the ones that do not. There is also a noticeable delay of a few seconds after it prints `debug1: Trying private key: ./id_p521_rainbowvcclassic` which is a line that does not appear in the successful trace. ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/733792116","html_url":"https://github.com/open-quantum-safe/openssh/issues/73#issuecomment-733792116","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73","id":733792116,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzc5MjExNg==","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars0.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"created_at":"2020-11-25T15:54:08Z","updated_at":"2020-11-25T15:54:08Z","author_association":"MEMBER","body":"Hi Kevin, this reminds me of the problems we encountered with Rainbow III and V in SSH that we reported in Table 2 and Section 4.2 of our [2019 paper on TLS and SSH integrations](https://eprint.iacr.org/2019/858).  At the time we didn't figure out how to get it working, and haven't made any progress since then.  At least as far as I can remember.  @xvzcf any other thoughts?","performed_via_github_app":null}},"public":true,"created_at":"2020-11-25T15:54:08Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14315971689","type":"IssueCommentEvent","actor":{"id":10732757,"login":"crest42","display_login":"crest42","gravatar_id":"","url":"https://api.github.com/users/crest42","avatar_url":"https://avatars.githubusercontent.com/u/10732757?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/257","id":747756242,"node_id":"MDExOlB1bGxSZXF1ZXN0NTI0OTIwMDYx","number":257,"title":"Fixes duplicate curve_list check with OQS algorithms","user":{"login":"crest42","id":10732757,"node_id":"MDQ6VXNlcjEwNzMyNzU3","avatar_url":"https://avatars3.githubusercontent.com/u/10732757?v=4","gravatar_id":"","url":"https://api.github.com/users/crest42","html_url":"https://github.com/crest42","followers_url":"https://api.github.com/users/crest42/followers","following_url":"https://api.github.com/users/crest42/following{/other_user}","gists_url":"https://api.github.com/users/crest42/gists{/gist_id}","starred_url":"https://api.github.com/users/crest42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/crest42/subscriptions","organizations_url":"https://api.github.com/users/crest42/orgs","repos_url":"https://api.github.com/users/crest42/repos","events_url":"https://api.github.com/users/crest42/events{/privacy}","received_events_url":"https://api.github.com/users/crest42/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-11-20T19:55:48Z","updated_at":"2020-11-25T15:59:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/257","html_url":"https://github.com/open-quantum-safe/openssl/pull/257","diff_url":"https://github.com/open-quantum-safe/openssl/pull/257.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/257.patch"},"body":"Fixes #256\r\n\r\nAs stated in the issue, I've tried to preserve compatibility by keeping the curve_id in the returned groups for OQS algos\r\n\r\nUsing an array for the dup_list is far from optimal, but allows to keep the changes simple while preserving the duplicate check. \r\n\r\nI am happy for any suggestions on how to solve this in a better way.\r\n\r\nRobin","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/733795508","html_url":"https://github.com/open-quantum-safe/openssl/pull/257#issuecomment-733795508","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/257","id":733795508,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzc5NTUwOA==","user":{"login":"crest42","id":10732757,"node_id":"MDQ6VXNlcjEwNzMyNzU3","avatar_url":"https://avatars3.githubusercontent.com/u/10732757?v=4","gravatar_id":"","url":"https://api.github.com/users/crest42","html_url":"https://github.com/crest42","followers_url":"https://api.github.com/users/crest42/followers","following_url":"https://api.github.com/users/crest42/following{/other_user}","gists_url":"https://api.github.com/users/crest42/gists{/gist_id}","starred_url":"https://api.github.com/users/crest42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/crest42/subscriptions","organizations_url":"https://api.github.com/users/crest42/orgs","repos_url":"https://api.github.com/users/crest42/repos","events_url":"https://api.github.com/users/crest42/events{/privacy}","received_events_url":"https://api.github.com/users/crest42/received_events","type":"User","site_admin":false},"created_at":"2020-11-25T15:59:18Z","updated_at":"2020-11-25T15:59:18Z","author_association":"NONE","body":"ok, thanks for the feedback. \r\n\r\nStill works on current Openssl/liboqs branches:\r\n```\r\n./apps/openssl s_server -cert p384_CA.crt -key p384.key -curves hqc128:p256_hqc128\r\nUsing default temp DH parameters\r\nACCEPT\r\n```\r\n","performed_via_github_app":null}},"public":true,"created_at":"2020-11-25T15:59:18Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14316290277","type":"IssueCommentEvent","actor":{"id":18724089,"login":"kevinmkane","display_login":"kevinmkane","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","avatar_url":"https://avatars.githubusercontent.com/u/18724089?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/73","id":750232166,"node_id":"MDU6SXNzdWU3NTAyMzIxNjY=","number":73,"title":"p384_rainbowiiicclassic and p521_rainbowvcclassic keys cause \"invalid format\" error when supplied for user publickey authentication","user":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars3.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-11-25T01:16:42Z","updated_at":"2020-11-25T16:24:27Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Keys of these two types generated by ssh-keygen cause ssh to complain \"invalid format\" when provided for client authentication. Keys for the pure-PQ versions of these algorithms work fine, as do keys for p256_rainbowiaclassic.\r\n\r\nSetup for the experiment:\r\n\r\n1. `ssh-keygen -t RAINBOWIACLASSIC -q -N \"\" -f id_rainbowiaclassic`\r\n2. `ssh-keygen -t RAINBOWIIICCLASSIC -q -N \"\" -f id_rainbowiiicclassic`\r\n3. `ssh-keygen -t RAINBOWVCCLASSIC -q -N \"\" -f id_rainbowvcclassic`\r\n4. `ssh-keygen -t P256_RAINBOWIACLASSIC -q -N \"\" -f id_p256_rainbowiaclassic`\r\n5. `ssh-keygen -t P384_RAINBOWIIICCLASSIC -q -N \"\" -f id_p384_rainbowiiicclassic`\r\n6. `ssh-keygen -t P521_RAINBOWVCCLASSIC -q -N \"\" -f id_p521_rainbowvcclassic`\r\n7. `cat id_*.pub >/tmp/authorized_keys`\r\n\r\nOQS-OpenSSH is installed in ~/build/openssh. \r\n\r\nI first attempted this with liboqs built at the 0.4.0 tag (open-quantum-safe/liboqs@02fddd93) and openssh is built at \"Added NTRU-Prime. #68\" (0e49ae9c). I then attempted it with liboqs at its current tip \"Sync with PQClean\" (open-quantum-safe/liboqs@1ad950ac) and openssh at its current tip \"Add HQC round 3\" (0f0b045b). Both exhibited the same results given below.\r\n\r\nServer command line: \r\n`~/build/openssh/sbin/sshd -d -d -d -p 1234 -f ~/build/openssh/sshd_config -o AuthorizedKeysFile=/tmp/authorized_keys -o PubkeyAcceptedKeyTypes=ssh-rainbowiaclassic,ssh-rainbowiiicclassic,ssh-rainbowvcclassic,ssh-p256-rainbowiaclassic,ssh-p384-rainbowiiicclassic,ssh-p521-rainbowvcclassic -o StrictModes=no -h ~/build/openssh/ssh_host_rsa_key`\r\n\r\nClient command line (in directory where ssh-keygen outputs are present): \r\n`ssh -v -p 1234 127.0.0.1 -F ~/build/openssh/ssh_config -o PubkeyAcceptedKeyTypes=ssh-rainbowiaclassic,ssh-rainbowiiicclassic,ssh-rainbowvcclassic,ssh-p256-rainbowiaclassic,ssh-p384-rainbowiiicclassic,ssh-p521-rainbowvcclassic -o StrictHostKeyChecking=no -i ${KEY} ls` \r\nwhere `${KEY}` is one of: `./id_rainbowiaclassic` `./id_rainbowiiicclassic` `./id_rainbowvcclassic` `./id_p256_rainbowiaclassic` `./id_p384_rainbowiiicclassic` `./id_p521_rainbowvcclassic`\r\n\r\nExpected results: key is accepted each time, and `ls` command is executed. In particular, note this snippet from the client debug output (output for p256_rainbowiaclassic shown):\r\n```\r\ndebug1: Will attempt key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: publickey\r\ndebug1: Offering public key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: Server accepts key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: Authentication succeeded (publickey).\r\nAuthenticated to 127.0.0.1 ([127.0.0.1]:1234).\r\n```\r\n\r\nActual results for p384_rainbowiiicclassic and p521_rainbowvcclassic (output is for p521_rainbowvcclassic, but p384_rainbowiiiclassic exhibits the same behavior with just the filenames different):\r\n```\r\ndebug1: Will attempt key: ./id_p521_rainbowvcclassic  explicit\r\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: publickey\r\ndebug1: Trying private key: ./id_p521_rainbowvcclassic\r\nLoad key \"./id_p521_rainbowvcclassic\": invalid format\r\ndebug1: Next authentication method: keyboard-interactive\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: password\r\nkkane@127.0.0.1's password: \r\n```\r\n\r\nInterestingly, a hash fingerprint is shown for the key types that do work, but not for the ones that do not. There is also a noticeable delay of a few seconds after it prints `debug1: Trying private key: ./id_p521_rainbowvcclassic` which is a line that does not appear in the successful trace. ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/733810212","html_url":"https://github.com/open-quantum-safe/openssh/issues/73#issuecomment-733810212","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73","id":733810212,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzgxMDIxMg==","user":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars3.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"created_at":"2020-11-25T16:24:27Z","updated_at":"2020-11-25T16:24:27Z","author_association":"NONE","body":"This seems to happen while ssh is attempting to load the private key file, not send the public key over the network, though it's certainly possible it's running into some other size limit. I may poke at it a bit more, but thought I'd put the report out there in case something obvious occurred to you all. A file load problem seemed like it might (dare I dream) be more straightforward.","performed_via_github_app":null}},"public":true,"created_at":"2020-11-25T16:24:28Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14316781133","type":"IssueCommentEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/73","id":750232166,"node_id":"MDU6SXNzdWU3NTAyMzIxNjY=","number":73,"title":"p384_rainbowiiicclassic and p521_rainbowvcclassic keys cause \"invalid format\" error when supplied for user publickey authentication","user":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars3.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-11-25T01:16:42Z","updated_at":"2020-11-25T17:05:00Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Keys of these two types generated by ssh-keygen cause ssh to complain \"invalid format\" when provided for client authentication. Keys for the pure-PQ versions of these algorithms work fine, as do keys for p256_rainbowiaclassic.\r\n\r\nSetup for the experiment:\r\n\r\n1. `ssh-keygen -t RAINBOWIACLASSIC -q -N \"\" -f id_rainbowiaclassic`\r\n2. `ssh-keygen -t RAINBOWIIICCLASSIC -q -N \"\" -f id_rainbowiiicclassic`\r\n3. `ssh-keygen -t RAINBOWVCCLASSIC -q -N \"\" -f id_rainbowvcclassic`\r\n4. `ssh-keygen -t P256_RAINBOWIACLASSIC -q -N \"\" -f id_p256_rainbowiaclassic`\r\n5. `ssh-keygen -t P384_RAINBOWIIICCLASSIC -q -N \"\" -f id_p384_rainbowiiicclassic`\r\n6. `ssh-keygen -t P521_RAINBOWVCCLASSIC -q -N \"\" -f id_p521_rainbowvcclassic`\r\n7. `cat id_*.pub >/tmp/authorized_keys`\r\n\r\nOQS-OpenSSH is installed in ~/build/openssh. \r\n\r\nI first attempted this with liboqs built at the 0.4.0 tag (open-quantum-safe/liboqs@02fddd93) and openssh is built at \"Added NTRU-Prime. #68\" (0e49ae9c). I then attempted it with liboqs at its current tip \"Sync with PQClean\" (open-quantum-safe/liboqs@1ad950ac) and openssh at its current tip \"Add HQC round 3\" (0f0b045b). Both exhibited the same results given below.\r\n\r\nServer command line: \r\n`~/build/openssh/sbin/sshd -d -d -d -p 1234 -f ~/build/openssh/sshd_config -o AuthorizedKeysFile=/tmp/authorized_keys -o PubkeyAcceptedKeyTypes=ssh-rainbowiaclassic,ssh-rainbowiiicclassic,ssh-rainbowvcclassic,ssh-p256-rainbowiaclassic,ssh-p384-rainbowiiicclassic,ssh-p521-rainbowvcclassic -o StrictModes=no -h ~/build/openssh/ssh_host_rsa_key`\r\n\r\nClient command line (in directory where ssh-keygen outputs are present): \r\n`ssh -v -p 1234 127.0.0.1 -F ~/build/openssh/ssh_config -o PubkeyAcceptedKeyTypes=ssh-rainbowiaclassic,ssh-rainbowiiicclassic,ssh-rainbowvcclassic,ssh-p256-rainbowiaclassic,ssh-p384-rainbowiiicclassic,ssh-p521-rainbowvcclassic -o StrictHostKeyChecking=no -i ${KEY} ls` \r\nwhere `${KEY}` is one of: `./id_rainbowiaclassic` `./id_rainbowiiicclassic` `./id_rainbowvcclassic` `./id_p256_rainbowiaclassic` `./id_p384_rainbowiiicclassic` `./id_p521_rainbowvcclassic`\r\n\r\nExpected results: key is accepted each time, and `ls` command is executed. In particular, note this snippet from the client debug output (output for p256_rainbowiaclassic shown):\r\n```\r\ndebug1: Will attempt key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: publickey\r\ndebug1: Offering public key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: Server accepts key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: Authentication succeeded (publickey).\r\nAuthenticated to 127.0.0.1 ([127.0.0.1]:1234).\r\n```\r\n\r\nActual results for p384_rainbowiiicclassic and p521_rainbowvcclassic (output is for p521_rainbowvcclassic, but p384_rainbowiiiclassic exhibits the same behavior with just the filenames different):\r\n```\r\ndebug1: Will attempt key: ./id_p521_rainbowvcclassic  explicit\r\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: publickey\r\ndebug1: Trying private key: ./id_p521_rainbowvcclassic\r\nLoad key \"./id_p521_rainbowvcclassic\": invalid format\r\ndebug1: Next authentication method: keyboard-interactive\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: password\r\nkkane@127.0.0.1's password: \r\n```\r\n\r\nInterestingly, a hash fingerprint is shown for the key types that do work, but not for the ones that do not. There is also a noticeable delay of a few seconds after it prints `debug1: Trying private key: ./id_p521_rainbowvcclassic` which is a line that does not appear in the successful trace. ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/733833278","html_url":"https://github.com/open-quantum-safe/openssh/issues/73#issuecomment-733833278","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73","id":733833278,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzgzMzI3OA==","user":{"login":"xvzcf","id":21228961,"node_id":"MDQ6VXNlcjIxMjI4OTYx","avatar_url":"https://avatars3.githubusercontent.com/u/21228961?v=4","gravatar_id":"","url":"https://api.github.com/users/xvzcf","html_url":"https://github.com/xvzcf","followers_url":"https://api.github.com/users/xvzcf/followers","following_url":"https://api.github.com/users/xvzcf/following{/other_user}","gists_url":"https://api.github.com/users/xvzcf/gists{/gist_id}","starred_url":"https://api.github.com/users/xvzcf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xvzcf/subscriptions","organizations_url":"https://api.github.com/users/xvzcf/orgs","repos_url":"https://api.github.com/users/xvzcf/repos","events_url":"https://api.github.com/users/xvzcf/events{/privacy}","received_events_url":"https://api.github.com/users/xvzcf/received_events","type":"User","site_admin":false},"created_at":"2020-11-25T17:05:00Z","updated_at":"2020-11-25T17:05:00Z","author_association":"MEMBER","body":"Most (but perhaps not all) issues in that paper should've been fixed in [this commit](https://github.com/open-quantum-safe/openssh/commit/b452beeb20f28b4e3af4b77c19855ed891a36ec8). I did have to increase size limits in various places (like [here](https://github.com/open-quantum-safe/openssh/commit/b452beeb20f28b4e3af4b77c19855ed891a36ec8#diff-4541d53042b064e61bbf4e8884081b586d8ca22769f101f3136b27418a96dd07R103) for example), but I might've missed a spot.\r\n\r\nWith respect to the delay in loading the private key file, it might be that the file is being processed 1 byte at a time. That resulted in huge delays when writing generated Rainbow keys out to a file, and was improved [here](https://github.com/open-quantum-safe/openssh/commit/b452beeb20f28b4e3af4b77c19855ed891a36ec8#diff-911b87e474316fdc8c48074a84d40562d1b0e7f06fa587d9b8f13926c539d81cR4068) by writing out to the file in 70-byte bursts.","performed_via_github_app":null}},"public":true,"created_at":"2020-11-25T17:05:00Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14316837687","type":"IssueCommentEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/73","id":750232166,"node_id":"MDU6SXNzdWU3NTAyMzIxNjY=","number":73,"title":"p384_rainbowiiicclassic and p521_rainbowvcclassic keys cause \"invalid format\" error when supplied for user publickey authentication","user":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars3.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-11-25T01:16:42Z","updated_at":"2020-11-25T17:09:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Keys of these two types generated by ssh-keygen cause ssh to complain \"invalid format\" when provided for client authentication. Keys for the pure-PQ versions of these algorithms work fine, as do keys for p256_rainbowiaclassic.\r\n\r\nSetup for the experiment:\r\n\r\n1. `ssh-keygen -t RAINBOWIACLASSIC -q -N \"\" -f id_rainbowiaclassic`\r\n2. `ssh-keygen -t RAINBOWIIICCLASSIC -q -N \"\" -f id_rainbowiiicclassic`\r\n3. `ssh-keygen -t RAINBOWVCCLASSIC -q -N \"\" -f id_rainbowvcclassic`\r\n4. `ssh-keygen -t P256_RAINBOWIACLASSIC -q -N \"\" -f id_p256_rainbowiaclassic`\r\n5. `ssh-keygen -t P384_RAINBOWIIICCLASSIC -q -N \"\" -f id_p384_rainbowiiicclassic`\r\n6. `ssh-keygen -t P521_RAINBOWVCCLASSIC -q -N \"\" -f id_p521_rainbowvcclassic`\r\n7. `cat id_*.pub >/tmp/authorized_keys`\r\n\r\nOQS-OpenSSH is installed in ~/build/openssh. \r\n\r\nI first attempted this with liboqs built at the 0.4.0 tag (open-quantum-safe/liboqs@02fddd93) and openssh is built at \"Added NTRU-Prime. #68\" (0e49ae9c). I then attempted it with liboqs at its current tip \"Sync with PQClean\" (open-quantum-safe/liboqs@1ad950ac) and openssh at its current tip \"Add HQC round 3\" (0f0b045b). Both exhibited the same results given below.\r\n\r\nServer command line: \r\n`~/build/openssh/sbin/sshd -d -d -d -p 1234 -f ~/build/openssh/sshd_config -o AuthorizedKeysFile=/tmp/authorized_keys -o PubkeyAcceptedKeyTypes=ssh-rainbowiaclassic,ssh-rainbowiiicclassic,ssh-rainbowvcclassic,ssh-p256-rainbowiaclassic,ssh-p384-rainbowiiicclassic,ssh-p521-rainbowvcclassic -o StrictModes=no -h ~/build/openssh/ssh_host_rsa_key`\r\n\r\nClient command line (in directory where ssh-keygen outputs are present): \r\n`ssh -v -p 1234 127.0.0.1 -F ~/build/openssh/ssh_config -o PubkeyAcceptedKeyTypes=ssh-rainbowiaclassic,ssh-rainbowiiicclassic,ssh-rainbowvcclassic,ssh-p256-rainbowiaclassic,ssh-p384-rainbowiiicclassic,ssh-p521-rainbowvcclassic -o StrictHostKeyChecking=no -i ${KEY} ls` \r\nwhere `${KEY}` is one of: `./id_rainbowiaclassic` `./id_rainbowiiicclassic` `./id_rainbowvcclassic` `./id_p256_rainbowiaclassic` `./id_p384_rainbowiiicclassic` `./id_p521_rainbowvcclassic`\r\n\r\nExpected results: key is accepted each time, and `ls` command is executed. In particular, note this snippet from the client debug output (output for p256_rainbowiaclassic shown):\r\n```\r\ndebug1: Will attempt key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: publickey\r\ndebug1: Offering public key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: Server accepts key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: Authentication succeeded (publickey).\r\nAuthenticated to 127.0.0.1 ([127.0.0.1]:1234).\r\n```\r\n\r\nActual results for p384_rainbowiiicclassic and p521_rainbowvcclassic (output is for p521_rainbowvcclassic, but p384_rainbowiiiclassic exhibits the same behavior with just the filenames different):\r\n```\r\ndebug1: Will attempt key: ./id_p521_rainbowvcclassic  explicit\r\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: publickey\r\ndebug1: Trying private key: ./id_p521_rainbowvcclassic\r\nLoad key \"./id_p521_rainbowvcclassic\": invalid format\r\ndebug1: Next authentication method: keyboard-interactive\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: password\r\nkkane@127.0.0.1's password: \r\n```\r\n\r\nInterestingly, a hash fingerprint is shown for the key types that do work, but not for the ones that do not. There is also a noticeable delay of a few seconds after it prints `debug1: Trying private key: ./id_p521_rainbowvcclassic` which is a line that does not appear in the successful trace. ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/733835831","html_url":"https://github.com/open-quantum-safe/openssh/issues/73#issuecomment-733835831","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73","id":733835831,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzgzNTgzMQ==","user":{"login":"xvzcf","id":21228961,"node_id":"MDQ6VXNlcjIxMjI4OTYx","avatar_url":"https://avatars3.githubusercontent.com/u/21228961?v=4","gravatar_id":"","url":"https://api.github.com/users/xvzcf","html_url":"https://github.com/xvzcf","followers_url":"https://api.github.com/users/xvzcf/followers","following_url":"https://api.github.com/users/xvzcf/following{/other_user}","gists_url":"https://api.github.com/users/xvzcf/gists{/gist_id}","starred_url":"https://api.github.com/users/xvzcf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xvzcf/subscriptions","organizations_url":"https://api.github.com/users/xvzcf/orgs","repos_url":"https://api.github.com/users/xvzcf/repos","events_url":"https://api.github.com/users/xvzcf/events{/privacy}","received_events_url":"https://api.github.com/users/xvzcf/received_events","type":"User","site_admin":false},"created_at":"2020-11-25T17:09:55Z","updated_at":"2020-11-25T17:09:55Z","author_association":"MEMBER","body":"At any rate, I'll try looking into this in a week or two if there isn't a solution by then.","performed_via_github_app":null}},"public":true,"created_at":"2020-11-25T17:09:55Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"14318942265","type":"IssueCommentEvent","actor":{"id":18724089,"login":"kevinmkane","display_login":"kevinmkane","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","avatar_url":"https://avatars.githubusercontent.com/u/18724089?"},"repo":{"id":113904471,"name":"open-quantum-safe/openssh","url":"https://api.github.com/repos/open-quantum-safe/openssh"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73","repository_url":"https://api.github.com/repos/open-quantum-safe/openssh","labels_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73/events","html_url":"https://github.com/open-quantum-safe/openssh/issues/73","id":750232166,"node_id":"MDU6SXNzdWU3NTAyMzIxNjY=","number":73,"title":"ssh-keygen generates P-256 keys for p384_rainbowiiicclassic and p521_rainbowvcclassic when referring to them by short name","user":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars3.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2020-11-25T01:16:42Z","updated_at":"2020-11-25T20:45:19Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Keys of these two types generated by ssh-keygen cause ssh to complain \"invalid format\" when provided for client authentication. Keys for the pure-PQ versions of these algorithms work fine, as do keys for p256_rainbowiaclassic.\r\n\r\nSetup for the experiment:\r\n\r\n1. `ssh-keygen -t RAINBOWIACLASSIC -q -N \"\" -f id_rainbowiaclassic`\r\n2. `ssh-keygen -t RAINBOWIIICCLASSIC -q -N \"\" -f id_rainbowiiicclassic`\r\n3. `ssh-keygen -t RAINBOWVCCLASSIC -q -N \"\" -f id_rainbowvcclassic`\r\n4. `ssh-keygen -t P256_RAINBOWIACLASSIC -q -N \"\" -f id_p256_rainbowiaclassic`\r\n5. `ssh-keygen -t P384_RAINBOWIIICCLASSIC -q -N \"\" -f id_p384_rainbowiiicclassic`\r\n6. `ssh-keygen -t P521_RAINBOWVCCLASSIC -q -N \"\" -f id_p521_rainbowvcclassic`\r\n7. `cat id_*.pub >/tmp/authorized_keys`\r\n\r\nOQS-OpenSSH is installed in ~/build/openssh. \r\n\r\nI first attempted this with liboqs built at the 0.4.0 tag (open-quantum-safe/liboqs@02fddd93) and openssh is built at \"Added NTRU-Prime. #68\" (0e49ae9c). I then attempted it with liboqs at its current tip \"Sync with PQClean\" (open-quantum-safe/liboqs@1ad950ac) and openssh at its current tip \"Add HQC round 3\" (0f0b045b). Both exhibited the same results given below.\r\n\r\nServer command line: \r\n`~/build/openssh/sbin/sshd -d -d -d -p 1234 -f ~/build/openssh/sshd_config -o AuthorizedKeysFile=/tmp/authorized_keys -o PubkeyAcceptedKeyTypes=ssh-rainbowiaclassic,ssh-rainbowiiicclassic,ssh-rainbowvcclassic,ssh-p256-rainbowiaclassic,ssh-p384-rainbowiiicclassic,ssh-p521-rainbowvcclassic -o StrictModes=no -h ~/build/openssh/ssh_host_rsa_key`\r\n\r\nClient command line (in directory where ssh-keygen outputs are present): \r\n`ssh -v -p 1234 127.0.0.1 -F ~/build/openssh/ssh_config -o PubkeyAcceptedKeyTypes=ssh-rainbowiaclassic,ssh-rainbowiiicclassic,ssh-rainbowvcclassic,ssh-p256-rainbowiaclassic,ssh-p384-rainbowiiicclassic,ssh-p521-rainbowvcclassic -o StrictHostKeyChecking=no -i ${KEY} ls` \r\nwhere `${KEY}` is one of: `./id_rainbowiaclassic` `./id_rainbowiiicclassic` `./id_rainbowvcclassic` `./id_p256_rainbowiaclassic` `./id_p384_rainbowiiicclassic` `./id_p521_rainbowvcclassic`\r\n\r\nExpected results: key is accepted each time, and `ls` command is executed. In particular, note this snippet from the client debug output (output for p256_rainbowiaclassic shown):\r\n```\r\ndebug1: Will attempt key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: publickey\r\ndebug1: Offering public key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: Server accepts key: ./id_p256_rainbowiaclassic P256_RAINBOWIACLASSIC SHA256:71v0bzcaK8/AsUTOY3KNfsf3mqojjW0aawJM9ryZcJI explicit\r\ndebug1: Authentication succeeded (publickey).\r\nAuthenticated to 127.0.0.1 ([127.0.0.1]:1234).\r\n```\r\n\r\nActual results for p384_rainbowiiicclassic and p521_rainbowvcclassic (output is for p521_rainbowvcclassic, but p384_rainbowiiiclassic exhibits the same behavior with just the filenames different):\r\n```\r\ndebug1: Will attempt key: ./id_p521_rainbowvcclassic  explicit\r\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: publickey\r\ndebug1: Trying private key: ./id_p521_rainbowvcclassic\r\nLoad key \"./id_p521_rainbowvcclassic\": invalid format\r\ndebug1: Next authentication method: keyboard-interactive\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: password\r\nkkane@127.0.0.1's password: \r\n```\r\n\r\nInterestingly, a hash fingerprint is shown for the key types that do work, but not for the ones that do not. There is also a noticeable delay of a few seconds after it prints `debug1: Trying private key: ./id_p521_rainbowvcclassic` which is a line that does not appear in the successful trace. ","performed_via_github_app":null},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/comments/733937881","html_url":"https://github.com/open-quantum-safe/openssh/issues/73#issuecomment-733937881","issue_url":"https://api.github.com/repos/open-quantum-safe/openssh/issues/73","id":733937881,"node_id":"MDEyOklzc3VlQ29tbWVudDczMzkzNzg4MQ==","user":{"login":"kevinmkane","id":18724089,"node_id":"MDQ6VXNlcjE4NzI0MDg5","avatar_url":"https://avatars3.githubusercontent.com/u/18724089?v=4","gravatar_id":"","url":"https://api.github.com/users/kevinmkane","html_url":"https://github.com/kevinmkane","followers_url":"https://api.github.com/users/kevinmkane/followers","following_url":"https://api.github.com/users/kevinmkane/following{/other_user}","gists_url":"https://api.github.com/users/kevinmkane/gists{/gist_id}","starred_url":"https://api.github.com/users/kevinmkane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevinmkane/subscriptions","organizations_url":"https://api.github.com/users/kevinmkane/orgs","repos_url":"https://api.github.com/users/kevinmkane/repos","events_url":"https://api.github.com/users/kevinmkane/events{/privacy}","received_events_url":"https://api.github.com/users/kevinmkane/received_events","type":"User","site_admin":false},"created_at":"2020-11-25T20:45:19Z","updated_at":"2020-11-25T20:45:19Z","author_association":"NONE","body":"ssh-keygen is generating P-256 keys for these two schemes when ssh-keygen is given their \"short names\" as the -t parameter (which is by far the norm). When these keys later get loaded, the curve nid doesn't match anything in the keytypes table, and so the keys are dismissed as unknown.\r\n\r\n#74 corrects this behavior by always coercing the required number of classical bits to the correct number when choosing one of these hybrids that refers to a specific elliptic curve.","performed_via_github_app":null}},"public":true,"created_at":"2020-11-25T20:45:20Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
