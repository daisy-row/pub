{"id":"12866883282","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/789","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/789/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/789/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/789/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/789","id":653824038,"node_id":"MDExOlB1bGxSZXF1ZXN0NDQ2NjY2NjYw","number":789,"title":"Enable automated upstream imports","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars1.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-07-09T07:15:36Z","updated_at":"2020-07-10T05:18:44Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/789","html_url":"https://github.com/open-quantum-safe/liboqs/pull/789","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/789.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/789.patch"},"body":"This is adding capabilities to `copy_from_pqclean` to alternatively automatically import upstream code bases.\r\n\r\nThis PR is an \"empty\" run (without actual upstream additions) to ease review. When approved, it will be used to import new upstream versions of `kyber` and `dilithium` (setting the corresponding environment variables listed in the `copy_from_pqclean.yml` file to the folders of the upstream repositories along the same lines as is done for a `PQClean` import). \r\n\r\nBut by no means this facility is restricted to those algorithms. The basic idea is to have `META.yml` files modelled on the ones used by `PQClean` within the upstream repositories: These contain \r\n- names of files to import\r\n- possible compile directives\r\n- possibly changed & properly namespace'd algorithm entry points  \r\n- possibly changed KATs. Any such KAT changes will be called out when running the new script variant to ensure library version bumps can be initiated.\r\n\r\nA more complete documentation of this will be added to [the Wiki](https://github.com/open-quantum-safe/liboqs/wiki/Contributing-guide) when merged. Conceptually, this could be used to automatically introduce any new/changed algorithms provided the upstream code maintainer provides NIST-like APIs and these \".yml-import-drivers\".\r\n\r\nCCI [ran successfully here](https://app.circleci.com/pipelines/github/baentsch/liboqs/307/workflows/742d5394-1bd1-4acd-b89a-78e365753c40)\r\n\r\nAll files changed outside of `copy_from_pqclean` have the facility added to provide their own compile directives and to allow for their own versions of otherwise common includes (generated by new `copy_from_pqclean`).\r\n\r\nA minor correction is also done to `scripts/copy_from_pqclean/src/sig/sig.h/algs_length.fragment` to cater for the new number of algorithms not imported from PQClean.\r\n"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/656488285","html_url":"https://github.com/open-quantum-safe/liboqs/pull/789#issuecomment-656488285","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/789","id":656488285,"node_id":"MDEyOklzc3VlQ29tbWVudDY1NjQ4ODI4NQ==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars1.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2020-07-10T05:18:44Z","updated_at":"2020-07-10T05:18:44Z","author_association":"MEMBER","body":"> Seems reasonable to me. I wasn't able to fully reconstruct all the logic in copy_from_pqclean.py, but I trust that it's doing what you want it to do.\r\n\r\nIt is - albeit I'm sure things can be done more elegantly. So, as the upstream code is not yet ready, we can let this PR linger a bit (also to give @xvzcf a chance to take a look)."}},"public":true,"created_at":"2020-07-10T05:18:44Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"12868990138","type":"IssueCommentEvent","actor":{"id":57787676,"login":"baentsch","display_login":"baentsch","gravatar_id":"","url":"https://api.github.com/users/baentsch","avatar_url":"https://avatars.githubusercontent.com/u/57787676?"},"repo":{"id":218087071,"name":"open-quantum-safe/oqs-demos","url":"https://api.github.com/repos/open-quantum-safe/oqs-demos"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/33","repository_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos","labels_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/33/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/33/comments","events_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/33/events","html_url":"https://github.com/open-quantum-safe/oqs-demos/issues/33","id":630407764,"node_id":"MDU6SXNzdWU2MzA0MDc3NjQ=","number":33,"title":"Set up a live PQ SSL test server","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars0.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2020-06-03T23:57:12Z","updated_at":"2020-07-10T09:49:50Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":""},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/comments/656590083","html_url":"https://github.com/open-quantum-safe/oqs-demos/issues/33#issuecomment-656590083","issue_url":"https://api.github.com/repos/open-quantum-safe/oqs-demos/issues/33","id":656590083,"node_id":"MDEyOklzc3VlQ29tbWVudDY1NjU5MDA4Mw==","user":{"login":"baentsch","id":57787676,"node_id":"MDQ6VXNlcjU3Nzg3Njc2","avatar_url":"https://avatars1.githubusercontent.com/u/57787676?v=4","gravatar_id":"","url":"https://api.github.com/users/baentsch","html_url":"https://github.com/baentsch","followers_url":"https://api.github.com/users/baentsch/followers","following_url":"https://api.github.com/users/baentsch/following{/other_user}","gists_url":"https://api.github.com/users/baentsch/gists{/gist_id}","starred_url":"https://api.github.com/users/baentsch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baentsch/subscriptions","organizations_url":"https://api.github.com/users/baentsch/orgs","repos_url":"https://api.github.com/users/baentsch/repos","events_url":"https://api.github.com/users/baentsch/events{/privacy}","received_events_url":"https://api.github.com/users/baentsch/received_events","type":"User","site_admin":false},"created_at":"2020-07-10T09:49:50Z","updated_at":"2020-07-10T09:49:50Z","author_association":"MEMBER","body":"> Rather than listing all signature/key-exchange combinations in one table, would it be nicer to perhaps, say, have two dropdowns that allow you to choose the desired combination and then output the port+link based on the chosen combination?\r\n\r\n(Presently) there are two things speaking against this in my eyes: a) The dropdown lists would be rather long/unwieldy to scroll through (unless we also 'separate' by hybrids, somewhat copying the 'mixing' logic into JavaScript) and b) I had envisioned users writing loops testing (their clients) through all combinations. \r\n\r\na) Would probably be \"taken care of\" by NIST's round 3 \"algorithm reduction\" and b) speaks against some JavaScript magic to facilitate your suggestion (or again, you know of a simple way to do this without losing the 'automation aspect'? Suggestions welcome!)"}},"public":true,"created_at":"2020-07-10T09:49:50Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
