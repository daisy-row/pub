{"id":"11372161657","type":"IssuesEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/574","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/574/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/574/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/574/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/574","id":527266591,"node_id":"MDU6SXNzdWU1MjcyNjY1OTE=","number":574,"title":"speed_kem & speed_sig halts with Illegal instruction.","user":{"login":"donbirno","id":28628357,"node_id":"MDQ6VXNlcjI4NjI4MzU3","avatar_url":"https://avatars0.githubusercontent.com/u/28628357?v=4","gravatar_id":"","url":"https://api.github.com/users/donbirno","html_url":"https://github.com/donbirno","followers_url":"https://api.github.com/users/donbirno/followers","following_url":"https://api.github.com/users/donbirno/following{/other_user}","gists_url":"https://api.github.com/users/donbirno/gists{/gist_id}","starred_url":"https://api.github.com/users/donbirno/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/donbirno/subscriptions","organizations_url":"https://api.github.com/users/donbirno/orgs","repos_url":"https://api.github.com/users/donbirno/repos","events_url":"https://api.github.com/users/donbirno/events{/privacy}","received_events_url":"https://api.github.com/users/donbirno/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-11-22T15:37:07Z","updated_at":"2020-01-28T00:50:24Z","closed_at":"2020-01-28T00:50:24Z","author_association":"NONE","body":"speed_kem & speed_sig halts with Illegal instruction.\r\n\r\nDebugging stops at\r\n\r\nProgram received signal SIGILL, Illegal instruction.\r\n0x0001112c in _bench_init_perfcounters (enable_divider=0, do_reset=1) at ds_benchmark.h:155\r\n155             asm volatile(\"mcr p15, 0, %0, c9, c12, 0\\t\\n\" ::\"r\"(value));\r\n\r\n**Environment:**\r\nRaspberry pi 4\r\nCortex-A72 (ARM v8) 64-bit \r\nLinux donpi 4.19.85-v8+ #1279 SMP PREEMPT Fri Nov 22 16:04:03 GMT 2019 aarch64 GNU/Linux"}},"public":true,"created_at":"2020-01-28T00:50:25Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"11375697008","type":"IssuesEvent","actor":{"id":25336982,"login":"camer314","display_login":"camer314","gravatar_id":"","url":"https://api.github.com/users/camer314","avatar_url":"https://avatars.githubusercontent.com/u/25336982?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"opened","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/599","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/599/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/599/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/599/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/599","id":556152020,"node_id":"MDU6SXNzdWU1NTYxNTIwMjA=","number":599,"title":"Question: Regarding AES and SHA","user":{"login":"camer314","id":25336982,"node_id":"MDQ6VXNlcjI1MzM2OTgy","avatar_url":"https://avatars2.githubusercontent.com/u/25336982?v=4","gravatar_id":"","url":"https://api.github.com/users/camer314","html_url":"https://github.com/camer314","followers_url":"https://api.github.com/users/camer314/followers","following_url":"https://api.github.com/users/camer314/following{/other_user}","gists_url":"https://api.github.com/users/camer314/gists{/gist_id}","starred_url":"https://api.github.com/users/camer314/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/camer314/subscriptions","organizations_url":"https://api.github.com/users/camer314/orgs","repos_url":"https://api.github.com/users/camer314/repos","events_url":"https://api.github.com/users/camer314/events{/privacy}","received_events_url":"https://api.github.com/users/camer314/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-01-28T11:38:05Z","updated_at":"2020-01-28T11:38:05Z","closed_at":null,"author_association":"NONE","body":"Forgive me if this is a stupid question, but I see there is code in the crypto src  for AES and SHA but these are not mentioned at all on the main page under Supported Algorithms and nor is any love given to them in the C# wrapper.\r\n\r\nSo my question is, are these simply implementations of those techniques or are they also quantum safe? For example, if i currently use SHA256 then what is the equivalent in this library?"}},"public":true,"created_at":"2020-01-28T11:38:05Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"11378041442","type":"IssuesEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"closed","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/599","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/599/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/599/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/599/events","html_url":"https://github.com/open-quantum-safe/liboqs/issues/599","id":556152020,"node_id":"MDU6SXNzdWU1NTYxNTIwMjA=","number":599,"title":"Question: Regarding AES and SHA","user":{"login":"camer314","id":25336982,"node_id":"MDQ6VXNlcjI1MzM2OTgy","avatar_url":"https://avatars2.githubusercontent.com/u/25336982?v=4","gravatar_id":"","url":"https://api.github.com/users/camer314","html_url":"https://github.com/camer314","followers_url":"https://api.github.com/users/camer314/followers","following_url":"https://api.github.com/users/camer314/following{/other_user}","gists_url":"https://api.github.com/users/camer314/gists{/gist_id}","starred_url":"https://api.github.com/users/camer314/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/camer314/subscriptions","organizations_url":"https://api.github.com/users/camer314/orgs","repos_url":"https://api.github.com/users/camer314/repos","events_url":"https://api.github.com/users/camer314/events{/privacy}","received_events_url":"https://api.github.com/users/camer314/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-01-28T11:38:05Z","updated_at":"2020-01-28T15:55:29Z","closed_at":"2020-01-28T15:55:29Z","author_association":"NONE","body":"Forgive me if this is a stupid question, but I see there is code in the crypto src  for AES and SHA but these are not mentioned at all on the main page under Supported Algorithms and nor is any love given to them in the C# wrapper.\r\n\r\nSo my question is, are these simply implementations of those techniques or are they also quantum safe? Am i to use those directly or is there another way? For example, if i currently use SHA256 then what is the equivalent in this library, and what about AES256?\r\n\r\nThanks!"}},"public":true,"created_at":"2020-01-28T15:55:30Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
