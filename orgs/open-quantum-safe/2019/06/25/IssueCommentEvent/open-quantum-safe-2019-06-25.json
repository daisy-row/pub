{"id":"9891015310","type":"IssueCommentEvent","actor":{"id":16247285,"login":"christianpaquin","display_login":"christianpaquin","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","avatar_url":"https://avatars.githubusercontent.com/u/16247285?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/500","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/500/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/500/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/500/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/500","id":460501729,"node_id":"MDExOlB1bGxSZXF1ZXN0MjkxNjIwMDgy","number":500,"title":"Switch Frodo to use MSR codebase directly","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars0.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"labels":[{"id":486323384,"node_id":"MDU6TGFiZWw0ODYzMjMzODQ=","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/refactor","name":"refactor","color":"d4c5f9","default":false}],"state":"open","locked":false,"assignee":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars0.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"assignees":[{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars0.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2019-06-25T15:43:35Z","updated_at":"2019-06-25T16:53:33Z","closed_at":null,"author_association":"MEMBER","pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/500","html_url":"https://github.com/open-quantum-safe/liboqs/pull/500","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/500.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/500.patch"},"body":"@christianpaquin As discussed here is a start at switching liboqs to use the Frodo code more directly from MSR rather than via PQClean.  \r\n\r\nIn the MSR codebase, there are multiple places where the various configuration macros get set -- including config.h, frodoxxx.c, and the Makefile.  I've consolidated all of that into one configuration file for each parameter set -- frodo640aes.h, etc. -- and then use gcc's `-include` option to force that configuration file to get loaded before compiling that group of files.  I'm not sure if there's a way to do the analogous thing in VisualStudio.  Do you know?  If not, then I can change it so that there's a frodo640aes.c file which includes the kem.c, noise.c, util.c files just like in Patrick's code base."},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/505530264","html_url":"https://github.com/open-quantum-safe/liboqs/pull/500#issuecomment-505530264","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/500","id":505530264,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNTUzMDI2NA==","user":{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars0.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false},"created_at":"2019-06-25T16:53:33Z","updated_at":"2019-06-25T16:53:33Z","author_association":"CONTRIBUTOR","body":"@dstebila, I'll take a look."}},"public":true,"created_at":"2019-06-25T16:53:33Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"9891569262","type":"IssueCommentEvent","actor":{"id":24617764,"login":"csosto-pk","display_login":"csosto-pk","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","avatar_url":"https://avatars.githubusercontent.com/u/24617764?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/94","repository_url":"https://api.github.com/repos/open-quantum-safe/openssl","labels_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/94/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/94/comments","events_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/94/events","html_url":"https://github.com/open-quantum-safe/openssl/pull/94","id":459247932,"node_id":"MDExOlB1bGxSZXF1ZXN0MjkwNjQ4MjAx","number":94,"title":"Add Dilithium as auth method in TLS 1.3","user":{"login":"dimisik","id":11049739,"node_id":"MDQ6VXNlcjExMDQ5NzM5","avatar_url":"https://avatars1.githubusercontent.com/u/11049739?v=4","gravatar_id":"","url":"https://api.github.com/users/dimisik","html_url":"https://github.com/dimisik","followers_url":"https://api.github.com/users/dimisik/followers","following_url":"https://api.github.com/users/dimisik/following{/other_user}","gists_url":"https://api.github.com/users/dimisik/gists{/gist_id}","starred_url":"https://api.github.com/users/dimisik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dimisik/subscriptions","organizations_url":"https://api.github.com/users/dimisik/orgs","repos_url":"https://api.github.com/users/dimisik/repos","events_url":"https://api.github.com/users/dimisik/events{/privacy}","received_events_url":"https://api.github.com/users/dimisik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2019-06-21T15:15:51Z","updated_at":"2019-06-25T18:13:59Z","closed_at":null,"author_association":"NONE","pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/pulls/94","html_url":"https://github.com/open-quantum-safe/openssl/pull/94","diff_url":"https://github.com/open-quantum-safe/openssl/pull/94.diff","patch_url":"https://github.com/open-quantum-safe/openssl/pull/94.patch"},"body":"This PR adds the dilithium (2,3, and 4) as auth method in TLS 1.3.\r\n\r\nNot ready to merge: \r\nCurrently, the branch compiles, generates self-signed root CA certificates for dilithium, and generates the server key pair and certificate request to CA.\r\n\r\nBut, gives this error when the CA attempts to generate the signed server certificate:\r\n> Signature verification error\r\n140361263314752:error:0D0C50C7:asn1 encoding routines:ASN1_item_verify:unknown signature algorithm:crypto/asn1/a_verify.c:115:\r\n\r\nAlso, I was not able to automatically generate the object files with the command `make generate_crypto_objects`  and filled the related filled manually (it might be related).\r\n"},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/comments/505560593","html_url":"https://github.com/open-quantum-safe/openssl/pull/94#issuecomment-505560593","issue_url":"https://api.github.com/repos/open-quantum-safe/openssl/issues/94","id":505560593,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNTU2MDU5Mw==","user":{"login":"csosto-pk","id":24617764,"node_id":"MDQ6VXNlcjI0NjE3NzY0","avatar_url":"https://avatars3.githubusercontent.com/u/24617764?v=4","gravatar_id":"","url":"https://api.github.com/users/csosto-pk","html_url":"https://github.com/csosto-pk","followers_url":"https://api.github.com/users/csosto-pk/followers","following_url":"https://api.github.com/users/csosto-pk/following{/other_user}","gists_url":"https://api.github.com/users/csosto-pk/gists{/gist_id}","starred_url":"https://api.github.com/users/csosto-pk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/csosto-pk/subscriptions","organizations_url":"https://api.github.com/users/csosto-pk/orgs","repos_url":"https://api.github.com/users/csosto-pk/repos","events_url":"https://api.github.com/users/csosto-pk/events{/privacy}","received_events_url":"https://api.github.com/users/csosto-pk/received_events","type":"User","site_admin":false},"created_at":"2019-06-25T18:13:59Z","updated_at":"2019-06-25T18:13:59Z","author_association":"NONE","body":"This looks similar to what is described in https://github.com/openssl/openssl/issues/7126\r\n\r\nBased on the packet captures, we see that the Dillithium algorithms are in the sig_algorithms extension in the Client Hello, but the client rejects the signature in the server response. I can't see the server cert_verify message because it is encrypted in TLS 1.3, but it looks like the server signs with an algorithm that is not in the original list sent by the client. "}},"public":true,"created_at":"2019-06-25T18:14:00Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"9892782261","type":"IssueCommentEvent","actor":{"id":16247285,"login":"christianpaquin","display_login":"christianpaquin","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","avatar_url":"https://avatars.githubusercontent.com/u/16247285?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"action":"created","issue":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/500","repository_url":"https://api.github.com/repos/open-quantum-safe/liboqs","labels_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/500/labels{/name}","comments_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/500/comments","events_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/500/events","html_url":"https://github.com/open-quantum-safe/liboqs/pull/500","id":460501729,"node_id":"MDExOlB1bGxSZXF1ZXN0MjkxNjIwMDgy","number":500,"title":"Switch Frodo to use MSR codebase directly","user":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars0.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"labels":[{"id":486323384,"node_id":"MDU6TGFiZWw0ODYzMjMzODQ=","url":"https://api.github.com/repos/open-quantum-safe/liboqs/labels/refactor","name":"refactor","color":"d4c5f9","default":false}],"state":"open","locked":false,"assignee":{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars0.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false},"assignees":[{"login":"dstebila","id":8843219,"node_id":"MDQ6VXNlcjg4NDMyMTk=","avatar_url":"https://avatars0.githubusercontent.com/u/8843219?v=4","gravatar_id":"","url":"https://api.github.com/users/dstebila","html_url":"https://github.com/dstebila","followers_url":"https://api.github.com/users/dstebila/followers","following_url":"https://api.github.com/users/dstebila/following{/other_user}","gists_url":"https://api.github.com/users/dstebila/gists{/gist_id}","starred_url":"https://api.github.com/users/dstebila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstebila/subscriptions","organizations_url":"https://api.github.com/users/dstebila/orgs","repos_url":"https://api.github.com/users/dstebila/repos","events_url":"https://api.github.com/users/dstebila/events{/privacy}","received_events_url":"https://api.github.com/users/dstebila/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2019-06-25T15:43:35Z","updated_at":"2019-06-25T21:16:18Z","closed_at":null,"author_association":"MEMBER","pull_request":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/pulls/500","html_url":"https://github.com/open-quantum-safe/liboqs/pull/500","diff_url":"https://github.com/open-quantum-safe/liboqs/pull/500.diff","patch_url":"https://github.com/open-quantum-safe/liboqs/pull/500.patch"},"body":"@christianpaquin As discussed here is a start at switching liboqs to use the Frodo code more directly from MSR rather than via PQClean.  \r\n\r\nIn the MSR codebase, there are multiple places where the various configuration macros get set -- including config.h, frodoxxx.c, and the Makefile.  I've consolidated all of that into one configuration file for each parameter set -- frodo640aes.h, etc. -- and then use gcc's `-include` option to force that configuration file to get loaded before compiling that group of files.  I'm not sure if there's a way to do the analogous thing in VisualStudio.  Do you know?  If not, then I can change it so that there's a frodo640aes.c file which includes the kem.c, noise.c, util.c files just like in Patrick's code base."},"comment":{"url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/comments/505625985","html_url":"https://github.com/open-quantum-safe/liboqs/pull/500#issuecomment-505625985","issue_url":"https://api.github.com/repos/open-quantum-safe/liboqs/issues/500","id":505625985,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNTYyNTk4NQ==","user":{"login":"christianpaquin","id":16247285,"node_id":"MDQ6VXNlcjE2MjQ3Mjg1","avatar_url":"https://avatars0.githubusercontent.com/u/16247285?v=4","gravatar_id":"","url":"https://api.github.com/users/christianpaquin","html_url":"https://github.com/christianpaquin","followers_url":"https://api.github.com/users/christianpaquin/followers","following_url":"https://api.github.com/users/christianpaquin/following{/other_user}","gists_url":"https://api.github.com/users/christianpaquin/gists{/gist_id}","starred_url":"https://api.github.com/users/christianpaquin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christianpaquin/subscriptions","organizations_url":"https://api.github.com/users/christianpaquin/orgs","repos_url":"https://api.github.com/users/christianpaquin/repos","events_url":"https://api.github.com/users/christianpaquin/events{/privacy}","received_events_url":"https://api.github.com/users/christianpaquin/received_events","type":"User","site_admin":false},"created_at":"2019-06-25T21:16:18Z","updated_at":"2019-06-25T21:16:18Z","author_association":"CONTRIBUTOR","body":"@dstebila, here is what I found. The [`/FI` compiler option](https://docs.microsoft.com/en-us/cpp/build/reference/fi-name-forced-include-file) (force include) should work. The `ForcedIncludeFiles` property can be added to a `ClCompile` element, specifying the include file. For example, \r\n`<ClCompile Include=\"..\\..\\src\\kem\\frodokem\\external\\kem_frodokem640aes.c\">`\r\nwould become\r\n`<ClCompile Include=\"..\\..\\src\\kem\\frodokem\\external\\kem_frodokem640aes.c\">`\r\n`   <ForcedIncludeFiles>..\\..\\src\\kem\\frodokem\\external\\frodo640aes.h</ForcedIncludeFiles>`\r\n`</ClCompile>`"}},"public":true,"created_at":"2019-06-25T21:16:18Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
