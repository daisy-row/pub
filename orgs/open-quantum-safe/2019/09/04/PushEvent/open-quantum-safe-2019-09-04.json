{"id":"10348316832","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"push_id":3997516093,"size":136,"distinct_size":136,"ref":"refs/heads/master","head":"3b62960c5cd94324ad5b02aedfa230fd8edd22f3","before":"be9953accf11010d54317e38f4138fb60460d580","commits":[{"sha":"98348562f09ae222034f8b3f85df082e721d00b3","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Update SDE to 8.35.0-2019-03-11.\n\nThe new version has trap flag emulation, which is great for our ABI\ntests. This CL doesn't enable it yet, however. The emulation is slightly\noff on when traps start and stop, so the ABI tester will need to tweaked\nto be more lenient.\n\nChange-Id: I0eb20176dc63eaa1c35f77379b34f7bb6c0b0407\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35464\nCommit-Queue: Adam Langley <agl@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/98348562f09ae222034f8b3f85df082e721d00b3"},{"sha":"a26d01719b4c56241424c8cfed2ca326ea229790","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Update other build tools.\n\nChange-Id: If3c8de4b81559acd88e32928ac9884ace294fd1d\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35465\nCommit-Queue: Adam Langley <agl@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/a26d01719b4c56241424c8cfed2ca326ea229790"},{"sha":"387b07b78dac785a341eeb2ff86e29393ffe8627","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Rename 'md' output parameter to 'out' and add bounds.\n\nWe usually name output parameters 'out'. (Someone made a C++ templating\nchange in Chromium which messed up const-ness, saw the compile error,\nand thought it was in MD5_Final.) Also tag the parameters with the\nsizes.\n\nSadly, there's a bit of goofiness around SHA224_Final/SHA256_Final and\nSHA384_Final/SHA512_Final, but they're just documentation anyway.\n(Though it does touch on the mess that is sha->md_len which would be\nnice to clear through somehow.)\n\nChange-Id: I1918b7eecfe13f13b217d01d4414ac2358802354\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35484\nCommit-Queue: David Benjamin <davidben@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/387b07b78dac785a341eeb2ff86e29393ffe8627"},{"sha":"be7006adaca67fd611e59985da6532e431a4c47f","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Update third_party/googletest.\n\nThe new version of googletest deprecates INSTANTIATE_TEST_CASE_P in\nfavor of INSTANTIATE_TEST_SUITE_P, so apply the change.\n\nThis requires blacklisting C4628 on MSVC 2015 which says about digraphs\ngiven foo<::std::tuple<...>>. Disable that warning. Digraphs are not\nuseful and C++11 apparently explicitly disambiguates that.\n\nIt also requires applying\nhttps://github.com/google/googletest/pull/2226, to deal with a warning\nin older MSVC.\n\nUpdate-Note: Consumers using BoringSSL with their own copy of googletest\nmust ensure googletest was updated to a version from 2019-01-03 or\nlater for INSTANTIATE_TEST_SUITE_P to work. (I believe all relevant\nconsumers are fine here. If anyone can't update googletest and is\nbuilding BoringSSL tests, building with\n-DINSTANTIATE_TEST_SUITE_P=INSTANTIATE_TEST_CASE_P would work as\nworkaround.)\n\nBug: chromium:936651\nChange-Id: I23ada8de34a53131cab88a36a88d3185ab085c64\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35504\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/be7006adaca67fd611e59985da6532e431a4c47f"},{"sha":"ad9eee1628aa4dac2ac3528cb6bb5ddf27e73560","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Handle CBB_cleanup on child CBBs more gracefully.\n\nChild and root CBBs share a type, but are different kinds of things. C++\nprogrammers sometimes mistakenly believe they should use ScopedCBB for\neverything. This mostly works because we NULL cbb->child->base on flush,\nmaking CBB_cleanup a no-op. This zeroing also skips the assert in\nCBB_cleanup. (If we ran it unconditionally, CBB_zero + CBB_cleanup would\nnot work.)\n\nHowever, if a CBB operation fails and a function returns early, the\nchild CBB is not cleared. ScopedCBB will then call CBB_cleanup which\ntrips the assert but, in release build, misbehaves.\n\nRun the assert unconditionally and, when the assert fails, still behave\nwell. To make this work with CBB_zero, negate is_top_level to is_child,\nso a flushed child CBB and a (presumably) root CBB in the zero state are\ndistinguishable.\n\nUpdate-Note: Code that was using CBB wrong may trip an assert in debug builds.\nChange-Id: Ifea7759e1d0331f2e727c59bbafa355d70fb9dba\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35524\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/ad9eee1628aa4dac2ac3528cb6bb5ddf27e73560"},{"sha":"4a136ea00592d1b467c1834e8c5fd2ce5bd98ecd","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Test AES-GCM-SIV with OPENSSL_SMALL.\n\nhttps://boringssl-review.googlesource.com/16805 inadvertently restored\nthe OPENSSL_SMALL condition in aead_test.cc. I probably handled some\nmerge conflict wrong.\n\nChange-Id: I1b29fbd4a0a57d94cd8b5bddf7c81ae10063e2a8\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35544\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/4a136ea00592d1b467c1834e8c5fd2ce5bd98ecd"},{"sha":"31ef16ac2d2f450a9816c861ce3d9d6f270e1be0","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Add missing nonce_len check to aead_aes_gcm_siv_asm_open.\n\nTest invalid nonce lengths more thoroughly to cover this case on all our\nAEADs. Thanks to Guido Vranken for catching this!\n\nIn doing so, this also reveals we have a ton of redundant error codes\n(https://crbug.com/boringssl/269). I'll tidy that up in a separate\nchange as it may require some changes to code in Android. For now, this\nchange uses CIPHER_R_UNSUPPORTED_NONCE_SIZE just to be consistent with\nthe rest of that file.\n\nBug: 268\nChange-Id: I0a479000ec3005ee55c828eaa92c8302b4625847\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35545\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/31ef16ac2d2f450a9816c861ce3d9d6f270e1be0"},{"sha":"4a8c05ffe826c61d50fdf13483b35097168faa5c","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Check key sizes in AES_set_*_key.\n\nAES_set_*_key used to call directly into aes_nohw_set_*_key which\ngracefully handles some NULL parameters and invalid bit sizes. However,\nwe now enable optimized assembly implementations, not all of which\nperform these checks. (vpaes does not.)\n\nThis is fine for the internal assembly functions themselves. Such checks\nare better written in C than assembly, and the calling C code usually\nalready knows the key size. (Indeed aes_ctr_set_key already assumes the\nassembly functions are infallible.) AES_set_*_key are public APIs,\nhowever. The NULL check is silly, but we should handle length-like\nchecks in public APIs.\n\nChange-Id: I259ae6b9811ceaa9dc5bd7173d5754ca7079cff8\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35564\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/4a8c05ffe826c61d50fdf13483b35097168faa5c"},{"sha":"65dc45cb57c7c6900a0657f6ee5c00fce9d366f5","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Fix EVP_CIPHER_CTX_copy for AES-GCM.\n\n7578f3f0dea091a3392f0be3216989bdc7355ad2 made it work, but\n26ba48a6fbbf7b25bbfb521d3f5591e2d5a0b4bd regressed it by losing the\nEVP_CIPH_CUSTOM_COPY flag. Additionally, we've since added an alignment\nrequirement to EVP_AES_GCM_CTX, which complicates things.\n\nThanks to Guido Vranken for catching this!\n\nBug: 270\nChange-Id: I71784593dc5a34d1334c92a4daa93546ec0ee2c3\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35624\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/65dc45cb57c7c6900a0657f6ee5c00fce9d366f5"},{"sha":"d1a6d23686e52ff3aa5637e78ce52a3b41e94c7b","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Test copying an EVP_MD_CTX.\n\nWe should have test coverage for this path.\n\nChange-Id: I8bcd9e2481562b3ad1e447c03a52b8ff4ff25606\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35625\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/d1a6d23686e52ff3aa5637e78ce52a3b41e94c7b"},{"sha":"2e26348e258e244293ce4633eb23a3c1f1c74933","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Fix and test EVP_PKEY_CTX copying.\n\nThe RSA-PSS salt length was not being copied, and copying an Ed25519\nEVP_MD_CTX did not work.\n\nThis is rather pointless (an EVP_PKEY_CTX is just a bundle of\nparameters), and it's unlikely anyone ever will use this. But since\nOpenSSL's EVP_PKEY signing API reuses EVP_MD_CTX and EVP_MD_CTX_copy_ex\nis plausible in that scenario, we're stuck making EVP_MD_CTX_copy_ex\nreachable for EVP_PKEY too. That then implies EVP_PKEY_dup should exist,\nand if it exists we should be testing it.\n\nChange-Id: I189435d0c716a83f58e1d8ac4abc2c409ecfea64\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35626\nCommit-Queue: David Benjamin <davidben@google.com>\nCommit-Queue: Adam Langley <agl@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/2e26348e258e244293ce4633eb23a3c1f1c74933"},{"sha":"c9827e073f64e353c4891ecc2c73721882543ee0","author":{"name":"Adam Langley","email":"53ba49dd799bae637928e6d7322eab709f50b69d@gmail.com"},"message":"Output a ClientHello during handoff.\n\nThis will allow edge servers to pass judgement on the ClientHello before\ncompleting the handoff process. This also means that edge servers will\nnow enforce ClientHello well-formedness — previously that check didn't\noccur until the handshaker tried to parse the handoff submission.\n\nChange-Id: I9804ac0224632b4b4381c1a81f434d188e0b9376\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35584\nCommit-Queue: Adam Langley <agl@google.com>\nReviewed-by: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/c9827e073f64e353c4891ecc2c73721882543ee0"},{"sha":"9df41ae953bfc24195be6623653c133f274c88d3","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Give ENGINE_free a return value.\n\nThis simplifies building against cryptography.io, which expects\nENGINE_free to return something.\n\nChange-Id: Id1590abab7f47dae6b3a9d593fa7b0fe371c9912\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35644\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/9df41ae953bfc24195be6623653c133f274c88d3"},{"sha":"c60b42bf7e9994e411db2bc88b1178a694176bea","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Add X509_CHECK_FLAG_NEVER_CHECK_SUBJECT.\n\ncryptography.io uses this and it's also the correct behavior. Ideally it would\nbe default, but start with just adding the flag. See also\ndd60efea955e41a6f0926f93ec1503c6f83c4e58 from upstream.\n\nChange-Id: I9e13cdbfd44c904ba5bd69a5a66c68c4b7596867\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35645\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/c60b42bf7e9994e411db2bc88b1178a694176bea"},{"sha":"923feba60897676019b00d017ae4eba796a1f6ff","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Silently ignore X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT.\n\nThis flag is backwards. We want to check the common name less, not more. See if\nanything was actually relying on this.\n\nUpdate-Note: X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT is now ignored.\nChange-Id: I8288d57540f8117059e58d72cc173aa4d3077fb6\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35646\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/923feba60897676019b00d017ae4eba796a1f6ff"},{"sha":"d86eb1bbb32c622490241032fae4e24782aeff91","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Disable the common name fallback on *any* SAN list.\n\nThis aligns with the Go crypto/x509 behavior and reduces the cases when\nthe SAN to CN fallback occurs. If the certificate is new enough to have\na SAN list, even if it only contains email or IP addresses, it is\nreasonable to assume the certificate is new enough that the common name\nis not a DNS name.\n\nUpdate-Note: Our certificate verification is getting slightly stricter.\nChange-Id: I9e3466d8dd8a722405c546181a589f797efa43f9\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35647\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/d86eb1bbb32c622490241032fae4e24782aeff91"},{"sha":"e55c64fdd3f47413e17eaa8e4f4d2a62622a01eb","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Make X509_verify_cert_error_string thread-safe.\n\nIf the error is unknown, we should not return a static buffer. See also\nc0a445a9f279d8c4a519b58e52a50112f2341070 from upstream.\n\nChange-Id: I23e1a3b9e29b34ab3dff41b8a58155683bbb9bd2\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35684\nCommit-Queue: David Benjamin <davidben@google.com>\nCommit-Queue: Adam Langley <agl@google.com>\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/e55c64fdd3f47413e17eaa8e4f4d2a62622a01eb"},{"sha":"c67076d653f7501136f7b208df4b011a7275e8f5","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Require certificates under name constraints use SANs.\n\nThe common name fallback does not interact well with name constraints.\nUntil we remove this fallback, we must resolve this conflict.\n\nBlindly applying name constraints to the common name will reject\n\"decorative\" common names that aren't intended to be hostnames (e.g.\n[0]). We need to guess based on format whether the common name is a DNS\nname. It is important this same check is applied to *both* name\nconstraints and name matching, which means the OpenSSL version (see\n5bd5dcd49605ca2aa7931599894302a3ac4b0b04,\nd02d80b2e80adfdde49f76cf7c7af4e013f45005, and\n55a6250f1e7336e8a7d89fb609eb23398715ff6f) is unsuitable as a\ncompatibility data point.\n\nIn theory we could limit this to chains with name constraints, which are\nuncommon, but X509_check_host sees only the leaf. We must apply it\nuniformly. That means a strict check risks problems with malformed\nnon-WebPKI setups like [1].\n\nFor a first pass, mirror Go's behavior. Like Go, rather than run\nSAN-less DNS-like common names through name constraints, we simply\nreject all such certificates. Name constraints now exclude all leaf\ncertificates that can trigger the common name fallback. They are rare\nenough that we can hopefully hold them to a higher standard.\n\nNote this does not make misclassified decorative common names any worse,\ncompared to the checking the name constraint. Such names would not have\nmatched the constraint anyway.\n\nUpdate-Note: This can may cause two kinds of errors:\n\n1. Leaf certificates whose chain contains a name constraint and lack\n   SANs may be rejected with X509_V_ERR_NAME_CONSTRAINTS_WITHOUT_SANS.\n\n2. Leaf certificates which use the common name fallback and verify\n   against an insufficiently DNS-looking hostname may fail with\n   X509_V_ERR_HOSTNAME_MISMATCH.\n\nIn both cases, the fix is to include the subjectAltName in the\ncertificate, rather than rely on the common name fallback. (Refining the\nheuristic is also an option, but the two failure modes pull it in\nopposite directions, so this is tricky.)\n\n[0] https://github.com/golang/go/issues/24151\n[1] https://github.com/GoogleCloudPlatform/cloudsql-proxy/issues/194\n\nChange-Id: If25557de428768292a14ba3bdeeffbd74e3a3bf8\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35665\nReviewed-by: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/c67076d653f7501136f7b208df4b011a7275e8f5"},{"sha":"7540cc2ec0a5c29306ed852483f833c61eddf133","author":{"name":"Adam Langley","email":"db68fba232b2c49ed3e9d3081df349dde7b61dfd@google.com"},"message":"Predeclare enums in base.h\n\nIncluding ssl.h is quite a chunk of code and #defines, so we've tried to\nlimit its spread internally in the interests of code hygine given that\nwe have a multi-billion-line repo.\n\nHowever, header files that mention enums from ssl.h currently need to\ninclude ssl.h. For example, your class may have static class member\nfunctions intended to be callbacks, and they need to be class members\nbecause they'll call other private methods.\n\nC cannot predeclare enums, but C++ can if you explicitly type them.\nSadly C doesn't support explicit types. So option one is to move the\nenums into base.h. That works, but the enums properly live in ssl.h and\nreading the header file is a lot clearer if you don't have to jump\naround to see all the pieces.\n\nSo option two (this change) is to explicitly type and predelcare the\nenums in base.h for C++ only. The worry now is that C and C++ might\ndisagree about the type of the enums. However, this has already\nhappened: at least for |ssl_private_key_result_t|, g++ thinks that it's\nan |int| (without any explicit type) and gcc thinks that it's an\n|unsigned|. At least they're the same length, I guess?\n\nSo, to make sure that this doesn't slip any more, this change also adds\n|ssl_test_c.c| which tests that C views the enums as having the same\nsize as an |int|, at least.\n\nChange-Id: I8248583ec997021f8226d5a798609f6afc96dac4\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/35664\nReviewed-by: Adam Langley <agl@google.com>\nReviewed-by: David Benjamin <davidben@google.com>\nCommit-Queue: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/7540cc2ec0a5c29306ed852483f833c61eddf133"},{"sha":"777a239175c26fcaa4c6c2049fedc90e859bd9b6","author":{"name":"Steven Valdez","email":"43676b5eb007f4da62c47fa3663dbb96986e480e@google.com"},"message":"Hold off flushing NewSessionTicket until write.\n\nIn TLS 1.3, if the client doesn't read from the server, the server might hang\nfrom a filled buffer while waiting for the client to read. Instead we avoid\nflushing the NewSessionTicket until there is a write from the server.\n\nUpdate-Note: This delays the flushing of the NewSessionTicket until the first\nwrite. Consumers may need to force an empty write to send the tickets if they\naren't writing any data to the client.\n\nChange-Id: Iec92043567e9a68c0a250533b7745eddeeae2341\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/34948\nCommit-Queue: Steven Valdez <svaldez@google.com>\nReviewed-by: David Benjamin <davidben@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/777a239175c26fcaa4c6c2049fedc90e859bd9b6"}]},"public":true,"created_at":"2019-09-04T19:30:29Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"10348324381","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"push_id":3997519937,"size":1,"distinct_size":1,"ref":"refs/heads/master","head":"d041f11134951ea34c549032d20d041112697e4c","before":"3b62960c5cd94324ad5b02aedfa230fd8edd22f3","commits":[{"sha":"d041f11134951ea34c549032d20d041112697e4c","author":{"name":"David Benjamin","email":"348b1b6801801c3d890b2e1589a8e36441d09fdc@google.com"},"message":"Fix cross-compile of Android on Windows.\n\nWhen running the ARM perlasm files on Windows, close STDOUT fails. There\nappears to be some weird quirk on Windows when one replaces STDOUT with\na pipe. The x86_64.pl files all avoid this by opening OUT and then\nsetting *STDOUT=*OUT. Align all the ARM files with that pattern.\n\nSee https://ci.appveyor.com/project/conscrypt/conscrypt\n\nChange-Id: Ibee9427a05d806f7f23a6d9817394cfabf2f534a\nReviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/37324\nReviewed-by: Kenny Root <kroot@google.com>\nReviewed-by: Adam Langley <agl@google.com>\nCommit-Queue: Adam Langley <agl@google.com>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/d041f11134951ea34c549032d20d041112697e4c"}]},"public":true,"created_at":"2019-09-04T19:31:35Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"10348722958","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"push_id":3997724962,"size":1,"distinct_size":1,"ref":"refs/heads/add-oqs-kems","head":"68ab644221581b061abc1c4835dd05f87009a365","before":"e5b22ab48999a6239d604bcc6e9e64285c6f4bae","commits":[{"sha":"68ab644221581b061abc1c4835dd05f87009a365","author":{"name":"xvzcf","email":"0d09a926d00eb6e4de1be873a121117412a307d0@users.noreply.github.com"},"message":"Added basic support for using liboqs kexs.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/68ab644221581b061abc1c4835dd05f87009a365"}]},"public":true,"created_at":"2019-09-04T20:30:02Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"10349027263","type":"PushEvent","actor":{"id":6188943,"login":"vsoftco","display_login":"vsoftco","gravatar_id":"","url":"https://api.github.com/users/vsoftco","avatar_url":"https://avatars.githubusercontent.com/u/6188943?"},"repo":{"id":162497174,"name":"open-quantum-safe/liboqs-python","url":"https://api.github.com/repos/open-quantum-safe/liboqs-python"},"payload":{"push_id":3997882922,"size":1,"distinct_size":1,"ref":"refs/heads/vsoftco-new-API-sig/KEM_enabled","head":"f79ae005d1fe4f97a50584d7da763c53c7042318","before":"e6d52b0a645acd83503558a7ca6c258846857674","commits":[{"sha":"f79ae005d1fe4f97a50584d7da763c53c7042318","author":{"name":"Vlad Gheorghiu","email":"ec1ed747be3d89806c6c74926d20580a1eb601fe@gmail.com"},"message":"new API","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs-python/commits/f79ae005d1fe4f97a50584d7da763c53c7042318"}]},"public":true,"created_at":"2019-09-04T21:15:37Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"10349079676","type":"PushEvent","actor":{"id":6188943,"login":"vsoftco","display_login":"vsoftco","gravatar_id":"","url":"https://api.github.com/users/vsoftco","avatar_url":"https://avatars.githubusercontent.com/u/6188943?"},"repo":{"id":170719151,"name":"open-quantum-safe/liboqs-cpp","url":"https://api.github.com/repos/open-quantum-safe/liboqs-cpp"},"payload":{"push_id":3997910633,"size":1,"distinct_size":1,"ref":"refs/heads/master","head":"22afc70916a53906e310fa20d864bc84d51d9340","before":"6186c623b658b6b1df84e0fa8f6cdafb8a106d87","commits":[{"sha":"22afc70916a53906e310fa20d864bc84d51d9340","author":{"name":"Vlad Gheorghiu","email":"ec1ed747be3d89806c6c74926d20580a1eb601fe@gmail.com"},"message":"Update oqs_cpp.h","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs-cpp/commits/22afc70916a53906e310fa20d864bc84d51d9340"}]},"public":true,"created_at":"2019-09-04T21:23:58Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
