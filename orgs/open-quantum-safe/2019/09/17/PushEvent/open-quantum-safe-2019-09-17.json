{"id":"10428945435","type":"PushEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"push_id":4041037628,"size":2,"distinct_size":2,"ref":"refs/heads/OQS-OpenSSL_1_1_1-stable","head":"71203e8d554be15f4a1234200d6b15bbaea01ff6","before":"7acbdb13e226bcdec5e3b6156a95a956a6383f3b","commits":[{"sha":"5ca5e645180c93fa4a1c39efa6a96f1ef2f2bab6","author":{"name":"Christian Paquin","email":"5e354fbc60a50a4914bb55be34107b73e39fe98c@microsoft.com"},"message":"Merged-in OpenSSL1.1.1d tag from upstream.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/5ca5e645180c93fa4a1c39efa6a96f1ef2f2bab6"},{"sha":"71203e8d554be15f4a1234200d6b15bbaea01ff6","author":{"name":"Douglas Stebila","email":"b00bf5c152be32a8a3632a9751d43d05edde6c4e@users.noreply.github.com"},"message":"Merge pull request #114 from christianpaquin/cp-merge-1.1.1d\n\nMerged-in OpenSSL1.1.1d tag from upstream.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/71203e8d554be15f4a1234200d6b15bbaea01ff6"}]},"public":true,"created_at":"2019-09-17T00:39:40Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"10428961428","type":"PushEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":66578799,"name":"open-quantum-safe/openssl","url":"https://api.github.com/repos/open-quantum-safe/openssl"},"payload":{"push_id":4041046384,"size":28,"distinct_size":28,"ref":"refs/heads/OQS-OpenSSL_1_0_2-stable","head":"5476be0cc2804021166278770c6a5041af6f0907","before":"f825a2fa7fb19764511cd2a2b4590a13d986508a","commits":[{"sha":"ec36b3298502fe71110a14197c54555b6cf6ca75","author":{"name":"Richard Levitte","email":"320bca71fc381a4a025636043ca86e734e31cf8b@levitte.org"},"message":"Prepare for 1.0.2t-dev\n\nReviewed-by: Matt Caswell <matt@openssl.org>","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/ec36b3298502fe71110a14197c54555b6cf6ca75"},{"sha":"8479e9e97354add3c562670db66b5f8151dc3b2e","author":{"name":"Acheev Bhagat","email":"2ea6dd4fc0ab05c37ed70c9ff92bb688a37d8362@hotmail.com"},"message":"Replace BIO_printf with ASN1_STRING_print in GENERAL_NAME_print\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Matthias St. Pierre <Matthias.St.Pierre@ncp-e.com>\n(Merged from https://github.com/openssl/openssl/pull/9101)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/8479e9e97354add3c562670db66b5f8151dc3b2e"},{"sha":"3750879c117fddf583ef5d46069bac2b4d6523b8","author":{"name":"Bernd Edlinger","email":"ac6902843ae77cc0d49b9c8ddec4cbf141db1bb7@hotmail.de"},"message":"Fix building linux-armv4 with --strict-warnings\n\n\n(cherry picked from commit 0e0f8116e247912f5c48f8b3786e543f37fc1f87)\n\nReviewed-by: Paul Dale <paul.dale@oracle.com>\nReviewed-by: Nicola Tuveri <nic.tuv@gmail.com>\n(Merged from https://github.com/openssl/openssl/pull/8243)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/3750879c117fddf583ef5d46069bac2b4d6523b8"},{"sha":"7a7afc559ebc0ad88390cc62bfc34c221d595831","author":{"name":"Bernd Edlinger","email":"ac6902843ae77cc0d49b9c8ddec4cbf141db1bb7@hotmail.de"},"message":"Fix a warning about missing prototype on arm\n\n\n(cherry picked from commit 5fc89c1af837026b5812526ef6f519bf7ca42f16)\n\nReviewed-by: Paul Dale <paul.dale@oracle.com>\nReviewed-by: Nicola Tuveri <nic.tuv@gmail.com>\n(Merged from https://github.com/openssl/openssl/pull/8243)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/7a7afc559ebc0ad88390cc62bfc34c221d595831"},{"sha":"aa8b244e5c22193078e3e80fad1f5b27bf62c73b","author":{"name":"Bernd Edlinger","email":"ac6902843ae77cc0d49b9c8ddec4cbf141db1bb7@hotmail.de"},"message":"Add value_barriers in constant time select functions\n\nThe barriers prevent the compiler from narrowing down the\npossible value range of the mask and ~mask in the select\nstatements, which avoids the recognition of the select\nand turning it into a conditional load or branch.\n\nReviewed-by: Paul Dale <paul.dale@oracle.com>\n(Merged from https://github.com/openssl/openssl/pull/9419)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/aa8b244e5c22193078e3e80fad1f5b27bf62c73b"},{"sha":"0bc650d58a58a8b4af97639b952eac3558bb982e","author":{"name":"Bernd Edlinger","email":"ac6902843ae77cc0d49b9c8ddec4cbf141db1bb7@hotmail.de"},"message":"Use trusty for travis builds\n\nthis works around build failures due to clang\nerror: unknown warning option '-Wno-extended-offsetof'\n\n[extended tests]\n\nReviewed-by: Kurt Roeckx <kurt@roeckx.be>\n(Merged from https://github.com/openssl/openssl/pull/9425)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/0bc650d58a58a8b4af97639b952eac3558bb982e"},{"sha":"d333ebaf9c77332754a9d5e111e2f53e1de54fdd","author":{"name":"Richard Levitte","email":"5fb523282dd7956571c80524edc2dccfa0bd8234@openssl.org"},"message":"Document issue with default installation paths on diverse Windows targets\n\nFor all config targets (except VMS, because it has a completely different\nset of scripts), '/usr/local/ssl' is the default prefix for installation\nof programs and libraries, as well as the path for OpenSSL run-time\nconfiguration.\n\nFor programs built to run in a Windows environment, this default is\nunsafe, and the user should set a different prefix.  This has been hinted\nat in some documentation but not all, and the danger of leaving the\ndefault as is hasn't been documented at all.\n\nThis change documents the issue as a caveat lector, and all configuration\nexamples now include an example --prefix.\n\nCVE-2019-1552\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9456)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/d333ebaf9c77332754a9d5e111e2f53e1de54fdd"},{"sha":"7fafaf27c2c2990fde2798424a38ce8443dae595","author":{"name":"Bernd Edlinger","email":"ac6902843ae77cc0d49b9c8ddec4cbf141db1bb7@hotmail.de"},"message":"Fix error handling in X509_chain_up_ref\n\nReviewed-by: Kurt Roeckx <kurt@roeckx.be>\nReviewed-by: Tomas Mraz <tmraz@fedoraproject.org>\n(Merged from https://github.com/openssl/openssl/pull/9615)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/7fafaf27c2c2990fde2798424a38ce8443dae595"},{"sha":"55611d549bcf65e0de04938adbf403ccf02f241b","author":{"name":"Cesar Pereida Garcia","email":"e763064feb35a14da187279b831c26736bf051ca@tut.fi"},"message":"Fix SCA vulnerability when using PVK and MSBLOB key formats\n\nThis commit addresses a side-channel vulnerability present when\nPVK and MSBLOB key formats are loaded into OpenSSL.\nThe public key was not computed using a constant-time exponentiation\nfunction.\n\nThis issue was discovered and reported by the NISEC group at TAU Finland.\n\nReviewed-by: Nicola Tuveri <nic.tuv@gmail.com>\nReviewed-by: Bernd Edlinger <bernd.edlinger@hotmail.de>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9638)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/55611d549bcf65e0de04938adbf403ccf02f241b"},{"sha":"2e9d293447b95c2a69eb5ff07fe974361d779444","author":{"name":"Nicola Tuveri","email":"5a38b4ac03c90be61ead22c1d11b6e9f49425984@gmail.com"},"message":"Fix a SCA leak using BN_bn2bin()\n\nBN_bn2bin() is not constant-time and leaks the number of bits in the\nprocessed BIGNUM.\n\nThe specialized methods in ecp_nistp224.c, ecp_nistp256.c and\necp_nistp521.c internally used BN_bn2bin() to convert scalars into the\ninternal fixed length representation.\n\nThis can leak during ECDSA/ECDH key generation or handling the nonce\nwhile generating an ECDSA signature, when using these implementations.\nThe amount and risk of leaked information useful for a SCA attack\nvaries for each of the three curves, as it depends mainly on the\nratio between the bitlength of the curve subgroup order (governing the\nsize of the secret nonce/key) and the limb size for the internal BIGNUM\nrepresentation (which depends on the compilation target architecture).\n\nTo fix this, we replace BN_bn2bin() with bn_bn2binpad(), bounding the\noutput length to the width of the internal representation buffer: this\nlength is public.\n\nInternally the final implementation of both bn_bn2binpad() and\nBN_bn2bin() already has masking in place to avoid leaking bn->top\nthrough memory access patterns.\nMemory access pattern still leaks bn->dmax, the size of the lazily\nallocated buffer for representing the BIGNUM, which is inevitable with\nthe current BIGNUM architecture: reading past bn->dmax would be an\nout-of-bound read.\nAs such, it's the caller responsibility to ensure that bn->dmax does not\nleak secret information, by explicitly expanding the internal BIGNUM\nbuffer to a public value sufficient to avoid any lazy reallocation\nwhile manipulating it: this is already done at the top level alongside\nsetting the BN_FLG_CONSTTIME.\n\nFinally, the internal implementation of bn_bn2binpad() indirectly calls\nBN_num_bits() via BN_num_bytes(): the current implementation of\nBN_num_bits() can leak information to a SCA attacker, and is addressed\nin the next commit.\n\nThanks to David Schrammel and Samuel Weiser for reporting this issue\nthrough responsible disclosure.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Bernd Edlinger <bernd.edlinger@hotmail.de>\n(Merged from https://github.com/openssl/openssl/pull/9793)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/2e9d293447b95c2a69eb5ff07fe974361d779444"},{"sha":"853950f7bfc71b61a2e62db2563748b350b715cb","author":{"name":"Nicola Tuveri","email":"5a38b4ac03c90be61ead22c1d11b6e9f49425984@gmail.com"},"message":"Make BN_num_bits() consttime upon BN_FLG_CONSTTIME\n\nThis issue was partially addressed by commit\n972c87dfc7e765bd28a4964519c362f0d3a58ca4, which hardened its callee\nBN_num_bits_word() to avoid leaking the most-significant word of its\nargument via branching and memory access pattern.\nThe commit message also reported:\n> There are a few places where BN_num_bits is called on an input where\n> the bit length is also secret. This does *not* fully resolve those\n> cases as we still only look at the top word.\n\nBN_num_bits() is called directly or indirectly (e.g., through\nBN_num_bytes() or BN_bn2binpad() ) in various parts of the `crypto/ec`\ncode, notably in all the currently supported implementations of scalar\nmultiplication (in the generic path through ec_scalar_mul_ladder() as\nwell as in dedicated methods like ecp_nistp{224,256,521}.c and\necp_nistz256.c).\n\nUnder the right conditions, a motivated SCA attacker could retrieve the\nsecret bitlength of a secret nonce through this vulnerability,\npotentially leading, ultimately, to recover a long-term secret key.\n\nWith this commit, exclusively for BIGNUMs that are flagged with\nBN_FLG_CONSTTIME, instead of accessing only bn->top, all the limbs of\nthe BIGNUM are accessed up to bn->dmax and bitwise masking is used to\navoid branching.\n\nMemory access pattern still leaks bn->dmax, the size of the lazily\nallocated buffer for representing the BIGNUM, which is inevitable with\nthe current BIGNUM architecture: reading past bn->dmax would be an\nout-of-bound read.\nAs such, it's the caller responsibility to ensure that bn->dmax does not\nleak secret information, by explicitly expanding the internal BIGNUM\nbuffer to a public value sufficient to avoid any lazy reallocation\nwhile manipulating it: this should be already done at the top level\nalongside setting the BN_FLG_CONSTTIME.\n\nThanks to David Schrammel and Samuel Weiser for reporting this issue\nthrough responsible disclosure.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Bernd Edlinger <bernd.edlinger@hotmail.de>\n(Merged from https://github.com/openssl/openssl/pull/9793)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/853950f7bfc71b61a2e62db2563748b350b715cb"},{"sha":"bde4a001b3ad4b90a4dbf5d31b18e30e42230e69","author":{"name":"Nicola Tuveri","email":"5a38b4ac03c90be61ead22c1d11b6e9f49425984@gmail.com"},"message":"Uniform bn_bn2binpad() and bn_bn2lebinpad() implementations\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Bernd Edlinger <bernd.edlinger@hotmail.de>\n(Merged from https://github.com/openssl/openssl/pull/9793)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/bde4a001b3ad4b90a4dbf5d31b18e30e42230e69"},{"sha":"e3679b1547fc3b2d8e01943004d473c323b6f20d","author":{"name":"Nicola Tuveri","email":"5a38b4ac03c90be61ead22c1d11b6e9f49425984@gmail.com"},"message":"[ec/ecp_nistp*.c] remove flip_endian()\n\nReplace flip_endian() by using the little endian specific\nbn_bn2lebinpad() and bn_lebin2bn().\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Bernd Edlinger <bernd.edlinger@hotmail.de>\n(Merged from https://github.com/openssl/openssl/pull/9793)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/e3679b1547fc3b2d8e01943004d473c323b6f20d"},{"sha":"920e37e3a7d6bb935dba446eb80cacb4c34e7488","author":{"name":"Nicola Tuveri","email":"5a38b4ac03c90be61ead22c1d11b6e9f49425984@gmail.com"},"message":"[ec/ecp_nistp*.c] restyle: use {} around `else` too\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Bernd Edlinger <bernd.edlinger@hotmail.de>\n(Merged from https://github.com/openssl/openssl/pull/9793)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/920e37e3a7d6bb935dba446eb80cacb4c34e7488"},{"sha":"6a7bad0fd7a2125d075e459b33145d4ce5ee0de9","author":{"name":"Dr. Matthias St. Pierre","email":"1910231d24f125aceac7850dc92279eee8d52323@ncp-e.com"},"message":"Configure: clang: add -Wno-unknown-warning-option\n\nFixes travis build errors due to clang\n\n    error: unknown warning option '-Wno-extended-offsetof'\n\nIt seems like '-Wextended-offsetof' was removed from clang in version 6.0.0,\n(see [1], [2]). While gcc ignores unknown options of the type '-Wno-xxx',\nclang by default issues a warning [-Wunknown-warning-option] (see [3]), which\ntogether with '-Werror' causes the build to fail.\n\nThis commit adds the '-Wno-unknown-warning-option' option to make clang\nbehave more relaxed like gcc.\n\n[1] https://reviews.llvm.org/D40267\n[2] https://github.com/llvm/llvm-project/commit/52a3ca9e2909\n[3] https://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-warning-option\n\n[extended tests]\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Bernd Edlinger <bernd.edlinger@hotmail.de>\n(Merged from https://github.com/openssl/openssl/pull/9446)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/6a7bad0fd7a2125d075e459b33145d4ce5ee0de9"},{"sha":"adaebd81a01e2926a3106feec0476db7c8d7b362","author":{"name":"Cesar Pereida Garcia","email":"e763064feb35a14da187279b831c26736bf051ca@tut.fi"},"message":"[crypto/rsa] Fix multiple SCA vulnerabilities during RSA key validation.\n\nThis commit addresses multiple side-channel vulnerabilities present during RSA key validation.\nPrivate key parameters are re-computed using variable-time functions.\n\nThis issue was discovered and reported by the NISEC group at TAU Finland.\n\nReviewed-by: Bernd Edlinger <bernd.edlinger@hotmail.de>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9785)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/adaebd81a01e2926a3106feec0476db7c8d7b362"},{"sha":"21c856b75d81eff61aa63b4f036bb64a85bf6d46","author":{"name":"Billy Brumley","email":"dee325240944d577deac810fd6a9877088b39228@gmail.com"},"message":"[crypto/ec] for ECC parameters with NULL or zero cofactor, compute it\n\nThe cofactor argument to EC_GROUP_set_generator is optional, and SCA\nmitigations for ECC currently use it. So the library currently falls\nback to very old SCA-vulnerable code if the cofactor is not present.\n\nThis PR allows EC_GROUP_set_generator to compute the cofactor for all\ncurves of cryptographic interest. Steering scalar multiplication to more\nSCA-robust code.\n\nThis issue affects persisted private keys in explicit parameter form,\nwhere the (optional) cofactor field is zero or absent.\n\nIt also affects curves not built-in to the library, but constructed\nprogramatically with explicit parameters, then calling\nEC_GROUP_set_generator with a nonsensical value (NULL, zero).\n\nThe very old scalar multiplication code is known to be vulnerable to\nlocal uarch attacks, outside of the OpenSSL threat model. New results\nsuggest the code path is also vulnerable to traditional wall clock\ntiming attacks.\n\nCVE-2019-1547\n\nReviewed-by: Nicola Tuveri <nic.tuv@gmail.com>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9799)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/21c856b75d81eff61aa63b4f036bb64a85bf6d46"},{"sha":"66fd724daa89996bb775ab8911479c11143b44df","author":{"name":"Nicola Tuveri","email":"5a38b4ac03c90be61ead22c1d11b6e9f49425984@gmail.com"},"message":"[ec] Match built-in curves on EC_GROUP_new_from_ecparameters\n\nDescription\n-----------\n\nUpon `EC_GROUP_new_from_ecparameters()` check if the parameters match any\nof the built-in curves. If that is the case, return a new\n`EC_GROUP_new_by_curve_name()` object instead of the explicit parameters\n`EC_GROUP`.\n\nThis affects all users of `EC_GROUP_new_from_ecparameters()`:\n- direct calls to `EC_GROUP_new_from_ecparameters()`\n- direct calls to `EC_GROUP_new_from_ecpkparameters()` with an explicit\n  parameters argument\n- ASN.1 parsing of explicit parameters keys (as it eventually\n  ends up calling `EC_GROUP_new_from_ecpkparameters()`)\n\nA parsed explicit parameter key will still be marked with the\n`OPENSSL_EC_EXPLICIT_CURVE` ASN.1 flag on load, so, unless\nprogrammatically forced otherwise, if the key is eventually serialized\nthe output will still be encoded with explicit parameters, even if\ninternally it is treated as a named curve `EC_GROUP`.\n\nBefore this change, creating any `EC_GROUP` object using\n`EC_GROUP_new_from_ecparameters()`, yielded an object associated with\nthe default generic `EC_METHOD`, but this was never guaranteed in the\ndocumentation.\nAfter this commit, users of the library that intentionally want to\ncreate an `EC_GROUP` object using a specific `EC_METHOD` can still\nexplicitly call `EC_GROUP_new(foo_method)` and then manually set the\ncurve parameters using `EC_GROUP_set_*()`.\n\nMotivation\n----------\n\nThis has obvious performance benefits for the built-in curves with\nspecialized `EC_METHOD`s and subtle but important security benefits:\n- the specialized methods have better security hardening than the\n  generic implementations\n- optional fields in the parameter encoding, like the `cofactor`, cannot\n  be leveraged by an attacker to force execution of the less secure\n  code-paths for single point scalar multiplication\n- in general, this leads to reducing the attack surface\n\nCheck the manuscript at https://arxiv.org/abs/1909.01785 for an in depth\nanalysis of the issues related to this commit.\n\nIt should be noted that `libssl` does not allow to negotiate explicit\nparameters (as per RFC 8422), so it is not directly affected by the\nconsequences of using explicit parameters that this commit fixes.\nOn the other hand, we detected external applications and users in the\nwild that use explicit parameters by default (and sometimes using 0 as\nthe cofactor value, which is technically not a valid value per the\nspecification, but is tolerated by parsers for wider compatibility given\nthat the field is optional).\nThese external users of `libcrypto` are exposed to these vulnerabilities\nand their security will benefit from this commit.\n\nRelated commits\n---------------\n\nWhile this commit is beneficial for users using built-in curves and\nexplicit parameters encoding for serialized keys, commit\nb783beeadf6b80bc431e6f3230b5d5585c87ef87 (and its equivalents for the\n1.0.2, 1.1.0 and 1.1.1 stable branches) fixes the consequences of the\ninvalid cofactor values more in general also for other curves\n(CVE-2019-1547).\n\nThe following list covers commits in `master` that are related to the\nvulnerabilities presented in the manuscript motivating this commit:\n\n- d2baf88c43 [crypto/rsa] Set the constant-time flag in multi-prime RSA too\n- 311e903d84 [crypto/asn1] Fix multiple SCA vulnerabilities during RSA key validation.\n- b783beeadf [crypto/ec] for ECC parameters with NULL or zero cofactor, compute it\n- 724339ff44 Fix SCA vulnerability when using PVK and MSBLOB key formats\n\nNote that the PRs that contributed the listed commits also include other\ncommits providing related testing and documentation, in addition to\nlinks to PRs and commits backporting the fixes to the 1.0.2, 1.1.0 and\n1.1.1 branches.\n\nThis commit includes a partial backport of\nhttps://github.com/openssl/openssl/pull/8555\n(commit 8402cd5f75f8c2f60d8bd39775b24b03dd8b3b38)\nfor which the main author is Shane Lontis.\n\nResponsible Disclosure\n----------------------\n\nThis and the other issues presented in https://arxiv.org/abs/1909.01785\nwere reported by Cesar Pereida García, Sohaib ul Hassan, Nicola Tuveri,\nIaroslav Gridin, Alejandro Cabrera Aldaya and Billy Bob Brumley from the\nNISEC group at Tampere University, FINLAND.\n\nThe OpenSSL Security Team evaluated the security risk for this\nvulnerability as low, and encouraged to propose fixes using public Pull\nRequests.\n\n_______________________________________________________________________________\n\nCo-authored-by: Shane Lontis <shane.lontis@oracle.com>\n\n(Backport from https://github.com/openssl/openssl/pull/9808)\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9811)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/66fd724daa89996bb775ab8911479c11143b44df"},{"sha":"8bf7d77f33263c81b8e293347edc9a6e43f24d0e","author":{"name":"Matt Caswell","email":"1fa2ef4755a9226cb9a0a4840bd89b158ac71391@openssl.org"},"message":"Update CHANGES and NEWS for the new release\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9843)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/8bf7d77f33263c81b8e293347edc9a6e43f24d0e"},{"sha":"e21f8cf78a125cd3c8c0d1a1a6c8bb0b901f893f","author":{"name":"Bernd Edlinger","email":"ac6902843ae77cc0d49b9c8ddec4cbf141db1bb7@hotmail.de"},"message":"Fix a padding oracle in PKCS7_dataDecode and CMS_decrypt_set1_pkey\n\nAn attack is simple, if the first CMS_recipientInfo is valid but the\nsecond CMS_recipientInfo is chosen ciphertext. If the second\nrecipientInfo decodes to PKCS #1 v1.5 form plaintext, the correct\nencryption key will be replaced by garbage, and the message cannot be\ndecoded, but if the RSA decryption fails, the correct encryption key is\nused and the recipient will not notice the attack.\n\nAs a work around for this potential attack the length of the decrypted\nkey must be equal to the cipher default key length, in case the\ncertifiate is not given and all recipientInfo are tried out.\n\nThe old behaviour can be re-enabled in the CMS code by setting the\nCMS_DEBUG_DECRYPT flag.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/9777)\n\n(cherry picked from commit 5840ed0cd1e6487d247efbc1a04136a41d7b3a37)","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/openssl/commits/e21f8cf78a125cd3c8c0d1a1a6c8bb0b901f893f"}]},"public":true,"created_at":"2019-09-17T00:44:04Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"10433852016","type":"PushEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"push_id":4043638975,"size":9,"distinct_size":9,"ref":"refs/heads/master","head":"25c9f8cf745c833fdac7536fa0765d4911435526","before":"b12f8839c6a685d3711ade68a6a387ae6c9e9c50","commits":[{"sha":"36b13ec53e6ffee549ef60415fccab49aae2e3cd","author":{"name":"Christian Paquin","email":"5e354fbc60a50a4914bb55be34107b73e39fe98c@microsoft.com"},"message":"Integrated the SIKE v3.2 library, containing the compressed variants.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs/commits/36b13ec53e6ffee549ef60415fccab49aae2e3cd"},{"sha":"d62ae2d0cf05a9147805e37ae5141f227e1d169c","author":{"name":"Christian Paquin","email":"5e354fbc60a50a4914bb55be34107b73e39fe98c@microsoft.com"},"message":"prettyprint","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs/commits/d62ae2d0cf05a9147805e37ae5141f227e1d169c"},{"sha":"142649b2e90f982147b80047f29ce1a6173f8f8d","author":{"name":"Christian Paquin","email":"5e354fbc60a50a4914bb55be34107b73e39fe98c@microsoft.com"},"message":"Renamed Sidh to SIDH in test_kat.py","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs/commits/142649b2e90f982147b80047f29ce1a6173f8f8d"},{"sha":"91be46de978529e5d5f0de751428629b94da4d37","author":{"name":"Christian Paquin","email":"5e354fbc60a50a4914bb55be34107b73e39fe98c@microsoft.com"},"message":"Renamed SIKE KAT files to match uppercased alg name.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs/commits/91be46de978529e5d5f0de751428629b94da4d37"},{"sha":"cac45613b1abba82b7640333c1f96ad00c49fc09","author":{"name":"Christian Paquin","email":"5e354fbc60a50a4914bb55be34107b73e39fe98c@microsoft.com"},"message":"Added SIKE compressed KATs, just added to the source project.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs/commits/cac45613b1abba82b7640333c1f96ad00c49fc09"},{"sha":"f522bec1a6f13674a4a6e850d07e8ae4f12049a6","author":{"name":"Christian Paquin","email":"5e354fbc60a50a4914bb55be34107b73e39fe98c@microsoft.com"},"message":"Added SIKE compressed KATs, just added to the source project (for real this time).","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs/commits/f522bec1a6f13674a4a6e850d07e8ae4f12049a6"},{"sha":"0a82a58158353f7179e90a7e50122aa2be82daa5","author":{"name":"Christian Paquin","email":"5e354fbc60a50a4914bb55be34107b73e39fe98c@microsoft.com"},"message":"Updated Visual Studio project adding the SIKE compressed variants.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs/commits/0a82a58158353f7179e90a7e50122aa2be82daa5"},{"sha":"d768b1f89a38e59b3781a9f02c80dbb3139f5035","author":{"name":"Douglas Stebila","email":"b00bf5c152be32a8a3632a9751d43d05edde6c4e@uwaterloo.ca"},"message":"Update templates to match","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs/commits/d768b1f89a38e59b3781a9f02c80dbb3139f5035"},{"sha":"25c9f8cf745c833fdac7536fa0765d4911435526","author":{"name":"Douglas Stebila","email":"b00bf5c152be32a8a3632a9751d43d05edde6c4e@users.noreply.github.com"},"message":"Merge pull request #547 from christianpaquin/cp-sidh-v3.2\n\nUpgraded SIKE to v3.2","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs/commits/25c9f8cf745c833fdac7536fa0765d4911435526"}]},"public":true,"created_at":"2019-09-17T14:13:13Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"10435414165","type":"PushEvent","actor":{"id":8843219,"login":"dstebila","display_login":"dstebila","gravatar_id":"","url":"https://api.github.com/users/dstebila","avatar_url":"https://avatars.githubusercontent.com/u/8843219?"},"repo":{"id":65514205,"name":"open-quantum-safe/liboqs","url":"https://api.github.com/repos/open-quantum-safe/liboqs"},"payload":{"push_id":4044451060,"size":1,"distinct_size":1,"ref":"refs/heads/ds-arm-cross-compile-update","head":"642dac283e3b6e31f3883824aef3347f585f6a2b","before":"d471cebfd9bc77369a64941c19dd846df71d6691","commits":[{"sha":"642dac283e3b6e31f3883824aef3347f585f6a2b","author":{"name":"Douglas Stebila","email":"b00bf5c152be32a8a3632a9751d43d05edde6c4e@uwaterloo.ca"},"message":"Build Picnic on ARM cross compilation","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/liboqs/commits/642dac283e3b6e31f3883824aef3347f585f6a2b"}]},"public":true,"created_at":"2019-09-17T17:14:03Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
{"id":"10436265515","type":"PushEvent","actor":{"id":21228961,"login":"xvzcf","display_login":"xvzcf","gravatar_id":"","url":"https://api.github.com/users/xvzcf","avatar_url":"https://avatars.githubusercontent.com/u/21228961?"},"repo":{"id":179335992,"name":"open-quantum-safe/boringssl","url":"https://api.github.com/repos/open-quantum-safe/boringssl"},"payload":{"push_id":4044890285,"size":1,"distinct_size":1,"ref":"refs/heads/add-oqs-kems","head":"04c467f9788a9dde3a71144423a6ab4bc563e2c8","before":"cf79a92d632af7bfc21817d098c0477371af8060","commits":[{"sha":"04c467f9788a9dde3a71144423a6ab4bc563e2c8","author":{"name":"xvzcf","email":"0d09a926d00eb6e4de1be873a121117412a307d0@users.noreply.github.com"},"message":"Changed object NID assignment.","distinct":true,"url":"https://api.github.com/repos/open-quantum-safe/boringssl/commits/04c467f9788a9dde3a71144423a6ab4bc563e2c8"}]},"public":true,"created_at":"2019-09-17T19:09:54Z","org":{"id":20689385,"login":"open-quantum-safe","gravatar_id":"","url":"https://api.github.com/orgs/open-quantum-safe","avatar_url":"https://avatars.githubusercontent.com/u/20689385?"}}
